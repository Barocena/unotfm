--[[ src/init.lua ]]--

MAP = {"@7094274", "@7108608", "@6149054", "@7131131", "@7131143", "@7146157", "@5494959", "@7000495", "@7157619", "@7157805", "@7158484", "@7147082", "@7158627", "@7146872", "@7176840", "@7225526", "@7312590", "@7491588", "@7516436", {"@7283094", "@7283521"}}
MUSIC = {"@7295158"}
COMMAND = {"chair", "np", "random", "rule", "settings", "ban", "kick", "unban", "adm", "new", "map", "reset", "start", "pw", "p", "profile", "stats", "ranking", "boss", "power", "history", "fake", "color", "bell", "nolag", "shadow", "test", "custom", "givechair", "givebadge", "givescore", "giverule", "isranked", "rulenow", "limit", "spectator", "flag", "faustao", "rules"}

VERSION = "v1.0.11 [30/05/20]"

-- progress
OWNER = "Ninguem#0095"

BANNED = {}

ADM = {}

SCORE = {}

MATCH = {}

LOG = ""

CONST = {
	maxHand = 31,
}

BOT = {}

CONFIG = {
	UNO = "UNO!",
	discord = "https://discord.gg/xu5GVuj",
	rule = {},
	banned = {},
	chair = {},
	custom = {
		action={
			{action="DRAW",who="NEXT",amount="2"},
		},
		color={red=1,blue=1,yellow=1,green=1}},
	fixedChair = false,
	newPlayers = true,
	autoStart = true,
	test = false,
	scoreBy = "SCORE_1",
	random = false,
	ranked = true,
	music = false,
	noRules = true,
	tribeHouse = tfm.get.room.name:sub(2,2) == "",
	mapEvent = {"@7312582", "@7578073"},
	--mapEvent = {"@7312582", "@7578073"}, -- bagun√ßa
	--mapEvent = "@7279009", -- halloween (drekkemaus)
	--mapEvent = "@7322204", -- natal (jingle, papaille)
	--mapEvent = "@7366545" -- natal (snnowy, icemice)
	--mapEvent = "@7366545", -- dia da marmota (charlotte)
	--mapEvent = "@7432492", -- aniversario (elisah)
	pityTimer = 15, -- evento: 8, casual: 15
	eventRate = 0.04, -- evento: 0.07, casual: 0.04
	actualTimer = 0,
	qtdRule = 71,
}

ROUND = {}

PLAYER = {}

PARADOX = {}


--[[ src/images.lua ]]--

IMG = {
	skin = {
		orange = {
			misc = {
				shadow = "15ae79a2aae.png",
				back = "15c33b7a4a1.png",
				nocard = "15d10b6eb2d.png",
				cardLayer = "15b4aad0f7b.png",
				backIce = "1625a89e88b.png",
				backThorn = "1625a95cde0.png",
				backAnvil = "1625aadaca8.png",
				death = "15c27a454b7.png",
				discover = "15c33b7d798.png",
				discoverWild = "16066820aee.png",
				discoverRule = "1606686351d.png",
			},
			color = {
				red = {mini="15b4a93e9fc.png", big="15b4a9a1d71.png"},
				blue = {mini="15b4a93fcfc.png", big="15b4a99f8b1.png"},
				yellow = {mini="15f126966fd.png", big="15f126948a2.png"},
				green = {mini="15b4a942583.png", big="15b4a9a0de9.png"},
				black = {mini="15b4a9436c7.png", big="15bff03e5dd.png"},
			},
			colorBlind = {
				red = {mini="15f27448b95.png", big="15f274469c6.png"},
				blue = {mini="15f2744ca72.png", big="15f2744aab0.png"},
				yellow = {mini="15f27450ec2.png", big="15f2744ef6a.png"},
				green = {mini="15f27455303.png", big="15f27453026.png"},
			},
			symbol = {
				n0 = {mini="15b4a91f2f3.png", big="15bfefecf96.png"},
				n1 = {mini="15b4a925b73.png", big="15bfefef0fa.png"},
				n2 = {mini="15b4a926cff.png", big="15bfeff0775.png"},
				n3 = {mini="15b4a928046.png", big="15bfeff1a0a.png"},
				n4 = {mini="15b4a929c3c.png", big="15bfeff2dfe.png"},
				n5 = {mini="15b4a92b167.png", big="15bfeff3d41.png"},
				n6 = {mini="15b4a92c0a5.png", big="15bfeff4f05.png"},
				n7 = {mini="15b4a92d0d4.png", big="15bfeff688e.png"},
				n8 = {mini="15b4a92eeaf.png", big="15bfeff8570.png"},
				n9 = {mini="15b4a930032.png", big="15bfeff993c.png"},
				skip = {mini="15b4a9351d8.png", big="15bfeffe96a.png"},
				reverse = {mini="15b4a933ff7.png", big="15bfeffc3cb.png"},
				draw2 = {mini="15b4a931641.png", big="15bfeffb188.png"},
				wild = {mini="15b4a937707.png", big="15b4a99c0c8.png"},
				draw4 = {mini="15b4f792cbf.png", big="15b4f7917e7.png"},
				chair = {mini="15c286cbc02.png", big="15c28747aa0.png"},
				carousel = {mini="15c286d58e3.png", big="15c28750003.png"},
				spy = {mini="15c286def3c.png", big="15c2875987a.png"},
				shield = {mini="15c297e90ba.png", big="15c297eb19b.png"},
				rain = {mini="15c286d7919.png", big="15c28753de0.png"},
				gift = {mini="15c286c43c3.png", big="15c287456eb.png"},
				imitate = {mini="15c286cfb44.png", big="15c28749da3.png"},
				death = {mini="15c286d1b8d.png", big="15c2874bd44.png"},
				peace = {mini="15c286c033b.png", big="15c28740759.png"},
				random = {mini="15c286c23f2.png", big="15c28743560.png"},
				trade = {mini="15c286dacf4.png", big="15c287559bf.png"},
				equality = {mini="15c286be2dc.png", big="15c28712bdf.png"},
				bomb = {mini="15c286dd152.png", big="15c2875798a.png"},
				meep = {mini="15c287e09c7.png", big="15c287e2a12.png"},
				rule = {mini="15c8f99eb44.png", big="15c8f999c9b.png"},
				ruleBoss = {mini="15c8f99eb44.png", big="15c8f999c9b.png"},
				pawn = {mini="15c381d8cfc.png", big="15c381f8f3b.png"},
				rook = {mini="15c381e0bba.png", big="15c38201e23.png"},
				knight = {mini="15c381daf72.png", big="15c381fadb1.png"},
				bishop = {mini="15c381dd012.png", big="15c381fc923.png"},
				queen = {mini="15c381deca0.png", big="15c38200418.png"},
				king = {mini="15c381d6c68.png", big="15c381f6e9f.png"},
				steal = {mini="15e54b0cf90.png", big="15e54b0afc9.png"},
				thunder = {mini="15ebbcc19c3.png", big="15ebbcbf816.png"},
				clone = {mini="15ec03f3ded.png", big="15ec03f14a8.png"},
				luck = {mini="15ec0b2592a.png", big="15ec0b239f0.png"},
				web = {mini="15ec6046e8a.png", big="15ec6042371.png"},
				box = {mini="15f0d927294.png", big="15f0d924a59.png"},
				wish = {mini="15f1158233a.png", big="15f1157fcb5.png"},
				portal = {mini="15f82c9f113.png", big="15f82c9d035.png"},
				custom = {mini="15f8ccf2c13.png", big="15f8c85c5e3.png"},
				ink = {mini="16065906f9d.png", big="16065905381.png"},
				confuse = {mini="1606c28b12b.png", big="1606c2872c0.png"},
				compass = {mini="16106416e62.png", big="16106418c8b.png"},
				chest = {mini="16106412756.png", big="161064146bc.png"},
				batata = {mini="16168d82ac0.png", big="16168d80c6d.png"},
				draw99 = {mini="1618fe23269.png", big="1618fe25ef4.png"},
				curse = {mini="1625983f1c1.png", big="1625984174b.png"},
				magnet = {mini="1637fb72c9a.png", big="1637fb75134.png"},
				tornado = {mini="165c696b073.png", big="165c696cdad.png"},
				theft = {mini="165ce50d72d.png", big="165ce50b7ca.png"},
				simon = {mini="16622ad97d0.png", big="16622abe97e.png"},
				ban = {mini="166657d8063.png", big="166657da628.png"},
				dice = {mini="1678b464c48.png", big="1678b474f8a.png"},
				half = {mini="1678b4668b1.png", big="1678b4769e8.png"},
				paradox = {mini="1678b4689bc.png", big="1678b4785cd.png"},
				mimic = {mini="1678b46a7ea.png", big="1678b47a2be.png"},
				oddeven = {mini="1678b46c247.png", big="1678b47beed.png"},
				justice = {mini="16793a19028.png", big="16793a1b1b7.png"},
				mix1 = {mini="1678b46e52e.png", big="1678b47e3ef.png"},
				mix2 = {mini="1678b4706f4.png", big="1678b4804ad.png"},
				mix3 = {mini="1678b47224c.png", big="1678b48215d.png"},
				key = {mini="171653173d2.png", big="1716530f46e.png"},
				share = {mini="171653130eb.png", big="1716530ae8e.png"},
			}
		},
		blue = {
			misc = {
				shadow = "171484f6b09.png",
				back = "1713e1e860f.png",
				nocard = "1716c91b159.png",
				cardLayer = "15b4aad0f7b.png",
				backIce = "1716c9137e0.png",
				backThorn = "1716c9161b8.png",
				backAnvil = "1716c90d032.png",
				death = "1716c918c7d.png",
				discover = "1716c96953a.png",
				discoverWild = "1716c96de06.png",
				discoverRule = "1716c96be7e.png",
			},
			color = {
				red = {mini="171668c8f03.png", big="171668adc64.png"},
				blue = {mini="1713e04dc61.png", big="1713e097cfe.png"},
				yellow = {mini="171668c67ab.png", big="171668ab012.png"},
				green = {mini="1713e05a179.png", big="1713e09b1e5.png"},
				black = {mini="1713e070b62.png", big="1713e099c73.png"},
			},
			colorBlind = {
				red = {mini="171668f06d1.png", big="171668f239a.png"},
				blue = {mini="171668e73da.png", big="171668e9231.png"},
				yellow = {mini="171668f4400.png", big="171668f6451.png"},
				green = {mini="171668ec2e2.png", big="171668ee1ea.png"},
			},
			symbol = {
				n0 = {mini="1713e03c95c.png", big="1713e085663.png"},
				n1 = {mini="1713e03e42e.png", big="1713e088b40.png"},
				n2 = {mini="1713e03fdd8.png", big="1713e08a1f0.png"},
				n3 = {mini="1713e0413b7.png", big="1713e08b79a.png"},
				n4 = {mini="1713e0428ee.png", big="1713e08cdd0.png"},
				n5 = {mini="1713e043fe6.png", big="1713e08e392.png"},
				n6 = {mini="1713e0456c6.png", big="1713e08f9c9.png"},
				n7 = {mini="1713e046d95.png", big="1713e0911ae.png"},
				n8 = {mini="1713e048596.png", big="1713e0928b8.png"},
				n9 = {mini="1713e049d96.png", big="1713e093f20.png"},
				skip = {mini="1713e054dd8.png", big="1713e0aa3d3.png"},
				reverse = {mini="1713e05376b.png", big="1713e0a28eb.png"},
				draw2 = {mini="1713e05e008.png", big="1713e09fa7a.png"},
				wild = {mini="1713e056f62.png", big="1713e0abb26.png"},
				draw4 = {mini="1713e0586fa.png", big="1713e0acfb6.png"},
				chair = {mini="171481b4e1d.png", big="171480f11c4.png"},
				carousel = {mini="171481aa49e.png", big="171480d36d6.png"},
				spy = {mini="171481ae274.png", big="171480d9847.png"},
				shield = {mini="171481bf16f.png", big="171480fa044.png"},
				rain = {mini="171481abe8e.png", big="171480d5cd0.png"},
				gift = {mini="171481b9d0f.png", big="171480f76cb.png"},
				imitate = {mini="171481c4ffe.png", big="17148100415.png"},
				death = {mini="171481d9ae9.png", big="1714811164d.png"},
				peace = {mini="171481e0691.png", big="17148117edc.png"},
				random = {mini="171481e8878.png", big="1714811fc86.png"},
				trade = {mini="171481fddbe.png", big="1714813188e.png"},
				equality = {mini="171481c23e6.png", big="171480fd051.png"},
				bomb = {mini="171481a7986.png", big="171480cbc91.png"},
				meep = {mini="171481d171d.png", big="17148108e65.png"},
				rule = {mini="171525ef296.png", big="1714812310d.png"},
				ruleBoss = {mini="171525ef296.png", big="1714812310d.png"},
				pawn = {mini="171481defd7.png", big="1714811677e.png"},
				rook = {mini="171481e9e69.png", big="171481219a6.png"},
				knight = {mini="171481c9a76.png", big="17148201e72.png"},
				bishop = {mini="171481a62dd.png", big="171480c87d7.png"},
				queen = {mini="171481e6d49.png", big="1714811e10b.png"},
				king = {mini="171481c7f83.png", big="171481033aa.png"},
				steal = {mini="171481ce1ed.png", big="17148104cf7.png"},
				thunder = {mini="171481f7a37.png", big="1714812e48b.png"},
				clone = {mini="171481afecd.png", big="171480dc382.png"},
				luck = {mini="171481f1a58.png", big="171481267ed.png"},
				web = {mini="171481f31ef.png", big="1714812901e.png"},
				box = {mini="171481e54b7.png", big="1714811c7ad.png"},
				wish = {mini="171481b640e.png", big="171480f33ed.png"},
				portal = {mini="171481e3851.png", big="1714811afd0.png"},
				custom = {mini="171481b36cc.png", big="171480ef6aa.png"},
				ink = {mini="171481f9ae7.png", big="1714812ff0d.png"},
				confuse = {mini="171481b1ead.png", big="171480de741.png"},
				compass = {mini="171481a8f86.png", big="171480cd762.png"},
				chest = {mini="171481f4a10.png", big="1714812b067.png"},
				batata = {mini="171481a4d95.png", big="171480c7210.png"},
				draw99 = {mini="171481cfa1f.png", big="17148106741.png"},
				curse = {mini="171481e1fa9.png", big="1714811968b.png"},
				magnet = {mini="171481c3a75.png", big="171480fe8e6.png"},
				tornado = {mini="171481fb2c1.png", big="171481ff912.png"},
				theft = {mini="171481f6652.png", big="1714812cca4.png"},
				simon = {mini="171481efbb7.png", big="17148124988.png"},
				ban = {mini="171481a3456.png", big="171480c5a59.png"},
				dice = {mini="171481b80be.png", big="171480f5592.png"},
				half = {mini="171481c0a71.png", big="171480fb668.png"},
				paradox = {mini="171481dd650.png", big="17148114baf.png"},
				mimic = {mini="171481d2f95.png", big="1714810ab97.png"},
				oddeven = {mini="171481db8b7.png", big="17148112e25.png"},
				justice = {mini="171481c6557.png", big="17148101be6.png"},
				mix1 = {mini="171481d49ed.png", big="1714810c278.png"},
				mix2 = {mini="171481d65c5.png", big="1714810e136.png"},
				mix3 = {mini="171481d81d5.png", big="1714810fdc0.png"},
				key = {mini="1716531925b.png", big="1716531125c.png"},
				share = {mini="17165315696.png", big="1716530d12f.png"},
			}
		},
	},
	misc = {
		target = "15c26b225c5.png",
		emptyChair = "15b90ff3a79.png",
		skipped = "15b14ff686d.png",
		challenge = "15b2b8ebc59.png",
		cloud = "15ae8515f11.png",
		arrow = "15afd80f0d5.png",
		winning = "163140d5a81.png",
		genericLayer = "15b26bef526.png",
		handLayer = "15b29c7a3ab.png",
		sucess = "15b2b8f36b6.png",
		fail = "15b2b8f543c.png",
		light = "15b2bb46d9c.png",
		hourglass = "15b7bebaea1.png",
		illuminatiEye = "15b9263c5a3.png",
		psychoBlink = "165c68bc2aa.png",
		glowCard = "15bd0ba0089.png",
		jumpIn = "15c0f06183e.png",
		discover = "15c33b7d798.png",
		discoverWild = "16066820aee.png",
		discoverRule = "1606686351d.png",
		locked = "15c75888414.png",
		lockedPanel = "161df0a4f48.png",
		lockedCard = "165e9976dc9.png",
		right = "15c99240e69.png",
		left = "15c99243213.png",
		tip = "15e82cd7bcd.png",
		thunder = "15ebbcbb3ac.png",
		web = "15ec624d33a.png",
		ribbon = "15f0d921edd.png",
		wish = "15f115840a2.png",
		shoe = {orange="1625b6181d9.png", blue="171655f0730.png"},
		lock = {orange="171655f7437.png", blue="171655f9f70.png"},
		blue = "17165aab862.png",
		--orange = "15f83690b8b.png",
		orange = "171668b2978.png",
		burn = "16065673a46.png",
		errou = "166329fbdfd.png",
		portal = "1678e290176.png",
		odd = "1678fbde7de.png",
		even = "1678fbdb9af.png",
		linked = "1678ffe71f6.png",
		robot = "1729b704b01.png",
		pow = "167d3a2e0fb.png",
	},
	emote = {
		[0] = "15c4710d437.png", -- dance
		[1] = "15c4711220a.png", -- laugh
		[2] = "15c4710b6d9.png", -- cry
		[3] = "15c4711082f.png", -- kiss
		[4] = "15c471181bc.png", -- tilt
		[5] = "15c4710990d.png", -- clap
		[6] = "15c47116630.png", -- sleep
		[7] = "15c4710eeb3.png", -- facepalm
	},
	flag = {
		ar = "15cb218003e.png",
		bg = "15cb21817ca.png",
		br = "15cb2182bbb.png",
		cn = "15cb21842c7.png",
		cz = "15cb2185aaf.png",
		de = "15cb2187905.png",
		e2 = "15cb21893d2.png",
		ee = "15cb218ac86.png",
		en = "15cb218c5ea.png",
		es = "15cb218de01.png",
		fi = "15cb218f55f.png",
		fr = "15cb2190f1e.png",
		he = "15cb21925c7.png",
		hr = "15cb2193ff8.png",
		hu = "15cb21959ad.png",
		id = "15cb2196eae.png",
		it = "15cb2198b3e.png",
		jp = "15cb219add7.png",
		lt = "15cb219cc71.png",
		lv = "15cb219e4b1.png",
		nl = "15cb219fda6.png",
		ph = "15cb21a1d58.png",
		pl = "15cb21a34ea.png",
		pt = "15cb21a4ca8.png",
		ro = "15cb21a6631.png",
		ru = "15cb21a7d86.png",
		tr = "15cb21a9422.png",
		vk = "15cb21aadc0.png",
	},
	team = {
		{"15f510ad1a9.png", "16101286c7a.png"}, -- vermelho
		{"15f510a6c6a.png", "1610127db31.png"}, -- azul
		{"15f510a8f28.png", "1610128087c.png"}, -- verde
		{"15f600958bf.png", "16101285142.png"}, -- rosa
		{"15f6009339f.png", "16101288b36.png"}, -- amarelo
	},
	neighbor = {
	 n0 = {orange="16149a69c53.png", blue="171dc1d738d.png"},
	 n1 = {orange="16149a681d2.png", blue="171dc1d8fd5.png"},
	 n2 = {orange="16149a66878.png", blue="171dc1dab25.png"},
	 n3 = {orange="16149a64f94.png", blue="171dc1dc76d.png"},
	 n4 = {orange="16149a634a1.png", blue="171dc1de255.png"},
	 n5 = {orange="16149a6156b.png", blue="171dc1dfec5.png"},
	 n6 = {orange="16149a5fb60.png", blue="171dc1e1b7d.png"},
	 n7 = {orange="16149a5dc62.png", blue="171dc1e357d.png"},
	 n8 = {orange="16149a5c160.png", blue="171dc1e5074.png"},
	 n9 = {orange="16149a5a599.png", blue="171dc1e6c5d.png"},
	},
	batata = {
		"1616d6f1e8b.png",
		"1616d6f3e9b.png",
		"1616d6f5b87.png",
		"1616d6f79d8.png",
		"1616d6f9ab2.png",
	},
	simon = {
		red = {orange="16627af4d7f.png", blue="171485729e6.png"},
		blue = {orange="16627af0da0.png", blue="1714856e8d3.png"},
		yellow = {orange="16627adfa78.png", blue="1714856bfc4.png"},
		green = {orange="16627af304c.png", blue="171485708e1.png"},
	},
	simonMini = {
		red = {orange="1662b7548ae.png", blue="1714857abed.png"},
		blue = {orange="1662b7508e3.png", blue="17148576dfe.png"},
		yellow = {orange="1662b74e95b.png", blue="17148574dc7.png"},
		green = {orange="1662b7527ca.png", blue="17148578be0.png"},
	},
}


--[[ src/deck.lua ]]--

DECK = {
	vanilla = {
		-- 108 cartas
		-- 2 c√≥pias de 1 a 9 de cada cor
		-- 2 c√≥pias de draw2 de cada cor
		-- 2 c√≥pias de skip de cada cor
		-- 2 c√≥pias de reverse de cada cor
		-- 1 c√≥pia de 0 de cada cor
		-- 4 c√≥pias de wild
		-- 4 c√≥pias de draw4
		{"red","n0"},
		{"red","n1"},{"red","n2"},{"red","n3"},{"red","n4"},{"red","n5"},{"red","n6"},{"red","n7"},{"red","n8"},{"red","n9"},
		{"red","n1"},{"red","n2"},{"red","n3"},{"red","n4"},{"red","n5"},{"red","n6"},{"red","n7"},{"red","n8"},{"red","n9"},
		{"red","draw2"},{"red","draw2"},{"red","skip"},{"red","skip"},{"red","reverse"},{"red","reverse"},
		{"blue","n0"},
		{"blue","n1"},{"blue","n2"},{"blue","n3"},{"blue","n4"},{"blue","n5"},{"blue","n6"},{"blue","n7"},{"blue","n8"},{"blue","n9"},
		{"blue","n1"},{"blue","n2"},{"blue","n3"},{"blue","n4"},{"blue","n5"},{"blue","n6"},{"blue","n7"},{"blue","n8"},{"blue","n9"},
		{"blue","draw2"},{"blue","draw2"},{"blue","skip"},{"blue","skip"},{"blue","reverse"},{"blue","reverse"},
		{"yellow","n0"},
		{"yellow","n1"},{"yellow","n2"},{"yellow","n3"},{"yellow","n4"},{"yellow","n5"},{"yellow","n6"},{"yellow","n7"},{"yellow","n8"},{"yellow","n9"},
		{"yellow","n1"},{"yellow","n2"},{"yellow","n3"},{"yellow","n4"},{"yellow","n5"},{"yellow","n6"},{"yellow","n7"},{"yellow","n8"},{"yellow","n9"},
		{"yellow","draw2"},{"yellow","draw2"},{"yellow","skip"},{"yellow","skip"},{"yellow","reverse"},{"yellow","reverse"},
		{"green","n0"},
		{"green","n1"},{"green","n2"},{"green","n3"},{"green","n4"},{"green","n5"},{"green","n6"},{"green","n7"},{"green","n8"},{"green","n9"},
		{"green","n1"},{"green","n2"},{"green","n3"},{"green","n4"},{"green","n5"},{"green","n6"},{"green","n7"},{"green","n8"},{"green","n9"},
		{"green","draw2"},{"green","draw2"},{"green","skip"},{"green","skip"},{"green","reverse"},{"green","reverse"},
		{"black","wild"},{"black","wild"},{"black","wild"},{"black","wild"},
		{"black","draw4"},{"black","draw4"},{"black","draw4"},{"black","draw4"}
	},
	numbers = {
		-- 80 cartas
		-- 2 c√≥pias de 1 a 9 de cada cor
		-- 1 c√≥pia de 0 de cada cor
		-- 4 c√≥pias de wild
		{"red","n0"},
		{"red","n1"},{"red","n2"},{"red","n3"},{"red","n4"},{"red","n5"},{"red","n6"},{"red","n7"},{"red","n8"},{"red","n9"},
		{"red","n1"},{"red","n2"},{"red","n3"},{"red","n4"},{"red","n5"},{"red","n6"},{"red","n7"},{"red","n8"},{"red","n9"},
		{"blue","n0"},
		{"blue","n1"},{"blue","n2"},{"blue","n3"},{"blue","n4"},{"blue","n5"},{"blue","n6"},{"blue","n7"},{"blue","n8"},{"blue","n9"},
		{"blue","n1"},{"blue","n2"},{"blue","n3"},{"blue","n4"},{"blue","n5"},{"blue","n6"},{"blue","n7"},{"blue","n8"},{"blue","n9"},
		{"yellow","n0"},
		{"yellow","n1"},{"yellow","n2"},{"yellow","n3"},{"yellow","n4"},{"yellow","n5"},{"yellow","n6"},{"yellow","n7"},{"yellow","n8"},{"yellow","n9"},
		{"yellow","n1"},{"yellow","n2"},{"yellow","n3"},{"yellow","n4"},{"yellow","n5"},{"yellow","n6"},{"yellow","n7"},{"yellow","n8"},{"yellow","n9"},
		{"green","n0"},
		{"green","n1"},{"green","n2"},{"green","n3"},{"green","n4"},{"green","n5"},{"green","n6"},{"green","n7"},{"green","n8"},{"green","n9"},
		{"green","n1"},{"green","n2"},{"green","n3"},{"green","n4"},{"green","n5"},{"green","n6"},{"green","n7"},{"green","n8"},{"green","n9"},
		{"black","wild"},{"black","wild"},{"black","wild"},{"black","wild"},
	},
	mess = {
		-- 32 cartas
		-- 2 c√≥pias de cada carta de a√ß√£o
		-- 4 curingas comuns
		-- 4 curingas +4
		-- √© preenchido por cartas de todas as regras
		{"red","skip"},{"red","reverse"},{"red","draw2"},
		{"red","skip"},{"red","reverse"},{"red","draw2"},
		{"blue","skip"},{"blue","reverse"},{"blue","draw2"},
		{"blue","skip"},{"blue","reverse"},{"blue","draw2"},
		{"yellow","skip"},{"yellow","reverse"},{"yellow","draw2"},
		{"yellow","skip"},{"yellow","reverse"},{"yellow","draw2"},
		{"green","skip"},{"green","reverse"},{"green","draw2"},
		{"green","skip"},{"green","reverse"},{"green","draw2"},
		{"black","wild"},{"black","wild"},{"black","wild"},{"black","wild"},
		{"black","draw4"},{"black","draw4"},{"black","draw4"},{"black","draw4"}
	},
	peace = {
		-- 4 cartas
		-- 1 c√≥pias de peace de cada cor
		{"red","peace"},{"blue","peace"},{"yellow","peace"},{"green","peace"}
	},
	confuse = {
		-- 8 cartas
		-- 2 c√≥pias de confuse de cada cor
		{"red","confuse"},{"blue","confuse"},{"yellow","confuse"},{"green","confuse"},
		{"red","confuse"},{"blue","confuse"},{"yellow","confuse"},{"green","confuse"}
	},
	death = {
		-- 2 cartas
		-- 1 c√≥pia de death de cada cor
		{"red","death"},{"blue","death"}
	},
	carousel = {
		-- 4 cartas
		-- 1 c√≥pia de carousel de cada cor
		{"red","carousel"},{"blue","carousel"},{"yellow","carousel"},{"green","carousel"}
	},
	tornado = {
		-- 8 cartas
		-- 2 c√≥pias de tornado de cada cor
		{"red","tornado"},{"blue","tornado"},{"yellow","tornado"},{"green","tornado"},
		{"red","tornado"},{"blue","tornado"},{"yellow","tornado"},{"green","tornado"},
	},
	trade = {
		-- 4 cartas
		-- 1 c√≥pia de trade de cada cor
		{"red","trade"},{"blue","trade"},{"yellow","trade"},{"green","trade"}
	},
	gift = {
		-- 4 cartas
		-- 1 c√≥pia de gift de cada cor
		{"red","gift"},{"blue","gift"},{"yellow","gift"},{"green","gift"}
	},
	ban = {
		-- 4 cartas
		-- 1 c√≥pia de ban de cada cor
		{"red","ban"},{"blue","ban"},{"yellow","ban"},{"green","ban"}
	},
	magnet = {
		-- 8 cartas
		-- 2 c√≥pias de magnet de cada cor
		{"red","magnet"},{"blue","magnet"},{"yellow","magnet"},{"green","magnet"},
		{"red","magnet"},{"blue","magnet"},{"yellow","magnet"},{"green","magnet"},
	},
	random = {
		-- 4 cartas pretas
		{"black","random"},{"black","random"},{"black","random"},{"black","random"}
	},
	clone = {
		-- 4 cartas pretas
		{"black","clone"},{"black","clone"},{"black","clone"},{"black","clone"}
	},
	spy = {
		-- 8 cartas
		-- 2 c√≥pias de spy de cada cor
		{"red","spy"},{"blue","spy"},{"yellow","spy"},{"green","spy"},
		{"red","spy"},{"blue","spy"},{"yellow","spy"},{"green","spy"}
	},
	compass = {
		-- 8 cartas
		-- 2 c√≥pias de compass de cada cor
		{"red","compass"},{"blue","compass"},{"yellow","compass"},{"green","compass"},
		{"red","compass"},{"blue","compass"},{"yellow","compass"},{"green","compass"}
	},
	chair = {
		-- 4 cartas
		-- 1 c√≥pia de chair de cada cor
		{"red","chair"},{"blue","chair"},{"yellow","chair"},{"green","chair"}
	},
	theft = {
		-- 8 cartas
		-- 1 c√≥pia de theft de cada cor
		{"red","theft"},{"blue","theft"},{"yellow","theft"},{"green","theft"},
		{"red","theft"},{"blue","theft"},{"yellow","theft"},{"green","theft"}
	},
	imitate = {
		-- 4 cartas
		-- 1 c√≥pia de imitate de cada cor
		{"red","imitate"},{"blue","imitate"},{"yellow","imitate"},{"green","imitate"}
	},
	equality = {
		-- 4 cartas
		-- 1 c√≥pia de equality de cada cor
		{"red","equality"},{"blue","equality"},{"yellow","equality"},{"green","equality"}
	},
	web = {
		-- 4 cartas
		-- 1 c√≥pia de web de cada cor
		{"red","web"},{"blue","web"},{"yellow","web"},{"green","web"}
	},
	rule = {
		-- 4 cartas
		-- 1 c√≥pia de rule de cada cor
		{"red","rule"},{"blue","rule"},{"yellow","rule"},{"green","rule"}
	},
	steal = {
		-- 4 cartas
		-- 1 c√≥pia de steal de cada cor
		{"red","steal"},{"blue","steal"},{"yellow","steal"},{"green","steal"}
	},
	thunder = {
		-- 2 cartas
		{"yellow","thunder"},{"green","thunder"}
	},
	rain = {
		-- 2 cartas
		{"red","rain"},{"blue","rain"}
	},
	box = {
		-- 2 cartas
		{"red","box"},{"blue","box"}
	},
	wish = {
		-- 4 cartas
		{"red","wish"},{"blue","wish"},{"yellow","wish"},{"green","wish"}
	},
	ink = {
		-- 4 cartas
		{"red","ink"},{"blue","ink"},{"yellow","ink"},{"green","ink"}
	},
	curse = {
		-- 4 cartas
		{"red","curse"},{"blue","curse"},{"yellow","curse"},{"green","curse"}
	},
	dice = {
		-- 4 cartas
		{"red","dice"},{"blue","dice"},{"yellow","dice"},{"green","dice"}
	},
	paradox = {
		-- 4 cartas
		{"red","paradox"},{"blue","paradox"},{"yellow","paradox"},{"green","paradox"}
	},
	mimic = {
		-- 4 cartas
		{"red","mimic"},{"blue","mimic"},{"yellow","mimic"},{"green","mimic"}
	},
	justice = {
		-- 4 cartas
		{"red","justice"},{"blue","justice"},{"yellow","justice"},{"green","justice"}
	},
	oddeven = {
		-- 8 cartas
		{"red","oddeven"},{"blue","oddeven"},{"yellow","oddeven"},{"green","oddeven"},
		{"red","oddeven"},{"blue","oddeven"},{"yellow","oddeven"},{"green","oddeven"}
	},
	bomb = {
		-- 1 carta
		{"black","bomb"}
	},
	batata = {
		-- 1 carta
		{"red","batata"}
	},
	draw99 = {
		-- 1 carta
		{"black","draw99"}
	},
	half = {
		-- 1 carta
		{"black","half"}
	},
	simon = {
		-- 8 cartas
		{"black","simon"},{"black","simon"},{"black","simon"},{"black","simon"},{"black","simon"},{"black","simon"},{"black","simon"},{"black","simon"}
	},
	meep = {
		-- 8 cartas
		-- 2 c√≥pias de meep de cada cor
		{"red","meep"},{"blue","meep"},{"yellow","meep"},{"green","meep"},
		{"red","meep"},{"blue","meep"},{"yellow","meep"},{"green","meep"}
	},
	luck = {
		-- 8 cartas
		-- 2 c√≥pias de luck de cada cor
		{"red","luck"},{"blue","luck"},{"yellow","luck"},{"green","luck"},
		{"red","luck"},{"blue","luck"},{"yellow","luck"},{"green","luck"}
	},
	portal = {
		-- 8 cartas
		-- 2 c√≥pias de portal de cada cor
		{"red","portal"},{"blue","portal"},{"yellow","portal"},{"green","portal"},
		{"red","portal"},{"blue","portal"},{"yellow","portal"},{"green","portal"},
	},
	key = {
		-- 4 cartas
		-- 1 c√≥pias de key de cada cor
		{"red","key"},{"blue","key"},{"yellow","key"},{"green","key"},
	},
	share = {
		-- 8 cartas
		-- 2 c√≥pias de share de cada cor
		{"green","share"},{"yellow","share"},
	},
	mix = {
		-- 12 cartas
		-- 1 c√≥pia de reverse skip de cada cor
		-- 1 c√≥pia de reverse +2 de cada cor
		-- 1 c√≥pia de skip +2 de cada cor
		{"red","mix1"},{"blue","mix1"},{"yellow","mix1"},{"green","mix1"},
		{"red","mix2"},{"blue","mix2"},{"yellow","mix2"},{"green","mix2"},
		{"red","mix3"},{"blue","mix3"},{"yellow","mix3"},{"green","mix3"},
	},
	chess = {
		-- 22 cartas
		-- 1 rei preto
		-- 1 rainha preto
		-- 1 c√≥pia de bispo de cada cor
		-- 1 c√≥pia de cavalo de cada cor
		-- 1 c√≥pia de torre de cada cor
		-- 2 c√≥pias de pe√µes de cada cor
		{"black","king"},{"black","queen"},
		{"red","bishop"},{"blue","bishop"},{"yellow","bishop"},{"green","bishop"},
		{"red","knight"},{"blue","knight"},{"yellow","knight"},{"green","knight"},
		{"red","rook"},{"blue","rook"},{"yellow","rook"},{"green","rook"},
		{"red","pawn"},{"blue","pawn"},{"yellow","pawn"},{"green","pawn"},
		{"red","pawn"},{"blue","pawn"},{"yellow","pawn"},{"green","pawn"},
	}
}


--[[ src/chairs.lua ]]--

SKIN = {
	empty = {
		img = "15b90ff3a79.png",
	},
	default = {
		img = "15b90ff1d49.png",
		imgMini = "15bb5cd1561.png",
		name = "SKIN_DEFAULT",
		mission = "SKIN_DEFAULT_MISSION",
		author = "Melibellule#0001"
	},
	random = {
		img = "1660e8ad817.png",
		imgMini = "1660e8aa110.png",
		name = "SKIN_RANDOM",
		desc = "SKIN_RANDOM_DESC",
		mission = "SKIN_DEFAULT_MISSION",
		author = "???"
	},
	wood = {
		img = "15b0ce80d49.png",
		imgMini = "15bb5ce58c1.png",
		name = "SKIN_WOOD",
		mission = "SKIN_ROUND_MISSION",
		progress = 100,
		author = "Kurt#0010",
	},
	stone = {
		img = "15b0cf64856.png",
		imgMini = "15bb5ce28d2.png",
		name = "SKIN_STONE",
		mission = "SKIN_ROUND_MISSION",
		progress = 1000,
		author = "Kurt#0010"
	},
	gold = {
		img = "15b5319cc9b.png",
		imgMini = "15bb5cd6f3d.png",
		name = "SKIN_GOLD",
		mission = "SKIN_WIN_MISSION",
		progress = 100,
		author = "Ninguem#0095"
	},
	diamond = {
		img = "15d47af57e9.png",
		imgMini = "15d47b2a452.png",
		name = "SKIN_DIAMOND",
		mission = "SKIN_WIN_MISSION",
		progress = 1000,
		author = "Miau#0010"
	},
	red = {
		img = "15b0ce34fb4.png",
		imgMini = "15bb5ce0731.png",
		name = "SKIN_RED",
		mission = "SKIN_RED_MISSION",
		author = "Fofinhoppp#0000"
	},
	blue = {
		img = "15b0ce4499b.png",
		imgMini = "15bb5cca762.png",
		name = "SKIN_BLUE",
		mission = "SKIN_BLUE_MISSION",
		author = "Fofinhoppp#0000"
	},
	yellow = {
		img = "15b0ce53ea6.png",
		imgMini = "15bb5ce679a.png",
		name = "SKIN_YELLOW",
		mission = "SKIN_YELLOW_MISSION",
		author = "Fofinhoppp#0000"
	},
	green = {
		img = "15b0ce63018.png",
		imgMini = "15bb5cd8f9b.png",
		name = "SKIN_GREEN",
		mission = "SKIN_GREEN_MISSION",
		author = "Fofinhoppp#0000"
	},
	white = {
		img = "15b0ce70858.png",
		imgMini = "15bb5ce4967.png",
		name = "SKIN_WHITE",
		mission = "SKIN_WHITE_MISSION",
		author = "Fofinhoppp#0000"
	},
	fire = {
		img = "15b5319f7d3.png",
		imgMini = "15bb5cd50c7.png",
		name = "SKIN_FIRE",
		mission = "RED_MISSION",
		progress = 100,
		author = "Ninguem#0095"
	},
	water = {
		img = "15b69d3246f.png",
		imgMini = "15bb5ce3843.png",
		name = "SKIN_WATER",
		mission = "BLUE_MISSION",
		progress = 100,
		author = "Ninguem#0095"
	},
	earth = {
		img = "15b69d3389b.png",
		imgMini = "15bb5cd3e0a.png",
		name = "SKIN_EARTH",
		mission = "YELLOW_MISSION",
		progress = 100,
		author = "Ninguem#0095"
	},
	air = {
		img = "15b69d350ba.png",
		imgMini = "15bb5cc6d88.png",
		name = "SKIN_AIR",
		mission = "GREEN_MISSION",
		progress = 100,
		author = "Ninguem#0095"
	},
	rainbow = {
		img = "15d47af344d.png",
		imgMini = "15d47b27567.png",
		name = "SKIN_RAINBOW",
		mission = "WILD_MISSION",
		progress = 100,
		author = "Miau#0015"
	},
	king = {
		img = "15b0db0691b.png",
		imgMini = "15bb5cdd3f7.png",
		name = "SKIN_KING",
		mission = "SKIN_KING_MISSION",
		author = "Flindix#0095"
	},
	luck = {
		img = "15b6d44e9a2.png",
		imgMini = "15bb5cde53b.png",
		name = "SKIN_LUCK",
		mission = "SKIN_LUCK_MISSION",
		author = "Ninguem#0095"
	},
	angel = {
		img = "171b4145362.png",
		imgMini = "171b429cd14.png",
		name = "SKIN_ANGEL",
		mission = "SKIN_ANGEL_MISSION",
		author = "Sulyvahn#1958"
	},
	junky = {
		img = "171b414bfbe.png",
		imgMini = "171b429ee8c.png",
		name = "SKIN_JUNKY",
		mission = "SKIN_JUNKY_MISSION",
		author = "Sulyvahn#1958"
	},
	shaman = {
		img = "15b8ea909bf.png",
		imgMini = "15bb5ce1a48.png",
		name = "SKIN_SHAMAN",
		mission = "SKIN_SHAMAN_MISSION",
		progress = 3000,
		author = "Ninguem#0095"
	},
	beach = {
		img = "15b8ea92b37.png",
		imgMini = "15bb5cc8da3.png",
		name = "SKIN_BEACH",
		mission = "SKIN_WATCH_MISSION",
		progress = 100,
		author = "Ninguem#0095"
	},
	cine = {
		img = "15b8ea93f1b.png",
		imgMini = "15bb5cd060e.png",
		name = "SKIN_CINE",
		mission = "SKIN_WATCH_MISSION",
		progress = 1000,
		author = "Ninguem#0095"
	},
	hell = {
		img = "15b9169df9f.png",
		imgMini = "15bb5cda164.png",
		name = "SKIN_HELL",
		mission = "SKIN_HELL_MISSION",
		author = "Ninguem#0095"
	},
	cards = {
		img = "15b9169c24c.png",
		imgMini = "15bb5ccd46c.png",
		name = "SKIN_CARDS",
		mission = "SKIN_CARDS_MISSION",
		author = "Ninguem#0095"
	},
	candy = {
		img = "15b91c9c22d.png",
		imgMini = "15bb5ccc28f.png",
		name = "SKIN_CANDY",
		mission = "SKIN_CANDY_MISSION",
		progress = CONFIG.qtdRule,
		author = "Ninguem#0095"
	},
	fraise = {
		img = "15b91eb78f3.png",
		imgMini = "15bb5cd6047.png",
		name = "SKIN_FRAISE",
		mission = "SKIN_FRAISE_MISSION",
		author = "Ninguem#0095"
	},
	illuminati = {
		img = "15b91f65488.png",
		imgMini = "15bb5cdb5d3.png",
		name = "SKIN_ILLUMINATI",
		mission = "SKIN_ILLUMINATI_MISSION",
		author = "Ninguem#0095"
	},
	gift = {
		img = "15cb6abde73.png",
		imgMini = "15cb6ac456c.png",
		name = "SKIN_GIFT",
		mission = "SKIN_GIFT_MISSION",
		author = "Water_puddle#8159"
	},
	bog = {
		img = "15d47af972a.png",
		imgMini = "15d47b28d2d.png",
		name = "SKIN_BOG",
		mission = "SKIN_BOG_MISSION",
		author = "Miau#0015"
	},
	got = {
		img = "1600efed30e.png",
		imgMini = "1600f1f62fe.png",
		name = "SKIN_IRON_THRONE",
		mission = "SKIN_IRON_THRONE_MISSION",
		progress = 3,
		author = "Konamice23#2842"
	},
	hamburguer = {
		img = "160f659a4ed.png",
		imgMini = "160f661db7a.png",
		name = "SKIN_HAMBURGUER",
		mission = "SKIN_TEAM_MISSION",
		progress = 250,
		author = "Konamice23#2842"
	},
	test = {
		img = "15b90ff1d49.png",
		imgMini = "15bb5cd1561.png",
		name = "SKIN_TEST",
		mission = "SKIN_BOG_MISSION",
		author = "None"
	},
	school = {
		img = "1613775d7d9.png",
		imgMini = "161376b87e8.png",
		name = "SKIN_SCHOOL",
		mission = "SKIN_SCHOOL_MISSION",
		author = "Ninguem#0095"
	},
	skull = {
		img = "16137764898.png",
		imgMini = "161376bd233.png",
		name = "SKIN_SKULL",
		mission = "SKIN_SKULL_MISSION",
		author = "Qadori#0000"
	},
	time = {
		img = "1613774c39c.png",
		imgMini = "1613774ea42.png",
		name = "SKIN_TIME_MACHINE",
		mission = "SKIN_TIME_MACHINE_MISSION",
		author = "Ninguem#0095"
	},
	chess = {
		img = "16137761f21.png",
		imgMini = "161376b3e37.png",
		name = "SKIN_CHESS",
		mission = "SKIN_CHESS_MISSION",
		progress = 25,
		author = "Ninguem#0095"
	},
	pencil = {
		img = "1613775f863.png",
		imgMini = "161376b6a40.png",
		name = "SKIN_PENCIL",
		mission = "SKIN_PENCIL_MISSION",
		progress = 100,
		author = "Ninguem#0095"
	},
	show = {
		img = "1613775b679.png",
		imgMini = "161376bb842.png",
		name = "SKIN_SHOW",
		mission = "SKIN_SHOW_MISSION",
		author = "Ninguem#0095"
	},
	cheese = {
		img = "15d47af7681.png",
		imgMini = "15d47b2c21f.png",
		name = "SKIN_CHEESE",
		mission = "SKIN_WIN_MISSION",
		progress = 3000,
		author = "Miau#0015"
	},
	anvil = {
		img = "16559aadbb9.png",
		imgMini = "16559beceb2.png",
		name = "SKIN_ANVIL",
		mission = "SKIN_ROUND_MISSION",
		progress = 10000,
		author = "Ninguem#0095"
	},
	garden = {
		img = "16559bc8113.png",
		imgMini = "16559beed93.png",
		name = "SKIN_GARDEN",
		mission = "SKIN_ROUND_MISSION",
		progress = 5000,
		author = "Qadori#0000"
	},
	falls = {
		img = "16559bbec5b.png",
		imgMini = "16559be4307.png",
		name = "SKIN_FALLS",
		mission = "SKIN_FALLS_MISSION",
		author = "unknown player"
	},
	unicorn = {
		img = "16559bc0bad.png",
		imgMini = "16559be5f2d.png",
		name = "SKIN_UNICORN",
		mission = "SKIN_WIN_MISSION",
		progress = 2000,
		author = "unknown player"
	},
	psycho = {
		img = "16593b7b830.png",
		imgMini = "16559be9587.png",
		name = "SKIN_PSYCHO",
		mission = "SKIN_PSYCHO_MISSION",
		author = "Catoff#0000"
	},
	television = {
		img = "16559bc65b0.png",
		imgMini = "16559beb228.png",
		name = "SKIN_TV",
		mission = "SKIN_WATCH_MISSION",
		progress = 7500,
		author = "Chuckfodex#0000"
	},
	radio = {
		img = "16559bc2730.png",
		imgMini = "16559be78a2.png",
		name = "SKIN_RADIO",
		mission = "SKIN_WATCH_MISSION",
		progress = 5000,
		author = "Chuckfodex#0000"
	},
	newspaper = {
		img = "16559bcbbd2.png",
		imgMini = "16559bf299d.png",
		name = "SKIN_NEWSPAPER",
		mission = "SKIN_WATCH_MISSION",
		progress = 2500,
		author = "Ninguem#0095"
	},
	cat = {
		img = "16559bc9d62.png",
		imgMini = "16559bf0cc1.png",
		name = "SKIN_CAT",
		mission = "SKIN_ROUND_MISSION",
		progress = 2500,
		author = "Qadori#0000"
	},
	potato = {
		img = "165dab6aeb6.png",
		imgMini = "165dab8f834.png",
		name = "SKIN_POTATO",
		mission = "SKIN_POTATO_MISSION",
		author = "Himnafor#0000"
	},
	rip = {
		img = "165dab74ae4.png",
		imgMini = "165dab9649a.png",
		name = "SKIN_RIP",
		mission = "SKIN_RIP_MISSION",
		author = "White_pudim#0000"
	},
	apple = {
		img = "165dab63f6e.png",
		imgMini = "165dab864d6.png",
		name = "SKIN_APPLE",
		mission = "SKIN_APPLE_MISSION",
		author = "Chuckfodex#0000"
	},
	heart = {
		img = "165dab6cbb0.png",
		imgMini = "165dab9139b.png",
		name = "SKIN_HEART",
		mission = "SKIN_HEART_MISSION",
		author = "Chuckfodex#0000"
	},
	breakfast = {
		img = "165dab6782c.png",
		imgMini = "165dab8bddf.png",
		name = "SKIN_BREAKFAST",
		mission = "SKIN_TEAM_MISSION",
		progress = 100,
		author = "Himnafor#0000"
	},
	bones = {
		img = "165dab65c71.png",
		imgMini = "165dab88203.png",
		name = "SKIN_BONES",
		mission = "SKIN_BONES_MISSION",
		author = "Konamice23#2842"
	},
	chocolate = {
		img = "165dab72d14.png",
		imgMini = "165dab94b15.png",
		name = "SKIN_CHOCOLATE",
		mission = "SKIN_CHOCOLATE_MISSION",
		author = "Qadori#0000"
	},
	marine = {
		img = "165dab6920a.png",
		imgMini = "165dab8daeb.png",
		name = "SKIN_MARINE",
		mission = "SKIN_MARINE_MISSION",
		author = "Qadori#0000"
	},
	loot = {
		img = "165dab6eb25.png",
		imgMini = "165dab930ef.png",
		name = "SKIN_LOOT",
		mission = "SKIN_LOOT_MISSION",
		author = "Himnafor#0000"
	},
	
	astral = {
		img = "1662cad59f7.png",
		imgMini = "1662ca1e19d.png",
		name = "SKIN_ASTRAL",
		mission = "SKIN_ASTRAL_MISSION",
		author = "Ninguem#0095"
	},
	computer = {
		img = "1662cad79fa.png",
		imgMini = "1662ca1ff79.png",
		name = "SKIN_COMPUTER",
		mission = "SKIN_WATCH_MISSION",
		progress = 10000,
		author = "White_pudim#0000"
	},
	elemental = {
		img = "1662cad9b71.png",
		imgMini = "1662ca21fe8.png",
		name = "SKIN_ELEMENTAL",
		mission = "SKIN_ELEMENTAL_DESC_MISSION",
		author = "Konamice23#2842"
	},
	guitar = {
		img = "1662cadb916.png",
		imgMini = "1662ca24393.png",
		name = "SKIN_GUITAR",
		mission = "SKIN_GUITAR_MISSION",
		author = "Awesync#8255"
	},
	popcorn = {
		img = "1662caddae8.png",
		imgMini = "1662ca26578.png",
		name = "SKIN_POPCORN",
		mission = "SKIN_POPCORN_MISSION",
		author = "Chuckfodex#0000"
	},
	trash = {
		img = "1662cadf8b8.png",
		imgMini = "1662ca283ce.png",
		name = "SKIN_TRASH",
		mission = "SKIN_TRASH_MISSION",
		author = "Chuckfodex#0000"
	},
	wonderland = {
		img = "1662cae1e69.png",
		imgMini = "1662ca2a814.png",
		name = "SKIN_WONDERLAND",
		mission = "SKIN_WONDERLAND_MISSION",
		progress = 2,
		author = "White_pudim#0000"
	},
	
	
	friend = {
		img = "166d0316342.png",
		imgMini = "166d02f5b54.png",
		name = "SKIN_FRIEND",
		mission = "SKIN_ROUND_MISSION",
		progress = 7500,
		author = "Arki#0113"
	},
	pumpkin = {
		img = "166d031dfbe.png",
		imgMini = "166d02fc533.png",
		name = "SKIN_PUMPKIN",
		mission = "SKIN_PUMPKIN_MISSION",
		author = "Chuckfodex#0000"
	},
	gothic = {
		img = "166d031a4d6.png",
		imgMini = "166d02f901d.png",
		name = "SKIN_GOTHIC",
		mission = "SKIN_GOTHIC_MISSION",
		author = "Qadori#0000"
	},
	gaga = {
		img = "166d0318349.png",
		imgMini = "166d03b6e19.png",
		name = "SKIN_GAGA",
		mission = "SKIN_GAGA_MISSION",
		author = "Catoff#0000"
	},
	cuphead = {
		img = "166d0312f9e.png",
		imgMini = "166d02f22c0.png",
		name = "SKIN_CUPHEAD",
		mission = "SKIN_CUPHEAD_MISSION",
		author = "Himnafor#0000"
	},
	mecatopus = {
		img = "166d031c2fc.png",
		imgMini = "166d02fa99c.png",
		name = "SKIN_MECATOPUS",
		mission = "SKIN_MECATOPUS_MISSION",
		author = "White_pudim#0000"
	},
	bootcamp = {
		img = "166d031155a.png",
		imgMini = "166d02f05bb.png",
		name = "SKIN_BOOTCAMP",
		mission = "SKIN_BOOTCAMP_MISSION",
		author = "Dududuzaooo#0000"
	},
	football = {
		img = "166d0314a46.png",
		imgMini = "166d02f3f70.png",
		name = "SKIN_FOOTBALL",
		mission = "SKIN_FOOTBALL_MISSION",
		progress = 100,
		author = "Awesync#8255"
	},
	ufo = {
		img = "16793c48ff9.png",
		imgMini = "16793c2aa1f.png",
		name = "SKIN_UFO",
		mission = "SKIN_UFO_MISSION",
		author = "unknown player"
	},
	aquarium = {
		img = "16793c4aad4.png",
		imgMini = "16793c2c820.png",
		name = "SKIN_AQUARIUM",
		mission = "SKIN_AQUARIUM_MISSION",
		author = "Subzeraah#0000"
	},
	help = {
		img = "16793c4c647.png",
		imgMini = "16793c2e2ee.png",
		name = "SKIN_HELP",
		mission = "SKIN_HELP_MISSION",
		author = "Subzeraah#0000"
	},
	font = {
		img = "16793c4e08e.png",
		imgMini = "16793c2ffb5.png",
		name = "SKIN_FONT",
		mission = "SKIN_FONT_MISSION",
		author = "Subzeraah#0000"
	},
	chimney = {
		img = "16793c4fca3.png",
		imgMini = "16793c31a52.png",
		name = "SKIN_CHIMNEY",
		mission = "SKIN_CHIMNEY_MISSION",
		author = "Arki#0113"
	},
	circus = {
		img = "16793c5188a.png",
		imgMini = "16793c335de.png",
		name = "SKIN_CIRCUS",
		mission = "SKIN_CIRCUS_MISSION",
		author = "Chuckfodex#0000"
	},
	cisne = {
		img = "16793c5358e.png",
		imgMini = "16793c35189.png",
		name = "SKIN_CISNE",
		mission = "SKIN_CISNE_MISSION",
		author = "Subzeraah#0000"
	},
	coffee = {
		img = "16793c5543e.png",
		imgMini = "16793c373b7.png",
		name = "SKIN_COFFEE",
		mission = "SKIN_COFFEE_MISSION",
		progress = 4,
		author = "Morningstar#0010"
	},
	croissant = {
		img = "16793c56f2e.png",
		imgMini = "16793c39095.png",
		name = "SKIN_CROISSANT",
		mission = "SKIN_TEAM_MISSION",
		progress = 487.5,
		author = "Subzeraah#0000"
	},
	space = {
		img = "16793c59521.png",
		imgMini = "16793c3abe5.png",
		name = "SKIN_SPACE",
		mission = "SKIN_SPACE_MISSION",
		author = "Chuckfodex#0000"
	},
	mermaid = {
		img = "16793c5b215.png",
		imgMini = "16793c3c94e.png",
		name = "SKIN_MERMAID",
		mission = "SKIN_MERMAID_MISSION",
		author = "Konamice23#2842"
	},
	phone = {
		img = "16793c5cdf9.png",
		imgMini = "16793c3e806.png",
		name = "SKIN_PHONE",
		mission = "SKIN_PHONE_MISSION",
		author = "Arki#0113"
	},
	quartz = {
		img = "16793c5e9fc.png",
		imgMini = "16793e20995.png",
		name = "SKIN_QUARTZ",
		mission = "SKIN_QUARTZ_MISSION",
		progress = 5000,
		author = "White_pudim#0000"
	},
	snowman = {
		img = "16793c60744.png",
		imgMini = "16793e24087.png",
		name = "SKIN_SNOWMAN",
		mission = "SKIN_SNOWMAN_MISSION",
		author = "Tupac_shakur#4173"
	},
	totoro = {
		img = "16793c6236b.png",
		imgMini = "16793e227c3.png",
		name = "SKIN_TOTORO",
		mission = "SKIN_TOTORO_MISSION",
		author = "White_pudim#0000"
	},
	vangogh = {
		img = "16793c64043.png",
		imgMini = "16793c45a19.png",
		name = "SKIN_VANGOGH",
		mission = "SKIN_VANGOGH_MISSION",
		author = "White_pudim#0000"
	},
	
	cheeseclassic = {
		img = "167aaa81b1e.png",
		imgMini = " 167d768bcfc.png",
		name = "SKIN_CHEESE_CLASSIC",
		mission = "SKIN_CHEESE_CLASSIC_MISSION",
		author = "Ninguem#0095"
	},
	
	chest = {
		img = "16887dc0e17.png",
		imgMini = "16887ddc9bd.png",
		name = "SKIN_CHEST",
		mission = "SKIN_CHEST_MISSION",
		author = "White_pudim#0000"
	},
	coca = {
		img = "16887dc2d1c.png",
		imgMini = "16887e5d6ef.png",
		name = "SKIN_COCA",
		mission = "SKIN_COCA_MISSION",
		author = "Arki#0113"
	},
	flamingo = {
		img = "16887dc483a.png",
		imgMini = "16887de0634.png",
		name = "SKIN_FLAMINGO",
		mission = "SKIN_FLAMINGO_MISSION",
		author = "White_pudim#0000"
	},
	honey = {
		img = "16887dc63c4.png",
		imgMini = "16887de20ba.png",
		name = "SKIN_HONEY",
		mission = "SKIN_HONEY_MISSION",
		author = "Chuckfodex#0000"
	},
	old = {
		img = "16887dc7fd6.png",
		imgMini = "16887de3af2.png",
		name = "SKIN_OLD",
		mission = "SKIN_OLD_MISSION",
		author = "Arki#0113"
	},
	pineapple = {
		img = "16887dc9bc6.png",
		imgMini = "16887e5f59c.png",
		name = "SKIN_PINEAPPLE",
		mission = "SKIN_PINEAPPLE_MISSION",
		author = "Chuckfodex#0000"
	},
	sack = {
		img = "16887dcbad3.png",
		imgMini = "16887de7059.png",
		name = "SKIN_SACK",
		mission = "SKIN_SACK_MISSION",
		author = "Iho#5679"
	},
	smartphone = {
		img = "16887dcd915.png",
		imgMini = "16887de90b3.png",
		name = "SKIN_SMARTPHONE",
		mission = "SKIN_SMARTPHONE_MISSION",
		author = "Tempo#5571"
	},

	vampire = {
		img = "17105474015.png",
		imgMini = "1710559ff17.png",
		name = "SKIN_VAMPIRE",
		mission = "SKIN_VAMPIRE_MISSION",
		author = "Ninguem#0095"
	},
	
	moon = {
		img = "171237eedfc.png",
		imgMini = "171237f0ac3.png",
		name = "SKIN_MOON",
		mission = "SKIN_MOON_MISSION",
		author = "Albinoska#0000"
	},
	max = {
		img = "171237f3015.png",
		imgMini = "171237f5ade.png",
		name = "SKIN_MAX",
		mission = "SKIN_MAX_MISSION",
		author = "White_pudim#0000"
	},
	bill = {
		img = "1713896e30e.png",
		imgMini = "171389b38ce.png",
		name = "SKIN_BILL",
		mission = "SKIN_BILL_MISSION",
		author = "White_pudim#0000"
	},
	horn = {
		img = "17138971cb9.png",
		imgMini = "171389baf1f.png",
		name = "SKIN_HORN",
		mission = "SKIN_HORN_MISSION",
		author = "White_pudim#0000"
	},
	
	samson = {
		img = "1716a7e5a2a.png",
		imgMini = "1716a7e7f17.png",
		name = "SKIN_SAMSON",
		mission = "SKIN_SAMSON_MISSION",
		author = "Iho#5679"
	},
	toast = {
		img = "1716a7ea0b1.png",
		imgMini = "1716a7ec4f1.png",
		name = "SKIN_TOAST",
		mission = "SKIN_TIME_MISSION",
		progress = 600,
		author = "Arki#0113"
	},
	pizza = {
		img = "1716a7e19b0.png",
		imgMini = "1716a7e3b37.png",
		name = "SKIN_PIZZA",
		mission = "SKIN_PIZZA_MISSION",
		progress = 10000,
		author = "Arki#0113"
	},
	
	fashion = {
		img = "171b41481f1.png",
		imgMini = "171b4170d35.png",
		name = "SKIN_FASHION",
		mission = "SKIN_DAY_MISSION",
		progress = 7,
		author = "Arki#0113"
	},
	undertale = {
		img = "171b4157a7f.png",
		imgMini = "171b417f5ea.png",
		name = "SKIN_UNDERTALE",
		mission = "SKIN_DAY_MISSION",
		progress = 15,
		author = "White_pudim#0000"
	},
	forest = {
		img = "171b4149fcc.png",
		imgMini = "171b4172992.png",
		name = "SKIN_FOREST",
		mission = "SKIN_FOREST_MISSION",
		author = "White_pudim#0000"
	},
	kiss = {
		img = "171b414e053.png",
		imgMini = "171b42a0d57.png",
		name = "SKIN_KISS",
		mission = "SKIN_KISS_MISSION",
		author = "Matheus#5306"
	},
	mountain = {
		img = "171b414fc99.png",
		imgMini = "171b4177dee.png",
		name = "SKIN_MONTAIN",
		mission = "SKIN_MONTAIN_MISSION",
		author = "Chanyeol#8543"
	},
	pikachu = {
		img = "171b41518be.png",
		imgMini = "171b42a2c6c.png",
		name = "SKIN_PIKACHU",
		mission = "SKIN_PIKACHU_MISSION",
		author = "Sulyvahn#1958"
	},
	simpsons = {
		img = "171b4153989.png",
		imgMini = "171b417b486.png",
		name = "SKIN_SIMPSONS",
		mission = "SKIN_SIMPSONS_MISSION",
		author = "Arki#0113"
	},
	truelove = {
		img = "171b415559b.png",
		imgMini = "171b42a4a0c.png",
		name = "SKIN_TRUE_LOVE",
		mission = "SKIN_TRUE_LOVE_MISSION",
		author = "Artgir#0000"
	},
	
	cyan = {
		img = "171d7fe12e9.png",
		imgMini = "171d7fe3888.png",
		name = "SKIN_CIAN",
		mission = "SKIN_CIAN_MISSION",
		author = "Fofinhoppp#0000"
	},
	orange = {
		img = "171d7fed8b9.png",
		imgMini = "171d7fefb11.png",
		name = "SKIN_ORANGE",
		mission = "SKIN_ORANGE_MISSION",
		author = "Fofinhoppp#0000"
	},
	pink = {
		img = "171d7ff9af8.png",
		imgMini = "171d7ffc588.png",
		name = "SKIN_PINK",
		mission = "SKIN_PINK_MISSION",
		author = "Fofinhoppp#0000"
	},
	purple = {
		img = "171d8002d82.png",
		imgMini = "171d8005641.png",
		name = "SKIN_PURPLE",
		mission = "SKIN_PURPLE_MISSION",
		author = "Fofinhoppp#0000"
	},
	black = {
		img = "171d800c4a9.png",
		imgMini = "171d800e3a9.png",
		name = "SKIN_BLACK",
		mission = "SKIN_BLACK_MISSION",
		author = "Fofinhoppp#0000"
	},
	toxic = {
		img = "171d8015cf0.png",
		imgMini = "171d8017ddc.png",
		name = "SKIN_TOXIC",
		mission = "CYAN_MISSION",
		progress = 15,
		author = "Chuckfodex#0000"
	},
	thunder = {
		img = "171d801fb61.png",
		imgMini = "171d83e2373.png",
		name = "SKIN_THUNDER",
		mission = "ORANGE_MISSION",
		progress = 15,
		author = "Qadori#0000"
	},
	crystal = {
		img = "171d802bbc3.png",
		imgMini = "171d83db645.png",
		name = "SKIN_CRYSTAL",
		mission = "PINK_MISSION",
		progress = 15,
		author = "Sulyvahn#1958"
	},
	dark = {
		img = "171d8034ba5.png",
		imgMini = "171d8036ccc.png",
		name = "SKIN_DARK",
		mission = "PURPLE_MISSION",
		progress = 15,
		author = "Arki#0113"
	},
	light = {
		img = "171d803e7d5.png",
		imgMini = "171d8041299.png",
		name = "SKIN_LIGHT",
		mission = "WHITE_MISSION",
		progress = 15,
		author = "White_pudim#0000"
	},
	eclipse = {
		img = "171d8048cb6.png",
		imgMini = "171d804b0e9.png",
		name = "SKIN_ECLIPSE",
		mission = "SKIN_ECLIPSE_MISSION",
		author = "Aykv#0000"
	},
	toothless = {
		img = "171d8056b39.png",
		imgMini = "171d8058f0e.png",
		name = "SKIN_TOOTHLESS",
		mission = "SKIN_TOOTHLESS_MISSION",
		progress = 10,
		author = "Sulyvahn#1958"
	},
	lightfury = {
		img = "171d8065424.png",
		imgMini = "171d806753e.png",
		name = "SKIN_LIGHTFURY",
		mission = "SKIN_LIGHTFURY_MISSION",
		progress = 10,
		author = "Sulyvahn#1958"
	},
	kratos = {
		img = "171d806edce.png",
		imgMini = "171d83d3615.png",
		name = "SKIN_KRATOS",
		mission = "SKIN_KRATOS_MISSION",
		author = "Sulyvahn#1958"
	},
	shenlong = {
		img = "171d8077235.png",
		imgMini = "171d80794bc.png",
		name = "SKIN_SHENLONG",
		mission = "SKIN_SHENLONG_MISSION",
		author = "Sulyvahn#1958"
	},
	spider = {
		img = "171d807f79a.png",
		imgMini = "171d80819e0.png",
		name = "SKIN_SPIDER",
		mission = "SKIN_SPIDER_MISSION",
		author = "Sulyvahn#1958"
	},
	
	soon = {
		img = "15b90ff3a79.png",
		imgMini = "1603de0c1a2.png",
		name = "SKIN_SOON",
		mission = "SKIN_SOON_MISSION",
		author = "???"
	},
}



--[[ src/rules.lua ]]--

RULE = {
	mini = {
		name = "HOUSE_MINI",
		desc = "HOUSE_MINI_DESC",
		mission = "UNLOCK_RULE",
		img = "161aba690c6.png",
		imgDesc = "15c4c117200.png",
		conflict = {"maxi"},
		public = true,
		type = "PASSIVE",
	},
	maxi = {
		name = "HOUSE_MAXI",
		desc = "HOUSE_MAXI_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c5ab66.png",
		imgDesc = "15c4c1147fa.png",
		conflict = {"mini", "noaction"},
		public = true,
		type = "PASSIVE",
	},
	flash = {
		name = "HOUSE_FLASH",
		desc = "HOUSE_FLASH_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c4ee17.png",
		imgDesc = "15c4c10b14a.png",
		conflict = {},
		public = true,
		rulecard = true,
		type = "PASSIVE",
	},
	revelation = {
		name = "HOUSE_REVELATION",
		desc = "HOUSE_REVELATION_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c67cd7.png",
		imgDesc = "15c4c122df3.png",
		conflict = {"tracking","luck"},
		public = true,
		rulecard = true,
		type = "PASSIVE",
	},
	clean = {
		name = "HOUSE_CLEAN_FINISH",
		desc = "HOUSE_CLEAN_FINISH_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c4bee3.png",
		imgDesc = "15c4c106f11.png",
		conflict = {"mess"},
		public = true,
		rulecard = true,
		type = "PASSIVE",
	},
	insatisfaction = {
		name = "HOUSE_INSATISFACTION",
		desc = "HOUSE_INSATISFACTION_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c54da8.png",
		imgDesc = "15c4c11067f.png",
		conflict = {"satisfaction","fastdraw"},
		public = true,
		rulecard = true,
		type = "PASSIVE",
	},
	perfection = {
		name = "HOUSE_PERFECTION",
		desc = "HOUSE_PERFECTION_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5d807dc.png",
		imgDesc = "15c4c11e306.png",
		conflict = {"sequence","stack","mess"},
		public = true,
		rulecard = true,
		type = "PASSIVE",
	},
	black = {
		name = "HOUSE_BLACK",
		desc = "HOUSE_BLACK_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c46d70.png",
		imgDesc = "15c4c100109.png",
		conflict = {},
		public = true,
		rulecard = true,
		type = "PASSIVE",
	},
	stack = {
		name = "HOUSE_STACK",
		desc = "HOUSE_STACK_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c6d857.png",
		imgDesc = "15c4c125f22.png",
		conflict = {"perfection","sequence","mess","neighbor"},
		public = true,
		rulecard = true,
		type = "PASSIVE",
	},
	tracking = {
		name = "HOUSE_TRACKING",
		desc = "HOUSE_TRACKING_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c72d66.png",
		imgDesc = "15c4c128bdc.png",
		conflict = {"revelation","luck"},
		public = true,
		rulecard = true,
		type = "PASSIVE",
	},
	overload = {
		name = "HOUSE_OVERLOAD",
		desc = "HOUSE_OVERLOAD_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c6501f.png",
		imgDesc = "15c4c11b32b.png",
		conflict = {"limbo"},
		public = true,
		rulecard = true,
		type = "PASSIVE",
	},
	jumpin = {
		name = "HOUSE_JUMP_IN",
		desc = "HOUSE_JUMP_IN_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c5649d.png",
		imgDesc = "15c4c111e36.png",
		conflict = {},
		public = true,
		rulecard = true,
		type = "PASSIVE",
	},
	satisfaction = {
		name = "HOUSE_SATISFACTION",
		desc = "HOUSE_SATISFACTION_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c69300.png",
		imgDesc = "15c4c12471e.png",
		conflict = {"insatisfaction","fastdraw"},
		public = true,
		rulecard = true,
		type = "PASSIVE",
	},
	nocombo = {
		name = "HOUSE_NO_COMBO",
		desc = "HOUSE_NO_COMBO_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c637ab.png",
		imgDesc = "15c4c119de5.png",
		conflict = {"supercombo","hell","noaction"},
		public = true,
		rulecard = true,
		type = "PASSIVE",
	},
	supercombo = {
		name = "HOUSE_SUPER_COMBO",
		desc = "HOUSE_SUPER_COMBO_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c6f2c2.png",
		imgDesc = "15c4c1274b9.png",
		conflict = {"nocombo","hell","noaction"},
		public = true,
		rulecard = true,
		type = "PASSIVE",
	},
	hell = {
		name = "HOUSE_HELL",
		desc = "HOUSE_HELL_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c536f3.png",
		imgDesc = "15c4c10da85.png",
		conflict = {"nocombo","supercombo","noaction","mess"},
		public = true,
		rulecard = true,
		type = "PASSIVE",
	},
	mulligan = {
		name = "HOUSE_MULLIGAN",
		desc = "HOUSE_MULLIGAN_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c5da7b.png",
		imgDesc = "15c4c11871d.png",
		conflict = {},
		public = true,
		type = "PASSIVE",
	},
	death = {
		name = "HOUSE_DEATH",
		desc = "HOUSE_DEATH_DESC",
		mission = "UNLOCK_RULE",
		img = "15c326229de.png",
		imgDesc = "15c4c1085a8.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"}},
		public = true,
		rulecard = true,
		type = "CARD",
	},
	carousel = {
		name = "HOUSE_CAROUSEL",
		desc = "HOUSE_CAROUSEL_DESC",
		mission = "UNLOCK_RULE",
		img = "15c3261f5eb.png",
		imgDesc = "15c4c102dad.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"}},
		public = true,
		rulecard = true,
		type = "CARD",
	},
	trade = {
		name = "HOUSE_TRADE",
		desc = "HOUSE_TRADE_DESC",
		mission = "UNLOCK_RULE",
		img = "15c3260caa5.png",
		imgDesc = "15c4c12a68e.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"}},
		public = true,
		rulecard = true,
		type = "CARD",
	},
	gift = {
		name = "HOUSE_GIFT",
		desc = "HOUSE_GIFT_DESC",
		mission = "UNLOCK_RULE",
		img = "15c32617c3c.png",
		imgDesc = "15c4c10c563.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"}},
		public = true,
		rulecard = true,
		type = "CARD",
	},
	spy = {
		name = "HOUSE_VIEW",
		desc = "HOUSE_VIEW_DESC",
		mission = "UNLOCK_RULE",
		img = "15c3261b803.png",
		imgDesc = "15c4c12bd97.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"}},
		public = true,
		rulecard = true,
		type = "CARD",
	},
	rain = {
		name = "HOUSE_RAIN",
		desc = "HOUSE_RAIN_DESC",
		mission = "UNLOCK_RULE",
		img = "15c326277fd.png",
		imgDesc = "15c4c11fc59.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue"}},
		public = true,
		rulecard = true,
		type = "CARD",
	},
	equality = {
		name = "HOUSE_EQUALITY",
		desc = "HOUSE_EQUALITY_DESC",
		mission = "UNLOCK_RULE",
		img = "15c326118f3.png",
		imgDesc = "15c4c109ba8.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"}},
		public = true,
		rulecard = true,
		type = "CARD",
	},
	chair = {
		name = "HOUSE_CHAIRS",
		desc = "HOUSE_CHAIRS_DESC",
		mission = "UNLOCK_RULE",
		img = "15c32619855.png",
		imgDesc = "15c4c1042aa.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"}},
		public = true,
		rulecard = true,
		type = "CARD",
	},
	meep = {
		name = "HOUSE_MEEP",
		desc = "HOUSE_MEEP_DESC",
		mission = "UNLOCK_RULE",
		img = "15c3261d7ec.png",
		imgDesc = "15c4c115cdc.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"}},
		public = true,
		rulecard = true,
		type = "CARD",
	},
	bomb = {
		name = "HOUSE_BOMB",
		desc = "HOUSE_BOMB_DESC",
		mission = "UNLOCK_RULE",
		img = "15c3260e9cd.png",
		imgDesc = "15c4c101787.png",
		conflict = {"noaction","mess"},
		card = {color={"black"}},
		public = true,
		rulecard = true,
		type = "CARD",
	},
	random = {
		name = "HOUSE_RANDOM",
		desc = "HOUSE_RANDOM_DESC",
		mission = "UNLOCK_RULE",
		img = "15c3261560c.png",
		imgDesc = "15c4c121517.png",
		conflict = {"noaction","mess"},
		card = {color={"black"}},
		public = true,
		rulecard = true,
		type = "CARD",
	},
	peace = {
		name = "HOUSE_PEACE",
		desc = "HOUSE_PEACE_DESC",
		mission = "UNLOCK_RULE",
		img = "15c3261341c.png",
		imgDesc = "15c4c11cd14.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"}},
		public = true,
		notMess = true,
		rulecard = true,
		type = "CARD",
	},
	chess = {
		name = "HOUSE_CHESS",
		desc = "HOUSE_CHESS_DESC",
		mission = "UNLOCK_RULE",
		img = "15c50042c2f.png",
		imgDesc = "15c4c10580a.png",
		conflict = {"noaction","mess"},
		card = {color={"black"},name="king"},
		public = true,
		rulecard = true,
		type = "CARD",
	},
	imitate = {
		name = "HOUSE_IMITATE",
		desc = "HOUSE_IMITATE_DESC",
		mission = "UNLOCK_RULE",
		img = "15c32624cf7.png",
		imgDesc = "15c4c10ef60.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"}},
		public = true,
		rulecard = true,
		type = "CARD",
	},
	limit = {
		name = "HOUSE_TIME",
		desc = "HOUSE_TIME_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c5947a.png",
		imgDesc = "1610b6b50ae.png",
		conflict = {"limbo"},
		public = true,
		type = "PASSIVE",
	},
	nochallenge = {
		name = "HOUSE_CHALLENGE",
		desc = "HOUSE_CHALLENGE_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c61fce.png",
		imgDesc = "15c6eb2b741.png",
		conflict = {"noaction"},
		public = true,
		rulecard = true,
		type = "PASSIVE",
	},
	noaction = {
		name = "HOUSE_NO_ACTION",
		desc = "HOUSE_NO_ACTION_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c60865.png",
		imgDesc = "15c904433ae.png",
		conflict = {"maxi","mess","peace","death","gift","trade","carousel","chair","spy","rain","equality","imitate","meeep","random","bomb","chess","rule","steal","web","thunder","clone","nochallenge","hell","nocombo","supercombo","luck","box","wish","ink","confuse","portal","batata","compass","draw99","curse","magnet","tornado","theft","simon","ban","dice","paradox","half","oddeven","mimic","mix","justice","share","key"},
		public = true,
		type = "PASSIVE",
	},
	camouflage = {
		name = "HOUSE_CAMOUFLAGE",
		desc = "HOUSE_CAMOUFLAGE_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c4a7a5.png",
		imgDesc = "15c9043ecd9.png",
		conflict = {"dos"},
		public = true,
		rulecard = true,
		type = "PASSIVE",
	},
	rule = {
		name = "HOUSE_ADD_RULE",
		desc = "HOUSE_ADD_RULE_DESC",
		mission = "UNLOCK_RULE",
		img = "15c8fc525b7.png",
		imgDesc = "15c9044135a.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"}},
		public = true,
		type = "CARD",
	},
	hard = {
		name = "HOUSE_HARD",
		desc = "HOUSE_HARD_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c51f3b.png",
		imgDesc = "15e67ba2aed.png",
		conflict = {},
		public = true,
		rulecard = true,
		type = "PASSIVE",
	},
	fastdraw = {
		name = "HOUSE_FAST_DRAW",
		desc = "HOUSE_FAST_DRAW_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c4d794.png",
		imgDesc = "15e67b9f422.png",
		conflict = {"satisfaction","insatisfaction"},
		public = true,
		rulecard = true,
		
		type = "PASSIVE",
	},
	steal = {
		name = "HOUSE_STEAL",
		desc = "HOUSE_STEAL_DESC",
		mission = "UNLOCK_RULE",
		img = "15e54b0f5b4.png",
		imgDesc = "15e67b9b97b.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"}},
		public = true,
		notMess = true,
		rulecard = true,
		type = "CARD",
	},
	thunder = {
		name = "HOUSE_THUNDER",
		desc = "HOUSE_THUNDER_DESC",
		mission = "UNLOCK_RULE",
		img = "15ebbcc57b0.png",
		imgDesc = "15ed536ed22.png",
		conflict = {"noaction","mess"},
		card = {color={"yellow","green"}},
		public = true,
		rulecard = true,
		type = "CARD",
	},
	clone = {
		name = "HOUSE_CLONE",
		desc = "HOUSE_CLONE_DESC",
		mission = "UNLOCK_RULE",
		img = "15ec03fec02.png",
		imgDesc = "15ed5373b93.png",
		conflict = {"noaction","mess"},
		card = {color={"black"}},
		public = true,
		rulecard = true,
		type = "CARD",
	},
	luck = {
		name = "HOUSE_LUCK",
		desc = "HOUSE_LUCK_DESC",
		mission = "UNLOCK_RULE",
		img = "15ec0b282ef.png",
		imgDesc = "15fb322b1d6.png",
		conflict = {"noaction","mess","tracking"},
		card = {color={"red","blue","yellow","green"}},
		public = true,
		rulecard = true,
		type = "CARD",
	},
	web = {
		name = "HOUSE_WEB",
		desc = "HOUSE_WEB_DESC",
		mission = "UNLOCK_RULE",
		img = "15ec6049e05.png",
		imgDesc = "15ed5371210.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"}},
		public = true,
		rulecard = true,
		type = "CARD",
	},
	shiny = {
		name = "HOUSE_SHINY",
		desc = "HOUSE_SHINY_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c6c079.png",
		imgDesc = "1610b737bb0.png",
		public = true,
		rulecard = true,
		type = "PASSIVE",
	},
	drekkemaus = {
		name = "HOUSE_DREKKEMAUS",
		desc = "HOUSE_DREKKEMAUS_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c48dcf.png",
		imgDesc = "15ed52b7848.png",
		notCount = true,
		type = "BOSS",
	},
	jingle = {
		name = "HOUSE_JINGLE",
		desc = "HOUSE_JINGLE_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c48dcf.png",
		imgDesc = "16007c17c97.png",
		notCount = true,
		type = "BOSS",
	},
	papaille = {
		name = "HOUSE_PAPAILLE",
		desc = "HOUSE_PAPAILLE_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c48dcf.png",
		imgDesc = "16007c19ab5.png",
		notCount = true,
		type = "BOSS",
	},
	icemice = {
		name = "HOUSE_ICEMICE",
		desc = "HOUSE_ICEMICE_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c48dcf.png",
		imgDesc = "167d646330d.png",
		notCount = true,
		type = "BOSS",
	},
	snowy = {
		name = "HOUSE_SNOWY",
		desc = "HOUSE_SNOWY_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c48dcf.png",
		imgDesc = "167d646118f.png",
		notCount = true,
		type = "BOSS",
	},
	ninguem_v2 = {
		name = "HOUSE_NINGUEM",
		desc = "HOUSE_NINGUEM_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c48dcf.png",
		imgDesc = "1712da6f330.png",
		notCount = true,
		lock = "LOCKED",
		type = "BOSS",
	},
	box = {
		name = "HOUSE_BOX",
		desc = "HOUSE_BOX_DESC",
		mission = "UNLOCK_RULE",
		img = " 15f1674f2cb.png",
		imgDesc = "1610b6b1641.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue"}},
		public = true,
		rulecard = true,
		type = "CARD",
	},
	wish = {
		name = "HOUSE_WISH",
		desc = "HOUSE_WISH_DESC",
		mission = "UNLOCK_RULE",
		img = "15f16742984.png",
		imgDesc = "16007c1b88e.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"}},
		public = true,
		rulecard = true,
		type = "CARD",
	},
	portal = {
		name = "HOUSE_PORTAL",
		desc = "HOUSE_PORTAL_DESC",
		mission = "UNLOCK_RULE",
		img = "15f82ca13ff.png",
		imgDesc = "1610b6af6b1.png",
		conflict = {"noaction","mess","bluegreen"},
		card = {color={"red","blue","yellow","green"}},
		public = true,
		rulecard = true,
		type = "CARD",
	},
	sequence = {
		name = "HOUSE_SEQUENCE",
		desc = "HOUSE_SEQUENCE_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c6a8bd.png",
		imgDesc = "15fb32291a9.png",
		conflict = {"mess","stack","perfection"},
		public = true,
		rulecard = true,
		type = "PASSIVE",
	},
	team = {
		name = "HOUSE_TEAM",
		desc = "HOUSE_TEAM_DESC",
		mission = "TEAM_RULE",
		img = "161a5d35a72.png",
		imgDesc = "160f639df86.png",
		lock = "TEAM",
		type = "PASSIVE",
	},
	custom = {
		name = "HOUSE_CUSTOM",
		desc = "HOUSE_CUSTOM_DESC",
		mission = "BUY_RULE",
		img = "15f8cc7e48c.png",
		imgDesc = "1610b6ab2b5.png",
		conflict = {"noaction"},
		lock = "ALL",
		notMess = true,
		notCount = true,
		type = "CARD",
	},
	ink = {
		name = "HOUSE_INK",
		desc = "HOUSE_INK_DESC",
		mission = "UNLOCK_RULE",
		img = "1606599bbf3.png",
		imgDesc = "1610b6b6f11.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"}},
		public = true,
		rulecard = true,
		type = "CARD",
	},
	confuse = {
		name = "HOUSE_CONFUSE",
		desc = "HOUSE_CONFUSE_DESC",
		mission = "UNLOCK_RULE",
		img = "1606c2a1c33.png",
		imgDesc = "1610b6a8995.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"}},
		public = true,
		rulecard = true,
		type = "CARD",
	},
	compass = {
		name = "HOUSE_TREASURE",
		desc = "HOUSE_TREASURE_DESC",
		mission = "UNLOCK_RULE",
		img = "1610641ad80.png",
		imgDesc = "1610b6a33a1.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"}},
		public = true,
		rulecard = true,
		type = "CARD",
	},
	red = {
		name = "HOUSE_RED",
		desc = "HOUSE_RED_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c66678.png",
		imgDesc = "1610b6b323e.png",
		lock = "LOCKED",
		type = "EXTRA",
	},
	blue = {
		name = "HOUSE_BLUE",
		desc = "HOUSE_BLUE_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c75edc.png",
		imgDesc = "1610b695776.png",
		lock = "LOCKED",
		type = "EXTRA",
	},
	yellow = {
		name = "HOUSE_YELLOW",
		desc = "HOUSE_YELLOW_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c7471b.png",
		imgDesc = "1610b6b9278.png",
		lock = "LOCKED",
		type = "EXTRA",
	},
	green = {
		name = "HOUSE_GREEN",
		desc = "HOUSE_GREEN_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c50321.png",
		imgDesc = "1610b6ad562.png",
		lock = "LOCKED",
		type = "EXTRA",
	},
	charlotte = {
		name = "HOUSE_CHARLOTTE",
		desc = "HOUSE_CHARLOTTE_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c48dcf.png",
		imgDesc = "1611561f846.png",
		notCount = true,
		type = "BOSS",
	},
	buffy = {
		name = "HOUSE_BUFFY",
		desc = "HOUSE_BUFFY_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c48dcf.png",
		imgDesc = "165e99472af.png",
		notCount = true,
		type = "BOSS",
	},
	elise = {
		name = "HOUSE_ELISE",
		desc = "HOUSE_ELISE_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c48dcf.png",
		imgDesc = "167d75ae1f6.png",
		notCount = true,
		type = "BOSS",
	},
	neighbor = {
		name = "HOUSE_NEIGHBOR",
		desc = "HOUSE_NEIGHBOR_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c5f1e4.png",
		imgDesc = "161a5f624a7.png",
		conflict = {"mess","stack"},
		public = true,
		rulecard = true,
		type = "PASSIVE",
	},
	mess = {
		name = "HOUSE_MESS",
		desc = "HOUSE_MESS_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5d1b7fa.png",
		imgDesc = "1627e2bbbf0.png",
		-- tracking
		conflict = {"noaction","stack","sequence","perfection","neighbor","clean","peace","death","gift","trade","carousel","chair","spy","rain","equality","imitate","meep","random","bomb","chess","rule","steal","web","thunder","clone","luck","box","wish","ink","confuse","portal","compass","batata","draw99","curse","magnet","tornado","theft","simon","ban","dice","paradox","half","oddeven","mimic","mix","justice","share","key","hell","bluegreen"},
		type = "PASSIVE",
	},
	limbo = {
		name = "HOUSE_LIMBO",
		desc = "HOUSE_LIMBO_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c57cab.png",
		imgDesc = "1627e2b98f1.png",
		conflict = {"overload"},
		rulecard = true,
		public = true,
		type = "PASSIVE",
	},
	batata = {
		name = "HOUSE_BATATA",
		desc = "HOUSE_BATATA_DESC",
		mission = "UNLOCK_RULE",
		img = "16168f66e7b.png",
		imgDesc = " 161ed70240c.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"}},
		rulecard = true,
		public = true,
		type = "CARD",
	},
	draw99 = {
		name = "HOUSE_PLUS99",
		desc = "HOUSE_PLUS99_DESC",
		mission = "BUY_RULE",
		img = "1627e34cb06.png",
		imgDesc = "1627e2b24a9.png",
		conflict = {"noaction","mess"},
		card = {color={"black"}},
		lock = "SHOP",
		notMess = true,
		type = "CARD",
	},
	curse = {
		name = "HOUSE_CURSE",
		desc = "HOUSE_CURSE_DESC",
		mission = "UNLOCK_RULE",
		img = " 16259816bc3.png",
		imgDesc = "1627e2b7736.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"}},
		rulecard = true,
		public = true,
		type = "CARD",
	},
	elisah = {
		name = "HOUSE_ELISAH",
		desc = "HOUSE_ELISAH_DESC",
		mission = "UNLOCK_RULE",
		img = "161a5c48dcf.png",
		imgDesc = "16313dbd30d.png",
		notCount = true,
		type = "BOSS",
	},
	magnet = {
		name = "HOUSE_MAGNET",
		desc = "HOUSE_MAGNET_DESC",
		mission = "UNLOCK_RULE",
		img = "1637fb76f93.png",
		imgDesc = "1637fc1e79e.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"}},
		rulecard = true,
		public = true,
		type = "CARD",
	},
	tornado = {
		name = "HOUSE_TORNADO",
		desc = "HOUSE_TORNADO_DESC",
		mission = "UNLOCK_RULE",
		img = "165c6a5676b.png",
		imgDesc = "165e994a99f.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"}},
		rulecard = true,
		public = true,
		type = "CARD",
	},
	theft = {
		name = "HOUSE_THEFT",
		desc = "HOUSE_THEFT_DESC",
		mission = "UNLOCK_RULE",
		img = "165ce55301e.png",
		imgDesc = "165e9948cc0.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"}},
		rulecard = true,
		public = true,
		type = "CARD",
	},
	simon = {
		name = "HOUSE_SIMON",
		desc = "HOUSE_SIMON_DESC",
		mission = "UNLOCK_RULE",
		img = "16627b2d4cf.png",
		imgDesc = "1662b8e5605.png",
		conflict = {"noaction","mess"},
		card = {color={"black"}},
		rulecard = true,
		public = true,
		type = "CARD",
	},
	ban = {
		name = "HOUSE_BAN",
		desc = "HOUSE_BAN_DESC",
		mission = "UNLOCK_RULE",
		img = "166657eae03.png",
		imgDesc = "166d0212faa.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"}},
		rulecard = true,
		public = true,
		type = "CARD",
	},
	
	dice = {
		name = "HOUSE_DICE",
		desc = "HOUSE_DICE_DESC",
		mission = "UNLOCK_RULE",
		img = "1678b6894e3.png",
		imgDesc = "1678b78e8cd.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"}},
		--rulecard = true,
		--public = true,
		lock = true,
		notMess = true,
		type = "CARD",
	},
	paradox = {
		name = "HOUSE_PARADOX",
		desc = "HOUSE_PARADOX_DESC",
		mission = "UNLOCK_RULE",
		img = "1678b683a06.png",
		imgDesc = "1678b790783.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"}},
		rulecard = true,
		public = true,
		type = "CARD",
	},
	half = {
		name = "HOUSE_HALF",
		desc = "HOUSE_HALF_DESC",
		mission = "UNLOCK_RULE",
		img = "1678b685756.png",
		imgDesc = "1678b7925a3.png",
		conflict = {"noaction","mess"},
		card = {color={"black"}},
		rulecard = true,
		public = true,
		type = "CARD",
	},
	oddeven = {
		name = "HOUSE_ODD_EVEN",
		desc = "HOUSE_ODD_EVEN_DESC",
		mission = "UNLOCK_RULE",
		img = "1678b68cd54.png",
		imgDesc = "1678b79416e.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"}},
		rulecard = true,
		public = true,
		notMess = true,
		type = "CARD",
	},
	mimic = {
		name = "HOUSE_MIMIC",
		desc = "HOUSE_MIMIC_DESC",
		mission = "UNLOCK_RULE",
		img = "1678b690414.png",
		imgDesc = "1678b795c3a.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"}},
		rulecard = true,
		public = true,
		type = "CARD",
	},
	justice = {
		name = "HOUSE_JUSTICE",
		desc = "HOUSE_JUSTICE_DESC",
		mission = "UNLOCK_RULE",
		img = "16793a1d160.png",
		imgDesc = "16793a1f409.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"}},
		rulecard = true,
		public = true,
		type = "CARD",
	},
	mix = {
		name = "HOUSE_MIX",
		desc = "HOUSE_MIX_DESC",
		mission = "UNLOCK_RULE",
		img = "1678b68e953.png",
		imgDesc = "1678b797f89.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"},name="mix1"},
		rulecard = true,
		public = true,
		type = "CARD",
	},
	bluegreen = {
		name = "HOUSE_BG",
		desc = "HOUSE_BG_DESC",
		mission = "UNLOCK_RULE",
		img = "1678b68b115.png",
		imgDesc = "1678b7df6d3.png",
		conflict = {"portal","mess"},
		rulecard = true,
		public = true,
		type = "PASSIVE",
	},
	dos = {
		name = "HOUSE_DOS",
		desc = "HOUSE_DOS_DESC",
		mission = "UNLOCK_RULE",
		img = "1678b6872bd.png",
		imgDesc = "1678b7e15be.png",
		conflict = {"camouflage"},
		--rulecard = true,
		--public = true,
		lock = true,
		type = "PASSIVE",
	},
	
	share = {
		name = "HOUSE_SHARE",
		desc = "HOUSE_SHARE_DESC",
		mission = "UNLOCK_RULE",
		img = "171653c5945.png",
		imgDesc = "171653cb1cc.png",
		conflict = {"noaction","mess"},
		card = {color={"yellow","green"}},
		rulecard = true,
		public = true,
		type = "CARD",
	},
	key = {
		name = "HOUSE_LOCK",
		desc = "HOUSE_LOCK_DESC",
		mission = "UNLOCK_RULE",
		img = "171653c35c5.png",
		imgDesc = "171653c7e04.png",
		conflict = {"noaction","mess"},
		card = {color={"red","blue","yellow","green"}},
		rulecard = true,
		public = true,
		type = "CARD",
	},
}


--[[ src/lights.lua ]]--

LIGHT = {
	yellow = {
		name = "",
		desc = "",
		author = "",
		img = "15b2bb46d9c.png",
	},
	green = {
		name = "",
		desc = "",
		author = "",
		img = "1729b79f378.png",
	},
	blue = {
		name = "",
		desc = "",
		author = "",
		img = "1729b789f27.png",
	},
	red = {
		name = "",
		desc = "",
		author = "",
		img = "1729b7acf10.png",
	},
	white = {
		name = "",
		desc = "",
		author = "",
		img = "1729b787cc8.png",
	},
}


--[[ src/card_tips.lua ]]--

-- tips for cards that don't have a rule that explain them
CARD = {
	skip = "CARD_SKIP",
	reverse = "CARD_REVERSE",
	draw2 = "CARD_DRAW_TWO",
	wild = "CARD_WILD",
	draw4 = "CARD_WILD_DRAW_FOUR",
	pawn = "CARD_PAWN",
	bishop = "CARD_BISHOP",
	knight = "CARD_KNIGHT",
	rook = "CARD_ROOK",
	queen = "CARD_QUEEN",
	king = "CARD_KING",
	chest = "CARD_TREASURE",
	down = "CARD_DOWN",
	left = "CARD_LEFT",
	right = "CARD_RIGHT",
	up = "CARD_UP",
	shield = "CARD_SHIELD",
	mix1 = "CARD_MIX1",
	mix2 = "CARD_MIX2",
	mix3 = "CARD_MIX3",
}


--[[ src/curses.lua ]]--

CURSE = {
	anvil = {
		img = "162598dff2b.png",
		desc = "CURSE_ANVIL",
		turns = 4,
	},
	ice = {
		img = "162598de0d7.png",
		desc = "CURSE_ICE",
		turns = 3,
	},
	shoe = {
		img = "162598dc59c.png",
		desc = "CURSE_SHOE",
		turns = 3,
	},
	thorn = {
		img = "162598d992f.png",
		desc = "CURSE_THORN",
		turns = 1,
	},
	time = {
		img = "162598d7b11.png",
		desc = "CURSE_TIME",
		turns = 4,
	},
	poison = {
		img = "162598d5ad2.png",
		desc = "CURSE_POISON",
		turns = 2,
	},
}


--[[ src/medals.lua ]]--

TROPHY = {
	none = {
		img = "15c74d9731d.png",
	},
	test = {
		img = "15c8a6d3d6a.png",
		lock = true,
	},
	beta = {
		img = "15ca1a94a30.png",
		lock = true,
	},
	drekkemaus = {
		img = "15ed4c7b562.png",
		lock = true,
	},
	noel = {
		img = "1600ef5f36a.png",
		lock = true,
	},
	charlotte = {
		img = "1614e61ad6e.png",
		lock = true,
	},
	elisah = {
		img = "1631789b13c.png",
		--lock = true,
	},
	buffy = {
		img = "1662c864cd1.png",
		lock = true,
	},
	snowy = {
		img = "167d3a64c76.png",
		lock = true,
	},
}


--[[ src/consumables.lua ]]--

POWERUP = {
	shiny = {
		name = "ITEM_SHINY",
		desc = "ITEM_SHINY_DESC",
		img = "161850c3256.png",
	},
	bot = {
		name = "ITEM_BOT",
		desc = "ITEM_BOT_DESC",
		img = "161850c4ec7.png",
	},
	uno = {
		name = "ITEM_AUTO_UNO",
		desc = "ITEM_AUTO_UNO_DESC",
		img = "161850c6cf0.png",
	},
	mallet = {
		name = "ITEM_MALLET",
		desc = "ITEM_MALLET_DESC",
		img = "161850c8be6.png",
	},
	lamp = {
		name = "ITEM_MAGIC_LAMP",
		desc = "ITEM_MAGIC_LAMP_DESC",
		img = "161850caaf4.png",
	},
	rematch = {
		name = "ITEM_REPLAY",
		desc = "ITEM_REPLAY_DESC",
		img = "161850cc9e0.png",
	},
}


--[[ src/panels.lua ]]--

FLAG = {
	default = {
		name = "FLAG_DEFAULT",
		mission = "SKIN_DEFAULT_MISSION",
		author = "???",
		img = {},
		imgDesc = "161d9c5e781.png",
	},
	picnic = {
		name = "FLAG_PICNIC",
		desc = "FLAG_PICNIC_DESC",
		mission = "RED_MISSION",
		progress = 300,
		author = "Ninguem#0095",
		img = {big="161b057e770.png", mini="161b07c87e4.png"},
		imgDesc = "161d9c5541e.png",
		func = "picnicFlag",
		color = "red",
		card = {"red","n0"},
		fontColor = "1DCED1",
	},
	metal = {
		name = "FLAG_CLOUD",
		desc = "FLAG_CLOUD_DESC",
		mission = "BLUE_MISSION",
		progress = 300,
		author = "Ninguem#0095",
		img = {big="161c91f06eb.png", mini="161c9228cd6.png"},
		imgDesc = "161d9c5aded.png",
		func = "cloudFlag",
		color = "blue",
		card = {"blue","n0"},
		fontColor = "9EBED3",
	},
	paper = {
		name = "FLAG_STAR",
		desc = "FLAG_STAR_DESC",
		mission = "YELLOW_MISSION",
		progress = 300,
		author = "Ninguem#0095",
		img = {big="161bb1cf66a.png", mini="161bb1d2c46.png"},
		imgDesc = "161d9c521ec.png",
		func = "starFlag",
		color = "yellow",
		card = {"yellow","n0"},
		fontColor = "FFE09E",
	},
	carpet  = {
		name = "FLAG_LEAF",
		desc = "FLAG_LEAF_DESC",
		mission = "GREEN_MISSION",
		progress = 300,
		author = "Ninguem#0095",
		img = {big="161b58d725e.png", mini="161b59530fb.png"},
		imgDesc = "161d9c57d62.png",
		func = "leafFlag",
		color = "green",
		card = {"green","n0"},
		fontColor = "BAFFBF",
	},
	disco  = {
		name = "FLAG_DISCO",
		desc = "FLAG_DISCO_DESC",
		mission = "WILD_MISSION",
		progress = 300,
		author = "Ninguem#0095",
		img = {big="1712d58e0d5.png", mini="1712d59031d.png"},
		imgDesc = "1712d59225f.png",
		func = "emptyFunc",
		fontColor = "BAFFBF",
	},
	cloud  = {
		name = "FLAG_CLOUD2",
		desc = "FLAG_CLOUD2_DESC",
		mission = "FLAG_CLOUD2_MISSION",
		progress = 50,
		author = "Ninguem#0095",
		img = {big="171233cfa11.png", mini="171246fb324.png"},
		imgDesc = "171233d5ff4.png",
		func = "emptyFunc",
		fontColor = "BAFFBF",
	},
	circuit  = {
		name = "FLAG_CIRCUIT",
		desc = "FLAG_CIRCUIT_DESC",
		mission = "FLAG_CIRCUIT_MISSION",
		author = "Ninguem#0095",
		img = {big="171233d82f2.png", mini="171246fdbff.png"},
		imgDesc = "171233dd4d1.png",
		func = "emptyFunc",
		fontColor = "BAFFBF",
	},
	circuitused  = {
		name = "FLAG_CIRCUIT",
		desc = "FLAG_CIRCUIT_DESC",
		mission = "FLAG_CIRCUIT_MISSION",
		author = "Ninguem#0095",
		img = {big="1729b690e01.png", mini="1729b68f009.png"},
		imgDesc = "171233dd4d1.png",
		func = "emptyFunc",
		fontColor = "BAFFBF",
	},
}


--[[ src/translate.lua ]]--

LANG = { --ENBRFRRUESCNPLHUTR
MENU ={"Menu","","","–ú–µ–Ω—é","Men√∫","ËèúÂñÆ","","Men√º","Men√º"},
INVENTORY ={"Inventory","Invent√°rio","Inventaire","–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å","Inventario","Áâ©ÂìÅÂ∫´","Inwentarz","Lelt√°r","Envanter"},
NEWS ={"News","Novidades","Nouveaut√©s","–ù–æ–≤–æ—Å—Ç–∏","Novedades","Êõ¥Êñ∞Âø´Â†±","Wiadomo≈õci","H√≠rek","Haberler"},
RULES ={"Main Rules","Regras Principais","R√®gles principales","–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞","Reglas","‰∏ªË¶ÅË¶èÂâá","G≈Ç√≥wne zasady","Alapszab√°lyok","Kurallar"},
HOUSE_RULES ={"House Rules","Regras da Casa","R√®gles de la maison","–î–æ–º–∞—à–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞","Reglas de la Casa","Ëá™Ë®ÇË¶èÁü©","Domowe zasady","H√°zszab√°lyok","Oda Kurallarƒ±"},
CHAIRS ={"Chairs","Cadeiras","Chaises","–ö—Ä–µ—Å–ª–∞","Sillas","Ê§ÖÂ≠ê","Krzes≈Ça","Sz√©kek","Koltuklar"},
POWERUPS ={"Powerups","Poderes","Bonus","–£–ª—É—á—à–µ–Ω–∏—è","Poderes","È°çÂ§ñÂäüËÉΩ","Dopalacze ","Feler≈ës√≠t√©sek","G√º√ßlendirici"},
PANELS ={"Panels","Pain√©is","Panneaux","–ü–∞–Ω–µ–ª–∏","Paneles","ÂêçÁ®±ÁâàÈù¢","Panele","Panelek","Paneller"},
LEADERBOARD ={"Leaderboard","Ranking","Classement","–õ–∏–¥–µ—Ä—ã","Ranking","ÊéíË°åÊ¶ú","Ranking","Ranglista","Skor Tablosu"},
SPOTLIGHTS ={"Spotlights","Holofotes","","","","","Reflektorf√©ny","Sahne ƒ±≈üƒ±klarƒ±"},
MAPS ={"Maps","Mapas","","","","","","P√°ly√°k","Haritalar"},
SETTINGS ={"Settings","Op√ß√µes","Param√®tres","–ù–∞—Å—Ç—Ä–æ–π–∫–∏","Ajustes","Ë®≠ÂÆö","Ustawienia","Be√°ll√≠t√°sok","Ayarlar"},
ITEMS ={"Items","Itens","Objets","–ü—Ä–µ–¥–º–µ—Ç—ã","Art√≠culos","Áâ©ÂìÅ","Przedmioty","T√°rgyak","E≈üyalar"},
PROFILE ={"Profile","Perfil","Profil","–ü—Ä–æ—Ñ–∏–ª—å","Perfil","ÂÄã‰∫∫Ë≥áÊñô","Profil","Profil","Profil"},
CLOSE ={"Close","Fechar","Fermer","–ó–∞–∫—Ä—ã—Ç—å","Cerrar","ÈóúÈñâ","Zamknij","Bez√°r√°s","Kapat"},
NEXT ={"Next","Pr√≥ximo","Suivant","–°–ª–µ–¥—É—é—â–∏–π","Siguiente","‰∏ã‰∏ÄÂÄã","Dalej","K√∂vetkez≈ë","ƒ∞leri"},
BACK ={"Back","Voltar","Retour","–ù–∞–∑–∞–¥","Volver","ËøîÂõû","Z powrotem","Vissza","Geri"},
PREVIOUS ={"Previous","Anterior","Pr√©c√©dent","–ü—Ä–µ–¥—ã–¥—É—â–∏–π","Anterior","‰∏ä‰∏ÄÂÄã","Wstecz","El≈ëz≈ë","√ñnceki"},
FAVORITES ={"Favorites","Favoritos","","","","","","Kedvencek","Favoriler"},
FAVORITES_ADD ={"Add to favorites","Adicionar aos favoritos","","","","","","Hozz√°ad√°s a kedvencekhez","Favorilere ekle"},
VICTORY ={"Victories","Vit√≥rias","Victoires","–ü–æ–±–µ–¥—ã","Victorias","ÂãùÂà©Ê¨°Êï∏","Zwyciƒôstwa","Gy≈ëzelmek","Galibiyetler"},
TEAM_VICTORY ={"Team victories","Vit√≥rias em dupla","Victoires de l'√©quipe","–ö–æ–º–∞–Ω–¥–Ω—ã–µ –ø–æ–±–µ–¥—ã","Victorias¬†en Equipo","ÂúòÈöäÂãùÂà©Ê¨°Êï∏","Zwyciƒôstwa dru≈ºynowe","Csapat gy≈ëzelmek","Takƒ±m Galibiyetleri"},
ROUND_PLAYED ={"Rounds played","Partidas jogadas","Tours jou√©s","–†–∞—É–Ω–¥–æ–≤ —Å—ã–≥—Ä–∞–Ω–æ","Rondas jugadas","Áé©ÈÅéÁöÑÂõûÂêàÊï∏","Zagrane rundy","J√°tszott k√∂r√∂k","Oynanƒ±lan Oyun"},
ROUND_WATCHED ={"Rounds watched","Partidas assistidas","Tours regard√©s","–†–∞—É–Ω–¥–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ","Rondas espectadas","ÊóÅËßÄÂ†¥Êï∏","Obejrzane rundy","Megfigyelt k√∂r√∂k","ƒ∞zlenilen oyun"},
CHAIRS_UNLOCKED ={"Chairs unlocked","Cadeiras desbloqueadas","Chaises d√©bloqu√©es","–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—Ä–µ—Å–ª–∞","Sillas desbloqueadas","Ëß£Èéñ‰∫ÜÁöÑÊ§ÖÂ≠êÊï∏Èáè","Odblokowane krzes≈Ça","Feloldott sz√©kek","A√ßƒ±lan Koltuklar"},
FAVORITE ={"Current chair","Cadeira atual","Chaise actuelle","–¢–µ–∫—É—â–µ–µ –∫—Ä–µ—Å–ª–æ","Silla actual","‰ΩøÁî®‰∏≠ÁöÑÊ§ÖÂ≠ê","Obecne krzes≈Ço","Aktu√°lis sz√©k","Kullanƒ±lan Koltuk"},
CHANGE ={"Change","Trocar","Changer","–°–º–µ–Ω–∏—Ç—å","Cambio","Êõ¥Êèõ","Zmie≈Ñ","V√°ltoztat","Deƒüi≈ütir"},
SET_COLORBLIND ={"Colorblind Mode (may cause lag)","Modo dalt√¥nico (pode causar lag)","Mode daltonien (peut causer des lags)","–†–µ–∂–∏–º –¥–∞–ª—å—Ç–æ–Ω–∏–∫–∞ (–º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É)","Modo Dalt√≥nico (Puede causar lag)","Ëâ≤Âº±ÂçîÂä©Ê®°Âºè (ÊúâÊ©üÊúÉÂ∞éËá¥Âª∂ÈÅ≤)","Tryb Kolorystyczny (mo≈ºe powodowaƒá lagi)","Sz√≠nvak M√≥d (laggot okozhat)","Renk K√∂r√º Modu (Lag yapabilir)"},
SET_BELL ={"Ring the bell when it's your turn (active Transformice sounds)","Tocar sino na sua vez (ative os sons do Transformice)","Sonnez la cloche quand c'est votre tour (active les sons de Transformice)","–ó–≤–µ–Ω–∏—Ç –∑–≤–æ–Ω–æ–∫ –∫–æ–≥–¥–∞ —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å (–∑–≤—É–∫–∏ Transformice)","Sonar la campana en turno (activar sonidos en Transformice)","ÂïüÁî®ÂõûÂêàÊèêÈÜíËÅ≤Èü≥ (ÂïüÁî® Transformice Èü≥Êïà)","D≈∫wiƒôk dzwonka w twojej turze (aktywuje d≈∫wiƒôki Transformice)","Sz√≥ljon harang, amikor te k√∂vetkezel (aktiv√°ld a Transformice hangjait)","Sƒ±ra sana geldiƒüinde √ßanƒ± etkinle≈ütir (Transformice seslerini aktif et)"},
SET_SHADOW ={"Card shadows (may cause lag)","Escurecimento das cartas (pode causar lag)","Ombres de cartes (peut causer des lags)","–ö–∞—Ä—Ç–∞ —Å —Ç–µ–Ω—è–º–∏ (–º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É)","Sombras de Carta (Pueden causar lag)","Âç°ÁâåÈô∞ÂΩ±ÊïàÊûú (ÊúâÊ©üÊúÉÂ∞éËá¥Âª∂ÈÅ≤)","Cienie kart (mo≈ºe powodowaƒá lagi)","K√°rtya √°rny√©kok (laggot okozhat)","Kart G√∂lgesi (Lag yapabilir)"},
SET_CHALLENGE ={"Ask for confirmation before challenging a +4 card","Confirmar ao desafiar +4","Demandez confirmation avant de d√©fier une carte +4","–°–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø—Ä–µ–∂–¥–µ —á–µ–º –±—Ä–æ—Å–∏—Ç–µ –∫–∞—Ä—Ç—É +4","Confirmar antes de cambiar +4","Âú®Ë≥™Áñë +4 Âç°ÁâåÁöÑÊôÇÂÄôÂΩàÂá∫Á¢∫Ë™çË¶ñÁ™ó","Potwierd≈∫ przed Wyzwaniem +4","K√©rjen meger≈ës√≠t√©st, miel≈ëtt a +4 k√°rty√°t kih√≠vja"," +4'e itiraz etmeden √∂nce onay isteyin"},
SET_COMMUNITY ={"Community","Comunidade","Communaut√©","–°–æ–æ–±—â–µ—Å—Ç–≤–æ","Comunidad","Á§æÂçÄ","Spo≈Çeczno≈õƒá","K√∂z√∂ss√©g","Topluluk"},
CREDITS ={"Credits","Cr√©ditos","Cr√©dits","–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å","Cr√©ditos","È≥¥Ë¨ù","Zas≈Çugi","K√∂sz√∂netnyilv√°n√≠t√°s","Bilgilendirme"},
CREDIT_TXT ={"This minigame was developed by Ninguem#0095. Suggestions, bugs, praise or a +4 can be sent via private message on Atelier 801's forum.","Este minigame foi desenvolvido pelo Ninguem#0095. Sugest√µes, bugs, elogios ou um +4 podem ser enviados por mensagem privada atrav√©s do f√≥rum da Atelier 801.","Ce mini-jeu a √©t√© d√©velopp√© par Ninguem#0095. Suggestions, bugs, √©loges ou une carte +4 peuvent √™tre envoy√©s par message priv√© sur le forum de l'Atelier 801.","–≠—Ç–∞ –º–∏–Ω–∏-–∏–≥—Ä–∞ –±—ã–ª–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ Ninguem#0095. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ—à–∏–±–∫–∏, –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∏–ª–∏ +4 –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞ —Ñ–æ—Ä—É–º–µ Atelier 801.","Este minijuego fue desarrollado por Ninguem#0095. Sugerencias, errores,¬†felicitaciones¬†o un +4 pueden ser enviados por mensaje privado a trav√©s del foro.","ÈÄôÂÄãÂ∞èÈÅäÊà≤ÊòØÁî± Ninguem#0095 Ââµ‰Ωú„ÄÇ Â¶ÇÊûúÊúâ‰ªª‰ΩïÂª∫Ë≠∞, ÁôºÁèæÊºèÊ¥û, ÊÉ≥Á®±ËÆöÊàñÊòØÊúâÂÅö‰∏çÂ•ΩÁöÑÂú∞Êñπ, ÂèØ‰ª•ÈÄèÈÅé Atelier 801 ÁöÑË´ñÂ£áÁôº‰ø°ÊÅØËÅØÁµ°„ÄÇ","Minigra zosta≈Ça zaprogramowana przez Ninguem#0095. Sugestie, b≈Çƒôdy, pochwa≈Çy lub +4 mo≈ºna wys≈Çaƒá przez prywatnƒÖ wiadomo≈õƒá na forum Atelier801.","Ezt a minij√°t√©kot Ninguem#0095 fejlesztette. Javaslatokat, hib√°kat, dics√©retet k√ºldhetsz priv√°t √ºzenetben az Atelier801 f√≥rum oldal√°n.","Bu mini oyun Ninguem#0095 tarafƒ±ndan geli≈ütirilmi≈ütir. √ñneriler, hatalar, √∂vg√º veya +4, Atelier 801'in forumundaki √∂zel mesajla g√∂nderilebilir."},
CREDIT_TXT2 ={"You can also support #unotfm by sending donations via PayPal (<a href='event:support'>click here</a>). Unfortunately I cannot offer rewards, but you will have my sincere thanks! Don't forget to write your nickname and tag so I know who you are.","Voc√™ tamb√©m pode apoiar o #unotfm enviando doa√ß√µes via PayPal (<a href='event:support'>clique aqui</a>). Infelizmente n√£o posso oferecer recompensas, mas voc√™ ter√° meus sinceros agradecimentos! N√£o esque√ßa de colocar seu nick com tag para eu saber quem voc√™ √©.","","","","‰Ω†‰πüÂèØ‰ª•ÈÄèÈÅé PayPal ‰æÜÊîØÊåÅ #unotfm (<a href='event:support'>ÈªûÈÄôË£°</a>). ÂèØÊÉúÊòØÊàë‰∏çËÉΩÁî®Êù±Ë•øÂõûÂ†±, ‰ΩÜÊàëÊúÉÁµ¶‰Ω†ÊúÄÁúüË™†ÁöÑË¨ùÊÑè! Âà•ÂøòË®òÂØ´‰∏ã‰Ω†ÁöÑÁé©ÂÆ∂ÂêçÁ®±ÂèäÁ∑®Ëôü‰ª•ËÆìÊàëÁü•ÈÅì‰Ω†Â§ßÊñπÊÖ∑ÊÖ®„ÄÇ","","T√°mogathatod a #unotfm-et PayPal adom√°nyoz√°son kereszt√ºl (<a href='event:support'>kattints ide</a>). Sajnos nem tudok √©rte jutalmat ny√∫jtani, de ≈ëszint√©n h√°l√°s leszek! Ne felejtsd el meg√≠rni a j√°t√©kosneved (az azonos√≠t√≥val egy√ºtt), hogy tudjam ki vagy.","PayPal aracƒ±lƒ±ƒüƒ±yla baƒüƒ±≈ü g√∂ndererek #unotfm'i de destekleyebilirsiniz (<a href='event:support'> burayƒ± tƒ±klayƒ±n </a>). Maalesef √∂d√ºller sunamƒ±yorum, ama i√ßten te≈üekk√ºrlerimi sunacaksƒ±n! Takma adƒ±nƒ±zƒ± ve etiketinizi yazmayƒ± unutmayƒ±n, b√∂ylece kim olduƒüunuzu biliyorum."},
THANKS ={"Thanks","Agradecimentos","Remerciements","–°–ø–∞—Å–∏–±–æ","Agradecimientos","ÊÑüË¨ù","Podziƒôkowania","K√∂sz√∂net","Te≈üekk√ºrler"},
THANKS_TRANSLATE ={"translate to %s","tradu√ß√£o para %s","traduction en %s","–ø–µ—Ä–µ–≤—ë–ª –Ω–∞ %s","traducido¬†por¬†%s","%s ÁøªË≠Ø","przet≈Çumaczenie na %s","ford√≠t√°s %s r√©gi√≥ra","√ßeviri yapanlara"},
THANKS_CARDS ={"cards design","design das cartas","apparence des cartes","–¥–∏–∑–∞–π–Ω –∫–∞—Ä—Ç","dise√±o de cartas","Âç°ÁâåË®≠Ë®à","projektowanie kart","k√°rty√°k tervez√©se","kartlarƒ±n tasarƒ±mƒ±"},
THANKS_POPUPS ={"pop-up design","design das pop-ups","apparence des fen√™tes","–¥–∏–∑–∞–π–Ω","dise√±o de pop-ups","ÂΩàÂá∫ÂãïÁï´Ë®≠Ë®à","zaprojektowanie okien","felugr√≥ √ºzenetek tervez√©se","pop-up tasarƒ±mƒ±"},
THANKS_MAPS ={"creating maps","cria√ß√£o de mapas","cr√©ation de cartes","—Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç","creaci√≥n de mapas","Âú∞ÂúñË£Ω‰Ωú","tworzenie map","p√°ly√°k k√©sz√≠t√©se","haritayƒ± tasarlayanlara"},
THANKS_CHAIRS ={"chair design","design de cadeiras","apparence des chaises","–¥–∏–∑–∞–π–Ω –∫—Ä–µ—Å–µ–ª","dise√±o de sillas","Ê§ÖÂ≠êË®≠Ë®à","zaprojektowanie krzese≈Ç","sz√©kek tervez√©se","koltuklarƒ± tasarlayanlara"},
WARN_AUTOSTART ={"Type !start to start the game manually.","Digite !start para iniciar o jogo manualmente.","Tapez !start pour d√©marrer manuellement le jeu.","–ù–∞–ø–∏—à–∏—Ç–µ !start, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É –≤—Ä—É—á–Ω—É—é.","Escribe !start para iniciar el juego manualmente.","Ëº∏ÂÖ• !start ÈñãÂßãÈÅäÊà≤","Typ !start do rozpoczƒôcia gry manualnie.","√çrd be a !start parancsot a j√°t√©k manu√°lis ind√≠t√°s√°hoz.","Oyunu manuel olarak ba≈ülatmak i√ßin !start yazƒ±n."},
START_TIP ={"Press space or duck to have a seat.","Pressione espa√ßo ou abaixe-se para pegar uma cadeira.","Appuyez sur espace ou baissez-vous pour vous asseoir.","–ù–∞–∂–º–∏—Ç–µ –ø—Ä–æ–±–µ–ª –∏–ª–∏ —Å—Ç—Ä–µ–ª–∫—É –≤–Ω–∏–∑, —á—Ç–æ–±—ã —Å–µ—Å—Ç—å.","Presiona espacio o b√°jate para tener una silla.","Ëπ≤‰∏ãÊàñÊåâÁ©∫Ê†ºÈçµ‰æÜÂä†ÂÖ•ÈÅäÊà≤‰ΩçÁΩÆ","Kliknij spacjƒô lub kucnij aby zajƒÖƒá fotel.","Nyomd meg a sz√≥k√∂zt vagy a lefele gombot, hogy le√ºlj.","Oturmak i√ßin bo≈üluk veya eƒüilme tu≈üuna basƒ±n."},
SPACE ={"space","espa√ßo","espace","–ø—Ä–æ–±–µ–ª","Espacio","Á©∫Ê†ºÈçµ","spacja","sz√≥k√∂z","space"},
PASS ={"Pass turn","Passar a vez","Passer le tour","–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å","Pasar turno","ÁµêÊùüÂõûÂêà","Przeczekaj rundƒô.","K√∂r √Åtad√°sa","Sƒ±ranƒ± atla"},
CHALLENGE ={"Challenge","Desafiar","D√©fi","–í—ã–∑–æ–≤","Desafiar","Ë≥™Áñë","Wyzwij","Kih√≠v√°s","ƒ∞tiraz"},
DRAW ={"Draw","Comprar","Tirer","–í–∑—è—Ç—å","Tomar","ÊäΩÂèñÂç°Áâå","WyciƒÖgnij","H√∫z√°s","Kart √ßek"},
CHANGE_HAND ={"Change cards","Trocar cartas","Changer les cartes","–°–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—ã","Cambiar Cartas","Êõ¥ÊèõÂç°Áâå","Zmiana kart","K√°rty√°k kicser√©l√©se","Deƒüi≈ütir"},
CHAIR_ALLERT ={"Back to your chair!","Volte para sua cadeira!","Retournez a votre chaise!","–í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Å–≤–æ–µ–º—É –∫—Ä–µ—Å–ª—É!","¬°Vuelve a tu silla!","ËøîÂõû‰Ω†ÁöÑÂ∫ß‰Ωç!","Wr√≥ƒá na sw√≥j fotel!","Menj vissza a sz√©kedhez!","Sandalyenize geri d√∂n√ºn!"},
PROCESSING ={"Processing...","Processando...","","","","","","Processing...","ƒ∞≈üleniyor..."},
PLAYER_WON ={"%s won the game!","%s venceu o jogo!","%s a gagn√© la partie!","%s –≤—ã–∏–≥—Ä–∞–ª –∏–≥—Ä—É!","¬°%s gana el juego!","%s ÂãùÂá∫‰∫ÜÈÅäÊà≤!","%s wygra≈Ç grƒô!","%s megnyerte a j√°t√©kot!","%s oyunu kazandƒ±!"},
PLAYER_LOST ={"Everyone lost!","Todos perderam!","Tout le monde a perdu!","–í—Å–µ –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!","¬°Todos han perdido!","ÊâÄÊúâ‰∫∫ÈÉΩËº∏‰∫Ü!","Wszyscy zgubieni!","Mindenki vesz√≠tett!","Herkes kaybetti!"},
TEAM_WON ={"%s and %s won!","%s e %s venceram!","%s et %s ont gagn√©!","%s –∏ %s –≤—ã–∏–≥—Ä–∞–ª–∏!","¬°%s y %s han ganado!","%s Âíå %s ÂãùÂá∫‰∫Ü!","%s i %s wygrali!","%s √©s %s nyert!","%s ve %s kazandƒ±!"},
PLAYER_TIED ={"Tie!","Empate!","√âgalit√©!","–ü—Ä–∏–≤—è–∑–∞–Ω!","¬°C√≥rbata!","ÂíåÂ±Ä!","Remis!","D√∂ntetlen!","Kravat!"},
TEAM_SHOW_CARD ={"Click on a card to show it to your partner.","Clique em uma carta para mostr√°-la ao seu parceiro!","Cliquez sur une carte pour la montrer √† votre co√©quipier.","–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –µ—ë —Å–≤–æ–µ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É.","Clic en una carta para mostr√°rsela a tu compa√±ero.","ÈªûÊìäÂç°Áâå‰æÜÂêëÈöäÂèãÂ±ïÁ§∫ÂÆÉ„ÄÇ","Kliknij na kartƒô, aby pokazaƒá jƒÖ swojemu partnerowi.","Kattints egy k√°rty√°ra, hogy megmutasd a partnerednek.","Partnerinize g√∂stermek i√ßin bir karta tƒ±klayƒ±n."},
TEAM_DESCRIPTION ={"This is your partner. Work as a team to win this match.","Este √© o seu parceiro. Trabalhe em equipe para vencer esta partida.","C'est votre co√©quipier. Jouez ensemble pour gagner cette partie.","–≠—Ç–æ —Ç–≤–æ–π –ø–∞—Ä—Ç–Ω—ë—Ä. –†–∞–±–æ—Ç–∞–π—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ, —á—Ç–æ–±—ã –≤—ã–∏–≥—Ä–∞—Ç—å.","√âste es tu compa√±ero. Trabajen en equipo para ganar esta partida.","‰ªñÊòØ‰Ω†ÁöÑÈöäÂèã„ÄÇ‰ª•ÂúòÈöäÂΩ¢ÂºèË¥èÂæóÈÄôÂõûÂêàÂêß!","To jest tw√≥j partner. Pracujcie jako dru≈ºyna, aby wygraƒá rundƒô.","Ez a partnered. Dolgozzatok csapatban, hogy megnyerj√©tek a m√©rk≈ëz√©st.","Bu partneriniz. Bu ma√ßƒ± kazanmak i√ßin takƒ±m olarak √ßalƒ±≈üƒ±n."},
CHALENGE_COLOR ={"Do you think %s has a card with this color?","Voc√™ acha que %s tem uma carta dessa cor?","","","","","","","Sizce %s bu renkte bir karta sahip mi?"},
KILL_PAWN ={"Killed the Pawn!","Matou o Pe√£o!","Pion tu√©!","–ü–µ—à–∫–∞ —É–±–∏—Ç–∞!","¬°Mat√≥ al Pe√≥n!","Â£´ÂÖµË¢´ÊÆ∫Êéâ‰∫Ü!","Zabito Pionka!","A Gyalog elesett!","Piyonu √∂ld√ºrd√º!"},
KILL_BISHOP ={"Killed the Bishop!","Matou o Bispo!","Fou tu√©!","–û—Ñ–∏—Ü–µ—Ä —É–±–∏—Ç!","¬°Mat√≥ al Obispo!","‰∏ªÊïôË¢´ÊÆ∫Êéâ‰∫Ü!","Zabito Go≈Ñca!","A Fut√≥ elesett!","Piskopos √∂ld√ºrd√º!"},
KILL_KNIGHT ={"Killed the Knight!","Matou o Cavalo!","Chevalier tu√©!","–ö–æ–Ω—å —É–±–∏—Ç!","¬°Mat√≥ al Caballero!","È®éÂ£´Ë¢´ÊÆ∫Êéâ‰∫Ü!","Zabito Skoczka!","A Lovag elesett!","≈û√∂valyeyi √ñld√ºrd√º!"},
KILL_ROOK ={"Killed the Rook!","Matou a Torre!","Tour tu√©e!","–õ–∞–¥—å—è —É–±–∏—Ç–∞!","¬°Mat√≥ a la Torre!","ÂüéÂ†°Ë¢´ÊÆ∫Êéâ‰∫Ü!","Zabito Wie≈ºƒô!","A B√°stya elesett!","Kaleyi √ñld√ºrd√º!"},
KILL_QUEEN ={"Killed the Queen!","Matou a Rainha!","Reine tu√©e!","–ö–æ—Ä–æ–ª–µ–≤–∞ —É–±–∏—Ç–∞!","¬°Mat√≥ a la Reina!","ÁéãÂêéË¢´ÊÆ∫Êéâ‰∫Ü!","Zabito Kr√≥lowƒÖ!","A Kir√°lyn≈ë elesett!","Krali√ßeyi √∂ld√ºrd√º!"},
KILL_KING ={"Killed the King!","Matou o Rei!","Roi tu√©!","–ö–æ—Ä–æ–ª—å —É–±–∏—Ç!","¬°Mat√≥ al Rey!","ÂúãÁéãË¢´ÊÆ∫Êéâ‰∫Ü!","Zabito Kr√≥la!","A Kir√°ly elesett!","Kralƒ± √∂ld√ºrd√º!"},
MISSION_DESC ={"You receive a new quest every day. You can accumulate up to 3 quests.","Voc√™ recebe uma nova miss√£o por dia. √â poss√≠vel acumular at√© 3 miss√µes.","","","","","","","Her g√ºn yeni bir g√∂rev alƒ±rsƒ±nƒ±z. En fazla 3 g√∂rev toplayabilirsiniz."},
MISSION_CHANGE ={"Change","Trocar","","","","","","","Deƒüi≈üiklik"},
MISSION_NEW ={"New quest in %s.","Nova miss√£o em %s.","","","","","","","%s i√ßinde yeni g√∂rev."},
MISSION ={"Quests","Miss√µes","","","","","","","G√∂revler"},
COMPLETED_RED ={"You have completed the quest '%s' and got %s red tickets!","Voc√™ completou a miss√£o '%s' e recebeu %s tickets vermelhos!","","","","","","","%s' g√∂revini tamamladƒ±nƒ±z ve %s kƒ±rmƒ±zƒ± bilet aldƒ±nƒ±z!"},
COMPLETED_BLUE ={"You have completed the quest '%s' and got %s blue tickets!","Voc√™ completou a miss√£o '%s' e recebeu %s tickets azuis!","","","","","","","%s' g√∂revini tamamladƒ±nƒ±z ve %s mavi bilet aldƒ±nƒ±z!"},
COMPLETED_YELLOW ={"You have completed the quest '%s' and got %s yellow tickets!","Voc√™ completou a miss√£o '%s' e recebeu %s tickets amarelos!","","","","","","","%s' g√∂revini tamamladƒ±nƒ±z ve %s sarƒ± bilet aldƒ±nƒ±z!"},
COMPLETED_GREEN ={"You have completed the quest '%s' and got %s green tickets!","Voc√™ completou a miss√£o '%s' e recebeu %s tickets verdes!","","","","","","","%s' g√∂revini tamamladƒ±nƒ±z ve %s ye≈üil bilet aldƒ±nƒ±z!"},
MISSION1 ={"All Reds","Tudo Vermelho","","","","","","","T√ºm Kƒ±rmƒ±zƒ±lar"},
MISSION1_DESC ={"Play %s red cards.","Jogue %s cartas vermelhas.","","","","","","","%s  kƒ±rmƒ±zƒ± kartƒ± oynayƒ±n."},
MISSION2 ={"All Blues","Tudo Azul","","","","","","","T√ºm Maviler"},
MISSION2_DESC ={"Play %s blue cards.","Jogue %s cartas azuis.","","","","","","","%s mavi kartlarƒ± oynayƒ±n."},
MISSION3 ={"All Yellows","Tudo Amarelo","","","","","","","T√ºm Sarƒ±lar"},
MISSION3_DESC ={"Play %s yellow cards.","Jogue %s cartas amarelas.","","","","","","","%s sarƒ± kart oynayƒ±n."},
MISSION4 ={"All Greens","Tudo Verde","","","","","","","T√ºm Ye≈üiller"},
MISSION4_DESC ={"Play %s green cards.","Jogue %s cartas verdes.","","","","","","","%s ye≈üil kart oynayƒ±n."},
MISSION5 ={"Draw, friend, draw!","Compre, amigo. Compre!","","","","","","","√áek, arkada≈ü, √ßek!"},
MISSION5_DESC ={"Play %s +2 cards.","Jogue %s cartas +2.","","","","","","","%s +2 kart oynayƒ±n."},
MISSION6 ={"Turning the Game","Vai e Vem.","","","","","","","Oyun d√∂n√ºyor"},
MISSION6_DESC ={"Play %s Reverse cards.","Jogue %s cartas Reverter.","","","","","","","%s Ters kartlarƒ± oynat."},
MISSION7 ={"Blocker","Bloqueador","","","","","","","Engelleyici"},
MISSION7_DESC ={"Play %s Skip cards.","Jogue %s cartas Pular.","","","","","","","%s Kartlarƒ± atla."},
MISSION8 ={"In Search of Zeros","Em Busca dos Zeros","","","","","","","Sƒ±fƒ±rlar Arayƒ±≈üƒ±"},
MISSION8_DESC ={"Play %s zero cards.","Jogue %s cartas 0.","","","","","","","%s sƒ±fƒ±r kart oynayƒ±n."},
MISSION9 ={"Persistence","Persist√™ncia","","","","","","","S√ºreklilik"},
MISSION9_DESC ={"Play %s rounds.","Jogue %s partidas.","","","","","","","%s tur oynayƒ±n."},
MISSION10 ={"Victorious","Vitorioso","","","","","","","Ba≈üarƒ±lƒ±"},
MISSION10_DESC ={"Win %s rounds.","Ven√ßa %s partidas.","","","","","","","%s tur kazanƒ±n."},
MISSION11 ={"UNO!","","","","","","","",""},
MISSION11_DESC ={"Say UNO %s times.","Diga UNO %s vezes.","","","","","","","%s kere UNO de."},
MISSION12 ={"Supply","Abastecimento","","","","","","","Tedarik"},
MISSION12_DESC ={"Draw %s cards (without intentional drawing).","Compre %s cartas (sem compras propositais).","","","","","","","%s kartlarƒ± √ßiz (kasƒ±tlƒ± √ßizim olmadan)."},
MISSION13 ={"Passing","Passando","","","","","","","Ge√ßen"},
MISSION13_DESC ={"Block +2 or +4 %s times.","Bloqueie +2 ou +4 %s vezes.","","","","","","","%s kez +2 veya +4 ile engelle."},
MISSION14 ={"Team Win","Vit√≥ria em Dupla","","","","","","","Takƒ±m Galibiyeti"},
MISSION14_DESC ={"Win a Team Match round.","Ven√ßa uma Partida em Duplas.","","","","","","","Bir Takƒ±m Ma√ßƒ± turu kazanƒ±n."},
MISSION15 ={"Red Win","Vit√≥ria Vermelha","","","","","","","Kƒ±rmƒ±zƒ± Zafer"},
MISSION15_DESC ={"Win a round using a red card.","Ven√ßa uma partida usando uma carta vermelha.","","","","","","","Kƒ±rmƒ±zƒ± kart kullanarak bir tur kazanƒ±n."},
MISSION16 ={"Blue Win","Vit√≥ria Azul","","","","","","","Mavi Zafer"},
MISSION16_DESC ={"Win a round using a blue card.","Ven√ßa uma partida usando uma carta azul.","","","","","","","Mavi kart kullanarak bir tur kazanƒ±n."},
MISSION17 ={"Yellow Win","Vit√≥ria Amarela","","","","","","","Sarƒ± Zafer"},
MISSION17_DESC ={"Win a round using a yellow card.","Ven√ßa uma partida usando uma carta amarela.","","","","","","","Sarƒ± kart kullanarak bir tur kazanƒ±n."},
MISSION18 ={"Green Win","Vit√≥ria Verde","","","","","","","Ye≈üil Zafer"},
MISSION18_DESC ={"Win a round using a green card.","Ven√ßa uma partida usando uma carta verde.","","","","","","","Sarƒ± kart kullanarak bir tur kazanƒ±n."},
MISSION19 ={"Attentive Player","Jogador Atento","","","","","","","√ñzenli Oyuncu"},
MISSION19_DESC ={"Win a round without the timer appearing during your turn.","Ven√ßa uma partida sem deixar o cron√¥metro aparecer na sua vez.","","","","","","","Sƒ±ranƒ±z sƒ±rasƒ±nda zamanlayƒ±cƒ± g√∂r√ºnmeden bir tur kazanƒ±n."},
MISSION20 ={"Chaotic Win","Vit√≥ria Ca√≥tica","","","","","","","Kaotik Zafer"},
MISSION20_DESC ={"Win a round with the Mess rule.","Ven√ßa uma partida com a regra Bagun√ßa.","","","","","","","Karmakarƒ±≈üƒ±k kuralƒ± ile bir tur kazanƒ±n."},
MISSION21 ={"Double Trouble!","Encrenca em Dobro!","","","","","","","√áifte Bela!"},
MISSION21_DESC ={"Play %s Team Match rounds.","Jogue %s Partidas em Duplas.","","","","","","","%s kez Takƒ±m ma√ßƒ± turu oynayƒ±n."},
MISSION22 ={"Chaos is Fun!","Caos √© Divertido!","","","","","","","Kaos Eƒülencelidir!"},
MISSION22_DESC ={"Play %s rounds with the Mess rule.","Jogue %s partidas com a regra Bagun√ßa.","","","","","","","Karmakarƒ±≈üƒ±k kuralƒ±yla %s tur oynayƒ±n."},
MISSION23 ={"Action Win","Vit√≥ria com A√ß√£o","","","","","","","Aksyon Zafer"},
MISSION23_DESC ={"Win a round using action card.","Ven√ßa com uma carta de a√ß√£o.","","","","","","","Aksiyon kartƒ±nƒ± kullanarak bir tur kazanƒ±n."},
MISSION24 ={"Together is More Fun","Juntos √© Mais Divertido","","","","","","","Birlikte Daha Eƒülenceli"},
MISSION24_DESC ={"Play a round with your soulmate.","Jogue uma partida com sua alma-g√™mea.","","","","","","","Ruh e≈üinizle bir tur oynayƒ±n."},
MISSION25 ={"Ace in the Hole","Carta na Manga","","","","","","","Son Koz"},
MISSION25_DESC ={"Win a round using a Wild card.","Ven√ßa uma partida usando uma carta curinga.","","","","","","","Renk kartƒ± kullanarak bir tur kazanƒ±n."},
CONSUMABLES ={"Consumables","Consum√≠veis","","","","","","","T√ºketim maddeleri"},
USE ={"Use","Usar","","","","","","","Kullan"},
ACTIVATE ={"Enable","Ativar","","","","","","","Etkinle≈ütirme"},
DEACTIVATE ={"Disable","Desativar","","","","","","","Devre Dƒ±≈üƒ±"},
PUT_RULE ={"Put this rule in the next round","Colocar regra na pr√≥xima partida","","","","","","","Bu kuralƒ± bir sonraki tura koy"},
CANCEL ={"Cancel","Cancelar","","","","","","","ƒ∞ptal etmek"},
ITEM_BOT ={"Auto Play","Jogada Autom√°tica","","","","","","","Otomatik oynatma"},
ITEM_BOT_DESC ={"Play for you when your time is up. Spend 1 unit per use.","Joga por voc√™ quando seu tempo acabar. Gasta 1 unidade por uso.","","","","","","","Zamanƒ±n dolduƒüunda senin i√ßin oyna. Her kullanƒ±m i√ßin 1 birim harcayƒ±n."},
ITEM_UNO ={"Auto UNO","UNO Autom√°tico","","","","","","","Otomatik UNO"},
ITEM_UNO_DESC ={"Say UNO for you in case you forget. Spend 1 unit per use.","Fala UNO por voc√™ caso voc√™ esque√ßa. Gasta 1 unidade por uso.","","","","","","","Unutmanƒ±z durumunda Kullanƒ±m ba≈üƒ±na 1 birim harcayarak sizin i√ßin UNO der."},
ITEM_LIGHT ={"Highlight Cards","Destacar Cartas","","","","","","","Vurgu Kartlarƒ±"},
ITEM_LIGHT_DESC ={"Highlights your playable cards. Spend 1 unit per match.","Destaca as suas cartas jog√°veis. Gasta 1 unidade por partida.","","","","","",""," Ma√ß ba≈üƒ±na 1 birim harcayarak oynanabilir kartlarƒ±nƒ±zƒ± vurgular."},
ITEM_RULE ={"Magic Lamp","L√¢mpada M√°gica","","","","","","","Sihirli Lamba"},
ITEM_RULE_DESC ={"Choose a rule to appear in your next match.","Escolha uma regra para aparecer na sua pr√≥xima partida.","","","","","","","Bir sonraki ma√ßƒ±nƒ±zda g√∂r√ºnecek bir kural se√ßin."},
ITEM_RESERVE ={"Reserve Seat","Reservar Lugar","","","","","","","Yedek Koltuk"},
ITEM_RESERVE_DESC ={"Reserve your seat for the next match.","Reserve seu lugar para a pr√≥xima partida.","","","","","","","Bir sonraki ma√ß i√ßin yerinizi ayƒ±rtƒ±n."},
ITEM_TIME ={"Time Hammer","Marreta do Tempo","","","","","","","Zaman √áeki√ß"},
ITEM_TIME_DESC ={"Stay immune to the hourglass for 1 hour.","Fique livre da ampulheta durante 1 hora.","","","","","","","Kum saatine kar≈üƒ± 1 saat boyunca baƒüƒ±≈üƒ±k kalƒ±n."},
FLAG_DEFAULT ={"None","Nenhum","Aucun","–ù–∏–∫—Ç–æ","Ninguna","‰ªÄÈ∫ºÈÉΩÊ≤íÊúâ~","Nic","Nincs","Yok"},
FLAG_PICNIC ={"Pic-nic","Piquenique","Pique-nique","–ü–∏–∫–Ω–∏–∫","","Èáé-È§ê","Piknik","Piknik","Piknik"},
FLAG_PICNIC_DESC ={"When playing a red 0, donate a duplicate card to a player.","Ao jogar um 0 vermelho, doe uma carta repetida para um jogador.","En jouant un 0 rouge, vous donnez une carte en double √† un joueur.","–ò–≥—Ä–∞—è –∫—Ä–∞—Å–Ω–æ–π 0, –ø–æ–¥–∞—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫—É –¥—É–±–ª–∏–∫–∞—Ç –∫–∞—Ä—Ç—ã.","Cuando juegues una roja¬†0, d√≥nale una carta duplicada a alg√∫n jugador.","Áï∂‰Ω†ÁôºÂá∫Á¥ÖËâ≤ 0 ËôüÁâå, ÂèØ‰ª•Êää‰∏ÄÂºµË§áË£ΩÂç°Áµ¶‰∫à‰∏ÄÂÄãÁé©ÂÆ∂„ÄÇ","Kiedy zagrasz czerwonym 0, podaruj graczowi duplikat karty.","Amikor piros 0-t j√°tszol, egy m√°solat k√°rty√°t adom√°nyoz egy j√°t√©kosnak.","Kƒ±rmƒ±zƒ± renk bir 0 yazan kart oynarken, bir oyuncuya √ßift kart baƒüƒ±≈ülanƒ±r."},
FLAG_CLOUD ={"Metal","","M√©tal","–ú–µ—Ç–∞–ª","","ÈáçÈáëÂ±¨","","F√©m",""},
FLAG_CLOUD_DESC ={"When playing a blue 0, a random player draws 1 to 2 cards.","Ao jogar um 0 azul, um jogador aleat√≥rio compra de 1 a 2 cartas.","En jouant un 0 bleu, un joueur al√©atoire tire de 1 √† 2 cartes.","–ò–≥—Ä–∞—è —Å–∏–Ω–µ–π 0, —Å–ª—É—á–∞–π–Ω—ã–π –∏–≥—Ä–æ–∫ –±–µ—Ä—ë—Ç 1-2 –∫–∞—Ä—Ç—ã.","Cuando juegues una azul¬†0,¬†un jugador aleatorio sortear√° de¬†1¬†a 2 cartas.","Áï∂‰Ω†ÁôºÂá∫ËóçËâ≤ 0 ËôüÁâå, Èö®Ê©ü‰∏ÄÂÄãÁé©ÂÆ∂ÁΩ∞ÊäΩ 1 Âà∞ 2 ÂºµÂç°Áâå„ÄÇ","Kiedy zagrasz niebieskim 0, losowy gracz dobierze od 1 do 2 kart.","Amikor k√©k 0-t j√°tszol, egy v√©letlenszer≈± j√°t√©kos 1-2 k√°rty√°t h√∫z.","Mavi renk bir 0 yazan kart oynarken, rastgele bir oyuncu 1 ila 2 kart √ßeker."},
FLAG_STAR ={"Paper","Papel","Papier","–ë—É–º–∞–≥–∞","Cuando juegues una amarilla 0, usa una carta comod√≠n.","ÂÆ£Á¥ô","Papier","Pap√≠r","Kaƒüƒ±t"},
FLAG_STAR_DESC ={"When playing a yellow 0, add a Wild card to your hand.","Ao jogar um 0 amarelo, adicione uma carta curinga √† sua m√£o.","En jouant un 0 bleu, une carte noire s'ajoute √† votre jeu.","–ò–≥—Ä–∞—è –∂—ë–ª—Ç–æ–π 0, –¥–æ–±–∞–≤—å—Ç–µ –≤ —Å–≤–æ—é —Ä—É–∫—É —á—ë—Ä–Ω—É—é –∫–∞—Ä—Ç—É.","Tapiz","Áï∂‰Ω†ÁôºÂá∫ÈªÉËâ≤ 0 ËôüÁâå,  Â∞áÊúÉÂ¢ûÂä†‰∏ÄÂºµ ÊèõËâ≤Âç°Áâå Âà∞‰Ω†ÊåÅÊúâÁöÑÂç°Áâå‰∏≠„ÄÇ","Kiedy zagrasz ≈º√≥≈Çtym 0, otrzymasz kartƒô Wild do twojej rƒôki.","Amikor s√°rga 0-t j√°tszol, egy Sz√≠nv√°laszt√≥ k√°rty√°t ad hozz√° a kezedhez.","Sarƒ± renk bir 0 yazan kart oynarken, elinize bir Renk kartƒ± eklenir."},
FLAG_LEAF ={"Carpet","Tapete","Tapis","–ö–æ–≤–µ—Ä","Cuando juegues una verde 0, descarta una carta num√©rica y sortea una carta para reiniciar.","ËçâÂú∞ÊØØ","Dywan","Sz≈ënyeg","Halƒ±"},
FLAG_LEAF_DESC ={"When playing a green 0, discard a numerical card and draw 1 card to reset.","Ao jogar um 0 verde, descarte um n√∫mero e compre 1 carta para repor.","Lorsque vous jouez un 0 vert, vous d√©faussez une carte num√©rique et tirez une carte pour la r√©initialiser.","–ò–≥—Ä–∞—è –∑–µ–ª—ë–Ω–æ–π 0, –≤—ã–±—Ä–æ—Å—å—Ç–µ —Ü–∏—Ñ—Ä–æ–≤—É—é –∫–∞—Ä—Ç—É –∏ –≤–æ–∑—å–º–∏—Ç–µ 1 –∫–∞—Ä—Ç—É –¥–ª—è —Å–±—Ä–æ—Å–∞.","Disco","Áï∂‰Ω†ÁôºÂá∫Á∂†Ëâ≤ 0 ËôüÁâå, ÂèØ‰ª•‰∏üÊ£Ñ‰∏ÄÂºµÊï∏Â≠óÂç°‰∏¶ÊäΩÂèñÂè¶‰∏ÄÂºµÂç°‰ª£Êõø„ÄÇ","Kiedy zagrasz zielonym 0, odrzuƒá kartƒô z numerem  i dobierz jednƒÖ kartƒô by zresetowaƒá.","Amikor z√∂ld 0-t j√°tszol, dobj el egy sz√°mk√°rty√°t, majd h√∫zz 1 √∫jat.","Ye≈üil renk bir 0 yazan kart oynarken, sayƒ±sal bir kartƒ± atƒ±n ve sƒ±fƒ±rlamak i√ßin 1 kart √ßekin."},
FLAG_DISCO ={"Disco","Discoteca","","–î–∏—Å–∫–æ","","Ëø™ÊñØÂèØ","Dyskoteka","Diszk√≥","Disko"},
FLAG_DISCO_DESC ={"When an opponent plays a Wild card, your zeros have a 25% chance of becoming the color chosen by them.","Quando um advers√°rio jogar um curinga, seus zeros tem 25% de chance de ficarem da cor escolhida por ele.","","","","Áï∂Â∞çÊâãÁôºÂá∫ÊèõËâ≤Âç°Áâå, ‰Ω†Êâã‰∏≠ÁöÑ0ËôüÂç°ÁâåÊúâ25%Ê©üÊúÉËÆäÊàêÂ∞çÊâãÈÅ∏ÊìáÁöÑÈ°èËâ≤„ÄÇ","","Amikor egy ellenfeled Sz√≠nv√°laszt√≥ k√°rty√°t j√°tszik, a null√°idnak 25% es√©lye van arra, hogy az √°ltaluk v√°lasztott sz√≠nre v√°ltozzanak.","Bir rakip Renk kartƒ± oynadƒ±ƒüƒ±nda, sƒ±fƒ±rlarƒ±nƒ±zƒ±n %25'i tarafƒ±ndan se√ßilen renk olma ≈üansƒ± vardƒ±r."},
FLAG_CLOUD2 ={"Cloud","Nuvem","","","","ÁôΩÈõ≤","","Felh≈ë","Bulut"},
FLAG_CLOUD2_DESC ={"Begin the game with an extra action card.","Comece a partida com uma carta de a√ß√£o extra.","","","","ÈÅäÊà≤ÈñãÂ±ÄÊúÉÂæóÂà∞Â§ö‰∏ÄÂºµË°åÂãïÂç°Áâå„ÄÇ","","Kezdd a j√°t√©kot egy extra akci√≥k√°rty√°val!","Oyuna ekstra bir aksiyon kartƒ± ile ba≈ülayƒ±n."},
FLAG_CLOUD2_MISSION ={"Unlocked by winning %s times with the Mess rule.","Desbloqueado ao vencer %s partidas com a regra Bagun√ßa.","","","","Âú®Â§ßÊ∑∑‰∫ÇÊ®°Âºè‰∏≠ÂãùÂá∫50Ê¨°„ÄÇ","","A felold√°shoz nyerj 50 alkalommal a Z≈±rzavar szab√°llyal.","Karmakarƒ±≈üƒ±k kuralƒ± ile 50 kez kazanarak kilidi a√ßƒ±ldƒ±."},
FLAG_CIRCUIT ={"Circuit","Circuito","","","","ÈõªË∑ØÊùø","","√Åramk√∂r","Devre"},
FLAG_CIRCUIT_DESC ={"If you forgot to play a card, we'll play one for you (once per match).","Se voc√™ esquecer de jogar carta, jogaremos por voc√™ (1 vez por partida)","","","","Â¶ÇÊûú‰Ω†Âøò‰∫ÜÁôºÂá∫Âç°, ÊàëÂÄëÊúÉÂπ´‰Ω† (‰∏ÄÂ±ÄÈÅäÊà≤Âè™Èôê‰∏ÄÊ¨°)„ÄÇ","","Ha elfelejtesz k√°rty√°kkal j√°tszani, akkor mi j√°tszunk neked egyet. (j√°t√©konk√©nt egyszer)","Bir kart oynamayƒ± unuttuysanƒ±z, sizin i√ßin bir tane oynayacaƒüƒ±z (ma√ß ba≈üƒ±na bir kez)."},
FLAG_CIRCUIT_MISSION ={"Unlocked by defeating 9 bots in the same match (without rules).","Desbloqueado ao derrotar 9 bots na mesma partida (sem regras).","","","","Âú®Âêå‰∏ÄÂ±ÄË£°ÊâìÊïó9ÂÄãÊ©üÊ¢∞‰∫∫Èº†Ëß£Èéñ (‰∏çËÉΩ‰ΩøÁî®Ë¶èÁü©)„ÄÇ","","A felold√°shoz gy≈ëzz le 9 robotot ugyanabban a j√°t√©kban (szab√°lyok n√©lk√ºl).","Aynƒ± ma√ßta 9 botu yenerek kilidi a√ßƒ±ldƒ± (kurallar olmadan)."},
FLAG_NO_NAME ={"????","","","","","","","",""},
FLAG_NO_NAME_DESC ={"When you play a 0 over another 0, your next draw will use the Tracking rule.","Ao jogar um 0 sobre outro 0, sua pr√≥xima compra usa a regra Rastrear.","","","","","","","Ba≈üka bir 0 √ºzerinden 0 oynadƒ±ƒüƒ±nƒ±zda, bir sonraki √ßekili≈üiniz ƒ∞zleme kuralƒ±nƒ± kullanƒ±r."},
FLAG_CHAMPION ={"Champion","Campe√£o","","","","","","","≈ûampiyon"},
FLAG_CHAMPION_DESC ={"Your first drawing uses the Fast Drawing rule. You lose your first turn.","Sua primeira compra usa a regra Compra R√°pida. Voc√™ perde o primeiro turno.","","","","","","","ƒ∞lk √ßiziminiz Hƒ±zlƒ± √áizim kuralƒ±nƒ± kullanƒ±r. ƒ∞lk sƒ±ranƒ±zƒ± kaybedersiniz."},
LIGHT_YELLOW ={"Yellow Light","Luz Amarela","","","","","","","Sarƒ± ƒ±≈üƒ±k"},
LIGHT_BLUE ={"Blue Light","Luz Azul","","","","","","","Mavi ƒ±≈üƒ±k"},
LIGHT_GREEN ={"Green Light","Luz Verde","","","","","","","Ye≈üil ƒ±≈üƒ±k"},
LIGHT_RED ={"Red Light","Luz Vermelha","","","","","","","Kƒ±rmƒ±zƒ± ƒ±≈üƒ±k"},
LIGHT_WHITE ={"White Light","Luz Branca","","","","","","","Beyaz ƒ±≈üƒ±k"},
LIGHT_PINK ={"Pink Light","Luz Rosa","","","","","","","Pembe I≈üƒ±k"},
LIGHT_ORANGE ={"Orange Light","Luz Laranja","","","","","","","Turuncu I≈üƒ±k"},
LIGHT_BLUE_SHAMAN ={"Blue Shaman","Shaman Azul","","","","","","","Mavi ≈ûaman"},
LIGHT_GOLD_SHAMAN ={"Golden Shaman","Shaman Dourado","","","","","","","Altƒ±n ≈ûaman"},
LIGHT_DIVINE_SHAMAN ={"Divine Shaman","Shaman Divino","","","","","","","ƒ∞lahi ≈ûaman"},
MAP_CLASSIC ={"Classic Maps","Pacote Cl√°ssico","","","","","","","Klasik Haritalar"},
MAP_CLASSIC_DESC ={"A random classic map.","Um mapa cl√°ssico aleat√≥rio.","","","","","","","Rastgele klasik bir harita."},
MAP_FAVORITE ={"Favorite Maps","Pacote Favoritos","","","","","","","Favori Haritalar"},
MAP_FAVORITE_DESC ={"A random favorite map.","Um mapa favorito aleat√≥rio.","","","","","","","Rasgele bir favori harita."},
MAP1 ={"Classic","Cl√°ssico","","","","","","","Klasik "},
MAP2 ={"Grass","Gramas","","","","","","","√áimen"},
MAP3 ={"Castle","Castelo","","","","","","","Kale"},
MAP4 ={"Ninja","","","","","","","",""},
MAP5 ={"Gears","Engrenagens","","","","","","","Donanƒ±mlar"},
MAP6 ={"Cafe","Caf√©","","","","","","","Kafe"},
MAP7 ={"Gourmet","","","","","","","","Gurme"},
MAP8 ={"Night Fishing","Pesca Noturna","","","","","","","Gece Balƒ±k√ßƒ±lƒ±k"},
MAP9 ={"Boat","Barco","","","","","","","Tekne"},
MAP10 ={"Archeology","Arqueologia","","","","","","","Arkeoloji"},
MAP11 ={"Waterfall","Cachoeira","","","","","","","≈ûelale"},
MAP12 ={"Anniversary","Anivers√°rio","","","","","","","Yƒ±ld√∂n√ºm√º"},
MAP13 ={"Love","Amor","","","","","","","A≈ük"},
MAP14 ={"Jurassic","Jur√°ssico","","","","","","","Tarih √∂ncesi"},
MAP15 ={"Spooky","Assustador","","","","","","","√úrpertici"},
MAP16 ={"Forest","Floresta","","","","","","","Orman"},
MAP17 ={"Moon","Lua","","","","","","","Ay"},
MAP18 ={"Mansion","Mans√£o","","","","","","","Konak"},
MAP19 ={"Garden","Jardim","","","","","","","Bah√ße"},
MAP20 ={"Party","Festa","","","","","","","Parti"},
MAP21 ={"Stripes","Listras","","","","","","","√áizgili"},
MAP22 ={"Forest 2","Floresa 2","","","","","","","Orman 2"},
MAP23 ={"Christmas","Natal","","","","","","","Noel"},
MAP24 ={"Ice","Gelo","","","","","","","Buz"},
MAP25 ={"Mythology","Mitologia","","","","","","","Mitoloji"},
MAP26 ={"Temple","Templo","","","","","","","Tapƒ±nak"},
MAP27 ={"Spooky 2","Assustador 2","","","","","","","√úrk√ºt√ºc√º 2"},
MAP28 ={"Bells","Sinos","","","","","","","√áanlar"},
MAP29 ={"Blueprint","Rascunho","","","","","","","Taslak"},
MAP30 ={"Futuristic City","Cidade Futurista","","","","","","","F√ºt√ºristik ≈üehir"},
MAP31 ={"Rocket","Foguete","","","","","","","Roket"},
MAP32 ={"MyCity","","","","","","","","Benim ≈üehrim"},
SKIN_DEFAULT ={"Gray Armchair","Poltrona Cinza","Fauteuil gris","–°–µ—Ä–æ–µ –ö—Ä–µ—Å–ª–æ","Sill√≥n Gris","ÁÅ∞Ëâ≤Êâ∂ÊâãÊ§ÖÂ≠ê","Szary Fotel","Sz√ºrke Fotel","Gri Koltuk"},
SKIN_DEFAULT_MISSION ={"Unlocked by default.","Desbloqueado por padr√£o","D√©bloqu√© par d√©faut","–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.","Desbloquueado por defecto","Ëá™ÂãïËß£Èéñ„ÄÇ","Odblokowany domy≈õlnie. ","Alap√©rtelmez√©s szerint feloldva.","Varsayƒ±lan olarak kilidi a√ßƒ±ktƒ±r."},
SKIN_WOOD ={"Wooden Chair","Banco de Madeira","Chaise en bois","–î–µ—Ä–µ–≤—è–Ω–Ω–æ–µ –ö—Ä–µ—Å–ª–æ","Silla de madera","Êú®Ë£ΩÊ§ÖÂ≠ê","Drewniane krzes≈Ço","Fa sz√©k","Tahta sandalye"},
SKIN_ROUND_MISSION ={"Unlocked after playing %s games.","Desbloqueado ao jogar %s partidas","D√©bloqu√© en jouant %s parties.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ %s —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä.","Desbloqueado despu√©s de jugar %s partidas","Áé©ÈÅé %s Â†¥ÈÅäÊà≤ÂæåËß£Èéñ„ÄÇ","Odblokuje siƒô po zagraniu %s gier","A felold√°shoz j√°tssz %s alkalommal.","%s oyun oynadƒ±ktan sonra kilidi a√ßƒ±lƒ±r."},
SKIN_STONE ={"Stone Bench","Banco de Pedra","Banc en pierre","–ö–∞–º–µ–Ω–Ω–æ–µ –ö—Ä–µ—Å–ª–æ","Banco de piedra","Áü≥È†≠Èï∑Ê§Ö","Kamienna ≈Çawa","K≈ëpad","Ta≈ü Bank"},
SKIN_GOLD ={"Golden Throne","Trono de Ouro","Tr√¥ne en or","–ó–æ–ª–æ—Ç–æ–µ –ö—Ä–µ—Å–ª–æ","Trono Dorado","ÈªÉÈáëÂØ∂Â∫ß","Z≈Çoty Tron","Arany Tr√≥n","Altƒ±n Taht"},
SKIN_WIN_MISSION ={"Unlocked by winning %s times.","Desbloqueado ao vencer %s vezes","D√©bloqu√© en gagnant %s fois.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –≤—ã–∏–≥—Ä–∞–≤ %s —Ä–∞–∑.","Desbloqueado despu√©s de ganar %s veces","ÂãùÂá∫ %s Â†¥ÈÅäÊà≤ÂæåËß£Èéñ„ÄÇ","Odblokuj go wygrywajƒÖc %s razy","A felold√°shoz nyerj %s alkalommal.","%s kez kazanarak kilidi a√ßƒ±ldƒ±."},
SKIN_DIAMOND ={"Diamond Throne","Trono de Diamante","Tr√¥ne en diamant","–ê–ª–º–∞–∑–Ω—ã–π –¢—Ä–æ–Ω","Trono de Diamante","ÈëΩÁü≥ÂØ∂Â∫ß","Diamentowy Tron","Gy√©m√°nt Tr√≥n","Elmas Tahtƒ±"},
SKIN_RED ={"Red Armchair","Poltrona Vermelha","Fauteuil rouge","–ö—Ä–∞—Å–Ω–æ–µ –ö—Ä–µ—Å–ª–æ","Sill√≥n Rojo","Á¥ÖËâ≤Êâ∂ÊâãÊ§ÖÂ≠ê","Czerwony Fotel","Piros Fotel","Kƒ±rmƒ±zƒ± Koltuk"},
SKIN_RED_MISSION ={"Unlocked by winning with a red card.","Desbloqueado ao vencer com uma carta vermelha","D√©bloqu√© en gagnant avec une carte rouge.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –≤—ã–∏–≥—Ä–∞–≤ —Å –∫—Ä–∞—Å–Ω–æ–π –∫–∞—Ä—Ç–æ–π.","Desbloqueado por¬†ganar con una carta roja","ÊúÄÂæåÁôºÂá∫Á¥ÖËâ≤Âç°ÁâåËÄåÂãùÂá∫ÂæåËß£Èéñ„ÄÇ","Odblokuj go wygrywajƒÖc czerwonƒÖ kartƒÖ.","A felold√°shoz nyerj piros k√°rty√°val.","Kƒ±rmƒ±zƒ± kart ile kazanarak kilidi a√ßƒ±lƒ±r."},
SKIN_BLUE ={"Blue Armchair","Poltrona Azul","Fauteuil bleu","–°–∏–Ω–µ–µ –ö—Ä–µ—Å–ª–æ","Sill√≥n Azul","ËóçËâ≤Êâ∂ÊâãÊ§ÖÂ≠ê","Niebieski Fotel","K√©k Fotel","Mavi Koltuk"},
SKIN_BLUE_MISSION ={"Unlocked by winning with a blue card.","Desbloqueado ao vencer com uma carta azul","D√©bloqu√© en gagnant avec une carte bleue.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –≤—ã–∏–≥—Ä–∞–≤ —Å —Å–∏–Ω–µ–π –∫–∞—Ä—Ç–æ–π.","Desbloqueado por ganar con una carta azul","ÊúÄÂæåÁôºÂá∫ËóçËâ≤Âç°ÁâåËÄåÂãùÂá∫ÂæåËß£Èéñ„ÄÇ","Odblokuj wygrywajƒÖc niebieskƒÖ kartƒÖ.","A felold√°shoz nyerj k√©k k√°rty√°val.","Mavi kart ile kazanarak kilidi a√ßƒ±ldƒ±."},
SKIN_YELLOW ={"Yellow Armchair","Poltrona Amarela","Fauteuil jaune","–ñ—ë–ª—Ç–æ–µ –ö—Ä–µ—Å–ª–æ","Sill√≥n Amarillo","ÈªÉËâ≤Êâ∂ÊâãÊ§ÖÂ≠ê","≈ª√≥≈Çty Fotel","S√°rga Fotel","Sarƒ± Koltuk"},
SKIN_YELLOW_MISSION ={"Unlocked by winning with a yellow card.","Desbloqueado ao vencer com uma carta amarela","D√©bloqu√© en gagnant avec une carte jaune.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –≤—ã–∏–≥—Ä–∞–≤ —Å –∂—ë–ª—Ç–æ–π –∫–∞—Ä—Ç–æ–π.","Desbloqueado por ganar con una carta amarilla","ÊúÄÂæåÁôºÂá∫ÈªÉËâ≤Âç°ÁâåËÄåÂãùÂá∫ÂæåËß£Èéñ„ÄÇ","Odblokuj go wygrywajƒÖc ≈º√≥≈ÇtƒÖ kartƒÖ.","A felold√°shoz nyerj s√°rga k√°rty√°val.","Sarƒ± kart ile kazanarak kilidi a√ßƒ±lƒ±r."},
SKIN_GREEN ={"Green Armchair","Poltrona Verde","Fauteuil vert","–ó–µ–ª—ë–Ω–æ–µ –ö—Ä–µ—Å–ª–æ","Sill√≥n Verde","Á∂†Ëâ≤Êâ∂ÊâãÊ§ÖÂ≠ê","Zielony Fotel","Z√∂ld Fotel","Ye≈üil Koltuk"},
SKIN_GREEN_MISSION ={"Unlocked by winning with a green card.","Desbloqueado ao vencer com uma carta verde","D√©bloqu√© en gagnant avec une carte verte.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –≤—ã–∏–≥—Ä–∞–≤ —Å –∑–µ–ª—ë–Ω–æ–π –∫–∞—Ä—Ç–æ–π.","Desbloqueado por ganar con una carta verde","ÊúÄÂæåÁôºÂá∫Á∂†Ëâ≤Âç°ÁâåËÄåÂãùÂá∫ÂæåËß£Èéñ„ÄÇ","Odblokuj go wygrywajƒÖc zielonƒÖ kartƒÖ.","A felold√°shoz nyerj z√∂ld k√°rty√°val.","Ye≈üil kartla kazanarak kilidi a√ßƒ±lƒ±r."},
SKIN_WHITE ={"White Armchair","Poltrona Branca","Fauteuil blanc","–ë–µ–ª–æ–µ –ö—Ä–µ—Å–ª–æ","Sill√≥n Blanco","ÁôΩËâ≤Êâ∂ÊâãÊ§ÖÂ≠ê","Bia≈Çy Fotel","Feh√©r Fotel","Beyaz Koltuk"},
SKIN_WHITE_MISSION ={"Unlocked by winning with a wild card.","Desbloqueado ao vencer com um curinga","D√©bloqu√© en gagnant avec une carte noire.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –≤—ã–∏–≥—Ä–∞–≤ —Å —á—ë—Ä–Ω–æ–π –∫–∞—Ä—Ç–æ–π.","Desbloqueado por ganar con una carta comod√≠n","ÊúÄÂæåÁôºÂá∫ÊèõËâ≤Âç°ÁâåËÄåÂãùÂá∫ÂæåËß£Èéñ„ÄÇ","Odblokuj go wygrywajƒÖc kartƒÖ wild.","A felold√°shoz nyerj Sz√≠nv√°laszt√≥ k√°rty√°val.","Renk kartƒ± ile kazanarak kilidi a√ßƒ±lƒ±r."},
SKIN_FIRE ={"Fire Throne","Trono do Fogo","Tr√¥ne de feu","–û–≥–Ω–µ–Ω–Ω—ã–π –¢—Ä–æ–Ω","Trono de Fuego","ÁÉàÁÑ∞ÂØ∂Â∫ß","Ognisty Tron","T≈±z Tr√≥n","Yangƒ±n Tahtƒ±"},
RED_MISSION ={"Unlocked by winning %s times with a red card.","Desbloqueado ao vencer %s vezes com uma carta vermelha","D√©bloqu√© en gagnant %s fois avec une carte rouge.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –≤—ã–∏–≥—Ä–∞–≤ %s —Ä–∞–∑ —Å –∫—Ä–∞—Å–Ω–æ–π –∫–∞—Ä—Ç–æ–π.","Desbloqueado por ganar %s veces con una carta roja","ÊúÄÂæåÁôºÂá∫Á¥ÖËâ≤Âç°ÁâåËÄåÂãùÂá∫ %s Ê¨°ÂæåËß£Èéñ„ÄÇ","Odblokuj go wygrywajƒÖc %s razy czerwonƒÖ kartƒÖ","A felold√°shoz nyerj %s alkalommal piros k√°rty√°val.","Kƒ±rmƒ±zƒ± kart ile %s kez kazanarak kilidi a√ßƒ±lƒ±r."},
SKIN_WATER ={"Water Throne","Trono da √Ågua","Tr√¥ne d'eau","–í–æ–¥–Ω—ã–π –¢—Ä–æ–Ω","Trono de Agua","Ê∞¥ÊµÅÂØ∂Â∫ß","Wodny Tron","V√≠z Tr√≥n","Su Tahtƒ±"},
BLUE_MISSION ={"Unlocked by winning %s times with a blue card.","Desbloqueado ao vencer %s vezes com uma carta azul","D√©bloqu√© en gagnant %s fois avec une carte bleue.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –≤—ã–∏–≥—Ä–∞–≤ %s —Ä–∞–∑ —Å —Å–∏–Ω–µ–π –∫–∞—Ä—Ç–æ–π.","Desbloqueado por ganar %s veces con una carta azul","ÊúÄÂæåÁôºÂá∫ËóçËâ≤Âç°ÁâåËÄåÂãùÂá∫ %s Ê¨°ÂæåËß£Èéñ„ÄÇ","Odblokuj go wygrywajƒÖc %s razy niebieskƒÖ kartƒÖ","A felold√°shoz nyerj %s alkalommal k√©k k√°rty√°val.","Mavi kart ile %s kez kazanarak kilidi a√ßƒ±ldƒ±."},
SKIN_EARTH ={"Earth Throne","Trono da Terra","Tr√¥ne de terre","–ó–µ–º–Ω–æ–π –¢—Ä–æ–Ω","Trono de Tierra","ÂúüÂ£§ÂØ∂Â∫ß","Ziemny Tron","F√∂ld Tr√≥n","D√ºnya Tahtƒ±"},
YELLOW_MISSION ={"Unlocked by winning %s times with a yellow card.","Desbloqueado ao vencer %s vezes com uma carta amarela","D√©bloqu√© en gagnant %s fois avec une carte jaune.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –≤—ã–∏–≥—Ä–∞–≤ %s —Ä–∞–∑ —Å –∂—ë–ª—Ç–æ–π –∫–∞—Ä—Ç–æ–π.","Desbloqueado por ganar %s veces con una carta amarilla","ÊúÄÂæåÁôºÂá∫ÈªÉËâ≤Âç°ÁâåËÄåÂãùÂá∫ %s Ê¨°ÂæåËß£Èéñ„ÄÇ","Odblokuj go wygrywajƒÖc %s razy ≈º√≥≈ÇtƒÖ kartƒÖ","A felold√°shoz nyerj %s alkalommal s√°rga k√°rty√°val.","%s kez sarƒ± kart ile kazanƒ±lƒ±r."},
SKIN_AIR ={"Air Throne","Trono do Ar","Tr√¥ne d'air","–í–æ–∑–¥—É—à–Ω—ã–π –¢—Ä–æ–Ω","Trono de Aire","Ê∞£ÂúòÂØ∂Â∫ß","Powietrzny Tron","Leveg≈ë Tr√≥n","Hava Tahtƒ±"},
GREEN_MISSION ={"Unlocked by winning %s times with a green card.","Desbloqueado ao vencer %s vezes com uma carta verde","D√©bloqu√© en gagnant %s fois avec une carte verte.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –≤—ã–∏–≥—Ä–∞–≤ %s —Ä–∞–∑ —Å –∑–µ–ª—ë–Ω–æ–π –∫–∞—Ä—Ç–æ–π.","Desbloqueado por ganar %s veces con una carta verde","ÊúÄÂæåÁôºÂá∫Á∂†Ëâ≤Âç°ÁâåËÄåÂãùÂá∫ %s Ê¨°ÂæåËß£Èéñ„ÄÇ","Odblokuj go wygrywajƒÖc %s razy zielonƒÖ kartƒÖ","A felold√°shoz nyerj %s alkalommal z√∂ld k√°rty√°val.","Ye≈üil kart ile %s kez kazanarak kilidi a√ßƒ±lƒ±r."},
SKIN_RAINBOW ={"Rainbow Throne","Trono Arco-√çris","Tr√¥ne arc-en-ciel","–†–∞–¥—É–∂–Ω—ã–π –¢—Ä–æ–Ω","Trono Arcoiris","ÂΩ©ËôπÂØ∂Â∫ß","Tƒôczowy Tron","Sziv√°rv√°ny Tr√≥n","G√∂kku≈üaƒüƒ± tahtƒ±"},
WILD_MISSION ={"Unlocked by winning %s times with a wild card.","Desbloqueado ao vencer %s vezes com um curinga","D√©bloqu√© en gagnant %s fois avec une carte noire.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –≤—ã–∏–≥—Ä–∞–≤ %s —Ä–∞–∑ —Å —á—ë—Ä–Ω–æ–π –∫–∞—Ä—Ç–æ–π.","Desbloqueado por ganar %s veces con un comod√≠n","ÊúÄÂæåÁôºÂá∫ÊèõËâ≤Âç°ÁâåËÄåÂãùÂá∫ %s Ê¨°ÂæåËß£Èéñ„ÄÇ","Odblokuj go wygrywajƒÖc %s razy kartƒÖ wild.","A felold√°shoz nyerj %s alkalommal sz√≠nv√°laszt√≥ k√°rty√°val.","Bir Renk kartƒ±yla %s kez kazanarak kilidi a√ßƒ±lƒ±r."},
SKIN_KING ={"King Throne","Trono do Rei","Tr√¥ne du roi","–ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π –¢—Ä–æ–Ω","Trono Real","ÂúãÁéãÂØ∂Â∫ß","Kr√≥lewski Tron","Kir√°ly Tr√≥n","Kral Tahtƒ±"},
SKIN_KING_MISSION ={"Unlocked by winning blocking a +2 or +4.","Desbloqueado ao vencer bloqueando um +2 ou +4","D√©bloqu√© en gagnant en bloquant un +2 ou un +4.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ–±–µ–¥–æ–π, –±–ª–æ–∫–∏—Ä—É—è +2 –∏–ª–∏ +4.","Desbloqueado por ganar bloqueando una carta +2 o una +4","Âú®‰∏ä‰∏ÄÂÄãÁé©ÂÆ∂ÁôºÂá∫ +2 Êàñ +4 Âç°Áâå‰πãÂæåÁπºÁ∫åÁôºÂá∫ +2 Êàñ +4 Âç°ÁâåËÄåÁç≤ÂãùÂæåËß£Èéñ„ÄÇ","Odblokuj go wygrywajƒÖc blokowanie +2 lub +4","A felold√°shoz nyerj azzal, hogy kiv√©desz egy +2-es vagy +4-es k√°rty√°t.","Kazanmaya yakƒ±n oyuncuyu +2 veya +4 ile engelleyerek a√ßƒ±lƒ±r."},
SKIN_LUCK ={"Lucky Throne","Trono da Sorte","Tr√¥ne de la chance","–£–¥–∞—á–ª–∏–≤—ã–π –¢—Ä–æ–Ω","Trono de la Suerte","Âπ∏ÈÅãÂØ∂Â∫ß","Szczƒô≈õliwy Tron","Szerencs√©s Tr√≥n","≈ûanslƒ± taht"},
SKIN_LUCK_MISSION ={"Unlocked by winning without drawing any cards.","Desbloqueado ao vencer sem comprar cartas","D√©bloqu√© en gagnant sans tirer aucune carte.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ–±–µ–¥–æ–π –±–µ–∑ –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏—è –∫–∞—Ä—Ç.","Desbloqueado ganando sin sortear cartas.","‰∏çË¢´ÁΩ∞ÊäΩ‰ªª‰ΩïÂç°ÁâåËÄåÂãùÂá∫ÂæåËß£Èéñ„ÄÇ","Odblokuj go wygrywajƒÖc bez dobierania kart.","A felold√°shoz nyerj k√°rtyah√∫z√°s n√©lk√ºl.","Herhangi bir kart √ßekmeden kazanarak kilidi a√ßƒ±lƒ±r."},
SKIN_ANGEL ={"Angelic Throne","Trono Angelical","Tr√¥ne ang√©lique","–ê–Ω–≥–µ–ª—å—Å–∫–∏–π –¢—Ä–æ–Ω","Trono Angelical","Â§©‰ΩøÂØ∂Â∫ß","Anielski Tron","Angyali Tr√≥n","Melek Taht"},
SKIN_ANGEL_MISSION ={"Unlocked by winning without the timer appearing during your turn.","Desbloqueado ao vencer sem deixar o cron√¥metro aparecer na sua vez","D√©bloqu√© en gagnant sans que le minuteur apparaisse pendant votre tour.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ–±–µ–¥–æ–π –±–µ–∑ —Ç–∞–π–º–µ—Ä–∞, –ø–æ—è–≤–ª—è—é—â–µ–≥–æ—Å—è –≤–æ –≤—Ä–µ–º—è –≤–∞—à–µ–≥–æ —Ö–æ–¥–∞.","Desbloqueado por ganar sin que el temporizador aparezca en tu turno","Âú®‰Ω†ÊâÄÊúâÁöÑÁôºÂç°ÂõûÂêà‰∏≠, Âà•ËÆìÈôêÊôÇÂô®ÂΩàÂá∫ËÄåÂæóÂà∞ÂãùÂà©„ÄÇ","Odblokuj go wygrywajƒÖc rundƒô bez pokazywania stopera wyznaczajƒÖcego kolejkƒô.","A felold√°shoz nyerj an√©lk√ºl, hogy az id≈ëm√©r≈ë megjelenne.","Sƒ±ranƒ±z sƒ±rasƒ±nda zamanlayƒ±cƒ± g√∂r√ºnmeden kazanarak kilidi a√ßƒ±lƒ±r."},
SKIN_JUNKY ={"Junk Throne","Trono de Sucata","Tr√¥ne d'ordures","–•–ª–∞–º–Ω—ã–π –¢—Ä–æ–Ω","Trono de Basura","Âª¢Ê£ÑÁâ©ÂØ∂Â∫ß","Tron Rupieƒá","Kacat Tr√≥n","√ñnemsiz Taht"},
SKIN_JUNKY_MISSION ={"Unlocked by winning after accumulating 15+ cards in your hand.","Desbloqueado ao vencer depois de acumular 15 ou mais cartas na m√£o","D√©bloqu√© en gagnant apr√®s avoir accumul√© plus de 15 cartes dans votre jeu.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ–±–µ–¥–æ–π –ø–æ—Å–ª–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è 15+ –∫–∞—Ä—Ç –≤ –≤–∞—à–µ–π —Ä—É–∫–µ.","Desbloqueado ganando despu√©s de haber acumulado +15 cartas en tu baraja.","Êâã‰∏≠ÁöÑÂç°ÁâåÊõæÁ∂ìÂú®ÈÅäÊà≤‰∏≠Â§öÊñº 15 ÂºµËÄåÊúÄÂæåÂæóÂà∞ÂãùÂà©ÂæåËß£Èéñ„ÄÇ","Odblokuj go kumulujƒÖc 15 kart w twoich rƒôkach.","A felold√°shoz nyerj √∫gy, hogy el≈ëtte 15 vagy t√∂bb k√°rty√°t felhalmozt√°l a kezedben.","Elinizde 15+ kart biriktirdikten sonra kazanarak kilidi a√ßƒ±lƒ±r."},
SKIN_SHAMAN ={"Shaman Throne","Trono do Shaman","Tr√¥ne du chamane","–®–∞–º–∞–Ω—Å–∫–∏–π –¢—Ä–æ–Ω","Trono del Cham√°n","Ëñ©ÊªøÂØ∂Â∫ß","Szama≈Ñski Tron","S√°m√°n Tr√≥n","≈ûaman Tahtƒ±"},
SKIN_SHAMAN_MISSION ={"Unlocked by accumulating %s points in a room.","Desbloqueado ao acumular mais de %s pontos em uma sala","D√©bloqu√© en accumulant %s points dans un salon.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –Ω–∞–∫–∞–ø–ª–∏–≤–∞—è %s –æ—á–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ.","Desbloqueado por acumular %s puntos en una sala","Âú®ÊàøÈñìÁ¥ØÁ©çÈÅîÂà∞ %s ÂàÜÊï∏ÂæåËß£Èéñ„ÄÇ","Odblokuj kumulujƒÖc %s punkt√≥w w pokoju","A felold√°shoz gy≈±jts √∂ssze %s pontot egy szob√°ban.","Bir odada %s puan toplayarak kilidi a√ßƒ±lƒ±r."},
SKIN_BEACH ={"Beach Chair","Cadeira de Praia","Chaise de plage","–ü–ª—è–∂–Ω–æ–µ –ö—Ä–µ—Å–ª–æ","Silla de Playa","Ê≤ôÁÅòÊ§ÖÂ≠ê","Le≈ºak","Strand Sz√©k","Plaj sandalyesi"},
SKIN_WATCH_MISSION ={"Unlocked by watching %s games.","Desbloqueado ao assistir %s partidas","D√©bloqu√© en regardant %s parties.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ %s –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –∏–≥—Ä.","Desbloqueado despu√©s de espectar %s partidas.","ÊóÅËßÄ %s Â†¥ÈÅäÊà≤ÂæåËß£Èéñ„ÄÇ","Odblokuj go obserwujƒÖc %s gier","A felold√°shoz figyelj meg egy j√°t√©kot %s alkalommal.","%s oyun izleyerek kilidi a√ßƒ±lƒ±r."},
SKIN_CINE ={"Cinema Chair","Cadeira de Cinema","Cinema Chair","–ö—Ä–µ—Å–ª–æ-–ö–∏–Ω–æ","Silla de Cine","ÂΩ±Èô¢Ê§ÖÂ≠ê","Kinowy Fotel","Mozi Sz√©k","Sinema Koltuƒüu"},
SKIN_HELL ={"Hell Throne","Trono Infernal","Tr√¥ne de l'enfer","–ê–¥—Å–∫–∏–π –¢—Ä–æ–Ω","Trono Infernal","Âú∞ÁçÑÊ§ÖÂ≠ê","Piekielny Tron","Pokol Tr√≥n","Cehennem Tahtƒ±"},
SKIN_HELL_MISSION ={"Unlocked by making someone draw 16 cards at once.","Desbloqueado ao fazer algu√©m comprar 16 cartas de uma vez","D√©bloqu√© en faisant tirer une personne 16 cartes d'un coup.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –∑–∞—Å—Ç–∞–≤–ª—è—è –∫–æ–≥–æ-—Ç–æ –≤–∑—è—Ç—å 16 –∫–∞—Ä—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.","Desbloqueado por hacer sortear a alg√∫n jugador¬†16 cartas a la vez ","Âú®‰∏ÄÊ¨°ÁôºÂç°‰∏≠‰ª§Âà•‰∫∫ÁΩ∞ÊäΩ 16 ÂºµÂç°Áâå„ÄÇ","Aby go odblokowaƒá spraw by kto≈õ dobra≈Ç 16 kart za jednym razem","A felold√°shoz h√∫zass valakivel 16 k√°rty√°t egyszerre.","Birine aynƒ± anda 16 kart √ßekerek kilidi a√ßƒ±lƒ±r."},
SKIN_CARDS ={"Cards Throne","Trono de Cartas","Tr√¥ne de cartes","–ö–∞—Ä—Ç–æ—á–Ω—ã–π –¢—Ä–æ–Ω","Trono de Cartas","Âç°ÁâåÂØ∂Â∫ß","Karciany Tron","K√°rtya Tr√≥n","Taht Oyunlarƒ±"},
SKIN_CARDS_MISSION ={"Unlocked after drawing 16 cards at once.","Desbloqueado ao comprar 16 cartas de uma vez","D√©bloqu√© en tirant 16 cartes d'un coup.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤–∑—è—Ç–∏—è 16 –∫–∞—Ä—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.","Desbloqueado sorteando 16 cartas a la vez","Âú®‰∏ÄÊ¨°ÁΩ∞ÊäΩ‰∏≠ÊäΩÂèñ 16 ÂºµÂç°Áâå„ÄÇ","Odblokuj go dobierajƒÖc 16 kart za jednym razem","A felold√°shoz h√∫zz fel egyszerre 16 k√°rty√°t.","Bir kerede 16 kart √ßekildikten sonra kilidi a√ßƒ±lƒ±r."},
SKIN_CANDY ={"Candy Throne","Trono de Doces","Tr√¥ne bonbon","–ö–æ–Ω—Ñ–µ—Ç–Ω—ã–π –¢—Ä–æ–Ω","Trono Acaramelado","Á≥ñÊûúÂØ∂Â∫ß","Cukierkowy Tron","Cukorka Tr√≥n","≈ûeker Tahtƒ±"},
SKIN_CANDY_MISSION ={"Unlocked by unlocking all house rules.","Desbloqueado ao liberar todas as regras da casa","D√©bloqu√© en d√©bloquant toutes les r√®gles de la maison.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –≤—Å–µ—Ö –¥–æ–º–∞—à–Ω–∏—Ö –ø—Ä–∞–≤–∏–ª.","Desbloqueado por conseguir todas las reglas de la casa","Ëß£ÈéñÊâÄÊúâËá™Ë®ÇË¶èÁü©ÂæåËß£Èéñ„ÄÇ","Aby go odblokowaƒá odblokuj wszystkie domowe zasady","A felold√°shoz oldd fel az √∂sszes h√°zszab√°lyt.","T√ºm ev kurallarƒ±nƒ±n kilidini a√ßarak kilidi a√ßƒ±lƒ±r."},
SKIN_FRAISE ={"Fraise Throne","Trono de Morango","Tr√¥ne fraise","–ö–ª—É–±–Ω–∏—á–Ω—ã–π –¢—Ä–æ–Ω","Trono de Fresas","ËçâËéìÂØ∂Â∫ß","Truskawkowy Tron","Eper Tr√≥n","√áilek Taht"},
SKIN_FRAISE_MISSION ={"Unlocked by winning with a fraise.","Desbloqueado ao vencer com um morango","D√©bloqu√© en jouant avec une fraise.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –≤—ã–∏–≥—Ä–∞–≤ —Å –∫–ª—É–±–Ω–∏–∫–æ–π.","Desbloqueado por ganar con una fresa","ÂíåÂïÜÂ∫óË£°ÁöÑËçâËéì‰∏ÄËµ∑ÂãùÂà©ÂæåËß£Èéñ„ÄÇ","Odblokuj go wygrywajƒÖc truskawkƒÖ","A felold√°shoz nyerj eperrel.","Bir fraise kazanarak kilidi a√ßƒ±ldƒ±."},
SKIN_ILLUMINATI ={"Illuminati Throne","Trono Illuminati","Tr√¥ne Illuminati","–¢—Ä–æ–Ω-–ò–ª–ª—é–º–∏–Ω–∞—Ç–∏","Trono Illuminati","ÂÖâÁÖßÊ¥æÂØ∂Â∫ß","Tron Illuminati","Illuminati Tr√≥n","ƒ∞llumanati Tahtƒ±"},
SKIN_ILLUMINATI_MISSION ={"Have all four +4 cards in your hand to unlock it.","Tenha os quatro +4 na m√£o para liberar","D√©bloqu√© en ayant toutes les cartes +4 de la partie dans votre jeu.","–î–µ—Ä–∂–∏—Ç–µ –≤ —Ä—É–∫–µ –≤—Å–µ —á–µ—Ç—ã—Ä–µ –∫–∞—Ä—Ç—ã +4, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ.","Tener todas las cartas +4 en la baraja para desbloquearlo","Êâã‰∏≠ÈõÜÈΩä 4 Âºµ +4 Âç°ÁâåÂæåËß£Èéñ„ÄÇ","Odblokuj go posiadajƒÖc wyszstkie +4 w twojej rƒôce.","A felold√°shoz mind a n√©gy +4-es k√°rtya legyen a kezedben.","Kilidini a√ßmak i√ßin d√∂rt +4 kartƒ±n hepsini elinizde bulundurun."},
SKIN_GIFT ={"Gift Throne","Trono de Presentes","Tr√¥ne cadeau","–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π –¢—Ä–æ–Ω","Trono de Regalos","Á¶ÆÁâ©ÂØ∂Â∫ß","Prezentowy Tron","Aj√°nd√©k Tr√≥n","Hediye Tahtƒ±"},
SKIN_GIFT_MISSION ={"Unlocked by winning donating a card from your hand.","Desbloqueado ao vencer doando uma carta sua para algu√©m.","D√©bloqu√© en gagnant en donnant une carte de votre jeu.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –≤—ã–∏–≥—Ä–∞–≤ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ–º –∫–∞—Ä—Ç—ã –∏–∑ –≤–∞—à–µ–π —Ä—É–∫–∏.","Desbloqueado por ganar donando una carta de la baraja.","Êää‰Ω†ÁöÑ‰∏ÄÂºµÂç°ÁâåÊçêÂá∫ËÄåÁç≤ÂãùÂæåËß£Èéñ„ÄÇ","Odblokuj go wygrywajƒÖc darowanƒÖ kartƒÖ z twojej rƒôki.","A felold√°shoz nyerj azzal, hogy eladom√°nyozol egy k√°rty√°t a kezedb≈ël.","Elinden bir kart baƒüƒ±≈ülayarak kilidi a√ßƒ±ldƒ±."},
SKIN_BOG ={"Bog","Privada","","–°–æ—Ä—Ç–∏—Ä","Ci√©naga","ÂùêÂªÅ","Klozet","Mocs√°r","Bataklƒ±k"},
SKIN_BOG_MISSION ={"Unlocked by finishing a match without having the opportunity to play.","Desbloqueado ao terminar uma partida sem ter a oportunidade de jogar.","D√©bloqu√© en finissant un jeu sans avoir jou√©.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –º–∞—Ç—á–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–≥—Ä–∞—Ç—å.","Unlocked by finishing a match without having the opportunity to play.","‰Ω†Ê≤íÊúâÂæóÂà∞‰ªª‰ΩïÁôºÂç°ÁâåÁöÑÊ©üÊúÉËÄåÂÆåÊàê‰∏ÄÂ±ÄÈÅäÊà≤ÂæåËß£Èéñ„ÄÇ","Odblokuj go ko≈ÑczƒÖc rundƒô bez mo≈ºliwo≈õci gry.","A felold√°shoz √∫gy kell egy j√°t√©knak befejez≈ëdnie, hogy nem volt lehet≈ës√©ged j√°tszani.","Oynama ≈üansƒ±na sahip olmadan bir ma√ßƒ± bitirerek kilidi a√ßƒ±lƒ±r."},
SKIN_IRON_THRONE ={"Iron Throne","Trono de Ferro","Tr√¥ne de fer","–ñ–µ–ª–µ–∑–Ω—ã–π –¢—Ä–æ–Ω","Trono de Hierro","ÈãºÈêµÂØ∂Â∫ß","≈ªelazny Tron","Vas Tr√≥n","Demir Taht"},
SKIN_IRON_THRONE_MISSION ={"Unlocked by successfuly challenging three +4 cards in a row.","Desbloqueado ao vencer 3 desafios de +4 consecutivos sem perder.","D√©bloqu√© en d√©fiant avec succ√®s trois cartes +4 d'afill√©e.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, —É—Å–ø–µ—à–Ω–æ –±—Ä–æ—Å–∞—è –≤—ã–∑–æ–≤ —Ç—Ä–∏ +4 –∫–∞—Ä—Ç—ã –ø–æ–¥—Ä—è–¥.","Desbloqueado por ganar tres retos de +4 en una ronda, sin perder","ÊàêÂäüÈÄ£Á∫åË≥™Áñë +4 Âç°Áâå 3 Ê¨°ÂæåËß£Èéñ„ÄÇ","Odblokuj wygrywajƒÖc 3 razy wyzwanie +4 nie ponoszƒÖc przy tym straty.","A felold√°shoz h√≠vj ki egym√°s ut√°n h√°rom +4-es k√°rty√°t sikeresen.","Arka arkaya √º√ß +4 karta ba≈üarƒ±yla itiraz ederek kilidi a√ßƒ±lƒ±r."},
SKIN_HAMBURGUER ={"Throne of Gluttony","Trono da Gula","Tr√¥ne de la gourmandise","–¢—Ä–æ–Ω –û–±–∂–æ—Ä—Å—Ç–≤–∞","Trono de Glot√≥n","Ë≤™ÂêÉËÄÖÂØ∂Â∫ß","Tron Ob≈ºarstwa ","A Fal√°nks√°g Tr√≥nja","Oburluk Tahtƒ±"},
SKIN_TEAM_MISSION ={"Unlocked by winning %s Team Matches.","Desbloqueado ao vencer %s Jogos em Duplas.","D√©bloqu√© en gagnant %s Parties en √âquipe.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã –≤ %s –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –º–∞—Ç—á–∞—Ö.","Desbloqueado por ganar %s rondas en equipo","Âú®ÂúòÈöäÊ®°ÂºèÁç≤Âæó %s Â†¥ÂãùÂà©„ÄÇ","Odblokuj wygrywajac %s Rund Dru≈ºynowych.","A felold√°shoz nyerj %s Csapatm√©rk≈ëz√©st.","%s Takƒ±m Ma√ßƒ± kazanarak kilidi a√ßƒ±ldƒ±."},
SKIN_SKULL ={"Skull Throne","Trono de Caveira","Tr√¥ne cr√¢ne","–ß–µ—Ä–µ–ø–Ω–æ–π –¢—Ä–æ–Ω","Trono de Cr√°neos","È™∑È´èÂØ∂Â∫ß","Tron Czaszka","Koponya Tr√≥n","Kafatasƒ± Taht"},
SKIN_SKULL_MISSION ={"Unlocked by winning by elimination.","Desbloqueado ao vencer por elimina√ß√£o.","D√©bloqu√© en jouant par elimination.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ–±–µ–¥–æ–π –ø—É—Ç—ë–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è.","Desbloqueado ganando por eliminaci√≥n","Âú®Ê∑òÊ±∞Ê®°Âºè‰∏≠ÂæóÂà∞ÂãùÂà©ÂæåËß£Èéñ„ÄÇ","Odblokuj wygrywajac przez eliminacjƒô.","A felold√°shoz nyerj azzal, hogy kiejtesz egy j√°t√©kost a j√°t√©kb√≥l.","Eleme ile kazanarak a√ßƒ±lƒ±r."},
SKIN_SHOW ={"Party Throne","Trono Baladeiro","Tr√¥ne de f√™te","–¢—Ä–æ–Ω-–í–µ—á–µ—Ä–∏–Ω–∫–∞","Trono de Fiesta","Ê¥æÂ∞çÂØ∂Â∫ß","Imprezowy Tron","Parti Tr√≥n","Parti Tahtƒ±"},
SKIN_SHOW_MISSION ={"Unlocked randomly by playing on private rooms.","Desbloqueado aleatoriamente ao jogar em salas privadas.","D√©bloqu√© al√©atoirement en jouant dans des salons priv√©s.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º, –∏–≥—Ä–∞—è –≤ —á–∞—Å—Ç–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö.","Desbloqueado aleatoriamente jugando en salas privadas.","Âú®ÁßÅ‰∫∫ÊàøÈñìÈÄ≤Ë°åÈÅäÊà≤ÂæåÈö®Ê©üËß£Èéñ„ÄÇ","Odblokowane losowo przez grƒô w pokojach prywatnych.","V√©letlenszer≈±en feloldhat√≥ priv√°t szob√°kban j√°tszva.","√ñzel odalarda oynayarak rastgele a√ßƒ±lƒ±r."},
SKIN_TIME_MACHINE ={"Time Throne","Trono do Tempo","Tr√¥ne du temps","–ß–∞—Å–æ–≤–æ–π –¢—Ä–æ–Ω","Trono del Tiempo","ÊôÇÈñìÂØ∂Â∫ß","Tron Czasu","Id≈ë Tr√≥nja","Zaman Tahtƒ±"},
SKIN_TIME_MACHINE_MISSION ={"Unlocked by winning by time expiration.","Desbloqueado ao vencer por tempo esgotado.","D√©verrouill√© en gagnant √† l'expiration du temps.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ–±–µ–¥–æ–π, –∫–æ–≥–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å 60 —Å–µ–∫—É–Ω–¥ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–∞—Ç—á–∞.","Desbloqueado al ganar por tiempo acabado.","Áï∂‰∏ÄÂ±ÄÁöÑÊôÇÈôêÂà∞‰∫ÜÁÑ∂ÂæåÂæóÂà∞ÂãùÂà©ÂæåËß£Èéñ„ÄÇ","Odblokuj przez wygranƒÖ po up≈Çywie czasu.","A felold√°shoz nyerj az id≈ë lej√°rat√°val.","Zaman a≈üƒ±mƒ± ile kazanarak kilidi a√ßƒ±lƒ±r."},
SKIN_CHESS ={"Ivory Throne","Trono de Marfim","Tr√¥ne d'ivoire","–®–∞—Ö–º–∞—Ç–Ω—ã–π –¢—Ä–æ–Ω","Trono de Marfil","Ë±°ÁâôÂØ∂Â∫ß","Tron z Ko≈õci S≈Çoniowej","Elef√°ntcsont Tr√≥n","Fildi≈üi Taht"},
SKIN_CHESS_MISSION ={"Unlocked by killing %s pieces on Mad Chess rule.","Desbloqueado ao matar %s pe√ßas na regra Xadrez Maluco.","D√©bloqu√© en tuant %s pi√®ces avec la r√®gle Chequiers Fous.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è —É–±–∏–π—Å—Ç–≤–æ–º %s —Ñ–∏–≥—É—Ä –ø–æ –ø—Ä–∞–≤–∏–ª—É ¬´–ë–µ–∑—É–º–Ω—ã–µ —à–∞—Ö–º–∞—Ç—ã¬ª.","Desbloqueado por matar %s piezas en reglas de Queso Loco.","Âú®ÁòãÁãÇË±°Ê£ãË¶èÁü©‰∏≠ÊÆ∫Ê≠ª %s ÂÄãÊ£ãÂ≠êÂæåËß£Èéñ„ÄÇ","Odblokuj zbijajƒÖc %s figur szachowych w zasadzie Szalone Szachy.","A felold√°shoz √ºss le %s darabot az ≈êr√ºlt Sakk szab√°ly alatt.","√áƒ±lgƒ±n Satran√ß kuralƒ±nda %s ta≈ü √∂ld√ºrerek kilidi a√ßƒ±ldƒ±."},
SKIN_PENCIL ={"Pencil Throne","Trono de L√°pis","Tr√¥ne crayon","–ö–∞—Ä–∞–Ω–¥–∞—à–Ω—ã–π –¢—Ä–æ–Ω","Trono de L√°pizes","ÈâõÁ≠ÜÂØ∂Â∫ß","Kredkowy Tron","Ceruza Tr√≥n","Kalem Tahtƒ±"},
SKIN_PENCIL_MISSION ={"Unlocked by playing a wild card over another %s times.","Desbloqueado ao jogar um curinga sobre outro %s vezes.","D√©bloqu√© en jouant une carte noire plus d'une %s fois.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –≤—ã–∏–≥—Ä–∞–≤ —Å —á—ë—Ä–Ω–æ–π –∫–∞—Ä—Ç–æ–π +4 %s —Ä–∞–∑.","Desbloqueado al jugar una Carta Comod√≠n otras %s veces m√°s.","Âú®ÊèõËâ≤Âç°Áâå‰∏äÂÜçÁôºÂá∫ÊèõËâ≤Âç°Áâå %s Ê¨°ÂæåËß£Èéñ„ÄÇ","Odblokuj grajƒÖc KartƒÖ Wild ponad %s razy.","A felold√°shoz j√°tssz egy Sz√≠nv√°laszt√≥ k√°rty√°t egy m√°sikra %s alkalommal.","%s kez daha √ßƒ±lgƒ±n bir kart oynayarak kilidi a√ßƒ±ldƒ±."},
SKIN_SCHOOL ={"School Chair","Cadeira Escolar","Chaise d'√©cole","–®–∫–æ–ª—å–Ω–æ–µ –ö—Ä–µ—Å–ª–æ","Silla de Colegio","Â≠∏Ê†°ÁöÑÊ§ÖÂ≠ê","Szkolne Krzes≈Ço","Iskolai Sz√©k","Okul Sandalyesi"},
SKIN_SCHOOL_MISSION ={"Unlocked by sitting on the same chair 3 times in a row.","Desbloqueado ao sentar 3 vezes consecutivas na mesma cadeira.","D√©bloqu√© en s'asseyant sur la m√™me chaise 3 fois de suite.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, —Å–∏–¥—è –Ω–∞ –æ–¥–Ω–æ–º –∫—Ä–µ—Å–ª–µ 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥.","Desbloqueada sent√°ndose en la misma silla tres veces seguidas.","ÈÄ£Á∫åÂú® 3 Â±ÄÈÅäÊà≤‰∏≠ÂùêÂêå‰∏ÄÂÄã‰ΩçÂ≠êÂæåËß£Èéñ„ÄÇ","Odblokuj siedzƒÖc 3 razy z rzƒôdu na tym samym miejscu.","A felold√°shoz √ºlj ugyanabban a sz√©kben egym√°s ut√°n 3 alkalommal.","Aynƒ± sandalyede √ºst √ºste 3 kez oturarak kilidi a√ßƒ±lƒ±r."},
SKIN_ANVIL ={"Anvil Throne","Trono de Bigornas","Tr√¥ne enclume","–¢—Ä–æ–Ω-–ù–∞–∫–æ–≤–∞–ª—å–Ω—è","Trono de Yunques","ÈêµÈâÜÂØ∂Â∫ß","Tron Kowad≈Ço","√úll≈ë Tr√≥n","√ñrs Tahtƒ±"},
SKIN_GARDEN ={"Garden","Jardim","Jardin","–°–∞–¥","Jard√≠n","Â∫≠Èô¢","Ogr√≥d","Kert","Bah√ße"},
SKIN_CAT ={"Cat's Pouf","Puff de Gato","Panier de chat","–ö–æ—à–∞—á–∏–π –ü—É—Ñ","Puff del Gato","Ë≤ìÂí™ÂùêÂ¢ä","Pufa-Kot","Cica Pofi","Kedi Pufu"},
SKIN_FALLS ={"Stream Throne","Trono da Correnteza","","–¢—Ä–æ–Ω-–†—É—á–µ–π","Trono de Corriente","Ê∫™ÊµÅÂØ∂Â∫ß","Tron-Strumie≈Ñ","V√≠zes√©s Tr√≥n","Akƒ±≈ü Tahtƒ±"},
SKIN_FALLS_MISSION ={"Unlocked by winning using the Treasure Card.","Desbloqueado ao vencer com a Carta do Tesouro.","D√©bloqu√© en gagnant en utilisant la Carte au Tr√©sor.","–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ–±–µ–¥–æ–π —Å –ø–æ–º–æ—â—å—é –ö–∞—Ä—Ç—ã –°–æ–∫—Ä–æ–≤–∏—â.","Desbloqueado al ganar usando la Carta del Tesoro","ÊúÄÂæåÁôºÂá∫ÂØ∂ÁÆ±Âç°ÁâåËÄåÁç≤ÂæóÂãùÂà©ÂæåËß£Èéñ„ÄÇ","Odblokuj wygrywajƒÖc przy u≈ºyciu Karty Skarbu.","A felold√°shoz nyerj a Kincsk√°rtya haszn√°lat√°val.","Hazine Kartƒ± ile kazanarak kilidi a√ßƒ±ldƒ±."},
SKIN_CHEESE ={"Cheese Throne","Trono de Queijo","Tr√¥ne fromage","–°—ã—Ä–Ω—ã–π –¢—Ä–æ–Ω","Trono de Queso","Â•∂ÈÖ™ÂØ∂Â∫ß","Serowy Tron","Sajt Tr√≥n","Peynir Tahtƒ±"},
SKIN_UNICORN ={"Unicorn Pillow","Almofada de Unic√≥rnio","Coussin licorne","–ï–¥–∏–Ω–æ—Ä–æ–≥-–ü–æ–¥—É—à–∫–∞","Almohada de Unicornio","Áç®ËßíÁç∏ÊûïÈ†≠","Poduszka Jednoro≈ºca ","Egyszarv√∫ P√°rna","Unicorn Yastƒ±k"},
SKIN_PSYCHO ={"Psychedelic Armchair","Poltrona Psicod√©lica","Fauteuil psych√©d√©lique","–ü—Å–∏—Ö–æ–¥–µ–ª–∏—á–µ—Å–∫–æ–µ –ö—Ä–µ—Å–ª–æ","Sill√≥n Psicod√©lico","Ëø∑ÂπªÊâ∂ÊâãÊ§ÖÂ≠ê","Fotel Psychodeliczny","Pszichedelikus Fotels","Sayko Deli Koltuk"},
SKIN_PSYCHO_MISSION ={"Unlocked by winning with the Mess rule.","Desbloqueado ao vencer com a regra Bagun√ßa.","D√©bloqu√© en jouant avec la r√®gle Bazar.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ–±–µ–¥–æ–π —Å –ø—Ä–∞–≤–∏–ª–æ–º –ë–µ—Å–ø–æ—Ä—è–¥–∫–∞.","Desbloqueado por ganar con la regla de Desorden","Âú®Â§ßÊ∑∑‰∫ÇË¶èÁü©‰∏≠ÂãùÂá∫ÂæåËß£Èéñ„ÄÇ","Odblokuj wygrywajƒÖc z zasadƒÖ Ba≈Çaganu.","A felold√°shoz nyerj egy j√°t√©kot a Z≈±rzavar szab√°llyal.","Karmakarƒ±≈üƒ±k kuralƒ± ile kazanarak kilidi a√ßƒ±ldƒ±."},
SKIN_TV ={"Television","Televis√£o","T√©l√©vision","–¢–µ–ª–µ–≤–∏–∑–æ—Ä","Televisi√≥n","ÈõªË¶ñ","Telewizja","Telev√≠zi√≥","Televizyon"},
SKIN_RADIO ={"Radio","R√°dio","","–†–∞–¥–∏–æ","Radiofon√≠a","Êî∂Èü≥Ê©ü","","R√°di√≥","Radyo"},
SKIN_NEWSPAPER ={"Newspaper Armchair","Poltrona de Jornal","Fauteuil en journaux","–ì–∞–∑–µ—Ç–Ω–æ–µ –ö—Ä–µ—Å–ª–æ","Sill√≥n de Peri√≥dicos","Â†±Á´†Êâ∂ÊâãÊ§ÖÂ≠ê","Fotel-Gazeta","√öjs√°gpap√≠r Fotel","Gazete Koltuƒüu"},
SKIN_CHAMPION ={"Champion's Throne","Trono do Campe√£o","Tr√¥ne du champion","–ß–µ–º–ø–∏–æ–Ω—Å–∫–∏–π –¢—Ä–æ–Ω","Trono de Campe√≥n","ÂÜ†ËªçÂØ∂Â∫ß","Tron Czempiona","A Bajnok Tr√≥nja","≈ûampiyon Tahtƒ±"},
SKIN_CHAMPION_MISSION ={"Unlocked when placing high in authorized tournaments.","Desbloqueado ao alcan√ßar posi√ß√µes altas em torneios autorizados.","","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –≤—ã—Å–æ–∫–∏—Ö –º–µ—Å—Ç–∞—Ö –≤ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö.","Se desbloquea al quedar en alg√∫n puesto alto dentro de torneos autorizados.","Âú®ÊéàÊ¨äÁöÑËÅØË≥Ω‰∏≠ÂæóÂà∞ËºÉÂâçÁöÑÊéíÂêçÂæåËß£Èéñ„ÄÇ","Odblokuj przez wysokie umieszczenie w autoryzowanych turniejach. ","A felold√°shoz √©rj el magas helyez√©st a rendszeresen megszervezett versenyeken.","Yetkili turnuvalara y√ºksek yerle≈ütirilirken kilidi a√ßƒ±lƒ±r."},
SKIN_POTATO ={"Potato Throne","Trono de Batatas","Tr√¥ne patate","–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω—ã–π –¢—Ä–æ–Ω","Trono de Papas","ÂúüË±ÜÂØ∂Â∫ß","Tron Ziemniak","Burgonya Tr√≥n","Patates Tahtƒ±"},
SKIN_POTATO_MISSION ={"Unlocked by winning with the Potato Card.","Desbloqueado ao vencer usando a Carta da Batata.","D√©bloqu√© en gagnant avec la carte Patate.","–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø–æ–±–µ–¥–æ–π —Å –ö–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–π –ö–∞—Ä—Ç–æ–π.","Desbloqueado al ganar con la Carta de Papa","ÊúÄÂæåÁôºÂá∫ÂúüË±ÜÂç°ÁâåËÄåÂãùÂà©ÂæåËß£Èéñ„ÄÇ","Odblokuj wygrywajƒÖc KartƒÖ Ziemniaka.","A felold√°shoz nyerj a Burgonya K√°rty√°val.","Patates Kartƒ± ile kazanarak kilidi a√ßƒ±ldƒ±."},
SKIN_WONDERLAND ={"Throne of Wonders","Trono das Maravilhas","Tr√¥ne des merveilles","–¢—Ä–æ–Ω –ß—É–¥–µ—Å","Trono Maravilla","Áï∞ÊÉ≥Â§©ÈñãÂØ∂Â∫ß","Tron Cud√≥w","Csod√°k Tr√≥nja","Taht Harikasƒ±"},
SKIN_WONDERLAND_MISSION ={"Unlocked by winning once on each side of the Portal.","Desbloqueado ao vencer dos dois lados do Portal.","D√©bloqu√© en gagnant au moins une fois de chaque c√¥t√© du Portail.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –≤—ã–∏–≥—Ä–∞–≤ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –ü–æ—Ä—Ç–∞–ª–∞.","Desbloqueado ganando en ambos lados del Portal.","Âú®ÂÇ≥ÈÄÅÈñÄÁöÑÂÖ©ÁµÑÂç°Áâå‰∏≠ÂêÑÂãù‰∏ÄÊ¨°„ÄÇ.","Odblokuj wygrywajƒÖc po dw√≥ch stronach Portalu.","A felold√°shoz nyerj a Port√°l mindegyik oldal√°n.","Portalƒ±n her iki tarafƒ±nda bir kez kazanarak kilidi a√ßƒ±lƒ±r."},
SKIN_UNDERTALE ={"Asgore's Throne","Trono de Asgore","Trone d'Asgore","–¢—Ä–æ–Ω –ê—Å–≥–æ—Ä–∞","Trono de Asgore","Asgore ÁöÑÂØ∂Â∫ß","Tron Asgora","Asgore Tr√≥nja","Asgore'un Tahtƒ±"},
SKIN_DAY_MISSION ={"Unlocked by playing daily for %s days.","Desbloqueado ao jogar diariamente por %s dias.","D√©bloqu√© en jouant quotidiennement pendant %s jours.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –∏–≥—Ä–∞—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ %s –¥–Ω–µ–π.","Desbloqueado por jugar diariamente durante %s d√≠as.","ÈÄ£Á∫å %s Â§©ÊØèÂ§©Áé© UNO ÂæåËß£Èéñ„ÄÇ","Odblokuj, grajƒÖc codziennie przez %s dni.","A felold√°shoz j√°tssz %s napig minden nap.","%s g√ºn boyunca g√ºnl√ºk olarak oynayarak kilidi a√ßƒ±lƒ±r."},
SKIN_RIP ={"Tombstone","L√°pide","Pierre tombale","–ú–æ–≥–∏–ª–∞","L√°pida","Â¢ìÁ¢ë","Nagrobek","S√≠rk≈ë","Mezar ta≈üƒ±"},
SKIN_RIP_MISSION ={"Unlocked by challenging a player who did not say UNO.","Desbloqueado ao desafiar um jogador que n√£o disse UNO.","D√©bloqu√© en d√©fiant un joueur qui n'a pas dit UNO.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –±—Ä–æ—Å–∏–≤ –≤—ã–∑–æ–≤ –∏–≥—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Å–∫–∞–∑–∞–ª –£–ù–û.","Desbloqueada al retar a un jugador que no dijo UNO.","ÊàêÂäüË≥™Áñë‰∏ÄÂÄãÊ≤íË™™ Uno! ÁöÑÁé©ÂÆ∂ÂæåËß£Èéñ„ÄÇ","Odblokuj wyzywajƒÖc gracza, kt√≥ry nie powiedzia≈Ç UNO.","A felold√°shoz h√≠vj ki egy olyan j√°t√©kost, aki nem mondott UNO-t.","UNO demeyen bir oyuncuya itiraz ederek kilidi a√ßƒ±lƒ±r."},
SKIN_APPLE ={"Apple Throne","Trono de Ma√ß√£","Tr√¥ne pomme","–Ø–±–ª–æ—á–Ω—ã–π –¢—Ä–æ–Ω","Trono de Manzanas","ËòãÊûúÂØ∂Â∫ß","Jab≈Çkowy Tron","Alma Tr√≥n","Elma Tahtƒ±"},
SKIN_APPLE_MISSION ={"Unlocked when you get eliminated by your own Thunder Card.","Desbloqueado ao ser eliminado atingido pelo pr√≥prio raio.","D√©bloqu√© lorsque √©limin√© par votre propre Carte Tonnerre.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—ã —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã —Å–≤–æ–µ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ö–∞—Ä—Ç–æ–π –ì—Ä–æ–º–∞.","Desbloqueado cuando eres eliminado por tu propia Carta Rel√°mpago.","Áï∂‰Ω†‰ΩøÁî®‰∫ÜÈõ∑ÈõªÊö¥ÊìäÂç°ÁâåËÄå‰Ω†Ë¢´Ê∑òÊ±∞Âá∫Â±ÄÂæåËß£Èéñ„ÄÇ","Odblokuj, kiedy zostaniesz wyeliminowany przez w≈ÇasnƒÖ Kartƒô Grzmotu.","A felold√°shoz ejtsd ki magad a j√°t√©kb√≥l a saj√°t Mennyd√∂rg√©s K√°rty√°ddal.","Kendi Yƒ±ldƒ±rƒ±m Kartƒ±nƒ±z tarafƒ±ndan elendiƒüinizde kilidi a√ßƒ±lƒ±r."},
SKIN_HEART ={"Throne of Love","Trono do Amor","Tr√¥ne d'amour","–¢—Ä–æ–Ω –õ—é–±–≤–∏","Trono del Amor","ÊÑõÂøÉÂØ∂Â∫ß","Tron Mi≈Ço≈õci","A Szerelem Tr√≥nja","Taht-ƒ± A≈ük"},
SKIN_HEART_MISSION ={"Unlocked by donating 5 or more cards at once.","Desbloqueado ao doar 5 ou mais cartas de uma s√≥ vez.","D√©bloqu√© en donnant 5 ou plus, de cartes d'un coup.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–≤ 5 –∏–ª–∏ –±–æ–ª–µ–µ –∫–∞—Ä—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.","Desbloqueado por donar cinco o m√°s cartas seguidas.","Âú®‰∏ÄÂÄãÂõûÂêàË£°ÊçêÂá∫ 5 ÂºµÂç°ÁâåÊàñ‰ª•‰∏äÂæåËß£Èéñ„ÄÇ","Odblokuj przekazujƒÖc 5 lub wiƒôcej kart naraz.","A felold√°shoz adom√°nyozz egyszerre 5 vagy t√∂bb k√°rty√°t.","Aynƒ± anda 5 veya daha fazla kart baƒüƒ±≈ülayarak a√ßƒ±lƒ±r."},
SKIN_ELEMENTAL ={"Elemental Throne","Trono dos Elementos","Trone √©l√©mentaire","–°—Ç–∏—Ö–∏–π–Ω—ã–π –¢—Ä–æ–Ω","Trono Elemental","ÂÖÉÁ¥†ÂØ∂Â∫ß","Tron ≈ªywio≈Çowy ","Elemi Tr√≥n","Elemental Taht"},
SKIN_ELEMENTAL_DESC_MISSION ={"Unlocked by playing all four zeros (one of each color) in the same game.","Desbloqueado ao jogar os quatro zeros (um de cada cor) na mesma partida.","D√©bloqu√© en jouant tous les zeros (de chaque couleur) dans la m√™me partie.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –∏–≥—Ä–∞—è —Å–æ –≤—Å–µ–º–∏ 0 (–ø–æ –æ–¥–Ω–æ–º—É –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∞) –≤ –æ–¥–Ω–æ–π –∏–≥—Ä–µ.","Desbloqueado jugando todas las cuatro cartas 0 de cada color en la misma partida.","Âú®Âêå‰∏ÄÂ±ÄÈÅäÊà≤‰∏≠ÁôºÂá∫ 4 Âºµ 0 ËôüÂç°Áâå(ÊØèÈ°èËâ≤ÂêÑ‰∏ÄÂºµ)ÂæåËß£Èéñ„ÄÇ","Odblokuj, grajƒÖc wszystkimi czterema zerami (jednym z ka≈ºdego koloru) w tej samej grze.","A felold√°shoz j√°tsszd ki mind a n√©gy null√°s k√°rty√°t (mindegyik sz√≠nb≈ël egy) ugyanabban a j√°t√©kban.","Aynƒ± oyunda d√∂rt sƒ±fƒ±rƒ±n (her renkten biri) tamamƒ± oynanarak a√ßƒ±lƒ±r."},
SKIN_TRASH ={"Trash Throne","Trono de Lixeira","Trone en d√©tritus","–ú—É—Å–æ—Ä–Ω—ã–π –¢—Ä–æ–Ω","Trono de Desechos","ÂûÉÂúæÊ°∂ÂØ∂Â∫ß","Tron ≈ömieci","Kuka Tr√≥n","√á√∂p Kutusu Tahtƒ±"},
SKIN_TRASH_MISSION ={"Unlocked by having more than 25 cards in your hand, without intentional draws.","Desbloqueado ao ter mais de 25 cartas na m√£o, sem compras intencionais.","D√©bloqu√© en ayant plus de 25 cartes dans votre jeu, sans tirages intentionnels.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –∏–º–µ—è –≤ —Ä—É–∫–µ –±–æ–ª–µ–µ 25 –∫–∞—Ä—Ç, –±–µ–∑ –ø—Ä–µ–¥–Ω–∞–º–µ—Ä–µ–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π.","Desbloqueado al tener m√°s de 25 cartas en baraja, sin sortearlas intencionalmente.","Âú®Ê≤íÊúâËá™È°òÁΩ∞ÊäΩÁöÑÂç°ÁâåÂâçÊèê‰∏ã, Êâã‰∏≠ÊåÅÊúâÂ§öÊñº 25 ÂºµÂç°ÁâåÂæåËß£Èéñ„ÄÇ","Odblokuj majƒÖc wiƒôcej ni≈º 25 kart, bez celowych losowa≈Ñ.","A felold√°shoz tarts t√∂bb mint 25 k√°rty√°t a kezedben, sz√°nd√©kos felh√∫z√°s n√©lk√ºl.","Kasƒ±tlƒ± kart √ßekmeden elinizde 25'ten fazla kart olmasƒ±yla a√ßƒ±lƒ±r."},
SKIN_BREAKFAST ={"Breakfast","Caf√© da Manh√£","Petit-d√©jeuner","–ó–∞–≤—Ç—Ä–∞–∫","Desayuno","Êó©È§ê","≈öniadanie","Reggeli","Kahvaltƒ±"},
SKIN_COMPUTER ={"Computer","Computador","Ordinateur","–ö–æ–º–ø—å—é—Ç–µ—Ä","Computadora","ÈõªËÖ¶","Komputer","Sz√°m√≠t√≥g√©p","Bilgisayar"},
SKIN_BONES ={"Bone Throne","Trono de Ossos","Tr√¥ne d'os","–ö–æ—Å—Ç—è–Ω–æ–π –¢—Ä–æ–Ω","Trono de Huesos","È™®È†≠ÂØ∂Â∫ß","Tron z Ko≈õci","Csont Tr√≥n","Kemik Taht"},
SKIN_BONES_MISSION ={"Unlocked by surviving Limbo rule until the limit is 4 cards.","Desbloqueado ao sobreviver ao Limbo at√© que o limite seja 4 cartas.","D√©bloqu√© en survivant √† la r√®gle Limbo jusqu'√† ce que la limite soit de 4 cartes.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –≤—ã–∂–∏–≤–∞—é—â–∏–º –ø—Ä–∞–≤–∏–ª–æ–º Limbo –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –ª–∏–º–∏—Ç –Ω–µ —Å–æ—Å—Ç–∞–≤–∏—Ç 4 –∫–∞—Ä—Ç—ã.","Desbloqueado al sobrevivir la regla del Limbo hasta que el l√≠mite sea de 4 cartas.","Âú®ÊûóÊ≥¢ËàûË¶èÁü©‰∏≠ÁîüÂ≠òÁõ¥Âà∞ÊåÅÊúâÁöÑÂç°Áâå‰∏äÈôêÊòØ 4 Âºµ„ÄÇ","Odblokuj przez przetrwanie z zasadƒÖ Otch≈Ça≈Ñ dop√≥ki limit nie wyniesie 4 kart. ","A felold√°shoz √©ld t√∫l a Limbo szab√°lyt addig, am√≠g 4 k√°rtya lesz a hat√°r.","Limit 4 kart olana kadar Limbo kuralƒ±ndan saƒü √ßƒ±kƒ±larak a√ßƒ±lƒ±r."},
SKIN_CHOCOLATE ={"Chocolate Throne","Trono de Chocolate","Tr√¥ne chocolat","–®–æ–∫–æ–ª–∞–¥–Ω—ã–π –¢—Ä–æ–Ω","Trono de Chocolate","Â∑ßÂÖãÂäõÂØ∂Â∫ß","Czekoladowy Tron","Csokol√°d√© Tr√≥n","√áikolata Taht"},
SKIN_CHOCOLATE_MISSION ={"Unlocked by winning in less than 1 minute.","Desbloqueado ao vencer em menos de 1 minuto.","D√©bloqu√© en gagnant en moins d'une minute.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –≤—ã–∏–≥—Ä–∞–≤ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 1 –º–∏–Ω—É—Ç—É.","Desbloqueado al ganar en menos de un minuto.","Âú® 1 ÂàÜÈêòÂÖßÂãùÂá∫ÈÅäÊà≤ÂæåËß£Èéñ„ÄÇ","Odblokuj wygrywajƒÖc w mniej ni≈º minutƒô.","A felold√°shoz nyerj kevesebb, mint 1 perc alatt.","1 dakikadan kƒ±sa s√ºrede kazanarak a√ßƒ±lƒ±r."},
SKIN_MARINE ={"Sea Armchair","Poltrona Marinha","Fauteuil des mers","–ú–æ—Ä—Å–∫–æ–µ –∫—Ä–µ—Å–ª–æ","Sill√≥n de Mar","Êµ∑Ê¥ãÊâ∂ÊâãÊ§ÖÂ≠ê","Morski Fotel","Tengeri Fotel","Denizden Koltuk"},
SKIN_MARINE_MISSION ={"Unlocked when Elise wins as your teammate.","Desbloqueado quando Elise vence como sua dupla.","D√©bloqu√© lorsque Elise gagne en tant que co√©quipi√®re.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞ Elise –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç –∫–∞–∫ —Ç–≤–æ–π –ø–∞—Ä—Ç–Ω—ë—Ä –≤ –∫–æ–º–∞–Ω–¥–µ.","Desbloqueado cuando Elise gana como tu compa√±era.","Áï∂ EliseÊòØ‰Ω†ÁöÑÊê≠Ê™îÊôÇÂãùÂá∫ÈÅäÊà≤ÂæåËß£Èéñ„ÄÇ","Odblokuj gdy Elise wygra w twojej dru≈ºynie.","A felold√°shoz Elise kell hogy nyerjen csapatt√°rsadk√©nt.","Elise takƒ±m arkada≈üƒ±nken kazandƒ±ƒüƒ±nda a√ßƒ±lƒ±r."},
SKIN_ROCKET ={"Rocket Throne","Trono de Foguete","Tr√¥ne fus√©e","–†–∞–∫–µ—Ç–Ω—ã–π –¢—Ä–æ–Ω","Trono Cohete","ÁÅ´ÁÆ≠ÂØ∂Â∫ß","Tron Rakieta","Rak√©ta Tr√≥n","Roket Tahtƒ±"},
SKIN_BOOTCAMP ={"Camouflage Armchair","Poltrona Camuflada","Tr√¥ne camouflage","–ö–∞–º—É—Ñ–ª—è–∂–Ω–æ–µ –ö—Ä–µ—Å–ª–æ","Sill√≥n de Camuflage","Ëø∑ÂΩ©ÂÅΩË£ùÊâ∂ÊâãÊ§Ö","Tron Kamufla≈ºu","√Ålca Fotel","Kamuflaj Koltuk"},
SKIN_BOOTCAMP_MISSION ={"Unlocked by winning a game without saying UNO.","Desbloqueado ao vencer uma partida sem dizer UNO.","D√©bloqu√© en gagnant un jeu sans dire UNO.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –≤—ã–∏–≥—Ä–∞–≤ –∏–≥—Ä—É, –Ω–µ —Å–∫–∞–∑–∞–≤ –£–ù–û.","Desbloqueado al ganar una partida sin decir UNO.","‰∏çÂñä UNO ËÄåÂãùÂá∫‰∏ÄÂ†¥ÈÅäÊà≤„ÄÇ","Odblokuj wygrywajƒÖc bez wypowiedzenia UNO.","A felold√°shoz nyerj an√©lk√ºl, hogy kimondod az UNO-t.","UNO demeden bir oyun kazanarak a√ßƒ±lƒ±r."},
SKIN_FOOTBALL ={"Football Throne","Trono do Futebol","Tr√¥ne Football","–§—É—Ç–±–æ–ª—å–Ω—ã–π –¢—Ä–æ–Ω","Trono de F√∫tbol","Ë∂≥ÁêÉÂØ∂Â∫ß","Tron Pi≈Çkarski","Foci Tr√≥n","Futbol Tahtƒ±"},
SKIN_FOOTBALL_MISSION ={"Unlocked by blocking +2 or +4 %s times.","Desbloqueado ao bloquear +2 ou +4 %s vezes.","D√©bloqu√© en bloquant un +2 ou un +4 %s fois.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π +2 –∏–ª–∏ +4 %s —Ä–∞–∑.","Desbloqueado por bloquear cartas de +2 o +4 %s veces.","Âú®‰∏ä‰∏ÄÂÄãÁé©ÂÆ∂ÁôºÂá∫ +2 Êàñ +4 Âç°Áâå‰πãÂæåÁπºÁ∫åÁôºÂá∫ +2 Êàñ +4 Âç°Áâå, ÈÅîÊàê %s Ê¨°ÂæåËß£Èéñ„ÄÇ","Odblokuj blokujƒÖc +2 lub +4 %s razy.","A felold√°shoz v√©dd ki a +2-t vagy a +4-et %s alkalommal.","%s kez +2 veya +4 ile engellenerek kilidi a√ßƒ±ldƒ±."},
SKIN_LOOT ={"Pot of Gold","Pote de Ouro","Chaudron d'or","–ì–æ—Ä—à–æ—á–µ–∫ —Å –∑–æ–ª–æ—Ç–æ–º","Tarro de Oro","‰∏ÄÂ£∫Èáë","Garniec Z≈Çota","Faz√©k Arany","Altƒ±n Pot"},
SKIN_LOOT_MISSION ={"Unlocked when every card in your starting hand has the same color.","Desbloqueado ao iniciar uma partida com todas as cartas da mesma cor.","D√©bloqu√© lorsque toutes les cartes de votre jeu sont de la m√™me couleur.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –∫–∞–∂–¥–∞—è –∫–∞—Ä—Ç–∞ –≤ –≤–∞—à–µ–π —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ä—É–∫–µ –∏–º–µ–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π —Ü–≤–µ—Ç.","Desbloqueado cuando cada carta en tu baraja inicial tenga el mismo color.","‰Ω†Ëµ∑ÂàùÊâã‰∏≠ÁöÑÂç°ÁâåÈÉΩÊòØÂêå‰∏ÄÂÄãÈ°èËâ≤ÁöÑÊôÇÂÄôËß£Èéñ„ÄÇ","Odblokuj kiedy ka≈ºda karta na poczƒÖtku gry ma taki sam kolor.","A felold√°shoz legyen a kezd√©skor az √∂sszes k√°rtya a kezedben azonos sz√≠n≈±.","Ba≈ülangƒ±√ßda ‚Äã‚Äãelinizdeki her kart aynƒ± renge sahip olduƒüunda a√ßƒ±lƒ±r."},
SKIN_ASTRAL ={"Astral Throne","Trono Astral","Tr√¥ne astral","–ê—Å—Ç—Ä–∞–ª—å–Ω—ã–π –¢—Ä–æ–Ω","Trono Astral","ÊòüÈ´îÂØ∂Â∫ß","Tron Astralny","Csillag√°szati Tr√≥n","Astral Taht"},
SKIN_ASTRAL_MISSION ={"Unlocked when you and every other player have 1 card in hand (minimum 6 players).","Desbloqueado quando voc√™ e os outros jogadores t√™m 1 carta (m√≠nimo 6 jogadores).","D√©bloqu√© lorsque vous et tous les autres jours ont une seule carte en main (6 joueurs minimum).","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞ —É –≤–∞—Å –∏ —É –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å 1 –∫–∞—Ä—Ç–∞ –≤ —Ä—É–∫–µ (–º–∏–Ω–∏–º—É–º 6 –∏–≥—Ä–æ–∫–æ–≤).","Desbloqueado cuando t√∫ y todos los dem√°s jugadores tienen una carta (m√≠nimo 6 jugadores).","Áï∂‰Ω†ÂíåÂÖ∂‰ªñÁé©ÂÆ∂Êâã‰∏≠ÈÉΩÂè™Ââ©‰∏ÄÂºµÂç°ÁâåÁöÑÊôÇÂÄôËß£Èéñ (ÊúÄÂ∞ëÈúÄË¶Å 6 ÂÄãÁé©ÂÆ∂)„ÄÇ","Odblokuj kiedy ty i wszyscy pozostali gracze majƒÖ 1 kartƒô w rƒôce (minimum 6 graczy).","A felold√°shoz neked √©s minden m√°s j√°t√©kosnak 1 k√°rtya kell hogy legyen a kezetekben. (minimum 6 j√°t√©kos)","Siz ve diƒüer her oyuncunun elinde 1 kart olduƒüunda a√ßƒ±lƒ±r (en az 6 oyuncu)."},
SKIN_RANDOM ={"Mysterious Throne","Trono Misterioso","Tr√¥ne myst√©rieux","–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –¢—Ä–æ–Ω","Trono Aleatorio","Á•ûÁßòÂØ∂Â∫ß","Tajemniczy Tron","Titokzatos Tr√≥n","Gizemli Taht"},
SKIN_RANDOM_DESC ={"This turns into a random chair (that you already own).","Isto se transforma em uma cadeira aleat√≥ria (das que voc√™ tiver).","Il se transforme en une chaise al√©atoire (que vous poss√©dez d√©j√†).","–≠—Ç–æ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —Å–ª—É—á–∞–π–Ω–æ–µ –∫—Ä–µ—Å–ª–æ (–∫–æ—Ç–æ—Ä–æ–µ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å).","Selecciona una silla aleatoria de las que est√©n disponibles.","ÈÄôÊúÉÈö®Ê©üËÆäÊàê‰ªª‰Ωï‰∏ÄÂºµÊ§ÖÂ≠ê (Âè™Èôê‰Ω†ÊìÅÊúâÁöÑ)„ÄÇ","To zmienia w dowolne krzes≈Ço (kt√≥re ju≈º posiadasz).","Ez egy v√©letlenszer≈± sz√©kk√© v√°lik. (amit m√°r birtokolsz)","Bu, rastgele bir sandalyeye d√∂n√º≈ü√ºr (zaten sahip olduƒüunuz)."},
SKIN_FASHION ={"Chic Armchair","Poltrona Chique","Fauteuil chic","–®–∏–∫–∞—Ä–Ω–æ–µ –∫—Ä–µ—Å–ª–æ","Sill√≥n Elegante","ÊôÇÂ∞öÊâ∂ÊâãÊ§Ö","Szykowny Tron","Eleg√°ns Fotel","≈ûƒ±k Koltuk"},
SKIN_FRIEND ={"Friend Armchair","Poltrona Amiga","Fauteuil ami","–î—Ä—É–∂–µ—Å–∫–æ–µ –∫—Ä–µ—Å–ª–æ","Sill√≥n Amigo","ÊúãÂèãÊâ∂ÊâãÊ§Ö","Przyjacielski Fotel","Bar√°ts√°gos Fotel","Arkada≈ü Koltuk"},
SKIN_CHEST ={"Treasure Chest","Ba√∫ do Tesouro","Coffre au Tr√©sor","–°—É–Ω–¥—É–∫ —Å —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏","Cofre del Tesoro","ËóèÂØ∂ÁÆ±","Skrzynia Skarb√≥w","Kincsesl√°da","Hazine Sandƒ±ƒüƒ±"},
SKIN_CHEST_MISSION ={"Unlocked by stealing the Treasure Card.","Desbloqueado ao roubar a Carta do Tesouro.","D√©bloqu√© en volant la Carte au Tr√©sor.","–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∫—Ä–∞–∂–µ –ö–∞—Ä—Ç—ã –°–æ–∫—Ä–æ–≤–∏—â.","Desbloqueado al robar la Carta del Tesoro.","ÂÅ∑ÂèñÂØ∂Áâ©Âç°ÁâåÂæåËß£Èéñ„ÄÇ","Odblokuj kradnƒÖc Karte Skar√≥w.","A felold√°shoz lopd el a Kincsk√°rty√°t.","Hazine Kartƒ±nƒ± √ßalarak a√ßƒ±lƒ±r."},
SKIN_TOTORO ={"Totoro","","","–¢–æ—Ç–æ—Ä–æ","","ÈæçË≤ì","","",""},
SKIN_TOTORO_MISSION ={"Unlocked by wearing an outfit similar to it (there are 2 items).","Desbloqueado ao vestir um visual parecido com ele (s√£o 2 itens).","D√©bloqu√© en portant une tenue lui √©tant similaire (il y a 2 objets).","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –Ω–æ—à–µ–Ω–∏–µ–º –æ–¥–µ–∂–¥—ã, –ø–æ—Ö–æ–∂–µ–π –Ω–∞ –Ω–µ–≥–æ (–µ—Å—Ç—å 2 –ø—Ä–µ–¥–º–µ—Ç–∞).","Desbloqueado al poseer una vestimenta similar a el (son 2 objetos).","Á©øËëóË∑üÂÆÉ‰∏ÄÊ®£ÁöÑ (ÂÖ©ÂÄã) Ë£ùÊâÆÂ∞±ÊúÉËß£Èéñ„ÄÇ","Odblokuj zak≈ÇadajƒÖc podobne ubranie do tego (sƒÖ 2 przedmioty).","A felold√°shoz viselj ehhez hasonl√≥ ruh√°t. (2 elem van)","Buna benzer bir kƒ±yafet giyilerek a√ßƒ±lƒ±r (2 √∂ƒüe vardƒ±r)."},
SKIN_COFFEE ={"Cup of Coffee","X√≠cara de Caf√©","Tasse de Caf√©","–ß–∞—à–∫–∞ –∫–æ—Ñ–µ","Copa de caf√©","ÂíñÂï°‰∏ÄÊùØ","Kubek Kawy","Egy Cs√©sze K√°v√©","Bir fincan kahve"},
SKIN_COFFEE_MISSION ={"Unlocked by staying in a room for more than 4 hours.","Desbloqueado ao ficar em uma sala por mais de 4 horas.","D√©bloqu√© en restant dans un salon pendant plus de 4 heures.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ –±–æ–ª–µ–µ 4 —á–∞—Å–æ–≤.","Desbloqueada por estar m√°s de cuatro horas en una sala.","Âú®Âêå‰∏ÄÂÄãÊàøÈñìÂæÖ‰∏ä 4 ÂÄãÂ∞èÊôÇÊàñ‰ª•‰∏ä‰πãÂæåËß£Èéñ„ÄÇ","Odblokuj pozostajƒÖc w pokoju przez wiƒôcej ni≈º 4 godziny.","A felold√°shoz tart√≥zkodj t√∂bb mint 4 √≥r√°n kereszt√ºl egy szob√°ban.","Bir odada 4 saatten fazla kalƒ±narak a√ßƒ±lƒ±r."},
SKIN_PUMPKIN ={"Pumpkin Throne","Trono de Ab√≥bora","Tr√¥ne citrouille","–¢—ã–∫–≤–µ–Ω–Ω—ã–π –¢—Ä–æ–Ω","Trono de Calabaza","ÂçóÁìúÂØ∂Â∫ß","Dyniowy Tron","S√ºt≈ët√∂k Tr√≥n","Balkabaƒüƒ± Tahtƒ±"},
SKIN_PUMPKIN_MISSION ={"Unlocked by playing a +4 on a player stuck by a Web Card.","Desbloqueado ao jogar um +4 em um jogador preso pela Carta da Teia.","D√©bloqu√© en jouant un +4 sur un joueur coinc√© par une Carte Toile d'Araign√©e.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –∫–∏–Ω—É–≤ +4 –∏–≥—Ä–æ–∫—É, –∑–∞—Å—Ç—Ä—è–≤—à–µ–º –Ω–∞ –ü–∞—É—á—å–µ–π –ö–∞—Ä—Ç–µ.","Desbloqueado por jugar una carta +4 sobre un jugador afectado por una Carta Telara√±a.","Âêë‰∏ÄÂÄãË¢´ËúòËõõÁ∂≤Âç°ÁâåÈôêÂà∂‰∫ÜÁöÑÁé©ÂÆ∂ÁôºÂá∫ +4 Âç°Áâå„ÄÇ","Odblokuj grajƒÖc karte +4 na gracza zablokowanego KartƒÖ SieciowƒÖ.","A felold√°shoz j√°tssz egy +4-es k√°rty√°t egy olyan j√°t√©kos el≈ëtt, aki a H√°l√≥ K√°rtya hat√°sa alatt van","Web Kartƒ± takƒ±lƒ± bir oyuncuya +4 oynayarak a√ßƒ±lƒ±r."},
SKIN_CIRCUS ={"Circus Throne","Trono do Circo","Tr√¥ne de cirque","–¶–∏—Ä–∫–æ–≤–æ–π –¢—Ä–æ–Ω","Trono de Circo","È¶¨Êà≤ÂúòÂØ∂Â∫ß","Cyrkowy Tron","Cirkusz Tr√≥n","Sirk Tahtƒ±"},
SKIN_CIRCUS_MISSION ={"Unlocked by playing a +2 or +4 and ending up drawing the cards yourself.","Desbloqueado ao jogar +2 ou +4 e voc√™ mesmo acabar comprando cartas.","D√©bloqu√© en jouant un +2 ou un +4 et en finissant par tirer les cartes vous-m√™me.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –∏–≥—Ä–∞—è +2 –∏–ª–∏ +4 –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–º –∫–∞—Ä—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.","Desbloqueado al jugar una carta +2 o +4 pero que terminen sort√©andose a si mismo.","ÁôºÂá∫ +2 Êàñ +4 Âç°ÁâåÂèØÊòØÊúÄÁµÇËá™Â∑±Ë¢´ÁΩ∞ÊäΩÂæåËß£Èéñ„ÄÇ","Odblokuj grajƒÖc +2 lub +4 i ko≈ÑczƒÖc na dobraniu w≈Çasnych kart.","A felold√°shoz j√°tssz egy +2-es vagy +4-es k√°rty√°t, √©s v√©g√ºl h√∫zd ut√°na te a k√°rty√°kat."," kartlarƒ± kendiniz √ßekerken +2 veya +4 oynayarak a√ßƒ±lƒ±r."},
SKIN_POPCORN ={"Popcorn Throne","Trono de Pipoca","Tr√¥ne popcorn","–¢—Ä–æ–Ω-–ü–æ–ø–∫–æ—Ä–Ω","Trono de Popcorn","ÁàÜÁ±≥Ëä±ÂØ∂Â∫ß","Popcornowy Tron","K√°v√©sz√ºnet?","Patlamƒ±≈ü Mƒ±sƒ±r Tahtƒ±"},
SKIN_POPCORN_MISSION ={"Unlocked by winning by using the Jump-in rule.","Desbloqueado ao vencer cortando.","D√©bloqu√© en gagnant en utilisant la r√®gle Jump-in.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ–±–µ–¥–æ–π —Å –ø–æ–º–æ—â—å—é –ø—Ä–∞–≤–∏–ª–∞ Jump-in.","Desbloqueado al ganar usando la regla de Saltar-en.","Âú®Ë∑≥ÂÖ•Ê®°Âºè‰∏≠ÊúÄÂæåÊèíÈöäÁôºÁâåËÄåÂãùÂà©ÂæåËß£Èéñ„ÄÇ","Odblokuj wgrywajƒÖc przy u≈ºyciu zasady Wskocz.","A felold√°shoz nyerj a Beugr√°s szab√°ly felhaszn√°l√°s√°val.","Atlama kuralƒ±nƒ± kullanarak kazanarak a√ßƒ±lƒ±r."},
SKIN_GOTHIC ={"Gothic Throne","Trono G√≥tico","Tr√¥ne gothique","–ì–æ—Ç–∏—á–µ—Å–∫–∏–π –¢—Ä–æ–Ω","Trono G√≥tico","Ê≠åÂæ∑È¢®Ê†ºÂØ∂Â∫ß","Gotycki Tron","G√≥tikus Tr√≥n","Gotik Taht"},
SKIN_GOTHIC_MISSION ={"Unlocked when someone colors your cards black by using the Ink Card.","Desbloqueado quando algu√©m pinta suas cartas de preto usando a Carta da Tinta.","D√©bloqu√© lorsque qu'un joueur colore vos cartes en noir en utilisant une Carte Encre.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –æ–∫—Ä–∞—à–∏–≤–∞–µ—Ç –≤–∞—à–∏ –∫–∞—Ä—Ç—ã –≤ —á—ë—Ä–Ω—ã–π —Ü–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é –ß–µ—Ä–Ω–∏–ª—å–Ω–æ–π –ö–∞—Ä—Ç—ã.","Desbloqueado cuando alguien colorea de negro tus cartas usando la Carta de Tinta.","ÂÖ∂‰ªñÁé©ÂÆ∂Áî®Â¢®Ê±ÅÂç°ÁâåÊää‰Ω†ÁöÑÂç°ÁâåÊüìÊàêÈªëËâ≤ÂæåËß£Èéñ„ÄÇ","Odblokuj, kiedy kto≈õ pomaluje twoje karty na czarno u≈ºywajƒÖc Karty Atramentu.","A felold√°shoz sz√≠nezze valaki a Tinta K√°rty√°val feket√©re a k√°rty√°id.","Birisi M√ºrekkep Kartƒ±nƒ± kullanarak kartlarƒ±nƒ±zƒ± siyaha boyadƒ±ƒüƒ±nda kilidi a√ßƒ±lƒ±r."},
SKIN_UFO ={"UFO","OVNI","OVNI","–ù–õ–û","OVNI","","","","Bir Cƒ∞sim Yakla≈üƒ±yor Efendim"},
SKIN_UFO_MISSION ={"Unlocked by winning due to a card being banished.","Desbloqueado ao vencer devido a uma carta ter sido banida.","D√©verrouill√© en gagnant gr√¢ce au bannissement d'une carte.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ–±–µ–¥–æ–π –±–ª–∞–≥–æ–¥–∞—Ä—è –∏–∑–≥–Ω–∞–Ω–∏—é –∫–∞—Ä—Ç—ã.","Desbloqueado al ganar debido a que una carta fuese sancionada.","Âú®Âç°ÁâåË¢´Êí§Ëµ∞ÁÑ∂ÂæåÂãùÂá∫ÁöÑÊÉÖÊ≥Å‰∏ãËß£Èéñ„ÄÇ","Odblokuj poprzez wygranƒÖ, niszczƒÖc swojƒÖ ostatniƒÖ kartƒô.","A felold√°shoz nyerj √∫gy, hogy sz√°m≈±z√∂l egy k√°rty√°t.","Bir kartƒ±n yasaklanmasƒ± nedeniyle kazanarak a√ßƒ±lƒ±r."},
SKIN_PINEAPPLE ={"Pineapple Throne","Trono de Abacaxi","Tr√¥ne ananas","–ê–Ω–∞–Ω–∞—Å–Ω—ã–π –¢—Ä–æ–Ω","Trono de Pi√±a","È≥≥Ê¢®ÂØ∂Â∫ß","Ananasowy Tron","Anan√°sz Tr√≥n","Ananas Tahtƒ±"},
SKIN_PINEAPPLE_MISSION ={"Unlocked by winning while your mouse is confused.","Desbloqueado ao vencer enquanto seu rato est√° confuso.","D√©bloqu√© en gagnant alors que votre souris est confuse.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ–±–µ–¥–æ–π, –ø–æ–∫–∞ –≤–∞—à–∞ –º—ã—à—å –≤ –∑–∞–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–µ.","Desbloqueado al ganar mientras tu rat√≥n est√° confundido.","Áï∂‰Ω†ÁöÑËÄÅÈº†Ë¢´Ëø∑ÊÉëÁÑ∂ÂæåÂãùÂá∫ÂæåËß£Èéñ„ÄÇ","Odblokuj wygrywajƒÖc, kiedy twoja myszka jest zdezorientowana.","A felold√°shoz nyerj √∫gy, hogy zavarodott az egered.","Farenizin kafasƒ± karƒ±≈ütƒ±ƒüƒ±nda kazanarak a√ßƒ±lƒ±r."},
SKIN_GUITAR ={"Music Throne","Trono da Sonzeira","Tr√¥ne musical","–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –¢—Ä–æ–Ω","Trono de M√∫sica","Èü≥Ê®ÇÂØ∂Â∫ß","Tron Muzyczny","Zene Tr√≥n","M√ºzik Tahtƒ±"},
SKIN_GUITAR_MISSION ={"Unlocked when someone uses the Dancing Chairs Card and you remain in the same seat.","Desbloqueado quando algu√©m usa a Carta da Dan√ßa e voc√™ se mant√©m no mesmo lugar.","D√©bloqu√© lorsque quelqu'un utilise la Carte Chaises Musicales et vous restez tout le temps assis √† la m√™me place.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–∞—Ä—Ç—É ¬´–¢–∞–Ω—Ü—É—é—â–∏–µ —Å—Ç—É–ª—å—è¬ª, –∏ –≤—ã –æ—Å—Ç–∞–µ—Ç–µ—Å—å –Ω–∞ —Ç–æ–º –∂–µ –º–µ—Å—Ç–µ.","Desbloqueado cuando alguien usa la Carta de Sillas Danzantes y te quedas en el mismo lugar.","Êúâ‰∫∫‰ΩøÁî®ËàûÂãïÊ§ÖÂ≠êÂç°ÁâåÂèØÊòØ‰Ω†ÊúÄÂæåÁπºÁ∫åÂùêÂú®Âêå‰∏ÄÂÄã‰ΩçÁΩÆÂæåËß£Èéñ„ÄÇ","Odblokuj kiedy kto≈õ u≈ºyje Karty Ta≈ÑczƒÖce Fotele, a ty pozostaniesz w tym samym miejscu.","A felold√°shoz maradjon a sz√©ked ugyanazon a helyen miut√°n valaki a T√°ncol√≥ Sz√©kek K√°rty√°t haszn√°lja.","Birisi Dans Sandalyeleri Kartƒ±nƒ± kullandƒ±ƒüƒ±nda ve aynƒ± koltukta kaldƒ±ƒüƒ±nƒ±zda a√ßƒ±lƒ±r."},
SKIN_MERMAID ={"Mermaid's Throne","Trono da Sereia","Tr√¥ne sir√®ne","–¢—Ä–æ–Ω –†—É—Å–∞–ª–∫–∏","Trono de Sirena","‰∫∫È≠öÂØ∂Â∫ß","Tron Syreny","Sell≈ë Tr√≥nja","Deniz Kƒ±zƒ± Tahtƒ±"},
SKIN_MERMAID_MISSION ={"Unlocked by winning with your name colored green.","Desbloqueado ao vencer com seu nome pintado de verde.","D√©bloqu√© en gagnant avec votre nom color√© en vert.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –≤—ã–∏–≥—Ä–∞–≤ —Å –∑–µ–ª—ë–Ω—ã–º —Ü–≤–µ—Ç–æ–º –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏.","Desbloqueado a la victoria con el nombre coloreado en verde.","Âú®‰Ω†ÂêçÂ≠óÊòØÁ∂†Ëâ≤ÁöÑÊôÇÂÄôÂãùÂá∫ÂæåËß£Èéñ„ÄÇ","Odblokuj wygrywajƒÖc z twojƒÖ nazwƒÖ w kolorze zielonym.","A felold√°shoz nyerj √∫gy, hogy z√∂ld a neved.","Ye≈üil renkli isminizle kazanarak a√ßƒ±lƒ±r."},
SKIN_GAGA ={"Lady's Throne","Trono da Lady","Tr√¥ne de la dame","–¢—Ä–æ–Ω –õ–µ–¥–∏","Trono de Dama","ÊâãÊåáÂØ∂Â∫ß","Tron Damy","H√∂lgy Tr√≥nja","Diva Tahtƒ±"},
SKIN_GAGA_MISSION ={"Unlocked by stealing two +4 in the same game using the Robbery Card.","Desbloqueado ao roubar dois +4 na mesma partida usando a Carta do Roubo.","D√©bloqu√© en volant deux +4 dans la m√™me partie en utilisant la Carte Vol.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø—É—Ç—ë–º –∫—Ä–∞–∂–∏ –¥–≤—É—Ö +4 –≤ –æ–¥–Ω–æ–π –∏–≥—Ä–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ö–∞—Ä—Ç—ã –û–≥—Ä–∞–±–ª–µ–Ω–∏—è.","Desbloqueado robando dos cartas +4 en la misma partida usando la Carta de Robo","Âú®Âêå‰∏ÄÂ†¥ÈÅäÊà≤Ë£°‰ΩøÁî®ÊÄ™ÁõúÂç°ÁâåÂÅ∑ÂèñÂÖ©Âºµ +4 Âç°ÁâåÂæåËß£Èéñ„ÄÇ","Odblokuj kradnƒÖc 2 karty +4 w tej samej grze, u≈ºywajƒÖc Karty Rabunku.","A felold√°shoz lopj el a Rabl√°s K√°rtya seg√≠ts√©g√©vel egy j√°t√©k alatt k√©tszer +4-es k√°rty√°t.","Soygun Kartƒ± ile aynƒ± oyunda iki +4 √ßalarak a√ßƒ±lƒ±r."},
SKIN_CUPHEAD ={"Cuphead","","","–ß–∞—à–∫–æ–≥–æ–ª–æ–≤—ã–π","Div√°n","Ëå∂ÊùØÈ†≠","Fotel Kubek","",""},
SKIN_CUPHEAD_MISSION ={"Unlocked by having 1 card left on both sides of the Portal.","Desbloqueado ao ficar com 1 carta dos dois lados do Portal.","D√©bloqu√© en ayant 1 carte restante, des deux c√¥t√©s du Portail.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –µ—Å–ª–∏ –ø–æ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –ü–æ—Ä—Ç–∞–ª–∞ –æ—Å—Ç–∞–≤–∏—Ç—å –æ–¥–Ω—É –∫–∞—Ä—Ç—É.","Desbloqueado al tener una carta restante en ambos lados del Portal.","Âú®ÂÇ≥ÈÄÅÈñÄÂÖ©ÁµÑÂç°Áâå‰∏≠ÈÉΩÂêÑÂâ©‰∏ã‰∏ÄÂºµÂç°ÁâåÂæåËß£Èéñ„ÄÇ","Odblokuj przez pozostawienie jednej karty po dw√≥ch stronach Portalu.","A felold√°shoz maradjon a Port√°l mindk√©t oldal√°n egy-egy k√°rtya a kezedben.","Portalƒ±n her iki tarafƒ±nda 1 kart bƒ±rakƒ±larak a√ßƒ±lƒ±r."},
SKIN_MECATOPUS ={"Mecatopus","","","","Meccatopus","ÈáëÂ±¨ÂÖ´Áà™È≠ö","","",""},
SKIN_MECATOPUS_MISSION ={"Unlocked by discarding 5 or more cards using the Magnet Card.","Desbloqueado ao descartar 5 ou mais cartas usando a Carta do Im√£.","D√©bloqu√© en d√©faussant 5 cartes ou plus √† l'aide de la Carte Magn√©tique.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è —Å–±—Ä–æ—Å–æ–º 5 –∏–ª–∏ –±–æ–ª–µ–µ –∫–∞—Ä—Ç —Å –ø–æ–º–æ—â—å—é –ú–∞–≥–Ω–∏—Ç–Ω–æ–π –ö–∞—Ä—Ç—ã.","Desbloqueado al descartar cinco o m√°s cartas usando la Carta Magn√©tica.","‰ΩøÁî®Á£ÅÂäõÂç°Áâå‰∏üÊ£Ñ 5 ÂºµÊàñ‰ª•‰∏äÁöÑÂç°ÁâåÂæåËß£Èéñ„ÄÇ","Odblokuj przez odrzucenie 5 lub wiƒôcej kart przy u≈ºyciu Karty Magnetycznej.","A felold√°shoz dobj el a M√°gnes K√°rty√°val 5 vagy t√∂bb k√°rty√°t.","Mƒ±knatƒ±s Kartƒ± kullanƒ±larak 5 veya daha fazla kart atƒ±larak kilidi a√ßƒ±ldƒ±."},
SKIN_VANGOGH ={"Van Gogh","","","–í–∞–Ω –ì–æ–≥","","Ê¢µÈ´ò","","",""},
SKIN_VANGOGH_MISSION ={"Unlocked when all players are using the same throne (minimun 8 players).","Desbloqueado quando todos os jogadores est√£o usando o mesmo trono (m√≠nimo 8 jogadores).","D√©bloqu√© lorsque tous les joueurs utilisent le m√™me tr√¥ne.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Ç—Ä–æ–Ω (–º–∏–Ω–∏–º—É–º 8 –∏–≥—Ä–æ–∫–æ–≤).","Desbloqueado cuando todos los jugadores usan el mismo trono (m√≠nimo 8 jugadores).","Áï∂ÊâÄÊúâÁé©ÂÆ∂ÈÉΩÂú®Áî®Âêå‰∏ÄÂºµÊ§ÖÂ≠êÁöÑÊôÇÂÄôËß£Èéñ„ÄÇ (ÈúÄË¶ÅÊúÄÂ∞ë8‰∫∫)","Odblokuj, gdy wszyscy gracze u≈ºywajƒÖ tego samego tronu (minimun 8 graczy).","A felold√°shoz haszn√°lja minden j√°t√©kos ugyanazt a tr√≥nt (legal√°bb 8 j√°t√©kos).","T√ºm oyuncular aynƒ± tahtƒ± kullandƒ±ƒüƒ±nda a√ßƒ±lƒ±r (minimum 8 oyuncu)."},
SKIN_SPACE ={"Space Throne","Trono Espacial","Tr√¥ne spatial","–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –¢—Ä–æ–Ω","Trono Espacial","Â§™Á©∫ÂØ∂Â∫ß","Kosmiczny Tron","≈∞r Tr√≥n","Uzay Tahtƒ±"},
SKIN_SPACE_MISSION ={"Unlocked by playing 4 or more cards in the same turn.","Desbloqueado ao jogar 4 cartas ou mais no mesmo turno.","D√©bloqu√© en jouant 4 cartes ou plus en un tour.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –≤—ã–±—Ä–æ—Å–∏–≤ 4 –∏–ª–∏ –±–æ–ª–µ–µ –∫–∞—Ä—Ç –≤ –æ–¥–Ω–æ–º —Ö–æ–¥—É.","Desbloqueado al jugar cuatro o m√°s cartas en el mismo turno.","Âú®Âêå‰∏ÄÂÄãÂõûÂêàË£°ÁôºÂá∫ 4 ÂºµÊàñ‰ª•‰∏äÁöÑÂç°ÁâåÂæåËß£Èéñ„ÄÇ","Odblokuj grajƒÖc 4 lub wiƒôkszƒÖ ilo≈õciƒÖ kart w tej samej turze.","A felold√°shoz j√°tssz 4 vagy t√∂bb k√°rty√°t egy k√∂r alatt.","Aynƒ± sƒ±rayla 4 veya daha fazla kart oynayarak a√ßƒ±lƒ±r."},
SKIN_QUARTZ ={"Rose Quartz","","Quartz rose","–†–æ–∑–æ–≤—ã–π –ö–≤–∞—Ä—Ü","Rose Cuarzo","Áé´Áë∞Áü≥Ëã±","R√≥≈ºowy Kwarc","R√≥zsakvarc","G√ºl kuvartzƒ±"},
SKIN_QUARTZ_MISSION ={"Unlocked by playing %s action cards.","Desbloqueado ao jogar %s cartas de a√ß√£o.","D√©bloqu√© en jouant %s cartes action.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –∏–≥—Ä–∞—è %s —Ä–∞–∑ —Å –∫–∞—Ä—Ç–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π.","Desbloqueado por jugar %s cartas de acci√≥n.","ÁôºÂá∫ %s ÂºµË°åÂãïÂç°ÁâåÂæåËß£Èéñ„ÄÇ","Odblokuj grajƒÖc %s kart akcji.","A felold√°shoz j√°tssz %s akci√≥k√°rty√°t.","%s kez aksiyon kartƒ± oynanarak kilidi a√ßƒ±lƒ±r."},
SKIN_TRUE_LOVE ={"True Love","Amor verdadeiro","","","","ÁúüÊÑõ","","Igaz Szerelem","Ger√ßek A≈ük"},
SKIN_TRUE_LOVE_MISSION ={"Unlocked when you and another player reverse the game 4 times in a row.","Desbloqueado quando voc√™ e outro jogador revertem o jogo 4 vezes seguidas.","D√©bloqu√© lorsque vous et un autre joueur inversez le jeu 4 fois de suite.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—ã –∏ –¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç–µ –∏–≥—Ä—É 4 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥.","Se desbloquea cuando t√∫ y otro jugador usan la carta de reverso cuatro veces seguidas.","Áï∂‰Ω†ÂíåÂè¶‰∏ÄÂÄãÁé©ÂÆ∂ÈÄ£Á∫åÈ†ÜÈÄÜÈÅäÊà≤ÊñπÂêë 4 Ê¨°‰πãÂæåËß£Èéñ„ÄÇ","Odblokuj kiedy ty i inny gracz odwr√≥cicie grƒô 4 razy z rzƒôdu.","A felold√°shoz ford√≠tsd meg a k√∂r ir√°ny√°t egy m√°sik j√°t√©kossal egym√°s ut√°n n√©gyszer.","Siz ve ba≈üka bir oyuncu oyunu arka arkaya 4 kez tersine √ßevirdiƒüinde kilidi a√ßƒ±lƒ±r."},
SKIN_CROISSANT ={"Hot Chocolate","Chocolate Quente","Chocolat chaud","–ì–æ—Ä—è—á–∏–π –®–æ–∫–æ–ª–∞–¥","Chocolate Caliente","ÁÜ±ÂèØÂèØ","GorƒÖca Czekolada","Forr√≥ Csokol√°d√©","Sƒ±cak √áikolata"},
SKIN_AQUARIUM ={"Aquarium","Aqu√°rio","","–ê–∫–≤–∞—Ä–∏—É–º","Acuario","Ê∞¥ÊóèÁÆ±","Akwarium","Akv√°rium","Akvaryum"},
SKIN_AQUARIUM_MISSION ={"Unlocked by winning while having a fish whispering advice in your ear.","Desbloqueado ao vencer enquanto tem um peixe te dando dicas na orelha.","D√©bloqu√© en gagnant en ayant un poisson vous donnant des indices en vous chuchotant √† l'oreille.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ–±–µ–¥–æ–π —Å —Ä—ã–±–æ–π-—Å–æ–≤–µ—Ç—á–∏–∫–æ–º –Ω–∞ —É—à–∫–µ.","Desbloqueado al ganar mientras se tiene a un pescado dando consejos al o√≠do.","Áï∂ÊúâÈ≠öÂú®ËÄ≥ÈÇäÊèêÁ§∫‰Ω†ËÄåÂãùÂá∫ÂæåËß£Èéñ„ÄÇ","Odblokuj wygrywajƒÖc podczas gdy masz rybƒô szepczƒÖcƒÖ ci radƒô do ucha.","A felold√°shoz hagyd, hogy egy hal tan√°csot s√∫gjon a f√ºledbe.","Kulaƒüƒ±nƒ±za tavsiye fƒ±sƒ±ldayan bir balƒ±k varken kazanarak a√ßƒ±lƒ±r."},
SKIN_HELP ={"Lifeboat","Trono Salva-Vidas","Bateau de sauvetage","–°–ø–∞—Å–∞—Ç–µ–ª—å–Ω–∞—è –ª–æ–¥–∫–∞","Salvavidas","ÊïëÁîüËâá","≈Å√≥d≈∫ Ratunkowa","Ment≈ëcs√≥nak","Cankurtaran Sandalƒ±"},
SKIN_HELP_MISSION ={"Unlocked by winning normally while Sudden Death is activated.","Desbloqueado ao vencer normalmente enquanto a Morte S√∫bita est√° ativada.","D√©bloqu√© en jouant normalement lorsque la Mort Subite est activ√©e.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ–±–µ–¥–æ–π –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ, –∫–æ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞ –í–Ω–µ–∑–∞–ø–Ω–∞—è –°–º–µ—Ä—Ç—å.","Desboqueado por ganar de forma normal mientras la Muerte S√∫bita est√° activada.","Âú®Á™ÅÁÑ∂Ê≠ª‰∫°Ê®°Âºè‰∏≠‰ª•Ê≠£Â∏∏ÊñπÂºèÂãùÂá∫ÈÅäÊà≤ÂæåËß£Èéñ„ÄÇ","Odblokuj wygrywajƒÖc normalnie podczas gdy Karta Nag≈Çej ≈ömierci zosta≈Ça aktywowana.","A felold√°shoz nyerj norm√°lis m√≥don nyersz mik√∂zben a Hirtelen Hal√°l √©rv√©nyben van.","Ani √ñl√ºm etkinle≈ütirildiƒüinde normal olarak kazanarak a√ßƒ±lƒ±r."},
SKIN_FONT ={"Fountain","Chafariz","Fontaine","–§–æ–Ω—Ç–∞–Ω","Fuente de Agua","Âô¥Ê≥â","Fontanna","K√∫t","√áe≈üme"},
SKIN_FONT_MISSION ={"Unlocked by sacrificing a wild card to the Wish Card.","Desbloqueando ao entregar uma carta curinga para a Carta do Desejo.","D√©bloqu√© en sacrifiant une carte noire √† la Carte V≈ìux.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–≤ —á—ë—Ä–Ω–æ–π –∫–∞—Ä—Ç–æ–π +4 –Ω–∞ –ö–∞—Ä—Ç–µ –ñ–µ–ª–∞–Ω–∏–π","Desbloqueado al sacrificar una carta comod√≠n a una Carta del Deseo.","Âú®È°òÊúõÂç°ÁâåË¶èÁü©‰∏≠ÁäßÁâ≤‰∏ÄÂºµËΩâÈ°èËâ≤Âç°ÁâåÂæåËß£Èéñ„ÄÇ","Odblokuj po≈õwiƒôcajƒÖc kartƒô wild na Kartƒô ≈ªycze≈Ñ.","A felold√°shoz √°ldozz fel egy Sz√≠nv√°laszt√≥ k√°rty√°t a K√≠v√°ns√°g K√°rty√°nak.","Dilek Kartƒ±na bir renk kartƒ± feda edilerek a√ßƒ±lƒ±r."},
SKIN_CISNE ={"Swans","Cisnes","Cygne","–õ–µ–±–µ–¥–∏","Cisnes","Â§©Èµù","≈Åabƒôdzie","Hatty√∫k","Kuƒüu"},
SKIN_CISNE_MISSION ={"Unlocked by winning a Team Match with your soul mate.","Desbloqueado ao vencer uma partida em dupla com sua alma-g√™mea.","D√©bloqu√© en gagnant une Partie en √âquipe avec votre √¢me s≈ìur.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –≤—ã–∏–≥—Ä–∞–≤ –∫–æ–º–∞–Ω–¥–Ω—ã–π –º–∞—Ç—á —Å–æ —Å–≤–æ–µ–π –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–æ–π.","Desbleado al ganar una partida en equipo con tu alma gemela.","Âú®ÂúòÈöäÊ®°Âºè‰∏≠Ëàá‰Ω†ÁöÑ‰º¥‰æ∂‰∏ÄËµ∑ÂãùÂá∫ÂæåËß£Èéñ„ÄÇ","Odblokuj wygrywajƒÖc Rundƒô Dru≈ºynowƒÖ ze swojƒÖ drugƒÖ po≈Ç√≥wkƒÖ.","A felold√°shoz nyerj egy Csapatm√©rk≈ëz√©st a l√©lekt√°rsaddal.","Ruh e≈üinizle bir Takƒ±m Ma√ßƒ± kazanarak a√ßƒ±lƒ±r."},
SKIN_SNOWMAN ={"Snowman","Boneco de Neve","Bonhomme de neige","–°–Ω–µ–≥–æ–≤–∏–∫","Hombre de Nieve","Èõ™‰∫∫","Ba≈Çwan","H√≥ember","Kardan adam"},
SKIN_SNOWMAN_MISSION ={"Unlocked by having someone eliminated by donating a card to them.","Desbloqueado ao fazer algu√©m ser eliminado doando uma carta para ele.","D√©bloqu√© lorsque quelqu'un est √©limin√© en leur donnant une carte.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è —Ç–µ–º, —á—Ç–æ –∫–æ–≥–æ-—Ç–æ –∏—Å–∫–ª—é—á–∞—é—Ç, –∂–µ—Ä—Ç–≤—É—è –∏–º –∫–∞—Ä—Ç–æ—á–∫—É.","Desbloqueado al eliminar a alguien por haberle donado una carta.","ÂêëÂà•‰∫∫ÊçêÂç°ËÄå‰ª§‰ªñË¢´Ê∑òÊ±∞ÂæåËß£Èéñ„ÄÇ","Odblokuj eliminujƒÖc kogo≈õ przez podarowanie mu karty.","A felold√°shoz t√°vol√≠ts el valakit a j√°t√©kb√≥l azzal, hogy k√°rty√°t adom√°nyozol neki.","Birine bir kart baƒüƒ±≈ülayarak ortadan kaldƒ±rƒ±lmasƒ±yla a√ßƒ±lƒ±r."},
SKIN_COCA ={"Refreshing Throne","Trono Refrescante","Tr√¥ne rafraichissant","–û—Å–≤–µ–∂–∞—é—â–∏–π –¢—Ä–æ–Ω","Trono Refrescante","Ê∏ÖÁàΩÂØ∂Â∫ß","Tron Orze≈∫wienia","Felfriss√≠t≈ë Tr√≥n","Ferahlatƒ±cƒ± Taht"},
SKIN_COCA_MISSION ={"Unlocked by donating a +4 to someone.","Desbloqueado ao doar um +4 para algu√©m.","D√©bloqu√© en donnant un +4 a quelqu'un.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–≤ +4 –∫–æ–º—É-—Ç–æ.","Se desbloquea al donar una carta +4 a otro jugador.","ÊçêÂá∫‰∏ÄÂºµ +4 Âç°ÁâåÁµ¶Âà•‰∫∫ÂæåËß£Èéñ„ÄÇ","Odblokuj podarowywujƒÖc komu≈õ +4.","A felold√°shoz adom√°nyozz egy +4-es k√°rty√°t valakinek.","Birine +4 baƒüƒ±≈ülayarak kilidi a√ßƒ±ldƒ±."},
SKIN_PHONE ={"Phone Booth","Cabine Telef√¥nica","Cabine t√©l√©phonique","–¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è –±—É–¥–∫–∞","Cabina Telef√≥nica","ÈõªË©±‰∫≠","Budka Telefoniczna","Telefonf√ºlke","Telefon kul√ºbesi"},
SKIN_PHONE_MISSION ={"Unlocked by setting a 6-color sequence in Simon's Card.","Desbloqueado ao acertar uma sequ√™ncia de 6 cores na Carta da Memoriza√ß√£o.","","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π 6-—Ü–≤–µ—Ç–æ–≤–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ö–∞—Ä—Ç—ã –°–∏–º–æ–Ω–∞.","Desbloqueado por poner una secuencia de seis colores en la Carta de Sim√≥n.","Âú®Ë•øËíôÂç°ÁµÑ‰∏≠ÊàêÂäüË®≠ÁΩÆ6ÂÄãÈ°èËâ≤ÁöÑÊéíÂàóÂæåËß£Èéñ„ÄÇ","Odblokuj ustawiajƒÖc 6 kolor sekwencji w Karcie Simona.","A felold√°shoz √°ll√≠ts fel egy hat sz√≠nb≈ël √°ll√≥ sorozatot Simon K√°rty√°j√°val.","Simon's kartda 6 renkli bir sekans ayarlanarak a√ßƒ±lƒ±r."},
SKIN_MOON ={"Shadow Armchair","Poltrona Sombria","Fauteuil des ombres","–¢–µ–Ω–µ–≤–æ–µ –ö—Ä–µ—Å–ª–æ","Banco de las Sombras","ÂΩ±Â≠êÊâ∂ÊâãÊ§Ö","Krzes≈Ço Cieni","√Årny√©k Fotel","G√∂lge Koltuk"},
SKIN_MOON_MISSION ={"Unlocked by winning a match during a full moon.","Desbloqueado ao vencer uma partida em temporada de lua cheia.","D√©bloqu√© en gagnant une partie durant la pleine lune.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ–±–µ–¥–æ–π –≤ –ø–æ–ª–Ω–æ–ª—É–Ω–∏–µ.","Se desbloquea¬†por ganar un encuentro durante luna llena.","Âú®ÊªøÊúàÁöÑÊôÇÂÄôÂãùÂá∫‰∏ÄÂ†¥ÈÅäÊà≤ÂæåËß£Èéñ„ÄÇ","Odblokuj wygrywajƒÖc rundƒô podczas pe≈Çni ksiƒô≈ºyca.","A felold√°shoz nyerj egy j√°t√©kot telihold idej√©n.","Dolunay sƒ±rasƒ±nda bir ma√ß kazanarak a√ßƒ±lƒ±r."},
SKIN_HONEY ={"Honey Throne","Trono do Mel","Tr√¥ne miel","–ú–µ–¥–æ–≤—ã–π –¢—Ä–æ–Ω","Trono de Miel","ËúúÁ≥ñÂØ∂Â∫ß","Tron Miodu","M√©zes Tr√≥n","Bal Tahtƒ±"},
SKIN_HONEY_MISSION ={"Unlocked by playing side by side with your teammate in a Team Match.","Desbloqueado quando voc√™ jogar lado a lado com a sua dupla.","D√©bloqu√© en jouant c√¥te √† c√¥te avec votre co√©quipier dans une Partie en √âquipe.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –∏–≥—Ä–∞—è –±–æ–∫ –æ –±–æ–∫ —Å —Ç–æ–≤–∞—Ä–∏—â–µ–º –ø–æ –∫–æ–º–∞–Ω–¥–µ –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–º –º–∞—Ç—á–µ.","Se desbloquea al jugar lado a lado con tu compa√±ero en una ronda en equipo.","Âú®ÂúòÈöäÊ®°Âºè‰∏≠, ‰Ω†ÁöÑÊê≠Ê™îÂùêÂú®‰Ω†ÊóÅÈÇäÂæåËß£Èéñ„ÄÇ","Odblokuj grajƒÖc u boku ze swoim cz≈Çonkiem dru≈ºyny w Rundzie Dru≈ºynowej.","A felold√°shoz ker√ºlj a csapatt√°rsad mell√© egy Csapatm√©rk≈ëz√©sben.","Bir Takƒ±m Ma√ßƒ±nda takƒ±m arkada≈üƒ±nƒ±zla yan yana oynayarak a√ßƒ±lƒ±r."},
SKIN_OLD ={"Old Armchair","Poltrona Antiga","Vieux fauteuil","–°—Ç–∞—Ä–æ–µ –ö—Ä–µ—Å–ª–æ","Viejo Sill√≥n","ËÄÅËàäÊâ∂ÊâãÊ§Ö","Stary Fotel","R√©gi Fotel","Eski Koltuk"},
SKIN_OLD_MISSION ={"Unlocked by winning a game without house rules.","Desbloqueado ao vencer uma partida sem regras.","D√©bloqu√© en gagnant une partie sans r√®gles de la maison.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –≤—ã–∏–≥—Ä–∞–≤ –∏–≥—Ä—É –±–µ–∑ –¥–æ–º–∞—à–Ω–∏—Ö –ø—Ä–∞–≤–∏–ª.","Se consigue al ganar un juego sin reglas de la casa.","Âú®Ê≤íÊúâËá™Ë®ÇË¶èÁü©‰∏≠ÂãùÂá∫‰∏ÄÂ†¥ÈÅäÊà≤ÂæåËß£Èéñ„ÄÇ","Odblokuj wygrywajƒÖc grƒô bez domowych zasad.","A felold√°shoz nyerj meg egy j√°t√©kot h√°zszab√°lyok n√©lk√ºl.","Ev kurallarƒ± olmayan bir oyun kazanarak a√ßƒ±lƒ±r."},
SKIN_CHIMNEY ={"Chimney","Chamin√©","Chemin√©e","–î—ã–º–æ—Ö–æ–¥","Chimenea","ÁÖôÂõ™","Komin","K√©m√©ny","Baca"},
SKIN_CHIMNEY_MISSION ={"Unlocked by winning dressed as a pine tree.","Desbloqueado ao vencer uma partida fantasiado de pinheiro.","D√©bloqu√© en gagnant en √©tant habill√© en sapin.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ–±–µ–¥–æ–π, –æ–¥–µ—Ç—ã–º, –∫–∞–∫ —Å–æ—Å–Ω–∞.","Desbloqueado ganando vestido como un √°rbol.","Á©øËëóËÅñË™ïÊùâÊ®πÁöÑË£ùÊâÆÂãùÂá∫ÈÅäÊà≤ÂæåËß£Èéñ„ÄÇ","Odblokuj wygrywajƒÖc ubranym jako choinkƒô.","A felold√°shoz nyerj meg egy j√°t√©kot feny≈ëf√°nak √∂lt√∂zve.","√áam aƒüacƒ± gibi giyerken kazanƒ±rsan a√ßƒ±lƒ±r."},
SKIN_CHEESE_CLASSIC ={"Classic Cheese Throne","Trono de Queijo Cl√°ssico","Tr√¥ne de fromage classique","–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –°—ã—Ä–Ω—ã–π –¢—Ä–æ–Ω","Trono Cl√°sico de Queso","Âè§ÂÖ∏Â•∂ÈÖ™ÂØ∂Â∫ß","Klasyczny Serowy Tron","Klasszikus Sajt Tr√≥n","Klasik Peynir Tahtƒ±"},
SKIN_SACK ={"Sack of Potatoes","Saco de Batatas","Sac de pommes de terre","–ú–µ—à–æ–∫ —Å –∫–∞—Ä—Ç–æ—à–∫–æ–π","Saco de Papas","‰∏ÄÂ§ßÂåÖÂúüË±Ü","Worek Ziemniak√≥w","Egy Zs√°k Burgonya","Patates √áuvalƒ±"},
SKIN_SACK_MISSION ={"Unlocked by playing the Potato Card twice in the same game.","Desbloqueado ao jogar a Carta da Batata 2 vezes na mesma partida.","D√©bloqu√© en jouant la Carte Patate deux fois dans la m√™me partie.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –µ—Å–ª–∏ –¥–≤–∞–∂–¥—ã —Å—ã–≥—Ä–∞—Ç—å —Å –ö–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–π –ö–∞—Ä—Ç–æ–π –≤ –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –∏–≥—Ä–µ.","Se desbloquea¬†por jugar la Carta de Papa dos veces en la misma partida.","Âú®Âêå‰∏ÄÂ†¥ÈÅäÊà≤Ë£°ÁôºÂá∫ÂÖ©Ê¨°ÂúüË±ÜÂç°ÁâåÂæåËß£Èéñ„ÄÇ","Odblokuj grajƒÖc dwukrotnie KartƒÖ Ziemniaka w tej samej grze.","A felold√°shoz j√°tszd ki a Burgona K√°rty√°t egy j√°t√©k alatt k√©tszer.","Aynƒ± oyunda Patates Kartƒ±nƒ± iki kez oynayarak a√ßƒ±lƒ±r."},
SKIN_SMARTPHONE ={"Smartphone","","","–°–º–∞—Ä—Ç—Ñ–æ–Ω","Tecnol√≥gico","Êô∫ËÉΩÈõªË©±","Smartfon","Okostelefon","Akƒ±llƒ± telefon"},
SKIN_SMARTPHONE_MISSION ={"Unlocked randomly by watching matches in a private room.","Desbloqueado aleatoriamente ao assistir partidas em sala privada.","D√©bloqu√© al√©atoirement en regardant des parties dans un salon priv√©.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –ø—É—Ç—ë–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç—á–µ–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ.","Se desbloquea aleatoriamente al mirar partidas en salas privadas.","Âú®ÁßÅ‰∫∫ÊàøÈñìÊóÅËßÄÂæåÈö®Ê©üËß£Èéñ„ÄÇ","Odblokuj losowo, oglƒÖdajƒÖc rundy w prywatnym pokoju.","V√©letlenszer≈±en feloldhat√≥ priv√°t j√°t√©kok megfigyel√©se k√∂zben.","√ñzel bir odada ma√ßlarƒ± izleyerek rastgele a√ßƒ±lƒ±r."},
SKIN_HORN ={"Unicorn","Unic√≥rnio","Licorne","–ï–¥–∏–Ω–æ—Ä–æ–≥","Unicornio","Áç®ËßíÁç∏","Jednoro≈ºec","Egyszarv√∫","Tek boynuzlu at"},
SKIN_HORN_MISSION ={"Unlocked by tying.","Desbloqueado ao empatar.","D√©bloqu√© en finissant par une √©galit√©.","–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ–º.","Se desbloquea por atadura.","ÂíåÂ±Ä‰πãÂæåËß£Èéñ„ÄÇ","Odblokuj przez wiƒÖzanie.","A felold√°shoz √©rj el egy d√∂ntetlen eredm√©nyt.","Baƒülanarak a√ßƒ±lƒ±r."},
SKIN_FLAMINGO ={"Flamingo","","Flamand rose","–§–ª–∞–º–∏–Ω–≥–æ","Flamenco","ÁÅ´ÁÉàÈ≥•","Flaming","Flaming√≥",""},
SKIN_FLAMINGO_MISSION ={"Unlocked by winning a game with 5 or more rules.","Desbloqueado ao vencer uma partida com 5 ou mais regras.","D√©bloqu√© en gagnant une partie avec 5 r√®gles ou plus.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –≤—ã–∏–≥—Ä–∞–≤ –∏–≥—Ä—É —Å 5 –∏–ª–∏ –±–æ–ª–µ–µ –ø—Ä–∞–≤–∏–ª–∞–º–∏.","Se desbloquea ganando un juego con cinco o m√°s reglas.","Âú®‰∏ÄÂ†¥Ëá™Ë®ÇË¶èÁü©Êúâ 5 ÂÄãÊàñ‰ª•‰∏äÁöÑÈÅäÊà≤ÂãùÂá∫ÂæåËß£Èéñ„ÄÇ","Odblokuj wygrywajƒÖc grƒô z 5 lub wiƒôcej zasadami.","A felold√°shoz nyerj meg egy j√°t√©kot, amelyben legal√°bb 5 h√°zszab√°ly van.","5 veya daha fazla kuralƒ± olan bir oyun kazanarak a√ßƒ±lƒ±r."},
SKIN_BILL ={"Bill's Statue","Est√°tua do Bill","Statue de Bill","–°—Ç–∞—Ç—É—è –ë–∏–ª–ª–∞","Estatua de Bill","ÊØîÁàæÁöÑÈõïÂÉè","Statua Billa","Bill Szobra","Bill'in Heykeli"},
SKIN_BILL_MISSION ={"Unlocked by winning due to the Imitation Card effect.","Desbloqueado ao vencer devido ao efeito da Carta da Imita√ß√£o.","D√©bloqu√© en gagnant gr√¢ce √† l'effet de la Carte Imitation.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ–±–µ–¥–æ–π –±–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ñ—Ñ–µ–∫—Ç—É –ò–º–∏—Ç–∞—Ü–∏–æ–Ω–Ω–æ–π –ö–∞—Ä—Ç—ã.","Se desbloquea ganando debido al efecto de la Carta de Imitaci√≥n.","ÈÄèÈÅé‰ªøË£ΩÂç°ÊïàÊûúËÄåÂãùÂá∫ÈÅäÊà≤ÂæåËß£Èéñ„ÄÇ","Odblokuj wygrywajƒÖc dziƒôki efektowi Karty Imitacji.","A felold√°shoz nyerj az Ut√°nz√≥ K√°rtya k√©pess√©g√©vel.","Taklit Kart etkisi nedeniyle kazanarak a√ßƒ±lƒ±r."},
SKIN_MAX ={"Throne Max 3000","Trono Max 3000","Tr√¥ne Max 3000","–¢—Ä–æ–Ω –ú–∞–∫—Å 3000","Trono Futurit√°stico","Â§©ÁöáÂØ∂Â∫ß 3000","Tron Max 3000","","Taht Max 3000"},
SKIN_MAX_MISSION ={"Unlocked by defeating 9 bots at once in a private room.","Desbloqueado ao derrotar 9 bots de uma s√≥ vez em sala privada.","D√©bloqu√© en battant 9 robots √† la fois dans un salon priv√©.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è, –ø–æ–±–µ–¥–∏–≤ 9 –±–æ—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ.","Se desbloquea al vencer a nueve bots en una sala privada.","Âú®ÁßÅ‰∫∫ÊàøÈñì‰∏ÄÊ¨°ÊâìÊïó 9 ÂÄãÊ©üÂô®‰∫∫ÂæåËß£Èéñ„ÄÇ","Odblokuj przez pokonanie 9 bot√≥w naraz w prywatnym pokoju.","A felold√°shoz gy≈ëzz le 9 robotot egy priv√°t szob√°ban.","√ñzel bir odada aynƒ± anda 9 bot yenilerek a√ßƒ±lƒ±r."},
SKIN_VAMPIRE ={"Throne of the Plague","Trono da Peste","","","","ÁòüÁñ´ÂØ∂Â∫ß","","A Pestis Tr√≥nja","Corona Tahtƒ±"},
SKIN_VAMPIRE_MISSION ={"Unlocked by playing a match next to a player who is using this throne.","Desbloqueado ao jogar uma partida ao lado de algu√©m que estiver usando este trono.","","","","Âú®‰ΩøÁî®ÈÄôÂÄãÂ∫ßÊ§ÖÁöÑÁé©ÂÆ∂ÊóÅÈÇäÁé©‰∏ÄÂ±ÄÈÅäÊà≤‰æÜËß£Èéñ„ÄÇ","","A felold√°shoz j√°tssz egy j√°t√©kot olyasvalaki mellett, aki ezt a tr√≥nt haszn√°lja.","Bu tahtƒ± kullanan oyuncunun yanƒ±nda bir ma√ß oynayarak kilidi a√ßƒ±lƒ±r."},
SKIN_PIKACHU ={"Pikachu's Armchair","Poltrona do Pikachu","","","","ÁöÆÂç°‰∏òÊâ∂ÊâãÊ§Ö","","Pikachu Fotele","Pikachu'nun Koltuƒüu"},
SKIN_PIKACHU_MISSION ={"Unlocked by winning with a Thunder Card.","Desbloqueado ao vencer com a Carta do Trov√£o.","","","","ËøÖÈõ∑„ÄÇ‰ΩøÁî®Èõ∑ÈõªÂç°ÁâåÁç≤ÂãùÂæåËß£Èéñ„ÄÇ","","A felold√°shoz nyerj a Mennyd√∂rg√©s K√°rty√°val.","Yƒ±ldƒ±rƒ±m Kartƒ± ile kazanarak a√ßƒ±lƒ±r."},
SKIN_TOAST ={"Eggs and Toast","Torrada e Ovos","","","","ÈõûËõãÂêêÂè∏","","Toj√°s √©s Pir√≠t√≥s","Yumurtalar ve tost"},
SKIN_PIZZA ={"Pizza Box","Caixa de Pizza","","","","Êä´Ëñ©ÁõíÂ≠ê","","Pizz√°sdoboz","Pizza Kutusu"},
SKIN_SIMPSONS ={"Simpsons' Sofa","Sof√° dos Simpsons","","","","Simpsons ÁöÑÊ≤ôÁôº","","A Simpson Kanap√©","Simpsons 'Kanepe"},
SKIN_SIMPSONS_MISSION ={"Unlocked by winning with your mouse naked.","Desbloqueado ao vencer uma partida com o rato nu.","","","","Ë£∏Èº†Ë£ùÊâÆÂãùÂá∫ÂæåËß£Èéñ„ÄÇ","","A felold√°shoz nyerj √∫gy, hogy az egered meztelen.","√áƒ±plak farenizle kazanarak a√ßƒ±lƒ±r."},
SKIN_KISS ={"Kiss Armchair","Poltrona do Beijo","","","","Ë¶™Ë¶™Êâ∂ÊâãÊ§Ö","","Cs√≥k Fotel","√ñp√ºc√ºk Koltuk"},
SKIN_KISS_MISSION ={"Unlocked by donating to a player that donated to you.","Desbloqueado ao retribuir uma Doa√ß√£o que um jogador fez a voc√™.","","","","ÊääÂè¶‰∏ÄÂÄãÁé©ÂÆ∂ÊçêË¥àÁµ¶‰Ω†ÁöÑÂç°ÁâåÁµ¶Âõû‰ªñÂæåËß£Èéñ„ÄÇ","","A felold√°shoz adj vissza egy adom√°nyt, amit m√°s j√°t√©kos adom√°nyozott neked.","Size baƒüƒ±≈ü yapan bir oyuncuya baƒüƒ±≈ü yaparak a√ßƒ±lƒ±r."},
SKIN_FOREST ={"Enchanted Forest","Bosque Encantado","","","","Ëø∑‰∫∫‰πãÊ£Æ","","Elvar√°zsolt Erd≈ë","B√ºy√ºl√º Orman"},
SKIN_FOREST_MISSION ={"Unlocked by winning with a pink Portal Card.","Desbloqueado ao vencer com um Carta do Portal rosa.","","","","‰ΩøÁî®Á≤âÁ¥ÖËâ≤ÂÇ≥ÈÄÅÈñÄÂç°ÁâåÁç≤ÂãùÂæåËß£Èéñ„ÄÇ","","A felold√°shoz nyerj egy r√≥zsasz√≠n Port√°l K√°rty√°val.","Pembe bir Portal Kartƒ± ile kazanarak a√ßƒ±lƒ±r."},
SKIN_MONTAIN ={"Mountain","Montanha","","","","Áæ§Â±±","","Hegy","Daƒü"},
SKIN_MONTAIN_MISSION ={"Unlocked by winning using the Tornado Card during Sudden Death.","Desbloqueado ao vencer usando a Carta do Tornado durante a Morte S√∫bita.","","","","Âú®Êö¥ÊñÉÊ®°Âºè‰∏≠‰ΩøÁî®ÈæçÊç≤È¢®Âç°ÁâåÁç≤ÂãùÂæåËß£Èéñ„ÄÇ","","A felold√°shoz nyerj egy Forg√≥sz√©l K√°rty√°val mik√∂zben a Hirtelen Hal√°l akt√≠v.","Ani √ñl√ºm sƒ±rasƒ±nda Kasƒ±rga Kartƒ±nƒ± kullanarak kazanarak a√ßƒ±lƒ±r."},
SKIN_SAMSON ={"Samson","Sans√£o","","","","","","S√°mson",""},
SKIN_SAMSON_MISSION ={"Unlocked by locking every card of every opponent.","Desbloqueado ao trancar todas as cartas de todos os advers√°rios.","","","","ÊääÊâÄÊúâÂ∞çÊâãÁöÑÊâÄÊúâÂç°ÈÉΩÈéñËµ∑‰æÜÂæåËß£Èéñ„ÄÇ","","A felold√°shoz z√°rd el minden ellenfeled minden k√°rty√°j√°t.","Her rakibin her kartƒ±nƒ± kilitleyerek a√ßƒ±lƒ±r."},
SKIN_CIAN ={"Cyan Armchair","Poltrona Verde-√°gua","","","","Á¢ßÁ∂†Êâ∂ÊâãÊ§Ö","","Ci√°n Fotel","Camg√∂beƒüi Koltuk"},
SKIN_CIAN_MISSION ={"Unlocked by winning with a cyan card.","Desbloqueado ao vencer com uma carta verde-√°gua.","","","","‰ΩøÁî®Â¢®Á∂†Ëâ≤Âç°ÁâåÁç≤ÂãùÂæåËß£Èéñ„ÄÇ","","A felold√°shoz nyerj ci√°n k√°rty√°val.","Camg√∂beƒüi kartla kazanarak a√ßƒ±lƒ±r."},
SKIN_ORANGE ={"Orange Armchair","Poltrona Laranja","","","","Ê©òËâ≤Êâ∂ÊâãÊ§Ö","","Narancss√°gra Fotel","Turuncu Koltuk"},
SKIN_ORANGE_MISSION ={"Unlocked by winning with an orange card.","Desbloqueado ao vencer com uma carta laranja.","","","","‰ΩøÁî®Ê©òËâ≤Âç°ÁâåÁç≤ÂãùÂæåËß£Èéñ„ÄÇ","","A felold√°shoz nyerj narancss√°rga k√°rty√°val.","Turuncu kartla kazanarak a√ßƒ±lƒ±r."},
SKIN_PINK ={"Pink Armchair","Poltrona Rosa","","","","Á≤âÁ¥ÖÊâ∂ÊâãÊ§Ö","","R√≥zsasz√≠n Fotel","Pembe Koltuk"},
SKIN_PINK_MISSION ={"Unlocked by winning with a pink card.","Desbloqueado ao vencer com uma carta rosa.","","","","‰ΩøÁî®Á≤âÁ¥ÖËâ≤Âç°ÁâåÁç≤ÂãùÂæåËß£Èéñ„ÄÇ","","A felold√°shoz nyerj r√≥zsasz√≠n k√°rty√°val.","Pembe kartla kazanarak a√ßƒ±lƒ±r."},
SKIN_PURPLE ={"Purple Armchair","Poltrona Roxa","","","","Á¥´Ëâ≤Êâ∂ÊâãÊ§Ö","","Lila Fotel","Mor Koltuk"},
SKIN_PURPLE_MISSION ={"Unlocked by winning with a purple card.","Desbloqueado ao vencer com uma carta roxa.","","","","‰ΩøÁî®Á¥´Ëâ≤Âç°ÁâåÁç≤ÂãùÂæåËß£Èéñ„ÄÇ","","A felold√°shoz nyerj lila k√°rty√°val.","Mor kartla kazanarak a√ßƒ±lƒ±r."},
SKIN_BLACK ={"Black Armchair","Poltrona Preta","","","","ÈªëËâ≤Êâ∂ÊâãÊ§Ö","","Fekete Fotel","Siyah Koltuk"},
SKIN_BLACK_MISSION ={"Unlocked by winning with a white card.","Desbloqueado ao vencer com uma carta branca.","","","","‰ΩøÁî®ÁôΩËâ≤Âç°ÁâåÁç≤ÂãùÂæåËß£Èéñ„ÄÇ","","A felold√°shoz nyerj feh√©r k√°rty√°val.","Beyaz kartla kazanarak a√ßƒ±lƒ±r."},
SKIN_TOXIC ={"Toxicity Throne","Trono da Toxicidade","","","","ÊØíÊÄßÂØ∂Â∫ß","","M√©rgez≈ë Tr√≥n","Zehirlilik Taht"},
CYAN_MISSION ={"Unlocked by winning %s times with a cyan card.","Desbloqueado ao vencer %s vezes com uma carta verde-√°gua.","","","","‰ΩøÁî®Â¢®Á∂†Ëâ≤Âç°ÁâåÁç≤Âãù %s Ê¨°ÂæåËß£Èéñ„ÄÇ","","A felold√°shoz nyerj ci√°n k√°rty√°val %s alkalommal.","Mavi kartla %s kez kazanarak kilidi a√ßƒ±lƒ±r."},
SKIN_THUNDER ={"Thunder Throne","Trono do Trov√£o","","","","Èõ∑ÈõªÂØ∂Â∫ß","","Mennyd√∂rg√©s Tr√≥n","Yƒ±ldƒ±rƒ±m Tahtƒ±"},
ORANGE_MISSION ={"Unlocked by winning %s times with an orange card.","Desbloqueado ao vencer %s vezes com uma carta laranja.","","","","‰ΩøÁî®Ê©òËâ≤Âç°ÁâåÁç≤Âãù %s Ê¨°ÂæåËß£Èéñ„ÄÇ","","A felold√°shoz nyerj narancss√°rga k√°rty√°val %s alkalommal.","Turuncu kartla %s kez kazanarak kilidi a√ßƒ±lƒ±r.."},
SKIN_CRYSTAL ={"Crystal Throne","Trono do Cristal","","","","Êô∂Áü≥ÂØ∂Â∫ß","","Kristr√°ly Tr√≥n","Kristal Taht"},
PINK_MISSION ={"Unlocked by winning %s times with a pink card.","Desbloqueado ao vencer %s vezes com uma carta rosa.","","","","‰ΩøÁî®Á≤âÁ¥ÖËâ≤Âç°ÁâåÁç≤Âãù %s Ê¨°ÂæåËß£Èéñ„ÄÇ","","A felold√°shoz nyerj r√≥zsasz√≠n k√°rty√°val %s alkalommal.","Pembe kartla %s kez kazanarak kilidi a√ßƒ±lƒ±r.."},
SKIN_DARK ={"Darkness Throne","Trono da Escurid√£o","","","","ÊöóÈªëÂØ∂Â∫ß","","S√∂t√©ts√©g Tr√≥nja","Karanlƒ±k Taht"},
PURPLE_MISSION ={"Unlocked by winning %s times with a purple card.","Desbloqueado ao vencer %s vezes com uma carta roxa.","","","","‰ΩøÁî®Á¥´Ëâ≤Âç°ÁâåÁç≤Âãù %s Ê¨°ÂæåËß£Èéñ„ÄÇ","","A felold√°shoz nyerj lila k√°rty√°val %s alkalommal.","Mor kartla %s kez kazanarak kilidi a√ßƒ±ldƒ±."},
SKIN_LIGHT ={"Light Throne","Trono da Luz","","","","ÂÖâÊòéÂØ∂Â∫ß","","F√©nyess√©g Tr√≥nja","Hafif Taht"},
WHITE_MISSION ={"Unlocked by winning %s times with a white card.","Desbloqueado ao vencer %s vezes com uma carta branca.","","","","‰ΩøÁî®ÁôΩËâ≤Âç°ÁâåÁç≤Âãù %s Ê¨°ÂæåËß£Èéñ„ÄÇ","","A felold√°shoz nyerj feh√©r k√°rty√°val %s alkalommal.","Beyaz kartla %s kez kazanarak kilidi a√ßƒ±ldƒ±."},
SKIN_ECLIPSE ={"Eclipse Throne","Trono do Eclipse","","","","Êó•ËùïÂØ∂Â∫ß","","Napfogyatkoz√°s Tr√≥n","Tutulma Tahtƒ±"},
SKIN_ECLIPSE_MISSION ={"Unlocked by winning a Team Match using a card identical to one of your partner's.","Desbloqueado ao vencer uma partida em duplas usando uma carta id√™ntica a uma da sua dupla.","","","","Âú®ÂúòÈöäÊ®°Âºè‰∏≠‰ΩøÁî®Ë∑ü‰Ω†Âêå‰º¥Âêå‰∏ÄÂºµÁöÑÂç°ÁâåÁç≤ÂãùÂæåËß£Èéñ„ÄÇ","","A felold√°shoz nyerj egy Csapatj√°t√©kot ugyanazzal a k√°rty√°val ami a partnerednek is van.","Partnerinizden birinin kartƒ±yla aynƒ± olan bir Takƒ±m Ma√ßƒ± kazanarak a√ßƒ±lƒ±r."},
SKIN_TOOTHLESS ={"Toothless","Banguela","","","","ÁÑ°Áâô","","Fogatlan","Di≈üsiz"},
SKIN_TOOTHLESS_MISSION ={"Unlocked by winning %s games on the dark side of the Portal.","Desbloqueado ao vencer %s partidas do lado escuro do Portal.","","","","Âú®ÂÇ≥ÈÄÅÈñÄÈªëÊöóÈÇ£ÈÇäÂãùÂá∫ %s Ê¨°ÂæåËß£Èéñ„ÄÇ","","A felold√°shoz nyerj %s alkalommal a Port√°l s√∂t√©t oldal√°n.","Portalƒ±n karanlƒ±k tarafƒ±nda %s oyunlarƒ± kazanarak kilidi a√ßƒ±ldƒ±."},
SKIN_LIGHTFURY ={"Lightfury","F√∫ria da Luz","","","","ÊØõËå∏Ëå∏","","F√©nyf√∫ria","Hafif √∂fke"},
SKIN_LIGHTFURY_MISSION ={"Unlocked by winning %s games on the light side of the Portal.","Desbloqueado ao vencer %s partidas do lado claro do Portal.","","","","Âú®ÂÇ≥ÈÄÅÈñÄÂÖâÊòéÈÇ£ÈÇäÂãùÂá∫ %s Ê¨°ÂæåËß£Èéñ„ÄÇ","","A felold√°shoz nyerj %s alkalommal a Port√°l vil√°gos oldal√°n.","Portalƒ±n aydƒ±nlƒ±k tarafƒ±nda %s oyun kazanarak kilidi a√ßƒ±ldƒ±."},
SKIN_KRATOS ={"Kratos","","","","","ÂÖãÈõ∑Â§öÊñØ Êà∞Á•û","","Kratos",""},
SKIN_KRATOS_MISSION ={"Unlocked by playing an action card using the Hell rule.","Desbloqueado ao descartar uma carta fazendo uso da regra Inferno.","","","","Âú®Âú∞ÁçÑÊ®°Âºè‰∏≠‰ΩøÁî®Ë°åÂãïÂç°ÁâåÂæåËß£Èéñ„ÄÇ","","A felold√°shoz j√°tssz egy akci√≥k√°rty√°t a Pokol szab√°ly felhaszn√°l√°s√°val.","Cehennem kuralƒ±nƒ± kullanarak bir aksiyon kartƒ± oynayarak a√ßƒ±lƒ±r."},
SKIN_SHENLONG ={"Shenlong","","","","","Á•ûÈæç","","Shenlong",""},
SKIN_SHENLONG_MISSION ={"Unlocked when the Wish Card offers you 3 equal options.","Desbloqueado quando a Carta do Desejo te oferecer 3 op√ß√µes iguais.","","","","Áï∂Ë®±È°òÂç°ÁâåÁµ¶‰∫Ü‰Ω† 3 ÂÄã‰∏ÄÊ®£ÁöÑÈÅ∏ÊìáÊôÇËß£Èéñ„ÄÇ","","A felold√°shoz h√°rom ugyanolyan opci√≥t kell a K√≠v√°ns√°g K√°rty√°t√≥l kapnod.","Dilek Kartƒ± size 3 e≈üit se√ßenek sunduƒüunda a√ßƒ±lƒ±r."},
SKIN_SPIDER ={"Spider-Man","Miranha","","","","ËúòËõõ‰ø†","","P√≥kember","√ñr√ºmcek Adam"},
SKIN_SPIDER_MISSION ={"Unlocked by using the Web Card on the same player twice in a match.","Desbloqueado ao usar a Carta da Teia duas vezes no mesmo jogador em uma partida.","","","","Âú®Âêå‰∏ÄÂÄãÁé©ÂÆ∂Ë∫´‰∏äÈÄ£Á∫å‰ΩøÁî® 2 Ê¨°ËúòËõõÁ∂≤Âç°ÁâåÂæåËß£Èéñ„ÄÇ","","A felold√°shoz haszn√°ld a H√°l√≥ K√°rty√°t ugyanazon a j√°t√©koson egy j√°t√©k alatt k√©tszer.","Bir ma√ßta aynƒ± oyuncu √ºzerinde Web Kartƒ± kullanƒ±larak iki kez a√ßƒ±larak a√ßƒ±lƒ±r."},
SKIN_LICH ={"Lich King's Throne","Trono do Lich Rei","","","","Â∑´Â¶ñÁéãÁöÑÂØ∂Â∫ß","","A Lid√©rc Kir√°ly Tr√≥nja","Lich Kralƒ±'nƒ±n Tahtƒ±"},
SKIN_LICH_MISSION ={"Unlocked by winning a match due to the ice curse.","Desbloqueado ao vencer uma partida devido √† maldi√ß√£o de gelo.","","","","Âú®ÂÜ∞ÂáçÊäΩÂç°ÁöÑË©õÂíí‰∏ãÂãùÂá∫ÂæåËß£Èéñ„ÄÇ","","A felold√°shoz nyerj meg egy j√°t√©kot a fagyos √°toknak k√∂sz√∂nhet≈ëen,","Buz laneti nedeniyle bir ma√ß kazanarak a√ßƒ±lƒ±r."},
SKIN_BLACKHOLE ={"Black Hole","Buraco Negro","","","","","","","Kara delik"},
SKIN_BLACKHOLE_MISSION ={"Unlocked by winning with a card not of this round.","Desbloqueado ao vencer uma partida com uma carta que veio de fora.","","","","","","","Bu turdan olmayan bir kartla kazanarak a√ßƒ±lƒ±r."},
SKIN_EVILJEWEL ={"Evil Jewel","Joia Maligna","","","","","","","K√∂t√º M√ºcevher"},
SKIN_CACTUS ={"Cactus","Cacto","","","","","","","Kakt√ºs"},
SKIN_SQUID_HOUSE ={"Squidward House","Casa do Lula Molusco","","","","","","","Squidward Evi"},
SKIN_VOLCANO ={"Volcano","Vulc√£o","","","","","","","Volkan"},
SKIN_NYAN ={"Nyancat Armchair","Poltrona de Nyancat","","","","","","","Nyancat Koltuk"},
SKIN_TOY_CASTLE ={"Toy Castle","Castelo de Brinquedo","","","","","","","Oyuncak Kale"},
SKIN_BOMBERMAN ={"Bomberman","","","","","","","","Bombacƒ±"},
SKIN_PHOENIX ={"Phoenix","F√™nix","","","","","","","Anka ku≈üu"},
SKIN_FIRE_TEMPLE ={"Temple of Fire","Templo de Fogo","","","","","","","Ate≈ü Tapƒ±naƒüƒ±"},
SKIN_GHOSTFACE ={"Ghostface","","","","","","","","Hayalet Maske"},
SKIN_IRONMAN ={"Ironman","Homem de Ferro","","","","","","","Demir Adam"},
SKIN_NINETALES ={"Ninetales","","","","","","","",""},
SKIN_PARABOLIC ={"Satellite Dishes","Antenas Parab√≥licas","","","","","","","Uydu antenleri"},
SKIN_TERMINATOR ={"Terminator T-800","Exterminador T-800","","","","","","","Terminat√∂r T-800"},
SKIN_TITANIC ={"Titanic","","","","","","","",""},
SKIN_SQUID_HOUSE ={"Wakanda","","","","","","","",""},
SKIN_ICHIGO ={"Mew Ichigo","","","","","","","",""},
SKIN_MINT ={"Mew Mint","","","","","","","",""},
SKIN_LETTUCE ={"Mew Lettuce","","","","","","","",""},
SKIN_PUDDING ={"Mew Pudding","","","","","","","",""},
SKIN_ZAKURO ={"Mew Zakuro","","","","","","","",""},
SKIN_ANGEL_CLASSIC ={"Angelic Throne Classic","Trono Angelical Cl√°ssico","","","","","","","Melek Taht Klasik"},
SKIN_DIAMOND_CLASSIC ={"Diamond Throne Classic","Trono de Diamante Cl√°ssico","","","","","","","Elmas Taht Klasik"},
SKIN_JUNKY_CLASSIC ={"Junky Throne Classic","Trono de Sucata Cl√°ssico","","","","","","","Hurda Taht Klasik"},
SKIN_RAINBOW_CLASSIC ={"Rainbow Throne Classic","Trono Arco-√çris Cl√°ssico","","","","","","","G√∂kku≈üaƒüƒ± Tahtƒ± Klasik"},
SKIN_JOKER ={"Joker","Coringa","","","","Â∞è‰∏ë","","",""},
SKIN_BATMAN ={"Batman","","","","","ËùôËù†‰ø†","","",""},
SKIN_BUBBLES ={"Bubbles","Bolhas","","","","","","","Kabarcƒ±klar"},
SKIN_FAVORITES ={"Not So Mysterious Throne","Trono N√£o T√£o Misterioso","","","","","","","O Kadar da Gizemli Olmayan Taht"},
SKIN_FAVORITES_DESC ={"This becomes one of your favorite thrones.","Isto se transforma num dos seus tronos favoritos.","","","","","","","Bu, en sevdiƒüiniz tahtlardan biri olabilir."},
SKIN_TEST ={"Test Throne","Trono de Teste","Tr√¥ne de test","–¢–µ—Å—Ç–æ–≤—ã–π –¢—Ä–æ–Ω","Trono de Prueba","Ê∏¨Ë©¶ÂØ∂Â∫ß","Test Tron","Teszt Tr√≥n","Test Tahtƒ±"},
SKIN_BUY_MISSION ={"Unlocked by buying it at the shop.","Desbloqueado ao comprar isto na loja.","","","","","","","Maƒüazadan satƒ±n alarak kilidi a√ßƒ±lƒ±r."},
EQUIP ={"Equip","Equipar","Equiper","–û–±–æ—Ä—É–¥–æ–≤–∞—Ç—å","Equipar","Ë£ùÂÇô","Za≈Ç√≥≈º","Visel","Donan"},
EQUIPPED ={"Equipped","Equipado","Equip√©","–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–Ω—ã–π","Equipada","Â∑≤Ë£ùÂÇô","Za≈Ço≈ºony","Viselve","Donatƒ±lmƒ±≈ü"},
LOCKED ={"Locked","Bloqueado","Bloqu√©","–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π","Cerrada","Ë¢´ÈéñÂÆö","Zablokowane","Z√°rva","Kilitli"},
CREATED_BY ={"created by","criado por","cr√©e(e) par","—Å–æ–∑–¥–∞–Ω–æ","creado por","Ââµ‰Ωú‰∫∫","zrobione przez","k√©sz√≠tette:","Tarafƒ±ndan yaratƒ±ldƒ±"},
BUY ={"Buy","Comprar","","","","","","","Satƒ±n Al"},
NO_ENOUGH_BLUE ={"You don't have enough blue tickets.","Voc√™ n√£o tem tickets azuis suficientes.","","","","","","","Yeterli mavi biletiniz yok."},
NO_ENOUGH_RED ={"You don't have enough red tickets.","Voc√™ n√£o tem tickets vermelhos suficientes.","","","","","","","Yeterli kƒ±rmƒ±zƒ± biletiniz yok."},
NO_ENOUGH_YELLOW ={"You don't have enough yellow tickets.","Voc√™ n√£o tem tickets verdes suficientes.","","","","","","","Yeterli sarƒ± biletiniz yok."},
NO_ENOUGH_GREEN ={"You don't have enough green tickets.","Voc√™ n√£o tem tickets amarelos suficientes.","","","","","","","Yeterli ye≈üil biletiniz yok."},
SHOP_INFO ={"The shop offers 10 random items daily. The catalogue will be updated in %s.","Esta loja oferece 10 itens aleat√≥rios para comprar todos dias. O cat√°logo ser√° atualizado em %s.","","","","","","","D√ºkkan g√ºnde 10 rastgele √ºr√ºn sunuyor. Katalog saat %s civarƒ± g√ºncellenecek."},
SHOP_CHAIRS ={"Chair","Cadeira","","","","","","","Sandalye"},
SHOP_PANEL ={"Panel","Painel","","","","","","",""},
SHOP_LIGHT ={"Spotlight","Holofote","","","","","","","Spot"},
SHOP_MAP ={"Map","Mapa","","","","","","","Harita"},
SHOP_RULE ={"Rule","Regra","","","","","","","Kural"},
SHOP_CONSUMABLE ={"Consumable","Consum√≠vel","","","","","","","T√ºketim maddesi"},
RULES_1 ={"When a new game begins, you may sit on an empty chair (by pressing space). The game begins after 15 seconds.\n\nGet rid of all the cards on your hand to win the game. Each player can discard one card per round. The discarded card must have a number, color or symbol equal to the one that's shown on the table.\n\nIf you don't have a suitable card to discard, you must draw one from the deck by clicking on it. If this card is adequate, you can play it or pass your turn.","Quando um novo jogo se iniciar, corra e sente-se em uma cadeira vazia (apertando espa√ßo). O jogo se inicia em 15 segundos.\n\nLivre-se de todas as cartas da sua m√£o para vencer o jogo. Para isto, cada jogador descarta uma carta nos seus respectivos turnos. A carta descartada deve ter n√∫mero, s√≠mbolo ou cor da carta que estiver na mesa.\n\nCaso voc√™ n√£o tenha uma carta para jogar, voc√™ deve comprar 1 carta (clicando no baralho). Caso esta carta sirva para jogar, voc√™ pode jog√°-la ou passar a vez.","Lorsqu'une partie commence, vous devez vous asseoir sur une chaise vide (en appuyant sur espace). La partie commence dans 15 secondes. \n\nD√©barassez-vous des cartes de votre main pour gagner le jeu. Chaque joueur peut se d√©fausser d'une carte par tour. La carte d√©fauss√©e doit avoir un num√©ro, une couleur ou un symbole √©gal √† celui qui est indiqu√© sur le tableau. \n\nSi vous n'avez pas de carte √† d√©fausser, vous devez en tirer une de la pioche en cliquant dessus. Si cette carte est ad√©quate, vous pouvez la jouer ou passer votre tour.","–ö–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –∏–≥—Ä–∞, –≤—ã –º–æ–∂–µ—Ç–µ —Å–µ—Å—Ç—å –Ω–∞ –ø—É—Å—Ç–æ–π –∫—Ä–µ—Å–ª–æ (–Ω–∞–∂–∞–≤ –ø—Ä–æ–±–µ–ª). –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥.\n\n–£–±–µ—Ä–∏ –≤—Å–µ –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É —Ç–µ–±—è –µ—Å—Ç—å, —á—Ç–æ–±—ã –≤—ã–∏–≥—Ä–∞—Ç—å –∏–≥—Ä—É. –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å –æ–¥–Ω—É –∫–∞—Ä—Ç—É –∑–∞ —Ä–∞—É–Ω–¥. –£ —Å–±—Ä–æ—à–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–æ–º–µ—Ä, —Ü–≤–µ—Ç –∏–ª–∏ —Å–∏–º–≤–æ–ª, —Å–æ–≤–ø–∞–¥–∞—é—â–∏–π —Å —Ç–µ–º, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–Ω –Ω–∞ —Å—Ç–æ–ª–µ.\n\n–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–∞—Ä—Ç—ã –¥–ª—è —Å–±—Ä–æ—Å–∞, –≤—ã –¥–æ–ª–∂–Ω—ã –≤–∑—è—Ç—å –µ—ë –∏–∑ –∫–æ–ª–æ–¥—ã, –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ—ë. –ï—Å–ª–∏ —ç—Ç–æ–π –∫–∞—Ä—Ç—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å –µ—ë –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–≤–æ–π —Ö–æ–¥.","Cuando un nuevo juego comienza, debes correr y tomar una silla vac√≠a(presionando espacio o agachandote en ella). El juego comenzar√° en 15 segundos.\n\n Descarta todas tus cartas para ganar el juego. Cada jugador puede descartar una carta por turno. La carta descartada debe tener el n√∫mero, color o s√≠mbolo igual a la que se muestra en la parte alta de la mesa. \n\n Si no tienes cartas para descartar, deber√°s tomar una carta del mazo presionando en √©l, si la carta encaja puedes descartarla o pasar turno.","Áï∂Êñ∞‰∏ÄËº™ÈÅäÊà≤ÈñãÂßãÁöÑÊôÇÂÄô, ‰Ω†ÂèØ‰ª•Âà∞Á©∫ÁΩÆÁöÑÂ∫ß‰Ωç (ÊåâÁ©∫Ê†ºÈçµ) Âùê‰∏ã„ÄÇ ÈÅäÊà≤Â∞áÂú® 15 ÁßíÂæåÈñãÂßã„ÄÇ\n\nÂè™Ë¶ÅÊääÊâã‰∏äÁöÑÁâåÈÉΩÂá∫ÂÆåÂ∞±ÂãùÂá∫ÈÅäÊà≤„ÄÇ ÊØèÂÄãÁé©ÂÆ∂Âú®ÊØè‰∏ÄÂÄãÂõûÂêàÂè™ÂèØ‰ª•Âá∫‰∏ÄÂºµÂç°Áâå„ÄÇ ÁôºÂá∫ÁöÑÂç°ÁâåÈÉΩÂøÖÈ†àË∑üÂú®Ê°åÂ≠ê‰∏äÂ∑≤ÁøªÈñãÁöÑÂç°ÁâåÊúâËëóÁõ∏ÂêåÁöÑÊï∏Â≠ó, È°èËâ≤ ÊàñÁ¨¶Ëôü„ÄÇ\n\nÂ¶ÇÊûú‰Ω†Ê≤íÊúâ‰∏ÄÂºµÁ¨¶ÂêàÂá∫ÁâåË¶ÅÊ±ÇÁöÑÂç°Áâå, ‰Ω†ÈúÄË¶ÅÈªûÊìäÁâåÂ∫´‰æÜÊäΩÂèñ‰∏ÄÂºµÂç°„ÄÇ Â¶ÇÊûúÊäΩÂá∫ÁöÑÂç°ÂâõÂ•ΩÁ¨¶ÂêàÂá∫ÁâåË¶ÅÊ±Ç, ‰Ω†ÂèØ‰ª•ÈÅ∏ÊìáÈ¶¨‰∏äÂá∫ÁâåÊàñÊòØÁïôÂæÖ‰∏ã‰∏ÄÂõûÂêà„ÄÇ","Gdy rozpocznie siƒô nowa gra, mo≈ºesz zaczƒÖƒá biec aby zajƒÖƒá puste krzes≈Ço (wciskajƒÖc spacjƒô). Gra rozpocznie siƒô za 15 sekund.\n\nPozbƒÖd≈∫ siƒô wszystkich kart z twojej puli aby wygraƒá grƒô. Ka≈ºdy gracz w trakcie jednej kolejki mo≈ºe wyrzuciƒá jedna kartƒô na st√≥≈Ç. Wyrzucona karta musi mieƒá numer, kolor lub symbol taki sam, jak karta pokazana na stole.\n\nJe≈õli nie masz odpowiedniej karty do wyrzucenia, musisz wyciƒÖgnƒÖƒá jednƒÖ kartƒô z talii kart klikajƒÖc na niƒÖ. Je≈õli karta ta pasuje, mo≈ºesz wyrzuciƒá ja na st√≥≈Ç lub przeczekaƒá kolejkƒô.","Amikor elkezd≈ëdik egy √∫j j√°t√©k, le tudsz √ºlni egy √ºres sz√©kre (a sz√≥k√∂z megnyom√°s√°val). A j√°t√©k 15 m√°sodperc m√∫lva kezd≈ëdik.\n\nSzabadulj meg az √∂sszes kezedben l√©v≈ë k√°rty√°t√≥l hogy megnyerd a j√°t√©kot. Minden j√°t√©kos ki tud j√°tszani egy k√°rty√°t minden k√∂rben. A kij√°tszott k√°rty√°n olyan sz√≠nnek, sz√°mnak vagy szimb√≥lumnak kell szerepelnie, mint ami az asztalon l√©v≈ë k√°rty√°n van rajta.\n\nHa nincs olyan k√°rty√°d amit kij√°tszhatn√°l, h√∫znod kell egyet a paklib√≥l √∫gy, hogy r√°kattintasz. Ha olyan k√°rty√°t h√∫zt√°l, amit ki tudn√°l j√°tszani, kij√°tszhatod vagy √°tadhatod a k√∂rt.","Yeni bir oyun ba≈üladƒ±ƒüƒ±nda bo≈ü bir sandalyeye oturabilirsiniz (bo≈üluk tu≈üuna basarak). Oyun 15 saniye sonra ba≈ülar. \n\nOyunu kazanmak i√ßin elinizdeki t√ºm kartlardan kurtulun. Her oyuncu tur ba≈üƒ±na bir kart √ßƒ±karabilir. Atƒ±lan kartƒ±n, masada g√∂sterilene e≈üit bir numarasƒ±, rengi veya sembol√º olmalƒ±dƒ±r. \n\nAtmak i√ßin uygun bir kartƒ±nƒ±z yoksa, √ºzerine tƒ±klayarak desteden bir kart √ßekmelisiniz. Bu kart yeterliyse oynayabilir veya sƒ±ranƒ±zƒ± ge√ßebilirsiniz."},
RULES_2 ={"Some special cards can change the game course:\n\n<b>Skip:</b> The next player misses their turn.\n\n<b>Reverse:</b> This card changes the game direction. If there are only two players in the game, it'll have the same effect as the Skip card.\n\n<b>+2:</b> It makes the next player draw two cards and miss their turn. If that player also has a +2 card, they can discard it and pass the accumulated penalty to the next player.\n\n<b>Wild:</b> You can discard it over any card and it gives the power to change the color to any of the four colors.","Algumas cartas especiais mudam o rumo do jogo:\n\n<b>Pular:</b> Faz o pr√≥ximo jogador perder a vez\n\n<b>Reverter:</b> Inverte o fluxo do jogo. Se for apenas 2 pessoas jogando, essa carta tem o efeito da carta Pular.\n\n<b>+2:</b> Faz o pr√≥ximo comprar duas cartas e perder a vez, caso ele tamb√©m tenha um +2, ele pode descartar e passar a penalidade para o pr√≥ximo, que ser√° acumulada.\n\n<b>Curinga:</b> Pode jogar em cima de qualquer carta, depois escolha uma cor para prosseguir o jogo.","Certaines cartes sp√©ciales peuvent changer le cours du jeu: \n\n<b>Passe:</b> Le prochain joueur passe son tour. \n\n<b>Changement de sens:</b> Cette carte change la direction du jeu. Si il n'y a que deux joueurs dans la partie, cette carte aura le m√™me effet que la carte Passe.\n\n<b>+2:</b> Cette carte fait prendre, au prochain joueur, 2 cartes et lui passer son tour. Si ce joueur a d√©j√† un +2, alors il peut la d√©fausser et passer la p√©nalit√© accumul√©e au prochain joueur.\n\n<b>Carte noire:</b> Vous pouvez d√©faussez une carte noire sur n'importe quelle autre carte, vous donnant alors le pouvoir de changer la couleur de la carte en l'une des quatre couleurs du jeu.","–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ö–æ–¥ –∏–≥—Ä—ã:\n\n<b>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å:</b> –°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å–≤–æ–π —Ö–æ–¥.\n\n<b>–û–±—Ä–∞—Ç–Ω–∞—è:</b>  –≠—Ç–∞ –∫–∞—Ä—Ç–∞ –º–µ–Ω—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã. –ï—Å–ª–∏ –≤ –∏–≥—Ä–µ —Ç–æ–ª—å–∫–æ –¥–≤–∞ –∏–≥—Ä–æ–∫–∞, —ç—Ç–æ –±—É–¥–µ—Ç –∏–º–µ—Ç—å —Ç–æ—Ç –∂–µ —ç—Ñ—Ñ–µ–∫—Ç, —á—Ç–æ –∏ –∫–∞—Ä—Ç–∞ –ø—Ä–æ–ø—É—Å–∫–∞..\n\n<b>+2:</b> –û–Ω–∞ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤–∑—è—Ç—å –¥–≤–µ –∫–∞—Ä—Ç—ã –∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–≤–æ–π —Ö–æ–¥. –ï—Å–ª–∏ —É —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Ç–∞–∫–∂–µ –µ—Å—Ç—å –∫–∞—Ä—Ç–∞ +2, –æ–Ω –º–æ–∂–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å –µ—ë –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É..\n\n<b>–ß—ë—Ä–Ω–∞—è:</b> –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –µ—ë –Ω–∞ –ª—é–±—É—é –∫–∞—Ä—Ç—É, –∏ —Å–º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å –Ω–∞ –æ–¥–∏–Ω —Ü–≤–µ—Ç –∏–∑ —á–µ—Ç—ã—Ä—ë—Ö.","Algunas cartas especiales pueden cambiar la direcci√≥n del juego:\n\n<b>Saltar:</b> El siguiente jugador pierde su turno.\n\n<b>Reversa:</b> Esta carta cambia la direcci√≥n. Si es que s√≥lo hay 2 jugadores en la partida, la carta toma el efecto de la carta ''Saltar''.\n\n<b>+2:</b>Esta carta hace que el siguiente jugador tome 2 cartas y perder su turno. Si el jugador tiene un +2, √©l puede descartarla y saltarse la penalidad.\n\n<b>Wild:</b> Puedes descartarla encima de cualquier carta y le da el poder de cambiar el color al que la descart√≥.","Êúâ‰∏Ä‰∫õÁâπÂà•Âç°ÁâåÊúÉÊîπËÆäÈÅäÊà≤ÈÄ≤Á®ã:\n\n<b>Ë∑≥ÈÅéÁâå:</b> ‰ΩøÁî®ÂæåÊúÉË∑≥ÈÅé‰∏ã‰∏Ä‰ΩçÁé©ÂÆ∂ÁöÑÂõûÂêà„ÄÇ\n\n<b>ÂèçËΩâÁâå:</b> ÊîπËÆäÈÅäÊà≤ÈÄ≤Ë°åÁöÑÊñπÂêë„ÄÇ Â¶ÇÊûúÂè™ÊúâÂÖ©ÂÄãÁé©ÂÆ∂, ÂÆÉÊúÉËÆäÊàêË∑üË∑≥ÈÅéÁâå‰∏ÄÊ®£ÁöÑ‰ΩúÁî®„ÄÇ\n\n<b>+2 Âç°Áâå:</b> ÂÆÉÊúÉ‰Ωø‰∏ã‰∏ÄÂÄãÁé©ÂÆ∂ÁΩ∞ÊäΩ 2 ÂºµÂç°ÁâåÁÑ∂ÂæåË∑≥ÈÅé‰ªñÁöÑÂõûÂêà„ÄÇ Â¶ÇÊûúÈÇ£ÂÄãÁé©ÂÆ∂‰πüÊúâ +2 Âç°Áâå, ‰ªñÂèØ‰ª•ÁôºÂá∫ÈÇ£Âç°ÁâåÁÑ∂ÂæåÊääÁΩ∞ÊäΩÊ¨°Êï∏Á¥ØÁ©çÁµ¶ÂÜç‰∏ã‰∏ÄÂÄãÁé©ÂÆ∂„ÄÇ\n\n<b>ÊèõËâ≤Âç°Áâå:</b> ‰Ω†ÂèØ‰ª•Âú®‰Ω†ÁöÑÂõûÂêàÈö®ÊôÇ‰ΩøÁî®ÂÆÉ‰æÜÊèõÊéâÂá∫ÁâåÁöÑÈ°èËâ≤, Âú®ÂõõÂÄãÈ°èËâ≤‰∏≠ÈÅ∏Êìá‰Ω†ÊÉ≥ÊèõÊàêÁöÑÈ°èËâ≤Â∞±Ë°å‰∫Ü„ÄÇ","Niekt√≥re specjalne karty mogƒÖ zmieniƒá przebieg gry:\n\n<b>Pominiƒôcie:</b> Nastƒôpny gracz traci swojƒÖ kolejkƒô.\n\n<b>Odwr√≥cenie:</b> Ta karta zmienia kierunek gry. Je≈õli tylko dwie osoby biorƒÖ udzia≈Ç w rozgrywce bƒôdzie ona dawaƒá taki sam efekt jak karta pominiƒôcie.\n\n<b>+2:</b> Sprawia, ze nastƒôpny gracz dostaje 2 dodatkowe karty i traci kolejkƒô. Je≈õli gracz posiada w swojej puli kartƒô +2, mo≈ºe wyrzuciƒá jƒÖ na st√≥≈Ç i przekazaƒá swojƒÖ karƒô nastƒôpnemu graczowi.\n\n<b>Wild:</b> Mo≈ºesz po≈Ço≈ºyƒá jƒÖ na ka≈ºdƒÖ innƒÖ kartƒô, daje ona mo≈ºliwo≈õƒá wyboru koloru dla tego, kto ja wyrzuci≈Ç.","N√©h√°ny k√ºl√∂nleges k√°rtya megv√°ltoztathatja a j√°t√©k menet√©t:\n\n<b>Kimaradsz:</b> A k√∂vetkez≈ë j√°t√©kos kimarad a k√∂rb≈ël.\n\n<b>Visszaford√≠t√≥:</b> Ez a k√°rtya megford√≠tja a k√∂r ir√°ny√°t. Ha csak k√©t j√°t√©kos van, ugyanaz a k√©pess√©ge mint a Kimaradsz k√°rty√°nak.\n\n<b>+2:</b> A k√∂vetkez≈ë j√°t√©kosnak kett≈ët kell h√∫znia, majd kimarad a k√∂rb≈ël. Ha neki is van +2-es k√°rty√°ja, kij√°tszhatja √©s a felhalmozott +2-es k√°rty√°k √∂sszes√≠tett √©rt√©k√©vel tov√°bb√≠thatja a k√∂vetkez≈ë j√°t√©kosnak.\n\n<b>Sz√≠nv√°laszt√≥:</b> Kij√°tszhatod b√°rmely k√°rty√°ra, √©s ut√°na kiv√°laszthatod a sz√≠n√©t a n√©gy sz√≠n b√°rmelyik√©b≈ël.","Bazƒ± √∂zel kartlar oyunun gidi≈üatƒ±nƒ± deƒüi≈ütirebilir:\n\n<b>Atla:</b> Bir sonraki oyuncu sƒ±rasƒ±nƒ± ka√ßƒ±rƒ±r.\n\n<b>Tersine √ßevirmek:</b> Bu kart oyunun y√∂n√ºn√º deƒüi≈ütirir. Oyunda yalnƒ±zca iki oyuncu varsa, Atlama kartƒ±yla aynƒ± etkiye sahip olacaktƒ±r.\n\n<b>+2:</b> Bir sonraki oyuncunun iki kart √ßekmesine ve sƒ±rasƒ±nƒ± ka√ßƒ±rmasƒ±na neden olur. Bu oyuncunun da +2 kartƒ± varsa, onu atabilir ve birikmi≈ü cezayƒ± bir sonraki oyuncuya ge√ßirebilir.\n\n<b>Renk kartƒ±:</b> Herhangi bir kartƒ±n √ºzerine atabilirsiniz ve rengi d√∂rt renkten herhangi birine deƒüi≈ütirme g√ºc√º verir."},
RULES_3 ={"<b>Wild +4:</b> It works just like the Wild, but this one also makes the next player draw 4 cards. If the next player has a Wild +4 card, they can discard the card and pass the accumulated penalty to the next player.\n\nYou can only play a Wild +4 card when you have no card matching the color of the top card on the table. The next player can challenge an invalid Wild +4 card. If the challenger is right, the one that will draw four cards will be the one who played it and the challenger won't miss their turn. But if the challenger is wrong, they will draw 6 cards, the initial 4 plus an extra 2 as a penalty.","<b>Curinga +4:</b> Igual ao Curinga comum, mas faz o pr√≥ximo comprar 4 cartas e perder a vez, se o pr√≥ximo tamb√©m tiver um +4, ele pode descartar e passar a penalidade para o pr√≥ximo, que ser√° acumulada.\n\n√â permitido jogar um +4 apenas quando voc√™ n√£o tiver cartas da cor da mesa.\n\nO pr√≥ximo jogador pode desafiar um +4 injusto. Se o desafiante estiver certo, quem compra as 4 cartas ser√° quem jogou o +4 e a vez n√£o ser√° perdida. Caso o desafiante perca, ele compra 2 cartas a mais como puni√ß√£o.","","<b>–ß—ë—Ä–Ω–∞—è +4:</b> –û–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫ –∂–µ, –∫–∞–∫ –∏ –æ–±—ã—á–Ω–∞—è –ß—ë—Ä–Ω–∞—è, –Ω–æ —ç—Ç–∞ —Ç–∞–∫–∂–µ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤–∑—è—Ç—å 4 –∫–∞—Ä—Ç—ã. –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –∏–º–µ–µ—Ç –ß—ë—Ä–Ω—É—é +4, –æ–Ω –º–æ–∂–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å –µ—ë –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É.\n\n–í—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ–π –ß—ë—Ä–Ω–æ–π +4, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ü–≤–µ—Ç—É –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ —Å—Ç–æ–ª–µ. –°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –±—Ä–æ—Å–∏—Ç—å –≤—ã–∑–æ–≤ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç–µ –ß—ë—Ä–Ω–æ–π +4. –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –ø—Ä–∞–≤, —Ç–æ —Ç–æ—Ç, –∫—Ç–æ –≤–æ–∑—å–º–µ—Ç —á–µ—Ç—ã—Ä–µ –∫–∞—Ä—Ç—ã, –±—É–¥–µ—Ç —Ç–µ–º, –∫—Ç–æ –∏—Ö —Ä–∞–∑—ã–≥—Ä–∞–ª, –∏ –ø—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç —Å–≤–æ–π —Ö–æ–¥. –ù–æ –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –æ—à–∏–±–∞–µ—Ç—Å—è, –æ–Ω –≤—ã—Ç—è–Ω–µ—Ç 6 –∫–∞—Ä—Ç, –Ω–∞—á–∞–ª—å–Ω—ã–µ 4 –∏ 2 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ.","<b>Wild +4:</b> Funciona como un joker com√∫n, pero este hace al pr√≥ximo jugador tomar 4 cartas. Si el pr√≥ximo jugador tiene un joker +4, el¬†jugador puede descartar la carta y pasar la penitencia al pr√≥ximo jugador.\n\nS√≥lo puedes jugar el joker +4 cuando no tienes cartas del color jugable. El siguiente jugador puede desafiar el joker +4 injusto. Si el jugador est√° en la raz√≥n, el¬†jugador que descart√≥ el joker +4 ser√° quien reciba las 4 cartas y el que lo iba a recibir no pierde su turno. En caso de que el desafiador est√© equivocado tendr√° que tomar 2 cartas m√°s aparte de las que iba a recibir como penalizaci√≥n.","<b>+4 ÊèõËâ≤Âç°Áâå:</b> ÂÆÉË∑üÊèõËâ≤Âç°Áâå‰∏ÄÊ®£, ‰ΩÜÊòØÈÄôÂºµÂç°ÁâåÊúÉËÆì‰∏ã‰∏ÄÂÄãÁé©ÂÆ∂ÁΩ∞ÊäΩ 4 ÂºµÂç°„ÄÇ Â¶ÇÊûú‰∏ã‰∏ÄÂÄãÁé©ÂÆ∂‰πüÊúâ +4 ÊèõËâ≤Âç°Áâå, ‰ªñÂèØ‰ª•ÁôºÂá∫ÈÇ£Âç°ÁâåÁÑ∂ÂæåÊääÁΩ∞ÊäΩÊ¨°Êï∏Á¥ØÁ©çÁµ¶ÂÜç‰∏ã‰∏ÄÂÄãÁé©ÂÆ∂„ÄÇ\n\n‰Ω†Âè™ÂèØ‰ª•Âú®Ê≤íÊúâË∑üÊ°åÈù¢‰∏äÂá∫ÁâåÁöÑÈ°èËâ≤‰∏ÄÊ®£ÁöÑÂç°ÁâåÈÄôÂÄãÊÉÖÊ≥Å‰∏ãÊâçÂèØ‰ª•ÁôºÂá∫ +4 ÊèõËâ≤Âç°Áâå„ÄÇ ‰∏ã‰∏ÄÂÄãÁé©ÂÆ∂ÊúâÊ¨äÂäõË≥™Áñë‰Ω†ÁöÑ +4 ÊèõËâ≤Âç°ÁâåÊúâÊ≤íÊúâÈÅïÂèçÈÄôË¶èÂâá„ÄÇ Â¶ÇÊûúÊàêÂäüË≥™Áñë, ÁôºÂá∫ÈÄô +4 ÊèõËâ≤Âç°ÁâåÁöÑ‰∫∫ÈúÄË¶ÅÁΩ∞ÊäΩ 4 ÂºµÂç°ÁâåËÄåÊèêÂá∫Ë≥™ÁñëÁöÑÁé©ÂÆ∂‰∏çÊúÉÂ§±ÂéªËá™Â∑±ÁöÑÂõûÂêà„ÄÇ ÂèØÊòØÂ¶ÇÊûúË≥™ÁñëÂ§±Êïó, ÊèêÂá∫Ë≥™ÁñëÁöÑÁé©ÂÆ∂ÊúÉË¢´ÁΩ∞ÊäΩ 6 ÂºµÂç°Áâå, ÈÇ£ÊòØÊú¨‰æÜÁöÑ 4 ÂºµÂä†‰∏äÈ°çÂ§ñ 2 ÂºµÂç°Áâå‰ΩúÁÇ∫Êá≤ÁΩ∞„ÄÇ","<b>Wild +4:</b> Dzia≈Ça trochƒô jak znany joker, ale sprawia, ≈ºe nastƒôpny gracz musi wyciƒÖgnƒÖƒá 4 karty z talii. Je≈õli ma on w swojej puli kartƒô Wild +4. mo≈ºe po≈Ço≈ºyƒá jƒÖ na st√≥≈Ç i przekazaƒá karƒô nastƒôpnemu graczowi.\n\nMo≈ºesz u≈ºyƒá karty Wild +4 je≈õli nie masz ≈ºadnej karty w kolorze tej, kt√≥ra znajduje siƒô na stole. Nastƒôpny gracz mo≈ºe rzuciƒá wyzwanie, je≈õli stwierdzi, ze karta +4 zosta≈Ça wyrzucona niesprawiedliwie, Je≈ºeli wyzywajƒÖcy ma racje, osobƒÖ kt√≥ra dostanie 4 dodatkowe karty, bƒôdzie ten, kto po≈Ço≈ºy≈Ç kartƒô Wild +4, a wyzywajƒÖcy nie straci kolejki.\nW przypadku, gdy wyzywajƒÖcy nie ma racji, otrzyma dwie karty wiƒôcej jako karƒô.","<b>Sz√≠nv√°laszt√≥ +4:</b> √ögy m≈±k√∂dik mint egy Sz√≠nv√°laszt√≥, viszont a k√∂vetkez≈ë j√°t√©kosnak h√∫znia kell n√©gy k√°rty√°t. Ha neki is van Sz√≠nv√°laszt√≥ +4-s k√°rty√°ja, kij√°tszhatja √©s a felhalmozott Sz√≠nv√°laszt√≥ +4-es k√°rty√°k √∂sszes√≠tett √©rt√©k√©vel tov√°bb√≠thatja a k√∂vetkez≈ë j√°t√©kosnak.\n\nCsak akkor j√°tszhatsz egy Sz√≠nv√°laszt√≥ +4-es k√°rty√°t, ha nincs m√°s k√°rty√°d, amely megegyezik sz√≠nben az asztalon l√©v≈ëvel. A k√∂vetkez≈ë j√°t√©kos kih√≠vhat egy √©rv√©nytelen Sz√≠nv√°laszt√≥ +4-es k√°rty√°t. Ha a kih√≠v√≥nak van igaza, a kij√°tsz√≥ h√∫z n√©gy k√°rty√°t √©s a kih√≠v√≥ k√∂re nem marad ki. Ha a kih√≠v√≥ t√©vedett, ≈ë h√∫z 6 k√°rty√°t, a kezdeti n√©gyet √©s m√©g kett≈ët b√ºntet√©sb≈ël.","<b>+4:</b> Tƒ±pkƒ± Renk kartƒ± gibi √ßalƒ±≈üƒ±r, ancak bu aynƒ± zamanda bir sonraki oyuncunun 4 kart √ßekmesini saƒülar. Bir sonraki oyuncunun bir +4 kartƒ± varsa, kartƒ± atabilir ve birikmi≈ü cezayƒ± bir sonraki oyuncuya ge√ßirebilir. \n\ nBir +4 kartƒ±nƒ± yalnƒ±zca masanƒ±n √ºst√ºndeki kartƒ±n rengiyle e≈üle≈üen kartƒ±nƒ±z olmadƒ±ƒüƒ±nda oynayabilirsiniz. Sƒ±radaki oyuncu ge√ßersiz bir +4 kartƒ±na itiraz edebilir. Eƒüer rakip haklƒ±ysa, d√∂rt kart √ßekecek olan, onu oynayan ki≈üi olur ve itiraz sƒ±rasƒ±nƒ± ka√ßƒ±rmaz. Ancak rakip hatalƒ±ysa, ceza olarak ilk 4 artƒ± ekstra 2 olmak √ºzere 6 kart √ßeker."},
RULES_4 ={"Before you discard your penultimate card, you should click the UNO button. If you don't click it in time, the other players can then click the challenge button and you'll automatically draw 2 cards.\n\nThere are additional rules that can appear in some matches. Pay attention to the list of house rules because a new rule can appear! You can click on each rule for further details. Some rules add new cards, while others alter the gameplay in other ways. Have fun!","Antes de voc√™ jogar sua pen√∫ltima carta, voc√™ deve declarar UNO (apertando no bot√£o UNO), caso n√£o fa√ßa isso, voc√™ dever√° comprar duas cartas caso algu√©m desafie voc√™.\n\nExistem v√°rias outras regras especiais que podem aparecer em algumas partidas. Fique atento no quadro de regras caso apare√ßa uma regra nova.\n\nVoc√™ pode clicar no nome da regra para ver mais detalhes sobre ela. Algumas regras adicionam cartas novas, enquanto outras alteram a forma de jogar. Divirta-se!","","–ü—Ä–µ–∂–¥–µ —á–µ–º –≤—ã–±—Ä–æ—Å–∏—Ç—å —Å–≤–æ—é –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é –∫–∞—Ä—Ç—É, –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –£–ù–û. –ï—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞–∂–º—ë—Ç–µ –µ–≥–æ –≤–æ–≤—Ä–µ–º—è, –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –∑–∞ –≤–∞—Å, –∏ –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∏—Ç–µ 2 –∫–∞—Ä—Ç—ã..\n\n–í –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–∞—Ç—á–∞—Ö –º–æ–≥—É—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–ø–∏—Å–æ–∫ –¥–æ–º–∞—à–Ω–∏—Ö –ø—Ä–∞–≤–∏–ª, –ø–æ—Ç–æ–º—É —á—Ç–æ –º–æ–∂–µ—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ! –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–æ–±–∞–≤–ª—è—é—Ç –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç—ã, –≤ —Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ –¥—Ä—É–≥–∏–µ –∏–∑–º–µ–Ω—è—é—Ç –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å –¥—Ä—É–≥–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏. –í–µ—Å–µ–ª–∏—Ç–µ—Å—å!","Antes de descartar tu pen√∫ltima carta, debes decir UNO (presionando el bot√≥n UNO), si no lo presionas deber√°s tomar 2 cartas¬†en caso de que¬†alguien te de desafio.\n\nExisten reglas especiales que aparecer√°n en algunas rondas. Puedes informarte sobre las reglas en el muro de reglas (presiona U). Puedes presionar el nombre de una regla para aprender que hace. Algunas reglas a√±aden nuevas cartas, mientras que otras cambian el modo de juego. ¬°Divi√©rtete!","Âú®Ââ©‰∏ãÊúÄÂæå‰∫åÂºµÂç°ÁâåÁöÑÊôÇÂÄô, ‰Ω†Âú®ÁôºÁâå‰πãÂâçÊáâË©≤ÂÖàÊåâ UNO Èçµ„ÄÇ Â¶ÇÊûú‰Ω†Âú®ÁôºÁâå‰πãÂâçÊ≤íÊúâÊåâÂÆÉ, ÂÖ∂‰ªñÁöÑÁé©ÂÆ∂Â∞±ÂèØ‰ª•ÊåâË≥™ÁñëÈçµÁÑ∂Âæå‰Ω†Â∞±ÊúÉËá™ÂãïË¢´ÁΩ∞ÂÖ©ÂºµÂç°Áâå„ÄÇ\n\nÂú®‰∏Ä‰∫õÈÅäÊà≤Â±Ä‰∏≠‰πüÂèØËÉΩÊúÉÂá∫ÁèæÈ°çÂ§ñÁöÑË¶èÁü©„ÄÇ Â§öÈªûÁïôÊÑèÂ∑¶ÈÇäÁöÑÂàóË°®Âõ†ÁÇ∫ÊúâÊ©üÊúÉÂá∫ÁèæÊñ∞ÁöÑËá™Ë®ÇË¶èÁü©Âì¶! ‰Ω†ÂèØ‰ª•Êåâ‰∏ãÊØèÈÅìË¶èÁü©‰æÜÊü•ÁúãË©≥ÊÉÖ„ÄÇ Êúâ‰∏Ä‰∫õË¶èÁü©ÊúÉÂú®ÁâåÂ∫´‰∏≠Âä†ÂÖ•Êñ∞Âç°Áâå, ‰πüÊúâ‰∏Ä‰∫õÊúÉÊîπËÆäÈÅäÊà≤ÁöÑÈÄ≤Á®ã„ÄÇ Á∏ΩËÄåË®Ä‰πãË´ãÁé©ÁöÑÈ´òËàà!","Zanim wyrzucisz swojƒÖ ostatniƒÖ kartƒô, musisz nacisnƒÖƒá przycisk UNO, w przypadku kiedy tego nie zrobisz, dostaniesz dwie dodatkowe karty je≈õli kt√≥ry≈õ z graczy ciƒô wyzwie. \n\nSƒÖ te≈º specjalne zasady, kt√≥re mogƒÖ pojawiƒá siƒô w niekt√≥rych meczach. BƒÖd≈∫ czujny i obserwuj tablicƒô z zasadami. Mo≈ºesz kliknƒÖƒá na nazwƒô zasady ≈ºeby zobaczyƒá wiƒôcej szczeg√≥≈Ç√≥w. Niekt√≥re zasady dodajƒÖ nowe karty , a inne zmieniajƒÖ rozgrywkƒô. Mi≈Çej zabawy!","Miel≈ëtt kij√°tszan√°d az utols√≥ el≈ëtti k√°rty√°d, kattints r√° az UNO gombra. Ha nem kattintasz r√° id≈ëben, a t√∂bbi j√°t√©kos r√°kattinthat a kih√≠v√°s gombra, √©s azonnal h√∫zol 2 k√°rty√°t.\n\nVannak egy√©b szab√°lyok, amelyek megjelenhetnek j√°t√©kokban. Figyelj oda a h√°zszab√°lyok list√°j√°ra mert egy √∫j szab√°ly b√°rmikor megjelenhet! R√° tudsz kattintani a szab√°lyokra r√©szletes le√≠r√°sok√©rt. N√©h√°ny szab√°ly √∫j k√°rty√°kat ad a j√°t√©kba, m√°sok k√ºl√∂nb√∂z≈ë m√≥dokon v√°ltoztatj√°k meg a j√°t√©kot. J√≥ sz√≥rakoz√°st!","Sondan bir √∂nceki kartƒ±nƒ±zƒ± atmadan √∂nce, UNO d√ºƒümesine tƒ±klamalƒ±sƒ±nƒ±z. Zamanƒ±nda tƒ±klamazsanƒ±z, diƒüer oyuncular itiraz d√ºƒümesine tƒ±klayabilir ve otomatik olarak 2 kart √ßekersiniz. \n\nBazƒ± ma√ßlarda g√∂r√ºnebilecek ek kurallar vardƒ±r. Ev kurallarƒ± listesine dikkat edin √ß√ºnk√º yeni bir kural g√∂r√ºnebilir! Daha fazla ayrƒ±ntƒ± i√ßin her kurala tƒ±klayabilirsiniz. Bazƒ± kurallar yeni kartlar ekler, bazƒ±larƒ± ise oyunu ba≈üka ≈üekillerde deƒüi≈ütirir. ƒ∞yi eƒülenceler!"},
HOUSE_CHALLENGE ={"No Challenge","Sem Desafiar","Pas de D√©fi","–ù–µ—Ç –í—ã–∑–æ–≤–∞","Sin desafiar","‰∏çÂáÜË≥™Áñë","Bez wyzwa≈Ñ","Nincs Kih√≠v√°s","ƒ∞tiraz Yok"},
HOUSE_CHALLENGE_DESC ={"The wild +4 card can't be challenged anymore.","Os +4 n√£o podem mais ser desafiados.","La carte +4 ne peut plus √™tre d√©fi√©e.","–ß—ë—Ä–Ω–∞—è +4 –±–µ—Ä—ë—Ç—Å—è –±–µ–∑ –≤—ã–∑–æ–≤–∞.","La carta comod√≠n +4 no podr√° ser retada."," +4 ÊèõËâ≤Âç°Áâå‰∏çËÉΩÂ§†ÂÜçË¢´Ë≥™Áñë‰∫Ü„ÄÇ","Wild +4 nie mo≈ºe byƒá wiƒôcej Challenge.","A Sz√≠nv√°laszt√≥ +4-es k√°rty√°t nem lehet t√∂bb√© kih√≠vni."," +4 kartƒ±na artƒ±k itiraz edilemez."},
HOUSE_NO_COMBO ={"No Combo","Sem Combo","Pas de Combo","–ù–µ—Ç –ö–æ–º–±–æ","Sin combo","‰∏çÂèØÁ¥ØÁ©ç","Bez Combo","Nincs Kiv√©d√©s","Kombo Yok"},
HOUSE_NO_COMBO_DESC ={"You can't block drawing cards anymore.","N√£o √© mais poss√≠vel se defender de cartas de compra.","You can't block drawing cards anymore.","–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –±–æ–ª—å—à–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—ã +2.","Ya no podr√°s bloquear cartas sorteadas.","‰Ω†‰∏çËÉΩÂ§†ÂÜçÁ¥ØÁ©çÁΩ∞ÊäΩÂç°Áâå‰∫Ü„ÄÇ","Nie mo≈ºesz wiƒôcej blokowaƒá dobierania kart. ","Nem lehet t√∂bb√© k√°rtyah√∫z√°st kiv√©deni.","Kart √ßektirme kartlarƒ±nƒ± engelleyemezsiniz."},
HOUSE_SUPER_COMBO ={"Super Combo","","","–°—É–ø–µ—Ä –ö–æ–º–±–æ","Supercombo","Ë∂ÖÁ¥öÁ¥ØÁ©ç","","Szuper Kiv√©d√©s","S√ºper Kombo"},
HOUSE_SUPER_COMBO_DESC ={"You can block drawing cards with any card that has a + on it.","√â poss√≠vel se defender de compras de carta com qualquer carta com um +.","You can block drawing cards with any card that has a + on it.","–í—ã –º–æ–∂–µ—Ç–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—ã –∫–∞—Ä—Ç–∞–º–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å +.","Podr√°s bloquear cartas sorteadas con cualquier carta que tenga un + en ella.","‰Ω†ÂèØ‰ª•Áî®‰ªª‰ΩïÊúâ + ËôüÁöÑÂç°ÁâåÁ¥ØÁ©çÁΩ∞ÊäΩÊ¨°Êï∏„ÄÇ","Mo≈ºesz blokowaƒá karty wyciƒÖgajƒÖc dowolnƒÖ kartƒô z +.","B√°rmilyen + szimb√≥lumot tartalmaz√≥ k√°rty√°val kiv√©dheted a k√°rtyah√∫z√°st.","√úzerinde + olan herhangi bir kartla kart √ßektirme kartlarƒ±nƒ± engelleyebilirsiniz."},
HOUSE_HELL ={"Hell","Inferno","Enfer","–ê–¥","Infierno","Âú∞ÁçÑ","Piek≈Ço","Pokol","Cehennem"},
HOUSE_HELL_DESC ={"Action cards can be played over any other action card, of any color.","Cartas de a√ß√£o podem ser jogadas em cima de outras cartas de a√ß√£o de qualquer cor.","Les cartes action peuvent √™tre jou√©es au-dessus de n'importe quelle autre carte action, de n'importe quelle couleur.","–ö–∞—Ä—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π –º–æ–∂–Ω–æ –ø–æ–ª–æ–∂–∏—Ç—å –ø–æ–≤–µ—Ä—Ö –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –∫–∞—Ä—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π –ª—é–±–æ–≥–æ —Ü–≤–µ—Ç–∞.","Cartas de acci√≥n podr√°n ser jugadas sobre cualquier otra carta de acci√≥n, de cualquier color.","ÊâÄÊúâÁöÑË°åÂãïÂç°ÁâåÈÉΩÂèØ‰ª•Âú®‰∏ä‰∏ÄÂºµË°åÂãïÂç°ÁâåÁôºÂá∫‰πãÂæåÊé•ËëóÁôºÂá∫, ‰∏çÁÆ°ÊòØ‰ªª‰ΩïÈ°èËâ≤„ÄÇ","Kartƒô akcji mo≈ºna po≈Ço≈ºyƒá na innƒÖ takƒÖ kartƒô, niezale≈ºnie od jej koloru.","Az akci√≥k√°rty√°k b√°rmely m√°sik akci√≥k√°rty√°ra lej√°tszhat√≥k, b√°rmely m√°s sz√≠nb≈ël is.","Aksiyon kartlarƒ±, herhangi bir renkteki diƒüer herhangi bir aksiyon kartƒ± √ºzerinde oynanabilir."},
HOUSE_JUMP_IN ={"Jump-In","Corte","","–ü—Ä—ã–∂–æ–∫","En-Salto","Ë∑≥-ÂÖ•","Wskocz","Beugr√°s","Atlama"},
HOUSE_JUMP_IN_DESC ={"If you have the exact same card that's on the table, you can play it even if it's not your turn.","Se voc√™ tiver uma carta id√™ntica √† da mesa, voc√™ pode jog√°-la mesmo que n√£o seja sua vez!","Si vous avez exactement la m√™me carte que celle sur la table, vous pouvez la jouer m√™me si ce n'est pas votre tour.","–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞—Ä—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ —Å—Ç–æ–ª–µ, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ —Å–≤–æ—é –∏ –∑–∞–±–µ—Ä—ë—Ç–µ —Ö–æ–¥ –Ω–∞ —Å–µ–±—è","Si tienes exactamente la misma carta que est√° en la tabla, podr√°s jugarla aunque no sea tu turno.","Â¶ÇÊûú‰Ω†ÊúâË∑üÂú®Ê°åÈù¢‰∏ä‰∏ÄÊ®°‰∏ÄÊ®£ÁöÑÂç°Áâå, Â∞±ÁÆóÈÇÑÊ≤íÊúâÂà∞‰Ω†ÁöÑÂõûÂêà‰Ω†‰πüÂèØ‰ª•È¶¨‰∏äÁôºÂá∫ÈÇ£Âç°Áâå„ÄÇ","Je≈õli masz dok≈Çadnie takƒÖ samƒÖ kartƒô, jaka widnieje na stole, mo≈ºesz po≈Ço≈ºyƒá jƒÖ nawet je≈õli nie jest to twoja kolej.","Ha olyan k√°rty√°val rendelkezel, amely az asztalon van, akkor kij√°tszhatod akkor is, ha nem a te k√∂r√∂d van.","Masadaki kartƒ±n aynƒ±sƒ±na sahipseniz, sƒ±ranƒ±z olmasa bile oynayabilirsiniz."},
HOUSE_CLEAN_FINISH ={"Clean Finish","Final Limpo","Finition Propre","–ß–∏—Å—Ç—ã–π –§–∏–Ω–∏—à","Final Limpio","‰πæÊ∑®‰øêËêΩ","Czysty Koniec","Tiszta Gy≈ëzelem","Temiz Bitir"},
HOUSE_CLEAN_FINISH_DESC ={"You can only win the game if your last card is a numerical card.","Voc√™ s√≥ pode vencer o jogo se sua √∫ltima carta for num√©rica.","Vous pouvez gagner cette partie uniquement si votre derni√®re carte est une carte num√©rique.","–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–∏–≥—Ä–∞—Ç—å –∏–≥—Ä—É, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∞—à–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–∞—Ä—Ç–∞ - —Ü–∏—Ñ—Ä–æ–≤–∞—è.","S√≥lo podr√°s ganar el juego si tu √∫ltima carta¬†es un n√∫mero.","‰Ω†ÊúÄÂæåÁôºÂá∫ÁöÑ‰∏ÄÂºµÂç°ÁâåÂøÖÈ†àË¶ÅÊòØÊï∏Â≠óÂç°ÁâåÊâçÂèØ‰ª•ÂãùÂá∫ÈÅäÊà≤„ÄÇ","Mo≈ºesz wygraƒá je≈ºeli twoja ostatnia karta jest numerem.","Csak akkor nyerhetsz, ha az utols√≥ k√°rty√°d sz√°mk√°rtya.","Oyunu yalnƒ±zca son kartƒ±nƒ±z sayƒ±sal bir kartsa kazanabilirsiniz."},
HOUSE_MINI ={"Mini","","","–ú–∏–Ω–∏","M√≠nimo","Ëø∑‰Ω†","","",""},
HOUSE_MINI_DESC ={"Everyone starts with 4 cards.","Todos iniciam com 4 cartas.","Tout le monde d√©marre avec 4 cartes.","–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 4 –∫–∞—Ä—Ç.","Todos empiezan con cuatro cartas.","ÊâÄÊúâ‰∫∫Ëµ∑ÂàùÁöÑÂç°ÁâåÊï∏ÈáèËÆäÊàê 4","Wszyscy startujƒÖ z 4 kartami","Mindenki 4 k√°rty√°val kezd.","Herkes 4 kartla ba≈ülar."},
HOUSE_MAXI ={"Maxi","","","–ú–∞–∫—Å–∏","M√°ximo","ÊúÄÂ§ß","","","Maksi"},
HOUSE_MAXI_DESC ={"Everyone starts with 9 cards.","Todos iniciam com 9 cartas.","Tout le monde d√©marre avec 9 cartes.","–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 9 –∫–∞—Ä—Ç.","Todos empiezan con nueve cartas.","ÊâÄÊúâ‰∫∫Ëµ∑ÂàùÁöÑÂç°ÁâåÊï∏ÈáèËÆäÊàê 9","Wszyscy startujƒÖ z 9 kartami","Mindenki 9 k√°rty√°val kezd.","Herkes 9 kartla ba≈ülar."},
HOUSE_SATISFACTION ={"Satisfaction","Satisfa√ß√£o","","–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ","Satisfacci√≥n","ÂøÉÊªøÊÑèË∂≥","Zadowolenie","El√©gedetts√©g","Memnuniyet"},
HOUSE_SATISFACTION_DESC ={"You must keep drawing cards until you find a playable card.","Compre cartas at√© poder jogar uma.","Vous devez continuer √† tirer des cartes jusqu'√† ce que vous trouviez une carte jouable.","–í—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –±—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω—É—é.","Tendr√°s que estar sorteando cartas hasta que encuentres una carta jugable.","‰Ω†ÈúÄË¶Å‰∏ÄÁõ¥ÊäΩÂèñÂç°ÁâåÁõ¥Âà∞ÊäΩÂá∫‰∏ÄÂºµÂèØ‰ª•È¶¨‰∏äÁôºÂá∫ÁöÑÂç°Áâå„ÄÇ","WyciƒÖgaj karty dop√≥ki nie znajdziesz op≈Çacalnej karty.","Addig kell h√∫znod k√°rty√°t, am√≠g kij√°tszhat√≥t nem tal√°lsz.","Oynanabilir bir kart bulana kadar kart √ßekmeye devam etmelisiniz."},
HOUSE_INSATISFACTION ={"Unsatisfied","Insatisfa√ß√£o","Insatisfaction","–ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω—ã–π","Insatisfecho","‰∏çÊªøÊÑè","Niezadowolenie","Kiel√©g√≠tetlen","Tatminsiz"},
HOUSE_INSATISFACTION_DESC ={"When you draw a card, you pass your turn automatically.","Comprar carta far√° voc√™ passar a vez automaticamente.","Lorsque vous tirez une carte, vous passez votre tour automatiquement.","–ö–æ–≥–¥–∞ –≤—ã –±–µ—Ä–µ—Ç–µ –∫–∞—Ä—Ç—É, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç–µ —Å–≤–æ–π —Ö–æ–¥.","Cuando sortees una carta pasar√°s autom√°ticamente de turno.","Áï∂‰Ω†ÊäΩÂèñÂç°Áâå, Â∞áÊúÉËá™ÂãïÁµêÊùüËá™Â∑±ÁöÑÂõûÂêà„ÄÇ","Kiedy dobierasz kartƒô tw√≥j ruch zostaje przerwany automatycznie.","Ha h√∫zol egy k√°rty√°t, azonnal kimaradsz a k√∂rb≈ël.","Bir kart √ßektiƒüinizde, sƒ±ranƒ±zƒ± otomatik olarak ge√ßersiniz."},
HOUSE_FLASH ={"Flash","R√°pido","","–§–ª—ç—à","","ÈñÉÁèæ","B≈Çysk","Villan√°s","Fla≈ü"},
HOUSE_FLASH_DESC ={"You only have 5 seconds to play!","S√£o apenas 5 segundos para jogar!","Vous avez uniquement 5 secondes pour jouer!","–£ –≤–∞—Å –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ 5 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å!","¬°S√≥lo tienes cinco segundos para escoger!","‰Ω†Âè™Êúâ 5 Áßí‰æÜÊ±∫ÂÆöÂá∫Áâå!","To tylko 5 sekund na gre!","Csak 5 m√°sodperced van j√°tszani!","Oynamak i√ßin sadece 5 saniyeniz var!"},
HOUSE_REVELATION ={"Revelation","Revela√ß√£o","R√©v√©lation","–û—Ç–∫—Ä–æ–≤–µ–Ω–∏–µ","Revelaci√≥n","Ê≥ÑÂØÜ","Rewelacja","Jelen√©s","Vahiy"},
HOUSE_REVELATION_DESC ={"The top card of the deck is visible to everyone.","A carta no topo do baralho √© vis√≠vel para todos.","La carte sup√©rieure de la pioche est visible par tout le monde.","–í–µ—Ä—Ö–Ω—è—è –∫–∞—Ä—Ç–∞ –∫–æ–ª–æ–¥—ã –≤–∏–¥–Ω–∞ –≤—Å–µ–º.","La carta m√°s alta de la baraja estar√° visible a todos.","ÊâÄÊúâ‰∫∫ÈÉΩÁúãÁöÑË¶ãÁâåÂ∫´‰∏≠Á¨¨‰∏ÄÂºµÂç°Áâå„ÄÇ","G√≥rna karta z talli jest widoczna dla wszystkich.","A pakli fels≈ë k√°rty√°ja mindenki sz√°m√°ra l√°that√≥.","Destenin en √ºst kartƒ± herkes tarafƒ±ndan g√∂r√ºlebilir."},
HOUSE_PERFECTION ={"Perfection","Perfeccionista","","–°–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ","Perfecci√≥n","ÂÆåÁæé‰∏ªÁæ©","Doskona≈Ço≈õƒá","T√∂k√©letess√©g","M√ºkemmellik"},
HOUSE_PERFECTION_DESC ={"If you play a number card that is equal to the number of cards in your hand, you can play again.","Se jogar um n√∫mero igual ao n√∫mero de cartas na m√£o, jogue novamente.","Si vous jouez une carte num√©rique √©gale au nombre de cartes de votre jeu, vous pouvez rejouer.","–ï—Å–ª–∏ –≤—ã –∏–≥—Ä–∞–µ—Ç–µ —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–∞—Ä—Ç–æ–π, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–≤–Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞—Ä—Ç –≤ –≤–∞—à–µ–π —Ä—É–∫–µ, –≤—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞.","Si juegas una carta cuyo n√∫mero es equivalente al n√∫mero de cartas que tienes a la mano, tendr√°s otro turno.","Â¶ÇÊûú‰Ω†ÁôºÂá∫ÁöÑÂç°Áâå‰∏äÁöÑÊï∏Â≠óË∑ü‰Ω†ÊåÅÊúâÁöÑÂç°ÁâåÊï∏ÁõÆ‰∏ÄÊ®£, ‰Ω†ÂèØ‰ª•ÂÜçÁôºÂá∫‰∏ÄÂºµÁâå„ÄÇ","Je≈õli grasz kartƒÖ z takim samym numerem jakƒÖ trzymasz w rƒôku zagraj ponownie.","Ha olyan sz√°mk√°rty√°t j√°tszol amely √©rt√©ke egyenl≈ë a kezedben l√©v≈ë k√°rty√°k sz√°m√°val, √∫jra j√°tszhatsz.","Elinizdeki kart sayƒ±sƒ±na e≈üit numarada kartƒ± oynarsanƒ±z, tekrar oynayabilirsiniz."},
HOUSE_TRACKING ={"Tracking","Rastrear","Tra√ßage","–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ","Rastreo","ËøΩËπ§","≈öledzenie","Nyomk√∂vet√©s","Takip"},
HOUSE_TRACKING_DESC ={"When you draw a card, you get the option to choose one of three cards.","Ao comprar carta, voc√™ escolhe uma entre tr√™s cartas para comprar.","Lorsque vous piochez une carte, vous avez l'option de choisir une sur trois cartes.","–ö–æ–≥–¥–∞ –≤—ã –±–µ—Ä—ë—Ç–µ –∫–∞—Ä—Ç—É, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ —Ç—Ä—ë—Ö –∫–∞—Ä—Ç.","Cuando sortees una carta, tendr√°s la opci√≥n de escoger una de tres cartas.","Áï∂‰Ω†ÊäΩÂèñÂç°ÁâåÁöÑÊôÇÂÄô, ‰Ω†ÂèØ‰ª•Âú® 3 ÂÄãÈÅ∏Êìá‰∏≠ÈÅ∏‰∏ÄÂÄã„ÄÇ","Kiedy dobierasz kartƒô mo≈ºesz wybraƒá jednƒÖ z po≈õr√≥d trzech podanych. ","Ha egy k√°rty√°t h√∫zn√°l, v√°laszthatsz h√°rom k√°rtya k√∂z√ºl.","Bir kart √ßektiƒüinizde, √º√ß karttan birini se√ßme se√ßeneƒüine sahip olursunuz."},
HOUSE_MULLIGAN ={"Mulligan","Segunda Chance","","–ü–µ—Ä–µ—Å–¥–∞—á–∞","","Á©ÜÈáåÊ†π","","",""},
HOUSE_MULLIGAN_DESC ={"When the game starts, you can change your hand with a new one.","No in√≠cio do jogo, voc√™ pode trocar sua m√£o por uma nova.","Lorsque le jeu commence, vous pouvez changer votre jeu avec un autre.","–ö–æ–≥–¥–∞ –∏–≥—Ä–∞ –Ω–∞—á–Ω—ë—Ç—Å—è, –≤—ã –º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã –Ω–∞ –Ω–æ–≤—ã–µ.","Cuando el juego comienze, podr√°s cambiar tu baraja con una nueva.","Âú®ÈÅäÊà≤ÈñãÂßãÁöÑÊôÇÂÄô, ‰Ω†ÂèØ‰ª•ÈÅ∏ÊìáÊääÂç°ÁµÑÊèõÊéâ„ÄÇ","Kiedy gra siƒô rozpoczyna, mo≈ºesz wymieniƒá swojƒÖ pulƒô kart na nowƒÖ.","Amikor a j√°t√©k elkezd≈ëdik, kicser√©lheted a kezedben l√©v≈ë k√°rty√°id √∫jakra.","Oyun ba≈üladƒ±ƒüƒ±nda elinizi yenisiyle deƒüi≈ütirebilirsiniz."},
HOUSE_OVERLOAD ={"Overload","Sobrecarga","Surcharge","–ü–µ—Ä–µ–≥—Ä—É–∑–∫–∞","Sobrecarga","Ë≤†Ëç∑ÈÅéÂ§ö","PrzeciƒÖ≈ºenie","T√∫lt√∂lt≈ëd√©s","A≈üƒ±rƒ± y√ºkleme"},
HOUSE_OVERLOAD_DESC ={"Players with more than 10 cards get eliminated.","Quem ficar com mais de 10 cartas na m√£o ser√° eliminado.","Les joueurs avec plus de 10 cartes sont √©limin√©s.","–ò–≥—Ä–æ–∫–∏ —Å –±–æ–ª–µ–µ —á–µ–º 10 –∫–∞—Ä—Ç–∞–º–∏ –∏—Å–∫–ª—é—á–∞—é—Ç—Å—è.","Jugadores que posean m√°s de diez cartas ser√°n eliminados.","Áé©ÂÆ∂Êâã‰∏≠Âç°ÁâåÂ§öÊñº 10 Â∞±ÊúÉË¢´Ê∑òÊ±∞Êéâ„ÄÇ","Gracz majƒÖcy wiƒôcej ni≈º 10 kart, bƒôdzie wyeliminowany. ","A t√∂bb mint 10 k√°rty√°val rendelkez≈ë j√°t√©kosok kiesnek a j√°t√©kb√≥l.","10'dan fazla karta sahip oyuncular elenir."},
HOUSE_BLACK ={"Black Cards","Cartas Pretas","Cartes Noires","–ß—ë—Ä–Ω—ã–µ –ö–∞—Ä—Ç—ã","Cartas Negras","ÈªëËâ≤ÊÅêÊÄñ","Czarne Karty","Fekete K√°rty√°k","Siyah Kartlar"},
HOUSE_BLACK_DESC ={"If you play the exact same card as the top card, it turns into a black one. Only a card with the same number or symbol can be played on it.","Se jogar uma carta id√™ntica √† da mesa, a carta fica com cor preta.","Si vous jouez exactement la m√™me carte que celle du haut, elle devient noire. Seule une carte avec le m√™me num√©ro ou symbole peut √™tre jou√©e dessus.","–ï—Å–ª–∏ –≤—ã –∫–ª–∞–¥—ë—Ç–µ —Ç—É –∂–µ –∫–∞—Ä—Ç—É, –∫–∞–∫–∞—è —Å–≤–µ—Ä—Ö—É, –æ–Ω–∞ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ —á—ë—Ä–Ω—É—é. –ü–æ–ª–æ–∂–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ç—É, –∫–æ—Ç–æ—Ä–∞—è –∏–º–µ–µ—Ç —Ç–∞–∫–æ–π –∂–µ —Å–∏–º–≤–æ–ª –∏ –Ω–æ–º–µ—Ä.","Si juegas exactamente la mimsa carta que est√° en el tope, se tornar√° a una negra. √önicamente una carta que contenga el mismo n√∫mero o s√≠mbolo podr√° ser jugada sobre √©sta.","Â¶ÇÊûú‰Ω†ÁôºÂá∫ÁöÑÂç°Ë∑üÊ°åÈù¢‰∏äÁöÑÂç°Áâå‰∏ÄÊ®°‰∏ÄÊ®£, ÂÆÉÊúÉËÆäÊàêÈªëËâ≤„ÄÇ‰πãÂæåÂè™ÂèØ‰ª•ÁôºÂá∫Ë∑üÈªëÂç°ÊúâËëó‰∏ÄÊ®£ÁöÑÊï∏Â≠óÊàñÁ¨¶ËôüÁöÑÂç°Áâå„ÄÇ","Je≈õli zagrasz takƒÖ samƒÖ kartƒÖ jak karta z g√≥ry, stanie siƒô czarna.","Ha az asztalon l√©v≈ë k√°rty√°val azonos k√°rty√°t j√°tszol ki, feket√©v√© v√°ltozik. Csak olyan k√°rtya j√°tszhat√≥ r√°, amelyen ugyanaz a sz√°m vagy szimb√≥lum szerepel.","√ústteki kartla aynƒ± kartƒ± oynarsanƒ±z, siyah bir karta d√∂n√º≈ü√ºr. √úzerinde sadece aynƒ± sayƒ± veya sembole sahip bir kart oynanabilir."},
HOUSE_STACK ={"Stacking","Empilhar","Empilage","–ú–Ω–æ–∂–µ—Å—Ç–≤–æ","Apilando","Â†ÜÁñä","Uk≈Çadanie","Halmoz√°s","ƒ∞stifleme"},
HOUSE_STACK_DESC ={"You can play several cards with the same numerical value in one turn.","Voc√™ pode jogar v√°rias cartas do mesmo n√∫mero de uma s√≥ vez.","Vous pouvez jouer plusieurs cartes avec la m√™me valeur num√©rique en un tour.","–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —á–∏—Å–ª–∞–º–∏ –∑–∞ –æ–¥–∏–Ω —Ö–æ–¥.","Podr√°s jugar varias cartas que tengan el mismo valor n√∫mero en un turno.","‰Ω†ÂèØ‰ª•Âú®Âêå‰∏ÄÂÄãÂõûÂêàË£°ÁôºÂá∫Â§öÂºµÂêå‰∏ÄÂÄãÊï∏Â≠óÁöÑÂç°Áâå„ÄÇ","Mo≈ºesz wy≈Ço≈ºyƒá kilka kart z tym samym numerem podczas jednej kolejki.","Egy k√∂r alatt t√∂bb, ugyanolyan sz√°m√©rt√©kkel rendelkez≈ë k√°rty√°t j√°tszhatsz.","Tek bir turda aynƒ± sayƒ±sal deƒüere sahip birka√ß kart oynayabilirsiniz."},
HOUSE_PEACE ={"Peace Card","Carta da Paz","Carte Paix","–ú–∏—Ä–Ω–∞—è –ö–∞—Ä—Ç–∞","Carta de Paz","ÂíåÂπ≥‰πãÂç°","Karta Pokoju","B√©ke K√°rtya","Barƒ±≈ü Kartƒ±"},
HOUSE_PEACE_DESC ={"When you play this card, action cards will have no effect on the next two turns.","Ao jogar esta carta, cartas de a√ß√£o n√£o ter√£o efeito nos pr√≥ximos dois turnos.","Lorsque vous jouez cette carte, les cartes action n'auront pas d'effet aux 2 prochains tours.","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –∫–∞—Ä—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –¥–≤–∞ —Ö–æ–¥–∞.","Cuando juegues esta carta, las cartas de acci√≥n no tendr√°n efecto en los siguientes dos turnos.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂºµÂç°Áâå‰πãÂæå, Ë°åÂãïÂç°ÈÉΩÊúÉÂú®Êé•‰∏ã‰æÜÁöÑÂÖ©ÂÄãÂõûÂêà‰∏≠Â§±Êïà„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ, karty akcji nie bƒôdƒÖ mia≈Çy ≈ºadnego dzia≈Çania przez kolejne dwie kolejki.","Ha kij√°tszod ezt a k√°rty√°t, az akci√≥k√°rty√°k elvesztik a hat√°sukat k√©t k√∂rig.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, aksiyon kartlarƒ±nƒ±n sonraki iki turda hi√ßbir etkisi olmayacaktƒ±r."},
HOUSE_DEATH ={"Sudden Death Card","Carta da Morte S√∫bita","Carte Mort Subite","–ö–∞—Ä—Ç–∞ –í–Ω–µ–∑–∞–ø–Ω–æ–π –°–º–µ—Ä—Ç–∏","Carta de Muerte S√∫bita","Êö¥ÊñÉÂç°Áâå","Karta Nag≈Çej ≈ömierci","Hirtelen Hal√°l K√°rtya","Ani √ñl√ºm Kartƒ±"},
HOUSE_DEATH_DESC ={"After playing this card, anyone who can't play a card or make a mistake will be eliminated.","Ap√≥s jogar esta carta, quem n√£o puder jogar cartas ou cometer um erro ser√° eliminado.","","","","","","",""},
HOUSE_CAROUSEL ={"Treadmill Card","Carta da Esteira","Carte Tapis roulant","–ë–µ–≥–æ–≤–∞—è –î–æ—Ä–æ–∂–∫–∞","Carta Cinta","Ë∑ëÊ≠•Ê©üÂç°Áâå","BiegajƒÖca Karta","Fut√≥pad K√°rtya","Ko≈üu Bandƒ± Kartƒ±"},
HOUSE_CAROUSEL_DESC ={"When you play this card, everyone passes their cards to the next player.","Ao jogar esta carta, todos passam suas cartas para o pr√≥ximo jogador.","Lorsque vous jouez cette carte, tout le monde passe ses cartes au joueur suivant.","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –∫–∞–∂–¥—ã–π –ø–µ—Ä–µ–¥–∞–µ—Ç —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É.","Cuando juegues esta carta, todos pasar√°n sus cartas al siguiente jugador.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°Áâå, ÊâÄÊúâ‰∫∫ÊúÉÊääËá™Â∑±ÁöÑÂç°ÁµÑËÆìÁµ¶‰∏ã‰∏ÄÂÄãÁé©ÂÆ∂„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ, ka≈ºdy przeka≈ºe swoje karty nastƒôpnej osobie. ","Ha kij√°tszod ezt a k√°rty√°t, mindenki √°tadja a k√°rty√°it a k√∂vetkez≈ë j√°t√©kosnak.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, herkes kartlarƒ±nƒ± bir sonraki oyuncuya ge√ßirir."},
HOUSE_TRADE ={"Trade Card","Carta da Troca","Carte √âchange","–¢–æ—Ä–≥–æ–≤–∞—è –ö–∞—Ä—Ç–∞","Carta de Intercambio","‰∫§ÊèõÂç°","Wymiana Kart","Csere K√°rtya","Takas Kartƒ±"},
HOUSE_TRADE_DESC ={"When you play this card, you exchange cards with a player of your choice.","Ao jogar esta carta, escolha um advers√°rio para trocar de cartas com ele.","Lorsque vous jouez cette carte, vous √©changez vos cartes avec un joueur de votre choix.","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –≤—ã –æ–±–º–µ–Ω–∏–≤–∞–µ—Ç–µ—Å—å –∫–∞—Ä—Ç–∞–º–∏ —Å –∏–≥—Ä–æ–∫–æ–º –ø–æ –≤–∞—à–µ–º—É –≤—ã–±–æ—Ä—É.","Cuando juegues esta carta, intercambiar√°s cartas con un jugador a tu elecci√≥n.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°Áâå‰πãÂæå, ‰Ω†ÂèØ‰ª•ÈÅ∏ÊìáË∑ü‰∏Ä‰ΩçÁé©ÂÆ∂‰æÜ‰∫§ÊèõÂç°ÁµÑ„ÄÇ","U≈ºywajƒÖc tej karty mo≈ºesz dokonaƒá wymiany kartƒÖ z innym graczem.","Ha kij√°tszod ezt a k√°rty√°t, kicser√©led a k√°rty√°idat egy √°ltalad v√°lasztott j√°t√©kossal.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, se√ßtiƒüiniz bir oyuncuyla kartlarƒ±nƒ±zƒ± deƒüi≈ütirirsiniz."},
HOUSE_GIFT ={"Donate Card","Carta da Doa√ß√£o","Carte Don","–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –ö–∞—Ä—Ç—É","Carta de Donaci√≥n","ÊçêÁçªÂç°","Darowana Karta","Adom√°nyoz√≥ K√°rtya","Baƒüƒ±≈ü Kartƒ±"},
HOUSE_GIFT_DESC ={"When you play this card, give a random card from your hand to a player of your choice.","Ao jogar esta carta, escolha um advers√°rio para doar uma carta aleat√≥ria para ele.","Lorsque vous jouez cette carte, donnez une carte au hasard de votre jeu √† un joueur de votre choix.","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –æ—Ç–¥–∞–π—Ç–µ —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –∏–∑ –≤–∞—à–µ–π —Ä—É–∫–∏ –∏–≥—Ä–æ–∫—É –ø–æ –≤–∞—à–µ–º—É –≤—ã–±–æ—Ä—É.","Cuando juegues esta carta, de tu baraja le dar√°s una carta a un jugador de tu elecci√≥n.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°Áâå‰πãÂæå, Èö®Ê©üÂú®‰Ω†Âç°ÁµÑ‰∏≠ÊäΩ‰∏ÄÂºµÂç°ÈÄÅÁµ¶‰∏Ä‰Ωç‰Ω†ÈÅ∏ÊìáÁöÑÁé©ÂÆ∂„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ, wybierz gracza, kt√≥remu dasz jednƒÖ losowƒÖ kartƒô z twojej puli.","Ha kij√°tszod ezt a k√°rty√°t, egy √°ltalad v√°lasztott j√°t√©kosnak adsz egy v√©letlenszer≈± k√°rty√°t a kezedb≈ël.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, se√ßtiƒüiniz bir oyuncuya elinizden rastgele bir kart verir."},
HOUSE_BOMB ={"Bomb Card","Carta Bomba","Carte Bombe","–ö–∞—Ä—Ç–∞-–ë–æ–º–±–∞","Carta Bomba","ÁÇ∏ÂΩàÂç°","Bombowa Karta","Bomba K√°rtya","Bomba Kartƒ±"},
HOUSE_BOMB_DESC ={"If you draw this card, you get eliminated.","Se comprar esta carta, voc√™ perde.","Si vous tirez cette carte, vous √™tes √©limin√©.","–ï—Å–ª–∏ –≤—ã –≤–æ–∑—å–º—ë—Ç–µ —ç—Ç—É –∫–∞—Ä—Ç—É, –≤—ã –±—É–¥–µ—Ç–µ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã.","Si juegas esta carta ser√°s eliminado.","Â¶ÇÊûú‰Ω†ÊäΩÂà∞ÈÄôÂç°Áâå, ‰Ω†Â∞±ÊúÉË¢´Ê∑òÊ±∞Âá∫Â±Ä„ÄÇ","Je≈õli we≈∫miesz tƒô kartƒô, przegrywasz.","Ha kih√∫zod ezt a k√°rty√°t, kiesel a j√°t√©kb√≥l.","Bu kartƒ± √ßekerseniz, elenirsiniz."},
HOUSE_RANDOM ={"Mysterious Card","Carta Misteriosa","Carte Myst√©rieuse","–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –ö–∞—Ä—Ç–∞","Carta Misteriosa","Á•ûÁßòÂç°Áâå","Losowa Karta","Titokzatos K√°rtya","Gizemli Kart"},
HOUSE_RANDOM_DESC ={"This card activates a random effect when played.","Esta carta ativa um efeito aleat√≥rio quando jogada.","Cette carte active un effet al√©atoire lorsqu'elle est jou√©e.","–≠—Ç–∞ –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏ –∏–≥—Ä–µ.","Esta carta activa un efecto aleatorio cuando es jugada.","ÈÄôÂºµÂç°ÁâåÂú®ÁôºÂá∫‰πãÂæåÊúÉÊúâÈö®Ê©üÁöÑÊïàÊûú„ÄÇ","Ta karta aktywuje losowy efekt kiedy niƒÖ zagrasz.","Ha kij√°tszod ezt a k√°rty√°t, egy v√©letlenszer≈± hat√°st aktiv√°l.","Bu kart, oynandƒ±ƒüƒ±nda rastgele bir etkiyi etkinle≈ütirir."},
HOUSE_VIEW ={"Clairvoyance Card","Carta da Clarivid√™ncia","Carte Clairvoyance","–ö–∞—Ä—Ç–∞ –Ø—Å–Ω–æ–≤–∏–¥–µ–Ω–∏—è","Carta de Clarividencia","Ê¥ûÂØüÂç°Áâå","Karta Jasnowidza","Tiszt√°nl√°t√≥ K√°rtya","Durug√∂r√º Kartƒ±"},
HOUSE_VIEW_DESC ={"When you play this card, every other player will reveal a random card of their hand.","Ao jogar esta carta, todos mostram uma de suas cartas.","Lorsque vous jouez cette carte, tous les autres joueurs r√©v√®lent une carte al√©atoire de leur jeu.","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –∫–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É —Å–≤–æ–µ–π —Ä—É–∫–∏.","Cuando juegues esta carta, cada jugador revelar√° una carta aleatoria de su baraja.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°Áâå, ÊâÄÊúâÂÖ∂‰ªñÁé©ÂÆ∂ÈÉΩÊúÉÂ±ïÁ§∫Âá∫‰ªñÂÄëÂç°ÁµÑ‰∏≠ÁöÑ‰∏ÄÂºµÁâå„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ, inni gracze poka≈ºƒÖ jednƒÖ kartƒô ze swojej puli","Ha kij√°tszod ezt a k√°rty√°t, minden m√°s j√°t√©kos megmutat egy v√©letlenszer≈± k√°rty√°t a kez√©ben.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, diƒüer t√ºm oyuncular ellerinden rastgele bir kartƒ±nƒ± g√∂sterir."},
HOUSE_RAIN ={"Rain Card","Carta da Chuva","Carte Pluie","–î–æ–∂–¥–µ–≤–∞—è –ö–∞—Ä—Ç–∞","Carta de Lluvia","Èõ®Á•ûÂç°Áâå","Deszcz Kart","Es≈ë K√°rtya","Yaƒümur Kartƒ±"},
HOUSE_RAIN_DESC ={"When you play this card, every other player draws 1 card.","Ao jogar esta carta, seus advers√°rios compram 1 carta.","Lorsque vous jouez cette carte, tous les autres joueurs tirent 1 carte.","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –∫–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –±–µ—Ä—ë—Ç –æ–¥–Ω—É –∫–∞—Ä—Ç—É.","Cuando juegues esta carta, cada jugador sortear√° una carta.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°Áâå, ÊâÄÊúâÂÖ∂‰ªñÁé©ÂÆ∂ÁΩ∞ÊäΩ‰∏ÄÂºµÂç°„ÄÇ","Kiedy u≈ºyjesz tej karty gracze dobierajƒÖ po 1 karcie.","Ha kij√°tszod ezt a k√°rty√°t, minden m√°s j√°t√©kos h√∫z egy k√°rty√°t.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, diƒüer her oyuncu 1 kart √ßeker."},
HOUSE_EQUALITY ={"Equality Card","Carta da Igualdade","Carte √âgalit√©","–ö–∞—Ä—Ç–∞ –†–∞–≤–µ–Ω—Å—Ç–≤–∞","Carta de Igualdad","ÂÖ¨Âπ≥Âç°Áâå","Karta R√≥wno≈õci","Egyenl≈ës√©g K√°rtya","E≈üitlik Kartƒ±"},
HOUSE_EQUALITY_DESC ={"When you play this card, every player either draws or discards cards until everyone has 3 cards.","Ao jogar esta carta, todos compram ou descartam at√© terem 3 cartas.","Lorsque vous jouez cette carte, tous les joueurs chaque joueur tire ou d√©fausse des cartes jusqu'√† ce que tout le monde ait 3 cartes.","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –∫–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –ª–∏–±–æ —Ç—è–Ω–µ—Ç, –ª–∏–±–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—ã, –ø–æ–∫–∞ —É –≤—Å–µ—Ö –Ω–µ –±—É–¥–µ—Ç 3 –∫–∞—Ä—Ç—ã.","Cuando juegues esta carta, cada jugador sortear√° o descartar√° hasta que todos tengan tres cartas.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°Áâå, ÊâÄÊúâ‰∫∫ÊúÉÊäΩÂèñÊàñÊ£ÑÁΩÆÂç°ÁâåÁõ¥Âà∞Âç°ÁµÑÂè™Ââ©‰∏ã 3 ÂºµÂç°Áâå„ÄÇ","Je≈õli zagrasz tƒÖ kartƒÖ ka≈ºdy gracz dobiera lub schodzi do 3 kart.","Ha kij√°tszod ezt a k√°rty√°t, minden j√°t√©kos addig h√∫z vagy dob el k√°rty√°kat, m√≠g 3 k√°rty√°ja nem lesz.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, artarak veya azalarak herkes anƒ±nda 3 kart olur."},
HOUSE_CHAIRS ={"Dancing Chairs Card","Carta da Dan√ßa","Cartes Chaises Musicales","–ö–∞—Ä—Ç–∞ '–¢–∞–Ω—Ü—É—é—â–∏–µ —Å—Ç—É–ª—å—è'","Carta de Sillas Danzantes","ËàûÂãïÊ§ÖÂ≠êÂç°Áâå","Karta Ta≈ÑczƒÖce Fotele","T√°ncol√≥ Sz√©kek K√°rtya","Dans Eden Sandalyeler Kartƒ±"},
HOUSE_CHAIRS_DESC ={"When you play this card, all the other players' chairs randomly change positions.","Ao jogar esta carta, seus advers√°rio trocam de posi√ß√µes aleatoriamente.","Lorsque vous jouez cette carte, les chaises des autres joueurs changent de position.","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –≤—Å–µ —Å—Ç—É–ª—å—è –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –º–µ–Ω—è—é—Ç –ø–æ–∑–∏—Ü–∏–∏.","Cuando juegues esta carta, todas las sillas de los jugadores cambiar√°n de lugares aleatoriamente.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°Áâå, ÊâÄÊúâÂÖ∂‰ªñÁé©ÂÆ∂ÁöÑ‰ΩçÁΩÆÈÉΩÊúÉÈö®Ê©üÊîπËÆä„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ, inni gracze zmieniƒÖ swoje krzes≈Ça.","Ha kij√°tszod ezt a k√°rty√°t, minden m√°s j√°t√©kos sz√©ke v√©letlenszer≈±en helyet cser√©l.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, diƒüer t√ºm oyuncularƒ±n sandalyeleri rastgele yer deƒüi≈ütirir."},
HOUSE_IMITATE ={"Emote Card","Carta da Emo√ß√£o","Carte √âmote","–ö–∞—Ä—Ç–∞ –≠–º–æ—Ü–∏–π","Carta de Emote","Ë°®ÊÉÖÂç°","Karta Emotka","√ârzelem K√°rtya","ƒ∞fade Kartƒ±"},
HOUSE_IMITATE_DESC ={"When you play this card, everyone must perform the emote being shown. The last player to do so, draws 2 cards.","Ao jogar esta carta, todos devem imitar uma emo√ß√£o mostrada. Quem imitar por √∫ltimo compra 2 cartas.","Lorsque vous jouez cette carte, tout le monde doit jouer l'√©mote montr√©. Le dernier joueur √† le faire, tire 2 cartes.","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –∫–∞–∂–¥—ã–π –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∫–∞–∑–∞–Ω–Ω—É—é —ç–º–æ—Ü–∏—é. –ü–æ—Å–ª–µ–¥–Ω–∏–π –∏–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ, –±–µ—Ä—ë—Ç 2 –∫–∞—Ä—Ç—ã.","Cuando juegues esta carta, todos deber√°n realizar el emote que se mostrar√°. El √∫ltimo jugador en hacerlo recibir√° dos cartas.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°Áâå‰πãÂæå, ÊâÄÊúâ‰∫∫ÂøÖÈ†àË∑üËëóÂÅöÂá∫È°ØÁ§∫ËëóÁöÑË°®ÊÉÖ„ÄÇ ÊúÄÂæåÂÖ©ÂÄãÂÅöÂá∫Ê≠£Á¢∫Ë°®ÊÉÖÁöÑÁé©ÂÆ∂ÊúÉË¢´ÁΩ∞ÊäΩ 2 ÂºµÂç°Áâå„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ, inni ka≈ºdy musi zachowywaƒá siƒô tak, jak emotka pokaza≈Ça. Kto zrobi to ostatni, dostaje dwie dodatkowe karty.","Ha kij√°tszod ezt a k√°rty√°t, mindenkinek ki kell fejeznie a megjelen√≠tett √©rzelmet. Az utols√≥ j√°t√©kos h√∫z 2 k√°rty√°t.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, herkesin g√∂sterilen ifadeyi ger√ßekle≈ütirmesi gerekir. Bunu yapan son oyuncu 2 kart √ßeker."},
HOUSE_MEEP ={"Meep! Card","Carta do Meep!","Carte Meep!","–ö–∞—Ä—Ç–∞ 'Meep!'","Carta de ¬°Meep!","Meep! Âç°Áâå","Karta Meep","Meep! K√°rtya","Meep! Kart"},
HOUSE_MEEP_DESC ={"When you play this card, you gain the Meep power!","Ao jogar esta carta, voc√™ ganha o poder do Meep!","Lorsque vous jouez cette carte, vous gagnez le pouvoir de Meep!","–ö–æ–≥–¥–∞ –≤—ã —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ—Ç–µ —ç—Ç—É –∫–∞—Ä—Ç—É, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–∏–ª—É Meep!","¬°Cuando juegues esta carta, obtendr√°s el poder del Meep!","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°Áâå‰πãÂæå, ‰Ω†ÊúÉÂæóÂà∞ Meep ÁöÑËÉΩÂäõ!","Kiedy u≈ºyjesz tej karty mo≈ºesz w≈Çadaƒá meepem!","Ha kij√°tszod ezt a k√°rty√°t, megkapod a Meep er≈ët.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, Meep g√ºc√ºn√º kazanƒ±rsƒ±nƒ±z!"},
HOUSE_NO_ACTION ={"No Action","Sem A√ß√£o","Pas d'Action","–ë–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ","No Acci√≥n","Ê≤íÊúâÂãïÂäõ","Bez Akcji","Nincs Akci√≥","Aksyon Yok"},
HOUSE_NO_ACTION_DESC ={"The deck consists only of numerical and wild cards.","O baralho √© formado apenas por n√∫meros e curingas.","La pioche consiste uniquement en cartes num√©riques et noires.","–ö–æ–ª–æ–¥–∞ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∏ —á—ë—Ä–Ω—ã—Ö –∫–∞—Ä—Ç.","El mazo consistir√° solamente de cartas n√∫mericas y cartas comod√≠n.","Êï¥ÂÄãÂç°Â∫´Âè™ÊúâÊï∏Â≠óË∑üÊèõÈ°èËâ≤Âç°Áâå„ÄÇ","W tej rozgrywce udzia≈Ç biorƒÖ tylko karty z numerami i karty wild.","A pakli csak sz√°m- √©s Sz√≠nv√°laszt√≥ k√°rty√°kat tartalmaz.","Deste yalnƒ±zca sayƒ±sal ve renk deƒüi≈ütirme kartlarƒ±ndan olu≈üur"},
HOUSE_CAMOUFLAGE ={"Camouflage","Camuflagem","","–ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞","Camuflage","ÂÅΩË£ù","Kamufla≈º","√Ålca","Kamuflaj"},
HOUSE_CAMOUFLAGE_DESC ={"You can't see anyone's number of cards until they have only 1 card left.","Voc√™ n√£o enxerga quantas cartas seus advers√°rios tem at√© que fiquem com 1 carta.","Vous ne pouvez pas voir le nombre de cartes des autres joueurs jusqu'√† ce qu'ils en aient qu'une.","–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–¥–µ—Ç—å —á—å—ë-–ª–∏–±–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç, –ø–æ–∫–∞ —É –Ω–∏—Ö –Ω–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ 1 –∫–∞—Ä—Ç–∞.","No podr√°s ver el n√∫mero de cartas de nadie hasta que solamente tenga una carta.","‰Ω†‰∏çÊúÉÁúãÂà∞ÂÖ∂‰ªñ‰∫∫Âç°ÁµÑË£°ÊúâÂ§öÂ∞ëÂç°ÁâåÁõ¥Âà∞‰ªñÂÄëÂâ©‰∏ãÊúÄÂæå 1 ÂºµÂç°„ÄÇ","Nie mo≈ºesz zobaczyƒá ile kart ma tw√≥j przeciwnik dop√≥ki nie zostanie z jednƒÖ kartƒÖ.","Nem l√°tod m√°sok k√°rty√°inak sz√°m√°t, am√≠g csak egy k√°rty√°juk nem lesz.","Sadece 1 kartƒ± kalana kadar kimsenin kart sayƒ±sƒ±nƒ± g√∂remezsiniz."},
HOUSE_ADD_RULE ={"Rule Card","Carta da Regra","Carte R√®gle","–ö–∞—Ä—Ç–∞ –ü—Ä–∞–≤–∏–ª","Carta de Regla","Ë¶èÁü©Âç°Áâå","Karta Zasad","H√°zszab√°ly K√°rtya","Kural Kartƒ±"},
HOUSE_ADD_RULE_DESC ={"When you play this card, add a new rule to the current round.","Ao jogar esta carta, adicione uma nova regra √† partida atual.","Lorsque vous jouez cette carte, une nouvelle r√®gle est rajout√©e au tour actuel.","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –≤ —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥.","Cuando juegues esta carta, a√±adir√° una nueva regla a la ronda actual.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°Áâå‰πãÂæå, Â∞áÊúÉÈ¶¨‰∏äÊñ∞Â¢û‰∏ÄÈÅìËá™Ë®ÇË¶èÁü©„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ wprowadzasz nowƒÖ zasadƒô do aktualnej rundy.","Ha kij√°tszod ezt a k√°rty√°t, v√°lassz egy √∫j szab√°lyt ehhez a j√°t√©khoz.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, mevcut tura yeni bir kural eklenir."},
HOUSE_TIME ={"Reduced Time","Tempo Reduzido","Temps R√©duit","–°–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –í—Ä–µ–º—è","Tiempo Reducido","ÊôÇÈñìÁ∑äÊπä","Redukcja Czasu","Cs√∂kkentett Id≈ë","Azaltƒ±lmƒ±≈ü S√ºre"},
HOUSE_TIME_DESC ={"After 6 minutes, the player whose hand is worth the least points wins.","Ap√≥s 6 minutos, vence quem tiver menos pontos na m√£o.","Apr√®s 6 minutes, le joueur dont le jeu vaut le moins de points gagne.","–ß–µ—Ä–µ–∑ 6 –º–∏–Ω—É—Ç –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–∫, –≤ —á—å–µ–π —Ä—É–∫–µ –º–µ–Ω—å—à–µ –≤—Å–µ–≥–æ –∫–∞—Ä—Ç.","Despu√©s de seis minutos, el jugador cuya baraja valga menos puntos gana.","6 ÂàÜÈêòÈÅéÂæå, Êâã‰∏≠Âç°ÁµÑÂàÜÊï∏Á∏ΩÂíåÊúÄÂ∞ëÁöÑÁé©ÂÆ∂ÊúÉÂãùÂá∫ÈÅäÊà≤„ÄÇ","Po up≈Çywie 6 minut zwyciƒôzca otrzyma mniej punkt√≥w.","6 perc ut√°n az a j√°t√©kos nyer, akinek a kez√©ben l√©v≈ë k√°rty√°k √©rt√©ke a legkevesebb.","6 dakikanƒ±n sanonunda puanƒ± en d√º≈ü√ºk olan oyuncu oyunu kazanƒ±r."},
HOUSE_CHESS ={"Mad Chess","Xadrez Maluco","Ch√©quiers fous","–ë–µ–∑—É–º–Ω—ã–µ –®–∞—Ö–º–∞—Ç—ã","Tablero Loco","ÁòãÁãÇË±°Ê£ã","Szalone Szachy","≈êr√ºlt Sakk","Deli Satran√ß"},
HOUSE_CHESS_DESC ={"If you play a chess piece over another piece, activate the previous piece's effect. <b><a href='event:chess'>Click here</a></b> to see the various effects.","Se voc√™ jogar uma pe√ßa de xadrez em cima de outra pe√ßa, ative o efeito da pe√ßa anterior. <b><a href='event:chess'>Clique aqui</a></b> para ver os efeitos.","Si vous jouez une pi√®ce d'√©checs sur une autre pi√®ce, √ßa active l'effet de la pi√®ce pr√©c√©dente. <b><a href='event:chess'>Cliquez ici</a></b> pour voir les diff√©rents effets.","–ï—Å–ª–∏ –≤—ã –∏–≥—Ä–∞–µ—Ç–µ —à–∞—Ö–º–∞—Ç–Ω—ã–º–∏ —Ñ–∏–≥—É—Ä–∞–º–∏, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π. <b><a href='event:chess'>–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å</a></b> —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã.","Si juegas una pieza sobre otra pieza, activar√° el efecto anterior de la pieza. <b><a href='event:chess'>Cliquea aqu√≠</a></b> para ver los diferentes¬†efectos.","Â¶ÇÊûú‰Ω†Âú®ÊúâË±°Ê£ãÂúñÊ°àÁöÑÂç°Áâå‰∏äÂÜçÁôº‰∏ÄÂºµ, Â∞±ÊúÉÊøÄÊ¥ªÂâç‰∏ÄÂºµÂç°ÁâåË±°Ê£ã‰∏äÁöÑÊïàÊûú„ÄÇ <b><a href='event:chess'>ÈªûÈÄôË£°</a></b> Êü•Áúã‰∏çÂêåÁöÑË±°Ê£ãÊïàÊûú„ÄÇ","Jesli zagrasz fragmentem szach nad innym takim fragmentem, aktywujesz efekt poprzedniego fragmentu. <b><a href='event:chess'>Kliknij tutaj</a></b> by zobaczyƒá r√≥≈ºne efekty.","Ha egy sakkb√°b√∫t j√°tszol egy m√°sik sakkb√°b√∫ra, aktiv√°ld az el≈ëz≈ë k√©pess√©g√©t. <b><a href='event:chess'>Kattints ide</a></b> hogy l√°sd a k√ºl√∂nb√∂z≈ë hat√°sokat.","Satran√ß ta≈üƒ±nƒ± ba≈üka bir ta≈ü √ºzerinde oynarsanƒ±z, √∂nceki ta≈üƒ±n etkisini etkinle≈ütirir √áe≈üitli efektleri g√∂rmek i√ßin <b><a href='event:chess'>buraya tƒ±klayƒ±n.</a></b>"},
HOUSE_STEAL ={"Recycling Card","Carta da Reciclagem","Carte Recyclage","–ö–∞—Ä—Ç–∞ –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏","Carta de Reciclaje","ÂõûÊî∂Âç°Áâå","Karta Recyklingu","√öjrahasznos√≠t√≥ K√°rtya","Geri D√∂n√º≈ü√ºm Kartƒ±"},
HOUSE_STEAL_DESC ={"When you play this card, every other player discards 1 action card, provided they own one, then draws 1 card.","Ao jogar esta carta, todos os outros descartam uma carta de a√ß√£o aleat√≥ria e compram 1 carta para repor.","Lorsque vous jouez cette carte, tous les autres joueurs se d√©faussent d'une carte action, √† condition qu'ils en poss√®dent une, puis tirent une carte.","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –∫–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç 1 –∫–∞—Ä—Ç—É –¥–µ–π—Å—Ç–≤–∏—è, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –æ–Ω–∞ –µ—Å—Ç—å, –∞ –∑–∞—Ç–µ–º –±–µ—Ä–µ—Ç 1 –∫–∞—Ä—Ç—É.","Cuando jugues esta carta, cada jugador descartar√° una carta de acci√≥n y sorteara una carta provicionada de las que ten√≠an.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°Áâå, ÊâÄÊúâÂÖ∂‰ªñÁöÑÁé©ÂÆ∂Â¶ÇÊûúÊâã‰∏äÊìÅÊúâÂäüËÉΩÂç°ÁâåÈÉΩÊúÉË¢´ÈÄº‰∏üÊ£Ñ 1 Âºµ, ÁÑ∂ÂæåÂÜçÊäΩÂõû 1 ÂºµÂç°„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ, ka≈ºdy inny gracz odrzuca 1 kartƒô akcji i dobiera kartƒô pod warunkiem, ≈ºe sƒÖ w≈Çasne.","Ha kij√°tszod ezt a k√°rty√°t, minden j√°t√©kos eldob 1 akci√≥k√°rty√°t, ha van neki, majd h√∫z 1 k√°rty√°t.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, diƒüer oyuncular eƒüer sahiplerse 1 aksyon kartƒ± atarlar ve ardƒ±ndan 1 kart √ßekerler."},
HOUSE_HARD ={"Hard Mode","Modo Rigoroso","Mode Difficile","–°–ª–æ–∂–Ω—ã–π –†–µ–∂–∏–º","Modo Dif√≠cil","Âõ∞Èõ£Ê®°Âºè","Tryb Trudny","Neh√©z M√≥d","Zor Mod"},
HOUSE_HARD_DESC ={"If you click on an invalid card, you draw 1 card and lose your turn. You draw 4 cards when challenged for not saying UNO.","Clicar em carta errada faz passar a vez. N√£o falar UNO faz comprar 4 cartas.","Si vous cliquez sur une carte invalide, vous tirez une carte et passez votre tour. Vous tirez 4 cartes si vous avez √©t√© d√©fi√© pour ne pas avoir dit UNO.","–ï—Å–ª–∏ –≤—ã –Ω–∞–∂–º–µ—Ç–µ –Ω–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é –∫–∞—Ä—Ç—É, –≤—ã –±–µ—Ä—ë—Ç–µ 1 –∫–∞—Ä—Ç—É –∏ —Ç–µ—Ä—è–µ—Ç–µ —Å–≤–æ–π —Ö–æ–¥. –í—ã –±–µ—Ä–µ—Ç–µ 4 –∫–∞—Ä—Ç—ã, –∫–æ–≥–¥–∞ –∑–∞ –≤–∞—Å –Ω–∞–∂–∏–º–∞—é—Ç –£–ù–û.","Si das clic en una carta inv√°lidad perder√°s tu turno. Si eres desafiado por no haber dicho UNO, recibir√°s cuatro cartas.","Â¶ÇÊûú‰Ω†ÈªûÈåØ‰∫Ü‰∏ÄÂºµ‰∏çÈÅ©ÂêàÁôºÂá∫ÁöÑÂç°Áâå, ‰Ω†ÊúÉË¢´ÁΩ∞ÊäΩ 1 ÂºµÂç°ÁÑ∂ÂæåÂ§±Âéª‰Ω†ÁöÑÂõûÂêà„ÄÇËÄåÁï∂‰Ω†ÂøòË®ò‰∫ÜË™™ UNO ÁöÑÊôÇÂÄôÂèàÂâõÂ•ΩË¢´Âà•‰∫∫Ë≥™Áñë, ‰Ω†ÊúÉË¢´ÁΩ∞ÊäΩ 4 ÂºµÂç°„ÄÇ","Je≈õli klikniesz niew≈Ça≈õciwƒÖ kartƒô przeczekaj swojƒÖ kolejkƒô. Je≈õli zosta≈Çe≈õ wyzwany bo nie powiedzia≈Çe≈õ UNO dobierasz 4 karty.","Ha a kezedben nem megfelel≈ë k√°rty√°ra kattintasz, h√∫znod kell 1 k√°rty√°t √©s kimaradsz a k√∂rb≈ël. 4 k√°rty√°t h√∫zol ha kih√≠vnak, mert nem mondt√°l UNO-t.","Ge√ßersiz bir karta tƒ±klarsanƒ±z, 1 kart √ßekersiniz ve sƒ±ranƒ±zƒ± kaybedersiniz. UNO demediƒüin i√ßin itiraz edildiƒüinde 4 kart √ßekersiniz."},
HOUSE_FAST_DRAW ={"Fast Drawing","Compra R√°pida","Tirage Rapide","–ë—ã—Å—Ç—Ä–∞—è –í–∑—è—Ç–∫–∞","Sorteo R√°pido","Âø´ÈÄüÊäΩÂèñ","Szybkie Dobieranie","Gyors H√∫z√°s","Hƒ±zlƒ± Kart √áekme"},
HOUSE_FAST_DRAW_DESC ={"Drawn cards are played immediately (unless they are drawn due to a penalty).","Cartas compradas s√£o jogadas imediatamente (exceto por penalidades).","Les cartes tir√©es sont jou√©es automatiquement (√† moins qu'elles ne soient tir√©s en raison d'une p√©nalit√©).","–í—ã—Ç–∞—â–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã —Å—Ç–∞–≤—è—Ç—Å—è —Å—Ä–∞–∑—É (–µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –≤—ã—Ç—è–Ω—É—Ç—ã –∏–∑-–∑–∞ —à—Ç—Ä–∞—Ñ–∞).","Las cartas sorteadas son jugadas inmediatamente (a menos de que sean sorteadas por penalizaci√≥n).","‰Ω†ÊäΩÂá∫ÁöÑÂç°ÁâåÊúÉÈ¶¨‰∏äË¢´ÁôºÂá∫ (Èô§ÈùûÈÇ£ÊòØÁΩ∞ÊäΩÁöÑÂç°Áâå) „ÄÇ","Dobrane karty sƒÖ grane natychmniast (chyba, ≈ºe sƒÖ pobrane z powodu kary).","A felh√∫zott k√°rty√°k azonnal kij√°tsz√°sra ker√ºlnek (kiv√©ve ha m√°s k√°rtya √°ltal, vagy b√ºntet√©sb≈ël lettek h√∫zva).","√áekilmi≈ü kartlar hemen oynanƒ±r (ceza nedeniyle √ßekilmedik√ße)."},
HOUSE_THUNDER ={"Thunder Card","Carta do Trov√£o","Carte Tonnerre","–ì—Ä–æ–º–æ–≤–∞—è –ö–∞—Ä—Ç–∞","Carta Rel√°mpago","Èõ∑ÈõªÊö¥ÊìäÂç°Áâå","Karta Grzmotu","Mennyd√∂rg√©s K√°rtya","Yƒ±ldƒ±rƒ±m Kartƒ±"},
HOUSE_THUNDER_DESC ={"When you play this card, two random players draw 1-5 cards.","Ao jogar esta carta, dois jogadores aleat√≥rios compram de 1 a 5 cartas.","Lorsque vous jouez cette carte, 2 joueurs al√©atoires tirent de 1 √† 5 cartes.","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –¥–≤–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ –±–µ—Ä—É—Ç 1-5 –∫–∞—Ä—Ç.","Cuando juegues esta carta, dos jugadores aleatorios sortear√°n de una a cinco cartas.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°, Èö®Ê©üÂÖ©ÂÄãÁé©ÂÆ∂ÊúÉË¢´ÁΩ∞ÊäΩ 1-5 ÂºµÂç°Áâå„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ, dwoje losowych graczy dobierze 1-5 kart.","Ha kij√°tszod ezt a k√°rty√°t, k√©t v√©letlenszer≈± j√°t√©kos felh√∫z 1-5 k√°rty√°t.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, rastgele iki oyuncu 1-5 kart √ßeker."},
HOUSE_CLONE ={"Cloning Card","Carta da Clonagem","Carte Clone","–ö–∞—Ä—Ç–∞-–ö–ª–æ–Ω","Carta de Clonaci√≥n","Ë§áË£ΩÂç°Áâå","Karta Klonowania","M√°sol√≥ K√°rtya","Klonlama Kartƒ±"},
HOUSE_CLONE_DESC ={"This card activates the same effect as the previous card.","Esta carta ativa o mesmo efeito da carta anterior.","Cette carte active les m√™mes effets que la carte pr√©c√©dente.","–≠—Ç–∞ –∫–∞—Ä—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ç–æ—Ç –∂–µ —ç—Ñ—Ñ–µ–∫—Ç, —á—Ç–æ –∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –∫–∞—Ä—Ç–∞.","Esta carta activa el mismo efecto de la carta anteriormente usada.","ÈÄôÂºµÂç°ÁôºÂá∫‰∫Ü‰πãÂæåÊúÉË∑ü‰∏ä‰∏ÄÂºµÂç°ÊúâËëó‰∏ÄÊ®£ÁöÑÊïàÊûú„ÄÇ","Ta karta uaktywnia ten sam efekt co poprzednio zagrana karta.","Ha kij√°tszod ezt a k√°rty√°t, az el≈ëz≈ë k√°rtya hat√°sait aktiv√°lja.","Bu kart, √∂nceki kartla aynƒ± etkiyi etkinle≈ütirir."},
HOUSE_WEB ={"Web Card","Carta da Teia","Carte Toile d'Araign√©e","–ü–∞—É—á—å—è –ö–∞—Ä—Ç–∞","Carta Telara√±a","ËúòËõõÁ∂≤Âç°Áâå","Karta Sieci","H√°l√≥ K√°rtya","Web Kartƒ±"},
HOUSE_WEB_DESC ={"When you play this card, chose a player who will miss their next turn.","Ao jogar esta carta, escolha um jogador para ficar 1 turno sem jogar.","Lorsque vous jouez cette carte, choisissez un joueur qui loupera son tour.","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –≤—ã–±–∏—Ä–∞–π—Ç–µ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–ø—É—Å—Ç–∏—Ç —Å–≤–æ–π —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥.","Cuando juegues esta carta, podr√°s elegir un jugador para que pierda su siguiente turno.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°Áâå, ÈÅ∏Êìá‰∏ÄÂÄãÁé©ÂÆ∂‰Ωø‰ªñÂ§±Âéª‰∏ã‰∏ÄÂõûÂêà„ÄÇ","Je≈õli zagrasz tƒÖ kartƒÖ, wybierz gracza, kt√≥ry straci nastƒôpnƒÖ kolejkƒô.","Ha kij√°tszod ezt a k√°rty√°t, v√°lassz egy j√°t√©kost, aki kimarad a k√∂rb≈ël.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, bir sonraki sƒ±rasƒ±nƒ± ka√ßƒ±racak bir oyuncu se√ßin."},
HOUSE_SHINY ={"Shiny Hand","M√£o Brilhante","Main Brillante","–ë–ª–µ—Å—Ç—è—â–∞—è –†—É–∫–∞","Baraja Reluciente","ÈñÉÁàçÂ∞èÊâã","B≈ÇyszczƒÖca D≈Ço≈Ñ","F√©nyes K√°rty√°k","Parlak El"},
HOUSE_SHINY_DESC ={"Players holding a wild card or at least one card of each color will have their hand highlighted.","Quem tiver um curinga ou as 4 cores na m√£o ficar√° com o n√∫mero de cartas com cor branca.","Les joueurs ayant une carte noire ou au moins une carte de chaque couleur auront leur jeu en surbrillance.","–ò–≥—Ä–æ–∫–∏, –∏–º–µ—é—â–∏–µ —á—ë—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã –∏–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ä—Ç—É –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∞, –±—É–¥—É—Ç –ø–æ–¥—Å–≤–µ—á–µ–Ω—ã.","Jugadores teniendo a la mano una carta comod√≠n o al menos una carta de cada color tendr√°n su baraja brillando.","Êâã‰∏äÊåÅÊúâÊèõËâ≤Âç°ÁâåÊàñÊØèÂÄãÈ°èËâ≤ÁöÑÂç°ÁâåÈÉΩÊúâËá≥Â∞ë‰∏ÄÂºµÁöÑÊôÇÂÄô, Êâã‰∏≠ÁöÑÂç°ÁâåÊúÉÁôºÁôΩÂÖâÊ®ôÁ§∫„ÄÇ","Gracze posiadajƒÖcy Kartƒô Wild lub przynajmniej jednƒÖ kartƒô z ka≈ºdego koloru, bƒôdƒÖ mieli pod≈õwietlonƒÖ rƒôkƒô.","Azok k√°rty√°i, akik vagy Sz√≠nv√°lt√≥ k√°rty√°t, vagy a n√©gy sz√≠nb≈ël legal√°bb egy-egy k√°rty√°t tartanak a kez√ºkben, kiemel≈ëdnek feh√©rrel.","Bir renk kartƒ±na veya her renkten en az bir karta sahip olan oyuncularƒ±n elleri vurgulanacaktƒ±r."},
HOUSE_SEQUENCE ={"Sequence","Sequ√™ncia","S√©quence","–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å","Secuencia","ÊéíÂàó","Sekwencja","Sorozat","Sekans"},
HOUSE_SEQUENCE_DESC ={"You can play several cards of the same color, as long as they form a numerical sequence.","Voc√™ pode jogar v√°rias cartas da mesma cor, desde que formem uma sequ√™ncia num√©rica.","Vous pouvez jouer plusieurs cartes de la m√™me couleur, √† condition qu'elles forment une s√©quence num√©rique.","–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –æ–±—Ä–∞–∑—É—é—Ç —á–∏—Å–ª–æ–≤—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å.","Podr√°s jugar varias cartas del mismo color, siempre y cuando formen una secuencia num√©rica.","‰Ω†ÂèØ‰ª•ÈÄ£Á∫åÁôºÂá∫ÂπæÂºµ‰∏ÄÊ®£È°èËâ≤ÁöÑÂç°Áâå, Âè™Ë¶ÅÂÆÉÂÄëËÉΩÂ§†ÁµÑÊàêÊï∏Â≠óÈ†ÜÂ∫è„ÄÇ","Mo≈ºesz zagraƒá kilka kart o tym samym kolorze, pod warunkiem, ≈ºe tworzƒÖ sekwencjƒô liczbowƒÖ.","Egy k√∂rben t√∂bb azonos sz√≠n≈± k√°rty√°t j√°tszhatsz, ha sz√°mtani sorozatot alkotnak.","Sayƒ±sal bir sƒ±ra olu≈üturduklarƒ± s√ºrece aynƒ± renkteki birka√ß kartƒ± oynayabilirsiniz."},
HOUSE_LUCK ={"Luck Card","Carta da Sorte","Carte Chance","–ö–∞—Ä—Ç–∞ –£–¥–∞—á–∏","Carta de la Suerte","Âπ∏ÈÅãÂç°Áâå","Karta Szczƒô≈õcia","Szerencse K√°rtya","≈ûans Kartƒ±"},
HOUSE_LUCK_DESC ={"When you play this card, you can choose the next card that you draw (unless it's due to a penalty).","Ao jogar esta carta, escolha a pr√≥xima carta que voc√™ comprar (a menos que seja por penalidade).","Lorsque vous jouez cette carte, vous pouvez choisir la prochaine carte que vous tirerez (√† moins qu'elles ne soient tir√©s en raison d'une p√©nalit√©).","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ö–æ–¥—É –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∏–∑-–∑–∞ —à—Ç—Ä–∞—Ñ–∞).","Cuando juegues esta carta, podr√°s elegir la siguiente carta que sortees (a menos de que sea por penalizaci√≥n).","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°ÁâåÁöÑÊôÇÂÄô, ‰Ω†ÂèØ‰ª•ÈÅ∏Êìá‰∏ã‰∏ÄÂºµ‰Ω†Ë¶ÅÊäΩÂèñÁöÑÂç°Áâå (Èô§ÈùûÊòØË¢´ÁΩ∞ÊäΩÂç°Áâå)„ÄÇ","GrajƒÖc tƒÖ kartƒÖ mo≈ºesz wybraƒá nastƒôpnƒÖ kartƒô, kt√≥rƒÖ dobierzesz (chyba, ≈ºe jest to kara)","Ha kij√°tszod ezt a k√°rty√°t, kiv√°laszthatod mi legyen a k√∂vetkez≈ë h√∫z√°sod (kiv√©ve ha m√°s k√°rtya √°ltal, vagy b√ºntet√©sb≈ël lett h√∫zva).","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, √ßekeceƒüiniz bir sonraki kartƒ± se√ßebilirsiniz (ceza olmadƒ±ƒüƒ± s√ºrece)."},
HOUSE_BOX ={"Gift Card","Carta do Presente","Carte Cadeau","–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –ö–∞—Ä—Ç–∞","Carta de Regalo","Á¶ÆÁâ©Âç°","Karta Prezent","Aj√°nd√©k K√°rtya","Hediye kartƒ±"},
HOUSE_BOX_DESC ={"When you play this card, everyone gains a Mysterious Card, which activates a random effect.","Ao jogar esta carta, todos ganham uma Carta Misteriosa, que ativa um efeito aleat√≥rio.","Lorsque vous jouez cette carte, tout le monde gagne une Carte Myst√©rieuse, qui active un effet al√©atoire.","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –∫–∞–∂–¥—ã–π –ø–æ–ª—É—á–∞–µ—Ç –¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –ö–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä–∞—è –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç.","Cuando juegues esta carta, todos obtendr√°n una Carta Misteriosa.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°, ÊâÄÊúâ‰∫∫ÊúÉÂæóÂà∞‰∏ÄÂºµÁ•ûÁßòÂç°Áâå, ÂÆÉÊúÉÊúâÈö®Ê©üÊïàÊûú„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ, ka≈ºdy otrzymuje LosowƒÖ Kartƒô, kt√≥ra aktywuje losowy efekt.","Ha kij√°tszod ezt a k√°rty√°t, minden j√°t√©kos kap egy Titokzatos K√°rty√°t, amely v√©letlenszer≈± hat√°st aktiv√°l.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, herkes rastgele bir etkiyi etkinle≈ütiren bir Gizemli Kart kazanƒ±r."},
HOUSE_WISH ={"Wish Card","Carta do Desejo","Carte de V≈ìux","–ö–∞—Ä—Ç–∞ –ñ–µ–ª–∞–Ω–∏–π","Carta de Deseo","Ë®±È°òÂç°","Karta ≈ªyczenie","K√≠v√°ns√°g K√°rtya","Dilek Kartƒ±"},
HOUSE_WISH_DESC ={"When you play this card, you exchange a random card from your hand with one from the discard pile.","Ao jogar esta carta, troque uma carta aleat√≥ria da sua m√£o por uma da pilha de descartes.","Lorsque vous jouez cette carte, vous √©changez une carte al√©atoire de votre jeu avec une carte de la d√©fausse.","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –≤—ã –º–µ–Ω—è–µ—Ç–µ —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –∏–∑ –≤–∞—à–µ–π —Ä—É–∫–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–æ–ª–æ–¥—ã —Å–±—Ä–æ—Å–∞.","Cuando juegues esta carta, intercambiar√°s una carta aleatoria de tu baraja por¬†otra de la pila de descarte.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°Áâå, ‰Ω†ÂèØ‰ª•Âú®Êâã‰∏≠ÈÅ∏‰∏ÄÂºµÂç°Ë∑üÂ∑≤Âá∫ÁâåÁöÑÂç°‰∫§Êèõ„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ, wymieniasz losowƒÖ kartƒô na jednƒÖ ze stosu kart odrzuconych.","Ha kij√°tszod ezt a k√°rty√°t, kicser√©lhetsz egy v√©letlenszer≈± k√°rty√°t a kezedben egyre a kij√°tszott k√°rty√°k k√∂z√ºl","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, elinizdeki rastgele bir kartƒ± atƒ±lan destedeki bir kartla deƒüi≈ütirirsiniz."},
HOUSE_TEAM ={"Team Match","Jogo em Duplas","Parties en √âquipe","–ö–æ–º–∞–Ω–¥–Ω—ã–π –ú–∞—Ç—á","En Equipos","ÂúòÈöäÊ®°Âºè","Runda Dru≈ºynowa","Csapatm√©rk≈ëz√©s","Takƒ±m Ma√ßƒ±"},
HOUSE_TEAM_DESC ={"Each player has a partner. If one of them wins, both players win.","Cada jogador tem uma dupla. Se um vencer, a equipe toda vence.","Chaque joueur a un co√©quipier. Si un des deux gagne, les deux remportent la partie.","–£ –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä. –ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç, –≤—ã–∏–≥—Ä—ã–≤–∞—é—Ç –æ–±–∞ –∏–≥—Ä–æ–∫–∞.","Cada jugador tiene un compa√±ero. Si uno de ellos gana, ambos ganan.","ÊØè‰∏ÄÂÄãÁé©ÂÆ∂ÈÉΩÊúâÊê≠Ê™î„ÄÇ Â¶ÇÊûúÂÖ∂‰∏≠‰∏Ä‰∫∫Âãù‰∫Ü, ÂÖ©‰∫∫ÈÉΩÊúÉÁç≤Âãù„ÄÇ","Ka≈ºdy gracz ma partnera. Je≈õli jeden z nich wygra, oboje wygrywajƒÖ.","Minden j√°t√©kos rendelkezik egy csapatt√°rssal. Ha b√°rmelyik√ºk nyer, mindketten nyernek.","Her oyuncunun bir ortaƒüƒ± vardƒ±r. ƒ∞√ßlerinden biri kazanƒ±rsa, her iki oyuncu da kazanƒ±r."},
HOUSE_PORTAL ={"Portal Card","Carta do Portal","Carte Portail","–ö–∞—Ä—Ç–∞-–ü–æ—Ä—Ç–∞–ª","Carta Portal","ÂÇ≥ÈÄÅÈñÄ","Karta Portal","Port√°l K√°rtya","Portal Kartƒ±"},
HOUSE_PORTAL_DESC ={"Two matches are taking place at the same time. Play this card to switch between them.","Duas partidas est√£o acontecendo ao mesmo tempo. Jogue esta carta para alternar entre elas.","","–î–≤–∞ –º–∞—Ç—á–∞ –ø—Ä–æ—Ö–æ–¥—è—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. –ü–æ–ª–æ–∂–∏—Ç–µ —ç—Ç—É –∫–∞—Ä—Ç—É, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –Ω–∏–º–∏.","Dos rondas est√°n tomando lugar a la vez. Juega esta carta para cambiar entre ellas.","ÂÖ©Â†¥ÈÅäÊà≤ÂêåÊôÇÂú®ÈÄ≤Ë°å„ÄÇÁôºÂá∫ÈÄôÂç°‰æÜÈÄ≤Ë°åÂÖ©ÁµÑÂç°ÁµÑÁöÑÊõøÊèõ„ÄÇ","Dwie rozgrywki odbywajƒÖ siƒô w tym samym czasie. Zagraj tƒÖ kartƒÖ, aby prze≈ÇƒÖczyƒá siƒô miƒôdzy nimi.","K√©t j√°t√©k vesz r√©szt p√°rhuzamosan. Ha kij√°tszod ezt a k√°rty√°t, v√°lthatsz k√∂zt√ºk.","Aynƒ± anda iki ma√ß yapƒ±lƒ±yor. Aralarƒ±nda ge√ßi≈ü yapmak i√ßin bu kartƒ± oynayƒ±n."},
HOUSE_INK ={"Ink Card","Carta da Tinta","Carte Encre","–ß–µ—Ä–Ω–∏–ª—å–Ω–∞—è –ö–∞—Ä—Ç–∞","Carta de Tinta","Â¢®Ê∞¥Âç°Áâå","Karta Atrament","Tinta K√°rtya","M√ºrekkep Kartƒ±"},
HOUSE_INK_DESC ={"When you play this card, every colored card on the next player's hand turns the color of your ink card.","Ao jogar esta carta, pinte todas as cartas do pr√≥ximo jogador com a cor desta carta.","Lorsque vous jouez cette carte, chaque carte de couleur dans le jeu du joueur suivant va prendre la couleur de votre Carte Encre.","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –∫–∞–∂–¥–∞—è —Ü–≤–µ—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –∑–∞–∫—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —Ü–≤–µ—Ç.","Cuando juegues esta carta, usar√°s su color para colorear la siguiente carta de todos los jugadores.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°, ‰∏ã‰∏ÄÂÄãÁé©ÂÆ∂Êâã‰∏äÊâÄÊúâÊúâÈ°èËâ≤ÁöÑÂç°ÁâåÈÉΩÊúÉËÆäÊàê‰Ω†ÁôºÂá∫ÁöÑÂ¢®Ê∞¥Âç°ÁâåÁöÑÈ°èËâ≤„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ, u≈ºyjesz jej koloru, aby pokolorowaƒá wszystkie karty nastƒôpnego gracza.","WHa kij√°tszod ezt a k√°rty√°t, a k√∂vetkez≈ë j√°t√©kos minden k√°rty√°j√°nak sz√≠ne a Tinta K√°rty√°d sz√≠n√©v√© v√°ltozik.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, bir sonraki oyuncunun elindeki her renkli kart m√ºrekkep kartƒ±nƒ±zƒ±n rengi ile deƒüi≈ütirir."},
HOUSE_CONFUSE ={"Confusion Card","Carta da Confus√£o","Carte Confusion","–ö–∞—Ä—Ç–∞-–ü—É—Ç–∞–Ω–∏—Ü–∞","Carta de Confusi√≥n","Ëø∑ÊÉëÂç°Áâå","Karta Zguba","Zavarodotts√°g K√°rtya","Karƒ±≈üƒ±klƒ±k Kartƒ±"},
HOUSE_CONFUSE_DESC ={"When you play this card, you will play a random card on your next turn.","Ao jogar esta carta, voc√™ jogar√° de forma aleat√≥ria no pr√≥ximo turno.","Lorsque vous jouez cette carte, vous jouerez une carte al√©atoire au tour suivant.","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –∑–∞ –≤–∞—Å –ø–æ–ª–æ–∂–∞—Ç —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —Ö–æ–¥—É.","Cuando juegues esta carta, jugar√°s una carta aleatoria en tu siguiente turno.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°Áâå, ‰Ω†ÊúÉÂú®‰∏ã‰∏ÄÂÄãÂõûÂêàÈö®Ê©üÁôºÂá∫‰∏ÄÂºµÂç°„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ, u≈ºyjesz losowej karty w twojej nastƒôpnej kolejce.","Ha kij√°tszod ezt a k√°rty√°t, a k√∂vetkez≈ë k√∂rben v√©letlenszer≈± k√°rty√°t fogsz kij√°tszani.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, bir sonraki sƒ±ranƒ±zda rastgele bir kart oynayacaksƒ±nƒ±z."},
HOUSE_TREASURE ={"Search Card","Carta da Busca","Carte Recherche","–ö–∞—Ä—Ç–∞ –ü–æ–∏—Å–∫–∞","Carta de B√∫squeda","ÊêúÂ∞ãÂç°Áâå","Karta Wyszukiwania","Kincskeres≈ë K√°rtya","Arama Kartƒ±"},
HOUSE_TREASURE_DESC ={"When you play this card 3 times, you receive the Treasure Card. When you play that one, you automatically win the game.","Ao jogar esta carta 3 vezes, receba a Carta do Tesouro, que faz voc√™ vencer o jogo.","Lorsque vous jouez cette carte, vous recevez la Carte au Tr√©sor. Lorsque vous jouez celle-ci, vous gagnez automatiquement la partie.","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É 3 —Ä–∞–∑–∞, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∫–∞—Ä—Ç—É —Å–æ–∫—Ä–æ–≤–∏—â. –ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏—Ç–µ –µ—ë, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç–µ –∏–≥—Ä—É.","Cuando juegues tres veces esta carta, recibir√°s la Carta del Tesoro, y ganar√°s el juego.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç° 3 Ê¨°, ‰Ω†ÊúÉÂæóÂà∞ÂØ∂ËóèÂç°Áâå„ÄÇ Áï∂‰Ω†ÁôºÂá∫ÂØ∂ËóèÂç°Áâå, ‰Ω†Â∞±ÊúÉËá™ÂãïÂãùÂá∫ÈÅäÊà≤„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ 3 razy, zyskasz Kartƒô Skarbu, kt√≥rƒÖ zapewnisz sobie zwyciƒôstwo.","Ha kij√°tszod ezt a k√°rty√°t h√°romszor, megkapod a Kincsk√°rty√°t, amelyet kij√°tszva azonnal megnyered a j√°t√©kot.","Bu kartƒ± 3 kez oynadƒ±ƒüƒ±nƒ±zda Hazine Kartƒ± alƒ±rsƒ±nƒ±z. Bunu oynadƒ±ƒüƒ±nƒ±zda, oyunu otomatik olarak kazanƒ±rsƒ±nƒ±z."},
HOUSE_NEIGHBOR ={"Neighbor","Vizinho","Voisin","–°–æ—Å–µ–¥","Vecino","ÈÑ∞Â±Ö","SƒÖsiad ","Szomsz√©d","Kom≈üu"},
HOUSE_NEIGHBOR_DESC ={"Cards of equal numerical value no longer match. They only match cards of a value either higher or lower by 1.","N√∫meros iguais n√£o combinam mais. N√∫meros s√≥ combinam com um n√∫mero acima ou abaixo.","Les cartes de m√™me valeur num√©rique ne correspondent plus. Elles ne correspondent qu'aux cartes d'une valeur sup√©rieure ou inf√©rieure de 1.","–ö–∞—Ä—Ç—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –±–æ–ª—å—à–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç. –û–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∞–º, —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã—à–µ –∏–ª–∏ –Ω–∏–∂–µ –Ω–∞ 1.","Cartas de valor n√∫mero igual no podr√°n ser jugadas. Solo podr√°n ser jugadas cartas con un valor mayor o menor por uno.","Âç°Áâå‰∏äÁöÑÊï∏Â≠ó‰∏çÂÜçÁõ∏Á¨¶Âêà„ÄÇ ÂÆÉÂÄëÂè™Â∞çÊáâÂéüÊú¨ÁöÑÊï∏Â≠óÂä†ÂèäÊ∏õ 1 ÂæåÁöÑÊï∏ÂÄº„ÄÇ","Karty o r√≥wnej warto≈õci ju≈º nie pasujƒÖ. PasujƒÖ tylko karty o warto≈õci wiƒôkszej lub mniejszej o 1.","Az azonos sz√°m√©rt√©k≈± k√°rty√°k nem j√°tszhat√≥ak egym√°sra. Csak olyan sz√°m√©rt√©ket lehet r√°juk j√°tszani, amely kisebb vagy nagyobb 1-el.","E≈üit sayƒ±sal deƒüerlere sahip kartlar yerine 1 puan y√ºksek veya d√º≈ü√ºk sayƒ±sal deƒüer kullanƒ±labilir."},
HOUSE_MESS ={"Mess","Bagun√ßa","Bazar","–ë–µ—Å–ø–æ—Ä—è–¥–æ–∫","Tablero","Â§ßÊ∑∑‰∫Ç","Ba≈Çagan","Z≈±rzavar","Karmakarƒ±≈üƒ±k"},
HOUSE_MESS_DESC ={"The deck consists only of action cards.","O baralho √© formado apenas por cartas de a√ß√£o.","Le jeu se compose uniquement de cartes action.","–ö–æ–ª–æ–¥–∞ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –∫–∞—Ä—Ç –¥–µ–π—Å—Ç–≤–∏–π.","La baraja consiste solamente de cartas de acci√≥n.","Êï¥ÂÄãÁâåÂ∫´Âè™ÊúâË°åÂãïÂç°Áâå„ÄÇ","Talia sk≈Çada siƒô tylko z kart akcji.","A pakli csak akci√≥k√°rty√°kat tartalmaz.","Deste yalnƒ±zca aksiyon kartlarƒ±ndan olu≈üur."},
HOUSE_BATATA ={"Potato Card","Carta da Batata","Carte Patate","–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–∞—è –ö–∞—Ä—Ç–∞","Carta de Papa","È¶¨Èà¥ËñØÂç°Áâå","Karta Ziemniak","Burgonya K√°rtya","Patates Kartƒ±"},
HOUSE_BATATA_DESC ={"When you play this card, put it in a player's hand. Whoever keeps this card in hand for 5 turns will be eliminated.","Ao jogar esta carta, coloque-a na m√£o de um jogador. Quem ficar com esta carta na m√£o por 5 turnos perde.","Lorsque vous jouez cette carte, vous √©changez une carte al√©atoire de votre jeu avec une de la d√©fausse.","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –∫–ª–∞–¥–∏—Ç–µ –µ—ë –≤ —Ä—É–∫—É –∏–≥—Ä–æ–∫–∞. –¢–æ—Ç, –∫—Ç–æ –¥–µ—Ä–∂–∏—Ç —ç—Ç—É –∫–∞—Ä—Ç—É –≤ —Ä—É–∫–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 —Ö–æ–¥–æ–≤, –±—É–¥–µ—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω.","Cuando juegues esta carta, le dar√°s a la baraja de un jugador aleatorio una Carta de Papa. Si te quedas con la carta en tu baraja por cinco turnos, ser√°s eliminado.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°, ÊääÂÆÉÊîæÂà∞‰∏ÄÂÄãÁé©ÂÆ∂Êâã‰∏≠ÁöÑÁâåË£°„ÄÇ Âè™Ë¶ÅÊúâ‰∫∫ÊääÈ¶¨Èà¥ËñØÂç°ÁïôÂú®ÊâãË£°Ë∂ÖÈÅé 5 Ëº™Â∞±ÊúÉË¢´Ê∑òÊ±∞„ÄÇ","Kiedy zagrasz ta kartƒÖ, dajesz Kartƒô Ziemniaka graczowi. Je≈õli bƒôdziesz trzyma≈Ç Kartƒô Ziemniaka przez 5 rund, zostaniesz wyeliminowany. ","Ha kij√°tszod ezt a k√°rty√°t, v√°lassz egy j√°t√©kost akinek a kez√©be ker√ºl. Akinek ez a k√°rtya 5 k√∂rig a kez√©ben marad, az kiesik a j√°t√©kb√≥l.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, bir oyuncunun eline koyun. Bu kartƒ± elinde 5 tur tutan elenecek."},
HOUSE_CURSE ={"Curse Card","Carta da Maldi√ß√£o","Carte Mal√©diction","–ü—Ä–æ–∫–ª—è—Ç–∏–µ –ö–∞—Ä—Ç—ã","Carta de Maldici√≥n","Ë©õÂííÂç°","Karta Przekle≈Ñstwa","√Åtok K√°rtya","Lanetli Kart"},
HOUSE_CURSE_DESC ={"When you play this card, inflict a random curse to everyone for a few turns.","Ao jogar esta carta, aplique uma maldi√ß√£o aleat√≥ria que dura alguns turnos.","Lorsque vous jouez cette carte, une mal√©diction al√©atoire est inflig√©e √† tout le monde pendant quelques tours.","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –Ω–∞–ª–æ–∂–∏—Ç–µ –Ω–∞ –≤—Å–µ—Ö —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–æ–∫–ª—è—Ç–∏–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ö–æ–¥–æ–≤.","Cuando¬†juegues esta carta, aplicar√° una maldici√≥n que afectar√° unos cuantos turnos.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°, Â∞áÊúÉÂú®ÊâÄÊúâ‰∫∫Ë∫´‰∏äÊñΩ‰ª•Èö®Ê©ü‰∏ÄÂÄãÊåÅÁ∫åÂπæÂÄãÂõûÂêàÁöÑË©õÂíí„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ, zastosuj wybranƒÖ klƒÖtwƒô, kt√≥ra bƒôdzie trwaƒá przez kilka kolejek.","Ha kij√°tszod ezt a k√°rty√°t, n√©h√°ny k√∂rre mindenkit √°tok s√∫jt.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, birka√ß tur i√ßin herkese rastgele bir lanet verin."},
HOUSE_LIMBO ={"Limbo","","Limbes","–õ–∏–º–±–æ","","ÊûóÊ≥¢Ëàû","Otch≈Ça≈Ñ","Limb√≥",""},
HOUSE_LIMBO_DESC ={"Whoever exceeds the limit of cards in hand will be eliminated. The limit starts at 12 cards and reduces by 1 every minute.","Quem ultrapassar o limite de cartas na m√£o ser√° eliminado. O limite come√ßa em 12 e reduz em 1 a cada minuto.","Quiconque d√©passe la limite des cartes en main sera √©limin√©. La limite commence √† 12 cartes et diminue de 1 toutes les minutes.","–¢–æ—Ç, –∫—Ç–æ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç –∫–∞—Ä—Ç –≤ —Ä—É–∫–µ, –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω. –õ–∏–º–∏—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 12 –∫–∞—Ä—Ç –∏ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –Ω–∞ 1 –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É.","Cualquiera que exceda el l√≠mite de cartas en baraja ser√° eliminado. El l√≠mite empieza con doce cartas y se le va restando una por cada minuto que pasa.","Âè™Ë¶ÅÊúâ‰∫∫Êâã‰∏≠ÊåÅÊúâÁöÑÂç°ÁâåÊï∏ÈáèË∂ÖÈÅé‰∏äÈôêÂ∞±ÊúÉË¢´Ê∑òÊ±∞„ÄÇ ‰∏äÈôêËµ∑ÂàùÊòØ 12 ÂºµÂç°ÁÑ∂ÂæåÊØè‰∏ÄÂàÜÈêòÂ∞áÊúÉÊ∏õÂ∞ë 1 Âºµ„ÄÇ","Ktokowiek przekroczy limit kart w rƒôce zostanie wyeliminowany.  Limit zaczyna siƒô od 12 kart i zmniejsza siƒô o 1 co minutƒô.","Aki t√∫ll√©pi a k√©zben tarthat√≥ k√°rty√°k hat√°r√°t, az kiesik a j√°t√©kb√≥l. A hat√°r 12 k√°rty√°val indul, √©s percenk√©nt cs√∂kken 1-el.","Eldeki kart limitini a≈üan elenecektir. Limit 12 karttan ba≈ülar ve her dakika 1 azalƒ±r."},
HOUSE_MAGNET ={"Magnet Card","Carta do Im√£","Carte Magn√©tique","–ö–∞—Ä—Ç–∞-–ú–∞–≥–Ω–∏—Ç","Carta Magn√©tica","Á£ÅÂäõÂç°Áâå","Magnetyczna Karta","M√°gnes K√°rtya","Mƒ±knatƒ±s Kartƒ±"},
HOUSE_MAGNET_DESC ={"When you play this card, discard every card that has your magnet card's color.","Ao jogar esta carta, descarte todas as cartas da mesma cor que esta.","Lorsque vous jouez cette carte, vous d√©ffaussez toutes les cartes qui ont la couleur de votre carte magn√©tique.","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –æ–Ω–∞ —Å–±—Ä–æ—Å–∏—Ç –∫–∞—Ä—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–∫–æ–≥–æ –∂–µ —Ü–≤–µ—Ç–∞, –∫–∞–∫ –∏ –æ–Ω–∞.","Cuando juegues esta carta, descartar√° todas las cartas con el mismo color de √©sta.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°, Â∞áÊúÉ‰∏üÊ£Ñ‰Ω†Êâã‰∏≠Ë∑üÁ£ÅÂäõÂç°Áâå‰∏ÄÊ®£È°èËâ≤ÁöÑÂç°Áâå„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ pozbƒôdziesz siƒô wszystkich kart o tym samym kolorze co ta karta.","Ha kij√°tszod ezt a k√°rty√°t, dobj el minden k√°rty√°t a kezedb≈ël amely a m√°gnes sz√≠n√©vel megegyez≈ë sz√≠n≈±.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, mƒ±knatƒ±s kartƒ±nƒ±zƒ±n rengine sahip olan her kartƒ± atƒ±n."},
HOUSE_PLUS99 ={"Wild +99","Curinga +99","Carte +99","–ß—ë—Ä–Ω–∞—è +99","Comod√≠n +99","ÊèõËâ≤ +99","","Sz√≠nv√°lt√≥ +99","Joker +99"},
HOUSE_PLUS99_DESC ={"When you play this card, the next player will be eliminated by drawing too many cards. This card can be challenged.","Ao jogar esta carta, o pr√≥ximo jogador morre de tanto comprar cartas. Esta carta pode ser desafiada.","Lorsque vous jouez cette carte, le prochain joueur sera √©limin√© pour avoir pioch√© beaucoup trop de cartes. Cette carte peut √™tre d√©fi√©e.","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, —Å–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω –∏–∑-–∑–∞ –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç. –≠—Ç–∞ –∫–∞—Ä—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∏–≥—Ä–∞–Ω–∞. ","Cuando juegues esta carta, el siguiente jugador morir√° de sortear tantas cartas. √âsta puede ser desafiada.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°, ‰∏ã‰∏ÄÂÄãÁé©ÂÆ∂ÊúÉÂõ†ÁÇ∫ÁΩ∞ÊäΩÂ§™Â§öÂç°ËÄåË¢´Ê∑òÊ±∞„ÄÇ ÈÄôÂºµÂç°‰πüÊòØÂèØ‰ª•Ë¢´Ë≥™ÁñëÁöÑ„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ, nastƒôpny gracz zginie przez dobranie ogromniej ilo≈õci kart. Ta karta mo≈ºe zostaƒá wyzwana.","Ha kij√°tszod ezt a k√°rty√°t, a k√∂vetkez≈ë j√°t√©kos kiesik a j√°t√©kb√≥l,  mert t√∫l sok k√°rty√°t h√∫zott. Ezt a k√°rty√°t ki lehet h√≠vni.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, bir sonraki oyuncu √ßok fazla kart √ßekerek elenecektir. Bu karta itiraz edilebilir."},
HOUSE_TORNADO ={"Tornado Card","Carta do Tornado","Carte Tornade","–ö–∞—Ä—Ç–∞-–¢–æ—Ä–Ω–∞–¥–æ","Carta de Tornado","ÈæçÊç≤È¢®Âç°Áâå","Karta Tornado","Forg√≥sz√©l K√°rtya","Kasƒ±rga Kartƒ±"},
HOUSE_TORNADO_DESC ={"When you play this card, you shuffle the other players' cards.","Ao jogar esta carta, embaralhe as cartas dos outros jogadores.","Lorsque vous jouez cette carte, vous √©changer vos cartes avec celles des autres joueurs.","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –≤—ã –ø–µ—Ä–µ—Ç–∞—Å–æ–≤—ã–≤–∞–µ—Ç–µ –∫–∞—Ä—Ç—ã –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.","Cuando juegues esta carta, barajear√° las cartas de los dem√°s jugadores.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°Áâå, ‰Ω†ÊúÉÊêó‰∫ÇÂà•‰∫∫ÁöÑÂç°ÁµÑ„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ, tasuje karty innych graczy.","Ha kij√°tszod ezt a k√°rty√°t, a t√∂bbi j√°t√©kos k√°rty√°i megkever≈ëdnek.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, diƒüer oyuncularƒ±n kartlarƒ±nƒ± karƒ±≈ütƒ±rƒ±rsƒ±nƒ±z."},
HOUSE_THEFT ={"Robbery Card","Carta do Roubo","Carte Vol","–ö–∞—Ä—Ç–∞-–û–≥—Ä–∞–±–ª–µ–Ω–∏–µ","Carta de Robo","ÊÄ™ÁõúÂç°Áâå","Karta Rabunku","Rabl√°s K√°rtya","Soygun Kartƒ±"},
HOUSE_THEFT_DESC ={"When you play this card, you force a player to give you a wild card, provided they have one.","Ao jogar esta carta, force um jogador a dar uma carta curinga para voc√™ (se ele tiver uma).","Lorsque vous jouez cette carte, vous forcez un joueur √† vous donner une carte noire, √† condition que ce joueur en ait.","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –≤—ã –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–∞—Ç—å –≤–∞–º —á—ë—Ä–Ω—É—é –∫–∞—Ä—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ —É –Ω–µ–≥–æ –µ—Å—Ç—å.","Cuando juegues esta carta, forzar√°s a un jugador a darte una carta comod√≠n (si es que tiene una).","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°Áâå, ‰Ω†Âº∑Ëø´‰∏ÄÂÄãÁé©ÂÆ∂Áµ¶‰Ω†‰∏ÄÂºµÊèõËâ≤Âç°Áâå, ÂâçÊèêÊòØ‰ªñË¶ÅÊìÅÊúâ‰∏ÄÂºµ„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ, zmu≈õ gracza, aby da≈Ç ci kartƒô wild (je≈õli jƒÖ posiada).","Ha kij√°tszod ezt a k√°rty√°t, egy √°ltalad kiv√°lasztott j√°t√©kosnak oda kell adnia neked egy Sz√≠nv√°laszt√≥ k√°rty√°t, ha van a kez√©ben.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, eƒüer elinde varsa bir oyuncuyu size bir renk kartƒ± vermeye zorlarsƒ±nƒ±z."},
HOUSE_SIMON ={"Simon's Card","Carta da Memoriza√ß√£o","","–ö–∞—Ä—Ç–∞ –°–∏–º–æ–Ω–∞","Carta de Sim√≥n","Ë•øËíôÂç°ÁµÑ","Karta Simona","Simon K√°rty√°ja","Simon'un Kartƒ±"},
HOUSE_SIMON_DESC ={"When you play this card, repeat, in order, the colors of previous Simon's Cards. Fail & draw 1 card. Succeed & choose the next color.","Ao jogar esta carta, repita as cores escolhidas por outras cartas desta. Se errar, compre 1 carta. Se acertar, escolha a pr√≥xima cor.","","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –ø–æ–≤—Ç–æ—Ä—è–π—Ç–µ –ø–æ –ø–æ—Ä—è–¥–∫—É —Ü–≤–µ—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–∞—Ä—Ç –°–∏–º–æ–Ω–∞. –°–±–æ–π - –≤–æ–∑—å–º–∏—Ç–µ 1 –∫–∞—Ä—Ç—É. –ü—Ä–µ—É—Å–ø–µ–π—Ç–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ü–≤–µ—Ç.","Cuando juegues estta carta, repetir√° todos los colores elegidos antes por otras cartas de Sim√≥n. Si pierdes, sorteas una carta, sino, eliges el siguiente color.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°ÊôÇ, ÈúÄË¶ÅÈáçË§á‰πãÂâçÁôºÂá∫ÁöÑË•øËíôÂç°ÁâåÁöÑÈ°èËâ≤È†ÜÂ∫è„ÄÇ ÈáçË§áÈ†ÜÂ∫èÈåØË™§Â∞±ÁΩ∞ÊäΩ 1 ÂºµÂç°„ÄÇ ÊàêÂäüÂ∞±ÂèØ‰ª•ÈÅ∏Êìá‰∏ã‰∏ÄÂÄãÈ°èËâ≤Âä†Âà∞È†ÜÂ∫è‰∏≠„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ, powt√≥rz wszystkie inne kolory wybrane wcze≈õniej przez inne Karty Simona. W przypadku pominiƒôcia, dobierz 1 kartƒô. Je≈õli trafisz, wybierz nastƒôpny kolor.","Ha kij√°tszod ezt a k√°rty√°t, ism√©teld meg sorban az eddigi Simon K√°rty√°k √°ltal v√°laszott sz√≠neket. Ha nem siker√ºl, h√∫zz egy k√°rty√°t. Ha siker√ºl, v√°laszd ki a k√∂vetkez≈ë sz√≠nt.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, sƒ±rayla √∂nceki Simon'un Kartƒ±'nƒ±n renklerini tekrarlayƒ±n. Ba≈üarƒ±sƒ±z olursanƒ±z 1 kart √ßekersiniz. Ba≈üarƒ±lƒ± olursanƒ±z bir sonraki rengi se√ßersiniz."},
HOUSE_BAN ={"Banishment Card","Carta do Banimento","","–ö–∞—Ä—Ç–∞ –ò–∑–≥–Ω–∞–Ω–∏—è","Carta de Sanci√≥n","È©ÖÈÄêÂç°Áâå","Karta Banicji","Sz√°m≈±zet√©s K√°rtya","S√ºrg√ºn Kartƒ±"},
HOUSE_BAN_DESC ={"When you play this card, choose one of three cards from your hand and remove from the game every card matching its symbol.","Ao jogar esta carta, escolha uma entre 3 cartas da sua m√£o. Tire do jogo TODAS as cartas com o mesmo s√≠mbolo da carta escolhida.","","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ç—Ä—ë—Ö –∫–∞—Ä—Ç –∏–∑ —Å–≤–æ–µ–π —Ä—É–∫–∏ –∏ —É–¥–∞–ª–∏—Ç–µ –∏–∑ –∏–≥—Ä—ã –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –µ–µ —Å–∏–º–≤–æ–ª—É.","Cuando juegues esta carta, tendr√°s que elegir una de tres cartas de tu baraja, y remover del juego cada carta que coincida con su s√≠mbolo.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°, Âú®‰∏âÂºµ‰Ω†Âç°ÁµÑÁöÑÂç°Áâå‰∏≠ÈÅ∏Âèñ‰∏ÄÂºµ, ‰πãÂæåË∑üÈÇ£Âç°ÁâåÊúâËëó‰∏ÄÊ®£ÁöÑÂúñÊ°à/Êï∏Â≠óÁöÑÂç°ÊúÉÂæûÈÅäÊà≤‰∏≠Âà™Âéª„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ, wybierz jednƒÖ z trzech kart z twojej rƒôki i usu≈Ñ z gry ka≈ºdƒÖ kartƒô pasujƒÖcƒÖ do jej symbolu.","Ha kij√°tszod ezt a k√°rty√°t, v√°lassz egy, a kezedben l√©v≈ë k√°rty√°t h√°rom lehet≈ës√©gb≈ël, majd sz√°m≈±zz a j√°t√©kb√≥l minden olyan szimb√≥lummal rendelkez≈ë k√°rty√°t.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, elinizdeki √º√ß karttan birini se√ßin ve sembol√ºne uyan her kartƒ± oyundan √ßƒ±karƒ±n."},
HOUSE_MIX ={"Combo Cards","Cartas Combo","","–ö–æ–º–±–æ-–ö–∞—Ä—Ç—ã","Carta de Combo","Á¥ØË®àÂç°Áâå","Karty Combo","Kever√©k K√°rty√°k","Kombo Kartlarƒ±"},
HOUSE_MIX_DESC ={"These cards activate the two effects corresponding to their symbols.","Estas cartas ativam os dois efeitos correspondentes aos s√≠mbolos delas.","","–≠—Ç–∏ –∫–∞—Ä—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç –¥–≤–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∏—Ö —Å–∏–º–≤–æ–ª–∞–º.","Esas cartas activan los dos efectos correspondientes a sus s√≠mbolos.","ÈÄô‰∫õÂç°ÁâåÊúÉÊøÄÊ¥ª‰∏äÈù¢ÁöÑÂúñÊ°àÁöÑÂÖ©ÂÄãÊïàÊûú„ÄÇ","Karty te aktywujƒÖ dwa efekty odpowiadajƒÖce ich symbolom.","Ezek a k√°rty√°k a rajtuk megjelen≈ë k√©t szimb√≥lumhoz tartoz√≥ hat√°st aktiv√°lj√°k.","Bu kartlar, sembollerine kar≈üƒ±lƒ±k gelen iki efekti etkinle≈ütirir."},
HOUSE_DICE ={"Dice Card","Carta do Dado","","–ò–≥—Ä–∞–ª—å–Ω—ã–µ –ö–∞—Ä—Ç—ã","Carta de Dado","È™∞Â≠êÂç°Áâå","Karta Ko≈õci Do Gry","Dob√≥kocka K√°rtya","Zar Kartƒ±"},
HOUSE_DICE_DESC ={"When you play this card, force the next player to roll the dice and suffer the effects.","Ao jogar esta carta, force o pr√≥ximo jogador a rolar o dado e sofrer uma consequ√™ncia.","","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –≤—ã–Ω—É–∂–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –±—Ä–æ—Å–∞—Ç—å –∫–æ—Å—Ç–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç—ã.","Cuando juegues esta carta, forzar√°s al siguiente jugador a rodar los dados y sufrir los efectos.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°Áâå, ÊúÉËø´‰Ωø‰∏ã‰∏ÄÂÄãÁé©ÂÆ∂ÂéªÊäïÈ™∞ÁÑ∂ÂæåÊâøÂèóÁõ∏ÈóúÁöÑÊïàÊûú„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ, zmu≈õ nastƒôpnego gracza, aby rzuci≈Ç kostkƒÖ i poni√≥s≈Ç skutki.","Ha kij√°tszod ezt a k√°rty√°t, a k√∂vetkez≈ë j√°t√©kosnak dob√≥kock√°t kell dobnia, majd annak hat√°sait elviselni.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, bir sonraki oyuncuyu zar atmaya ve etkilere maruz kalmaya zorlayƒ±n."},
HOUSE_HALF ={"Authority Card","Carta da Autoridade","","–ê–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ö–∞—Ä—Ç–æ—á–∫–∞","Carta de Autoridad","Ê¨äÂäõÂç°Áâå","Karta Autorytetu","Felhatalmaz√≥ K√°rtya","Yetki Kartƒ±"},
HOUSE_HALF_DESC ={"Draw only half of the cards while holding this card in your hand.","Compre apenas metade das cartas enquanto segurar esta carta na m√£o.","","–í–æ–∑—å–º–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–≤–∏–Ω—É –∫–∞—Ä—Ç, –¥–µ—Ä–∂–∞ —ç—Ç—É –∫–∞—Ä—Ç—É –≤ —Ä—É–∫–µ.","Solo podr√°s sortear la mitad de las cartas mientras tengas esta carta en tu baraja.","Áï∂‰Ω†Êâã‰∏≠ÊåÅÊúâÈÄôÂç°ÁâåË¢´ÁΩ∞ÊäΩÁöÑÊôÇÂÄôÂè™ÈúÄÊäΩÂèñ‰∏ÄÂçäÁöÑÂç°„ÄÇ","Dobierz tylko po≈Çowƒô kart, trzymajƒÖc tƒô ‚Äã‚Äãkartƒô w twojej d≈Çoni.","Am√≠g ez a k√°rtya a kezedben van, csak feleannyi k√°rty√°t kell h√∫znod.","Bu kartƒ± elinizde tutarken kartlarƒ±n sadece yarƒ±sƒ±nƒ± √ßekin."},
HOUSE_JUSTICE ={"Justice Card","Carta da Justi√ßa","","–ö–∞—Ä—Ç–∞ –ü—Ä–∞–≤–æ—Å—É–¥–∏—è","Carta de Justicia","Ê≠£Áæ©Âç°Áâå","Karta Sprawiedliwo≈õci","Igazs√°g K√°rtya","Adalet Kartƒ±"},
HOUSE_JUSTICE_DESC ={"When you play this card, discard 1 card for each player with fewer cards than you.","Ao jogar esta carta, descarte 1 carta por cada jogador com menos cartas que voc√™.","","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, —Å–±—Ä–æ—Å—å—Ç–µ 1 –∫–∞—Ä—Ç—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –º–µ–Ω—å—à–µ –∫–∞—Ä—Ç, —á–µ–º —É –≤–∞—Å.","Cuando jugues esta carta, descartar√° una carta por cada jugador con menos¬†cartas que t√∫.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°Áâå, ÊØèÁï∂Êúâ‰∏ÄÂÄãÁé©ÂÆ∂ÊåÅÊúâÁöÑÂç°ÁâåÊØî‰Ω†Â∞ë‰Ω†Â∞±ÊúÉ‰∏üÊ£ÑÊéâ‰∏ÄÂºµÂç°„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ, odrzuƒá 1 kartƒô dla ka≈ºdego gracza z mniejszƒÖ ilo≈õciƒÖ kart ni≈º ty.","Ha kij√°tszod ezt a k√°rty√°t, dobj el egy v√©letlenszer≈± k√°rty√°kat annyiszor, mint ah√°ny j√°t√©kos van kevesebb k√°rty√°val, mint ami neked van.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, sizden daha az karta sahip her oyuncu i√ßin 1 kart atƒ±n."},
HOUSE_MIMIC ={"Imitation Card","Carta da Imita√ß√£o","","–ò–º–∏—Ç–∞—Ü–∏–æ–Ω–Ω–∞—è –ö–∞—Ä—Ç–∞","Carta de Imitaci√≥n","Ê®°‰ªøÂç°Áâå","Karta Imitacji","Ut√°nz√≥ K√°rtya","ƒ∞mitasyon Kartƒ±"},
HOUSE_MIMIC_DESC ={"When you play this card, choose a player. You will imitate their actions (play/draw cards) until your next turn.","Ao jogar esta carta, escolha um jogador. Voc√™ imitar√° as a√ß√µes dele (jogar/comprar cartas) at√© sua pr√≥xima vez.","","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –≤—ã–±–∏—Ä–∞–π—Ç–µ –∏–≥—Ä–æ–∫–∞. –í—ã –±—É–¥–µ—Ç–µ –ø–æ–¥—Ä–∞–∂–∞—Ç—å –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è–º (–∏–≥—Ä–∞—Ç—å / –±—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã) –¥–æ –≤–∞—à–µ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞.","Cuando juegues esta carta, eligir√°s una jugador. A este mismo jugador imitar√°s las acciones (jugar/sortear cartas) hasta tu siguiente turno.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°ÁâåÁöÑÊôÇÂÄô, ÈÅ∏Êìá‰∏ÄÂÄãÁé©ÂÆ∂„ÄÇ ‰Ω†ÊúÉ‰ªøÂÇö‰ªñÁöÑË°åÂãï (Áôº/ÊäΩÂç°) Áõ¥Âà∞‰Ω†‰∏ã‰∏ÄÂÄãÂõûÂêà„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ, wybierz gracza. Bƒôdziesz imitowaƒá ich dzia≈Çania (graƒá / dobieraƒá karty) a≈º do nastƒôpnej tury.","Ha kij√°tszod ezt a k√°rty√°t, v√°lassz egy j√°t√©kost. A k√∂vetkez≈ë k√∂r√∂dig ut√°nozni fogod a cselekv√©seit (k√°rtya kij√°tsz√°sa/h√∫z√°sa).","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda bir oyuncu se√ßin. Bir sonraki sƒ±ranƒ±za kadar hareketlerini taklit edeceksiniz (oyun / kart √ßekme)."},
HOUSE_BG ={"Blue and Green","Azul e Verde","","–°–∏–Ω–∏–π –∏ –ó–µ–ª—ë–Ω—ã–π","Azul y Verde","ËóçÂ§©Á∂†Âú∞","Niebieski i Zielony","K√©k √©s Z√∂ld","Mavi ve Ye≈üil"},
HOUSE_BG_DESC ={"Blue and green cards will be treated as if they were the same color.","Cartas azuis e verdes ser√£o tratadas como se fossem da mesma cor.","","–°–∏–Ω–∏–µ –∏ –∑–µ–ª—ë–Ω—ã–µ –∫–∞—Ä—Ç—ã –±—É–¥—É—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å—Å—è —Ç–∞–∫, –∫–∞–∫ –µ—Å–ª–∏ –±—ã –æ–Ω–∏ –±—ã–ª–∏ –æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞.","Las cartas de color azul y verde ser√°n tratadas como si del mismo color fuesen.","ËóçËâ≤Ë∑üÁ∂†Ëâ≤ÊúÉË¢´Áï∂‰ΩúÊàêÂêå‰∏ÄÂÄãÈ°èËâ≤„ÄÇ","Niebieskie i zielone karty bƒôdƒÖ traktowane tak, jakby by≈Çy tego samego koloru.","A k√©k √©s z√∂ld k√°rty√°k azonos sz√≠n≈±eknek sz√°m√≠tanak.","Mavi ve ye≈üil kartlar aynƒ± renkmi≈ü gibi deƒüerlendirilecektir."},
HOUSE_DOS ={"DOS!","","","–î–û–°!","","","","",""},
HOUSE_DOS_DESC ={"Instead of declaring UNO, you need to declare DOS when you have two cards in your hand.","Ao inv√©s de declarar UNO, voc√™ precisa declarar DOS quando tiver duas cartas na m√£o.","","–í–º–µ—Å—Ç–æ —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–±—ä—è–≤–ª—è—Ç—å –£–ù–û, –≤–∞–º –Ω—É–∂–Ω–æ –æ–±—ä—è–≤–∏—Ç—å –î–û–°, –∫–æ–≥–¥–∞ —É –≤–∞—Å –≤ —Ä—É–∫–µ –¥–≤–µ –∫–∞—Ä—Ç—ã.","En vez de declarar UNO, deber√°s de declarar DOS cuanto tengas dos cartas en tu baraja.","‰Ω†ÈúÄË¶ÅÂú®‰Ω†Âç°ÁµÑÂè™Ââ©‰∏ãÂÖ©ÂºµÂç°ÁâåÁöÑÊôÇÂÄôÂñä DOS, ËÄå‰∏çÊòØ UNO„ÄÇ","Zamiast deklarowaƒá UNO, musisz zadeklarowaƒá DOS, gdy masz dwie karty w rƒôce.","Ahelyett, hogy UNO-t kellene bemondani, DOS-t kell, ha k√©t k√°rtya van csak a kezedben.","UNO ilan etmek yerine, elinizde iki kart varken DOS bildirmeniz gerekir."},
HOUSE_PARADOX ={"Paradox Card","Carta do Paradoxo","","–ö–∞—Ä—Ç–∞-–ü–∞—Ä–∞–¥–æ–∫—Å","Carta Paradoja","ÊÇñË´ñÂç°Áâå","Karta Paradoksu","Paradox K√°rtya","Paradoks Kartƒ±"},
HOUSE_PARADOX_DESC ={"When you play this card, send a random card from your hand to your hand in your next match.","Ao jogar esta carta, envie uma carta aleat√≥ria da sua m√£o para a sua m√£o da sua pr√≥xima partida.","","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –∏–∑ –≤–∞—à–µ–π —Ä—É–∫–∏ –≤ –≤–∞—à—É —Ä—É–∫—É –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–∞—Ç—á–µ.","Cuando juegues esta carta, enviar√° una carta aleatoria de tu baraja, a tu baraja pero en tu siguiente turno.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°Áâå, ‰Ω†ÊúÉÊääÊâã‰∏≠Èö®Ê©üÁöÑ‰∏ÄÂºµÂç°ÂÇ≥ÈÄÅÂà∞‰Ω†‰∏ã‰∏ÄÂ†¥ÈÅäÊà≤‰∏≠ÁöÑÂç°ÁµÑ„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ, wy≈õlij losowƒÖ kartƒô z rƒôki do rƒôki w nastƒôpnej rundzie.","Ha kij√°tszod ezt a k√°rty√°t, a kezedb≈ël egy v√©letlenszer≈± k√°rtya a k√∂vetkez≈ë j√°t√©kban l√©v≈ë kezdeti k√°rty√°id k√∂z√© ker√ºl.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, bir sonraki ma√ßƒ±nƒ±zda elinizden elinize rastgele bir kart g√∂nderin."},
HOUSE_ODD_EVEN ={"Traffic Light Card","Carta do Sem√°foro","","–ö–∞—Ä—Ç–∞ –°–≤–µ—Ç–æ—Ñ–æ—Ä–∞","Carta Sem√°foro","‰∫§ÈÄöÁáàÂç°","Karta Sygnalizacji ≈öwietlnej","K√∂zleked√©si L√°mpa K√°rtya","Trafik I≈üƒ±ƒüƒ± Kartƒ±"},
HOUSE_ODD_EVEN_DESC ={"When you play this card, you won't be able to win with either odds or evens (randomly chosen). Playing this card again changes it.","Ao jogar esta carta, ser√° proibido vencer com cartas pares ou √≠mpares (escolhido aleatoriamente). Ao jogar isso de novo, mude.","","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –≤—ã–∏–≥—Ä–∞—Ç—å –Ω–∏ —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏, –Ω–∏ —Å —á—ë—Ç–Ω—ã–º–∏ (–≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º). –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–∞—Ä—Ç—ã –º–µ–Ω—è–µ—Ç –µ—ë.","When playing this card again, switch to the other option. Cuando juegues esta carta, estar√° prohibido ganar con cartas pares o impares, dependiendo de cu√°l sea elegido. Cuando la juegues nuevamente, cambiar√° a la otra opci√≥n.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°Áâå, ‰Ω†Â∞á‰∏çËÉΩÂ§†‰ª•ÂñÆÊï∏ÊàñÈõôÊï∏ÁöÑÂç°ÁâåÂãùÂá∫ÈÅäÊà≤ (Èö®Ê©üÊ±∫ÂÆö)„ÄÇ ÂÜçÁôºÂá∫ÈÄôÂç°ÊúÉÊîπËÆäÊïàÊûú„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ, zabronione bƒôdzie wygrywanie kartami nieparzystymi lub parzystymi (wybieranymi losowo). Podczas ponownego zagrania tƒÖ kartƒÖ, zmie≈Ñ na innƒÖ opcjƒô.","Ha kij√°tszod ezt a k√°rty√°t, akkor nem lehet a j√°t√©kot megnyerni vagy p√°ros vagy p√°ratlan k√°rty√°kkal (v√©letlenszer≈±en kiv√°lasztva). Ha ism√©t kij√°tszod ezt a k√°rty√°t, akkor megcser√©l≈ëdik.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, tek veya √ßift sayƒ±larla (rastgele se√ßilir) kazanamazsƒ±nƒ±z. Bu kartƒ± tekrar oynamak onu deƒüi≈ütirir."},
HOUSE_LOCK ={"Lock Card","Carta da Tranca","","–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ö–∞—Ä—Ç—ã","Carta de Bloqueo","ÈéñÂç°","Karta Blokady","Z√°r K√°rtya","Kilit Kartƒ±"},
HOUSE_LOCK_DESC ={"When you play this card, lock two cards in every other player's hand for 1 turn.","Ao jogar esta carta, bloqueie duas cartas na m√£o de cada outro jogador por 1 turno.","","","Cuando juegues esta carta, bloquear√° dos cartas por cada jugador por un turno.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°, ÊúÉÂú®‰∏ÄÂÄãÂõûÂêàÂÖßÈéñËëóÊâÄÊúâ‰∫∫Êâã‰∏äÁöÑÂÖ©ÂºµÂç°„ÄÇ","","Ha kij√°tszod ezt a k√°rty√°t, egy k√∂rig minden ellenfeled kez√©ben k√©t k√°rtya lez√°r√≥dik.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, her oyuncunun elinde 1 tur i√ßin iki kartƒ± kilitleyin."},
HOUSE_SHARE ={"Sharing Card","Carta da Partilha","","","","ÂàÜ‰∫´Âç°","","Osztozkod√°s K√°rtya","Payla≈üƒ±m Kartƒ±"},
HOUSE_SHARE_DESC ={"When you play this card, give copies of your cards randomly to the other players (maximum 10 cards).","Ao jogar esta carta, d√™ c√≥pias das suas cartas aleatoriamente aos outros jogadores (m√°ximo 10 cartas).","","","","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°, ‰Ω†Êâã‰∏äÁöÑÂç°ÊúÉË¢´Èö®Ê©üË§áË£ΩÁµ¶ÂÖ∂‰ªñÁé©ÂÆ∂ (‰∏äÈôê 10 Âºµ)„ÄÇ","","Ha kij√°tszod ezt a k√°rty√°t, a t√∂bbi j√°t√©kos v√©letlenszer≈±en kap a kezedben l√©v≈ë k√°rty√°kr√≥l m√°solatokat (maximum 10 k√°rtya).","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, kartlarƒ±nƒ±zƒ±n kopyalarƒ±nƒ± rastgele diƒüer oyunculara verin (en fazla 10 kart)."},
HOUSE_TWO_HANDS ={"Two Hands","Duas M√£os","","","","ÈõôÊâã","","K√©t K√©znyi Lap","ƒ∞ki el"},
HOUSE_TWO_HANDS_DESC ={"You have two hands of cards to play. Finish one first to be able to use the other and win the game!","Voc√™ tem duas m√£os de cartas para jogar. Termine uma primeiro para poder usar a outra e ganhar o jogo!","","","","‰Ω†ÊúâÂÖ©ÁµÑÁöÑÂç°ÁâåÈÅäÁé©„ÄÇÈ¶ñÂÖàÂÆåÊàê‰∏ÄÁµÑÂç°ÁâåÂÜç‰ΩøÁî®Á¨¨‰∫åÁµÑ‰æÜÂèñÂæóÈÅäÊà≤ÂãùÂà©!","","K√©t k√©znyi k√°rty√°val kell j√°tszanod. Ha az els≈ët befejezted, akkor haszn√°lhatod a m√°sodikat, hogy megnyerd a j√°t√©kot.","Oynamak i√ßin iki el kartƒ±nƒ±z var. Diƒüerini kullanabilmek ve oyunu kazanabilmek i√ßin √∂nce birini bitir!"},
HOUSE_REVERSE ={"Counterattack","Contra-ataque","","","","ÂèçÊìä","","Ellent√°mad√°s","Kar≈üƒ± atak"},
HOUSE_REVERSE_DESC ={"Reverse cards now can be used to block a +2 of the same color.","Cartas de reverter agora podem ser usadas para se defender de um +2 da mesma cor.","","","","ÊñπÂêëÂèçËΩâÂç°ÁâåÁèæÂú®ÂèØ‰ª•Áî®‰æÜÈòªÊìãÁõ∏ÂêåÈ°èËâ≤ÁöÑ +2 Âç°Áâå„ÄÇ","","A Visszaford√≠t√≥ k√°rty√°kkal ki lehet v√©deni azonos sz√≠n≈± +2-es k√°rty√°kat.","Ters kartlar artƒ±k aynƒ± renkten + 2'yi engellemek i√ßin kullanƒ±labilir."},
HOUSE_POKER ={"Rule Poker","Poker de Regras","","","","Ë¶èÁü©ÊâëÂÖã","","Szab√°ly P√≥ker","Kural Poker"},
HOUSE_POKER_DESC ={"At the start of the game, each player chooses a rule to add to the match.","No in√≠cio do jogo, cada jogador escolhe uma regra para colocar na partida.","","","","Âú®ÈÅäÊà≤ÈñãÂßã‰πãÂâç, ÊØè‰∏ÄÂÄãÁé©ÂÆ∂ÂèØÈÅ∏Êìá‰∏ÄÂÄãË¶èÁü©Âä†Âà∞ÈÅäÊà≤Áï∂‰∏≠„ÄÇ","","A j√°t√©k kezdetekor minden j√°t√©kos v√°laszthat egy szab√°lyt, amit hozz√°adhat a j√°t√©khoz.","Oyunun ba≈ülangƒ±cƒ±nda, her oyuncu ma√ßa eklemek i√ßin bir kural se√ßer."},
HOUSE_ADD ={"More Rules","Mais Regras","","","","Êõ¥Â§öË¶èÁü©","","T√∂bb Szab√°ly","Daha Fazla Kural"},
HOUSE_ADD_DESC ={"Enable this rule to allow the game to sometimes add other rules.","Ative esta regra para permitir que o jogo adicione outras regras de vez em quando.","","","","ÈÅ∏ÊìáÈÄôË¶èÁü©‰æÜËÆìÈÅäÊà≤Èö®ÊôÇÂ¢ûÂä†È°çÂ§ñÁöÑË¶èÁü©„ÄÇ","","Ha ez a szab√°ly √©rv√©nyes, a j√°t√©khoz v√©letlenszer≈±en egy√©b szab√°lyok hozz√°ad√≥dhatnak.","Oyunun bazen ba≈üka kurallar eklemesine izin vermek i√ßin bu kuralƒ± etkinle≈ütirin."},
HOUSE_LIMITLESS ={"Limitless","Sem Limite","","","","ÁÑ°Èôê","","Hat√°rtalan","Sƒ±nƒ±rsƒ±z"},
HOUSE_LIMITLESS ={"Players can now have more than 30 cards in hand.","Os jogadores agora podem ter mais de 30 cartas na m√£o.","","","","ÁèæÂú®Áé©ÂÆ∂Êâã‰∏äÂèØ‰ª•Â§öÊñº 30 ÂºµÂç°Áâå„ÄÇ","","A j√°t√©kosoknak lehet egyszerre t√∂bb, mint 30 k√°rtya a kez√©ben.","Oyuncularƒ±n elinde artƒ±k 30'dan fazla kart olabilir."},
HOUSE_TOURNAMENT ={"Tournament","Torneio","","–¢—É—Ä–Ω–∏—Ä","Torneo","ËÅØË≥Ω","Turniej","Bajnoks√°g","Turnuva"},
HOUSE_TOURNAMENT_DESC ={"Multiple matches will occur. When a player reaches %s points, they will be the winner. Click here and see how scoring works.","V√°rias partidas ocorrer√£o. Quando um jogador atingir %s pontos, ele ser√° o vencedor. Clique aqui e veja como funciona a pontua√ß√£o.","","–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –±—É–¥—É—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞—Ç—á–µ–π. –ö–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –Ω–∞–±–µ—Ä–µ—Ç %s –æ—á–∫–æ–≤, –æ–Ω —Å—Ç–∞–Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º. –ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –æ—Ü–µ–Ω–∫–∏.","M√∫ltiples¬†juegos ocurrir√°n. Cuando un jugador pase los puntos de %s, ser√° el ganador. Da clic aqu√≠ para ver como funciona la puntuaci√≥n.","Â§öÂ†¥ÈÅäÊà≤ÊúÉÂêåÊôÇÈÄ≤Ë°å„ÄÇÁï∂‰∏ÄÂÄãÁé©ÂÆ∂ÈÅîÂà∞ %s ÂàÜÊï∏, ‰ªñÂ∞±ÊúÉÊàêÁÇ∫ÂãùÂà©ËÄÖ„ÄÇ ÈªûÈÄôË£°Êü•ÁúãÂ¶Ç‰ΩïË®àÁÆóÂàÜÊï∏„ÄÇ","BƒôdƒÖ siƒô pojawiaƒá wielokrotne rozgrywki. Kiedy gracz osiƒÖgnie %s punkt√≥w, zostanie zwyciƒôzcƒÖ. Kliknij tutaj i zobacz jak dzia≈Ça punktacja.","Egym√°s ut√°n t√∂bb j√°t√©k fog megt√∂rt√©nni. Ha egy j√°t√©kos el√©r %s pontot, ≈ë lesz a gy≈ëztes. Kattints ide, hogy l√°sd hogy m≈±k√∂dik a pontoz√°s.","Birden √ßok e≈üle≈üme olacak. Bir oyuncu %s puana ula≈ütƒ±ƒüƒ±nda kazanan olur. Buraya tƒ±klayƒ±n ve puanlamanƒ±n nasƒ±l √ßalƒ±≈ütƒ±ƒüƒ±nƒ± g√∂r√ºn."},
HOUSE_SURVIVOR ={"Survival Tournament","Torneio de Sobreviv√™ncia","","–¢—É—Ä–Ω–∏—Ä –ù–∞ –í—ã–∂–∏–≤–∞–Ω–∏–µ","Torneo de Supervivencia","ÁîüÂ≠òË≥ΩÂà∂ËÅØË≥Ω","Turniej Przetrwania","T√∫l√©l≈ë Bajnoks√°g","Hayatta Kalma Turnuvasƒ±"},
HOUSE_SURVIVOR_DESC ={"Multiple matches will occur. When a player reaches %s points, they will be eliminated. Last player standing wins. Click here and see how scoring works.","V√°rias partidas ocorrer√£o. Quando um jogador atingir %s pontos, ele ser√° eliminado do torneio. Vence quem sobrar. Clique aqui e veja como funciona a pontua√ß√£o.","","–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –±—É–¥—É—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞—Ç—á–µ–π. –ö–æ–≥–¥–∞ –∏–≥—Ä–æ–∫ –Ω–∞–±–µ—Ä–µ—Ç %s –æ—á–∫–æ–≤, –æ–Ω–∏ –±—É–¥—É—Ç —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã. –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ—è—â–∏–π –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç. –ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –æ—Ü–µ–Ω–∫–∏.","M√∫ltiples juegos ocurrir√°n. Cuando un jugador pase los puntos de %s, el otro ser√° eliminado. El √∫ltimo jugador en prevalecer ganar√°. Da clic aqu√≠ para ver como funciona la puntuaci√≥n.","Â§öÂ†¥ÈÅäÊà≤ÊúÉÂêåÊôÇÈÄ≤Ë°å„ÄÇ Áï∂‰∏ÄÂÄãÁé©ÂÆ∂ÈÅîÂà∞ %s ÂàÜÊï∏, ‰ªñÂ∞±ÊúÉË¢´Ê∑òÊ±∞„ÄÇ Ââ©‰∏ãÁöÑÊúÄÂæå‰∏ÄÂÄãÁé©ÂÆ∂ÂãùÂá∫„ÄÇ ÈªûÈÄôË£°Êü•ÁúãÂ¶Ç‰ΩïË®àÁÆóÂàÜÊï∏„ÄÇ","BƒôdƒÖ pojawiaƒá siƒô wielokrotne rozgrywki. Kiedy gracz osiƒÖgnie %s punkt√≥w, zostanie wyeliminowany. Ostatni gracz zostanie zwyciƒôzcƒÖ. Kliknij tutaj i zobacz jak dzia≈Ça punktacja.","Egym√°s ut√°n t√∂bb j√°t√©k fog megt√∂rt√©nni. Ha egy j√°t√©kos el√©r %s pontot, kiesik a j√°t√©kb√≥l. A legutols√≥ j√°t√©kos, aki j√°t√©kban marad, nyer. Kattints ide, hogy l√°sd hogy m≈±k√∂dik a pontoz√°s.","Birden √ßok e≈üle≈üme olacak. Bir oyuncu %s puana ula≈ütƒ±ƒüƒ±nda, elenecektir. Ayakta kalan son oyuncu kazanƒ±r. Buraya tƒ±klayƒ±n ve puanlamanƒ±n nasƒ±l √ßalƒ±≈ütƒ±ƒüƒ±nƒ± g√∂r√ºn."},
HOUSE_CUSTOM ={"Custom Card","Carta Customizada","","–¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ö–∞—Ä—Ç–∞","Carta Personalizada","Ëá™ÂÆöÁæ©Âç°Áâå","Karta Zwyczaju","Saj√°t K√°rtya","√ñzel Kart"},
HOUSE_CUSTOM_DESC ={"The room owner can put the effect they want on this card.","O dono da sala pode colocar o efeito que ele quiser nesta carta.","","–í–ª–∞–¥–µ–ª–µ—Ü –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç –ø–æ–º–µ—Å—Ç–∏—Ç—å –∂–µ–ª–∞–µ–º—ã–π —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞ —ç—Ç—É –∫–∞—Ä—Ç—É.","El due√±o de la sala podr√° poner los efectos que quiera en esta carta.","ÊàøÈñìÁöÑÂâµÂª∫‰∫∫ÂèØ‰ª•ÊääÊÉ≥Ë¶ÅÁöÑÊïàÊûúËá™Ë°åÂä†Âà∞ÈÄôÂºµÂç°Áâå‰∏≠„ÄÇ","W≈Ça≈õciciel pokoju mo≈ºe umie≈õciƒá na niej wybrany przez siebie efekt.","A szoba tulajdonosa b√°rmilyen hat√°st tud erre a k√°rty√°ra rakni.","Oda sahibi istediƒüi efekti bu karta koyabilir."},
CARD_SKIP ={"When you play this card, the next player misses their turn.","Ao jogar esta carta, o pr√≥ximo jogador perde a vez.","","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, —Å–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å–≤–æ–π —Ö–æ–¥.","Cuando juegues esta carta, el siguiente jugador perder√° su turno.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂºµÂç°, ‰∏ã‰∏ÄÂÄãÁé©ÂÆ∂ÊúÉÂ§±Âéª‰ªñÁöÑÂõûÂêà„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ, nastƒôpny gracz traci swojƒÖ kolej.","Ha kij√°tszod ezt a k√°rty√°t, a k√∂vetkez≈ë j√°t√©kos kimarad a k√∂rb≈ël.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, bir sonraki oyuncu sƒ±rasƒ±nƒ± ka√ßƒ±rƒ±r."},
CARD_REVERSE ={"When you play this card, the order of play is reversed. If there are only two players in the game, you play again.","Ao jogar esta carta, inverta a ordem do jogo. Se for apenas duas pessoas jogando, jogue novamente.","","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, –ø–æ—Ä—è–¥–æ–∫ –∏–≥—Ä—ã –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π. –ï—Å–ª–∏ –≤ –∏–≥—Ä–µ —Ç–æ–ª—å–∫–æ –¥–≤–∞ –∏–≥—Ä–æ–∫–∞, –≤—ã –∏–≥—Ä–∞–µ—Ç–µ —Å–Ω–æ–≤–∞.","Cuando juegues esta carta, la direcci√≥n de turnos en el juego cambiar√°. Si s√≥lo hay dos personas jugando, pasar√° normal.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂºµÂç°, ÈÅäÊà≤ÈÄ≤Ë°åÁöÑÊñπÂêëÊúÉÂèçËΩâ„ÄÇ Â¶ÇÊûúÂè™ÊúâÂÖ©ÂÄãÁé©ÂÆ∂ÈÄ≤Ë°åÈÅäÊà≤, ‰Ω†ÂèØ‰ª•È¶¨‰∏äÂÜçÁôºÂç°„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ, zmie≈Ñ kierunek gry. Je≈õli w grze jest tylko dw√≥ch graczy, zagraj ponownie.","Ha kij√°tszod ezt a k√°rty√°t, megfordul a k√∂r ir√°nya. Ha csak k√©t j√°t√©kos van a j√°t√©kban, √∫jra te k√∂vetkezel.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, oyun sƒ±rasƒ± tersine d√∂ner. Oyunda sadece iki oyuncu varsa, tekrar oynarsƒ±nƒ±z."},
CARD_DRAW_TWO ={"When you play this card, the next player draws 2 cards and misses their turn, (unless they have another +2).","Ao jogar esta carta, o pr√≥ximo jogador deve comprar 2 cartas (a menos que ele jogue outro +2).","","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–ª–æ–∏–∂–∏–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç—É, —Å–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –±–µ—Ä–µ—Ç 2 –∫–∞—Ä—Ç—ã –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å–≤–æ–π —Ö–æ–¥ (–µ—Å–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –¥—Ä—É–≥–æ–≥–æ +2).","Cuando juegues esta carta, el siguiente jugador necesitar√° sortear dos cartas (a menos de que tenga otra +2).","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂºµÂç°, ‰∏ã‰∏ÄÂÄãÁé©ÂÆ∂ÁΩ∞ÊäΩ 2 ÂºµÂç°ÁâåÁÑ∂ÂæåÂ§±ÂéªÂõûÂêà, (Èô§Èùû‰ªñÊúâÂè¶‰∏ÄÂºµ +2 Âç°Áâå)„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ, nastƒôpny gracz musi dobraƒá 2 karty (chyba ≈ºe ma inne +2).","Ha kij√°tszod ezt a k√°rty√°t, a k√∂vetkez≈ë j√°t√©kos h√∫z k√©t k√°rty√°t, √©s kimarad a k√∂rb≈ël, (kiv√©ve ha van nekik egy m√°sik +2).","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, sonraki oyuncu 2 kart √ßeker ve sƒ±rasƒ±nƒ± ka√ßƒ±rƒ±r (ba≈üka bir +2'ye sahip olmadƒ±ƒüƒ± s√ºrece)."},
CARD_WILD ={"You can play this card over cards of every color, to switch the color to any of the four colors.","Voc√™ pode jogar esta carta a qualquer momento. Depois escolha uma cor para prosseguir o jogo.","","–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É –ø–æ–≤–µ—Ä—Ö –∫–∞—Ä—Ç –ª—é–±–æ–≥–æ —Ü–≤–µ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å —Ü–≤–µ—Ç –Ω–∞ –ª—é–±–æ–π –∏–∑ —á–µ—Ç—ã—Ä—ë—Ö —Ü–≤–µ—Ç–æ–≤.","Podr√°s descartarla sobre cualquier carta y darle el poder de cambiar entre cualquier de los cuatro colores.","‰Ω†ÂèØ‰ª•Âú®‰ªª‰Ωï‰∏ÄÂÄãÈ°èËâ≤ÁöÑÂç°Áâå‰∏äÁôºÂá∫ÈÄôÊèõËâ≤Âç°Áâå, Áî®‰æÜÊîπËÆäÂá∫ÁâåÁöÑÈ°èËâ≤„ÄÇ","Mo≈ºesz go wy≈Ço≈ºyƒá na dowolnej karcie i daje on mo≈ºliwo≈õƒá zmiany koloru na dowolny z czterech kolor√≥w.","B√°rmely sz√≠n≈± k√°rty√°ra kij√°tszhatod ezt a k√°rty√°t, hogy megv√°ltoztasd a sz√≠nt a n√©gy sz√≠n b√°rmelyik√©re.","Rengi d√∂rt renkten herhangi birine deƒüi≈ütirmek i√ßin bu kartƒ± her renkteki kartlar √ºzerinde oynayabilirsiniz."},
CARD_WILD_DRAW_FOUR ={"You can play this card over cards of every color, to switch the color to any of the four colors. You also force the next player to draw 4 cards and miss their turn (unless they have another +4). You should play this card only when you have no card matching the color of the card on the table. It is possible to challenge this card if you think it was illegally played on you.","Al√©m de poder jogar a qualquer momento e escolher a cor, voc√™ for√ßa o pr√≥ximo a comprar 4 cartas (a menos que ele tenha outro +4). Voc√™ s√≥ deve jogar esta carta caso n√£o possua nenhuma carta da cor da carta da mesa. √â poss√≠vel desafiar esta carta caso voc√™ ache que a carta foi jogada injustamente.","","–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É –ø–æ–≤–µ—Ä—Ö –∫–∞—Ä—Ç –ª—é–±–æ–≥–æ —Ü–≤–µ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å —Ü–≤–µ—Ç –Ω–∞ –ª—é–±–æ–π –∏–∑ —á–µ—Ç—ã—Ä—ë—Ö —Ü–≤–µ—Ç–æ–≤. –í—ã —Ç–∞–∫–∂–µ –∑–∞—Å—Ç–∞–≤–ª—è–µ—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤–∑—è—Ç—å 4 –∫–∞—Ä—Ç—ã –∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–≤–æ–π —Ö–æ–¥ (–µ—Å–ª–∏ —É –Ω–µ–≥–æ —Ç–∞–∫–∂–µ –Ω–µ—Ç +4). –õ–æ–∂–∏—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É —Å–ª–µ–¥—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –Ω–∞ —Å—Ç–æ–ª–µ –Ω–µ—Ç –∫–∞—Ä—Ç—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ü–≤–µ—Ç—É –∫–∞—Ä—Ç—ã. –ú–æ–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤, –µ—Å–ª–∏ –≤—ã –¥—É–º–∞–µ—Ç–µ, —á—Ç–æ –æ–Ω–∞ –±—ã–ª–∞ –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ —Ä–∞–∑—ã–≥—Ä–∞–Ω–∞ –Ω–∞ –≤–∞—Å.","Adem√°s de poder jugarla en cualquier momento y elegir el color, forzar√°s al siguiente a recibir cuatro cartas (a menos de que juegue otro +4). Solo deber√≠as de jugar esta carta si no tienes cartas que coincidan con el color de la carta superior en la tabla. Es posible desafiar esta carta si crees que la carta fue jugada suciamante.","‰Ω†ÂèØ‰ª•Âú®‰ªª‰Ωï‰∏ÄÂÄãÈ°èËâ≤ÁöÑÂç°Áâå‰∏äÁôºÂá∫ÈÄô +4 Âç°Áâå, ÊîπËÆäÂá∫ÁâåÁöÑÈ°èËâ≤„ÄÇ ÂêåÊôÇ, ‰Ω†‰πüÊúÉ‰ª§‰∏ã‰∏ÄÂÄãÁé©ÂÆ∂ÁΩ∞ÊäΩ 4 ÂºµÂç°Áâå‰ª•ÂèäË∑≥ÈÅé‰ªñÁöÑÂõûÂêà (Èô§Èùû‰ªñ‰πüÊúâ‰∏ÄÂºµ +4 Âç°Áâå)„ÄÇ ‰Ω†Âè™ÂèØ‰ª•Âú®Êâã‰∏≠ÁöÑÂç°ÁâåÊ≤íÊúâË∑üÊ°åÈù¢‰∏äÁöÑÂç°‰∏ÄÊ®£È°èËâ≤ÁöÑÊôÇÂÄôÊâçÂèØ‰ª•ÁôºÂá∫ +4 Âç°Áâå„ÄÇ Â¶ÇÊûú‰Ω†Ë¶∫ÂæóÂà•‰∫∫Ê≤íÊúâÁÖßË¶èÂÆöÁôºÂá∫ +4 Âç°Áâå, ‰Ω†ÂèØ‰ª•Ë≥™Áñë‰ªñ„ÄÇ","Opr√≥cz mo≈ºliwo≈õci wy≈Ço≈ºenia go w dowolnym momencie i wyboru koloru, wymuszasz graczowi dobranie 4 kart (chyba, ≈ºe ‚Äã‚Äãzagra on kolejnƒÖ kartƒÖ +4). Powiniene≈õ zagraƒá tƒô kartƒô tylko, je≈õli nie masz karty pasujƒÖcej do koloru g√≥rnej karty na stole. Mo≈ºesz zakwestionowaƒá tƒô kartƒô, je≈õli uwa≈ºasz, ≈ºe karta zosta≈Ça niesprawiedliwie zagrana.","B√°rmely sz√≠n≈± k√°rty√°ra kij√°tszhatod ezt a k√°rty√°t, hogy megv√°ltoztasd a sz√≠nt a n√©gy sz√≠n b√°rmelyik√©re. Ezen k√≠v√ºl a k√∂vetkez≈ë j√°t√©kosnak n√©gy k√°rty√°t kell h√∫znia, majd kimarad a k√∂rb≈ël (kiv√©ve ha van neki egy m√°sik +4). Csak akkor szabad ezt a k√°rty√°t kij√°tszani, ha nincs olyan sz√≠n≈± k√°rtya a kezedben, mint amilyen az asztalon van. Ha szerinted helytelen√ºl j√°tszott√°k ki r√°d ezt a k√°rty√°t, ki lehet h√≠vni. ","Rengi d√∂rt renkten herhangi birine deƒüi≈ütirmek i√ßin bu kartƒ± her renkteki kartlar √ºzerinde oynayabilirsiniz. Ayrƒ±ca bir sonraki oyuncuyu 4 kart √ßekmeye ve sƒ±rasƒ±nƒ± ka√ßƒ±rmaya zorlarsƒ±nƒ±z (ba≈üka bir +4 kartƒ±na sahip olmadƒ±k√ßa). Bu kartƒ± sadece masadaki kartƒ±n rengiyle e≈üle≈üen kartƒ±nƒ±z olmadƒ±ƒüƒ±nda oynamalƒ±sƒ±nƒ±z. Size yasadƒ±≈üƒ± olarak oynandƒ±ƒüƒ±nƒ± d√º≈ü√ºn√ºyorsanƒ±z bu karta itiraz etmeniz m√ºmk√ºnd√ºr."},
CARD_PAWN ={"When someone plays a chess card over this card, the previous player draws 1 card.","Quando algu√©m jogar uma pe√ßa de xadrez em cima desta carta, o jogador anterior compra 1 carta.","","–ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –ª–æ–∂–∏—Ç —à–∞—Ö–º–∞—Ç–Ω—É—é –∫–∞—Ä—Ç—É –ø–æ–≤–µ—Ä—Ö —ç—Ç–æ–π –∫–∞—Ä—Ç—ã, –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–≥—Ä–æ–∫ –±–µ—Ä–µ—Ç 1 –∫–∞—Ä—Ç—É.","Cuando alguien juega una pieza de tablero sobre esta carta, el jugador anterior sortea una carta.","Áï∂ÊúâÁé©ÂÆ∂Âú®ÈÄôÂºµÂç°‰πãÂæåÁôºÂá∫Âè¶‰∏ÄÂºµÊ£ãÂ≠êÂç°Áâå, ‰∏ä‰∏ÄÂÄãÁé©ÂÆ∂ÁΩ∞ÊäΩ 1 ÂºµÂç°Áâå„ÄÇ","Gdy kto≈õ zagra figurƒÖ szachowƒÖ na tej karcie, poprzedni gracz dobiera 1 kartƒô.","Ha valaki egy sakk k√°rty√°t j√°tszik erre a k√°rty√°ra, az el≈ëz≈ë j√°t√©kos h√∫z egy k√°rty√°t.","Birisi bu kartƒ±n √ºzerinde satran√ß kartƒ± oynadƒ±ƒüƒ±nda, √∂nceki oyuncu 1 kart √ßeker."},
CARD_BISHOP ={"When someone plays a chess card over this card, they donate 1 random card to the previous player.","Quando algu√©m jogar uma pe√ßa de xadrez em cima desta carta, ele doa uma carta aleat√≥ria para o jogador anterior.","","–ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –ª–æ–∂–∏—Ç —à–∞—Ö–º–∞—Ç–Ω—É—é –∫–∞—Ä—Ç—É –ø–æ–≤–µ—Ä—Ö —ç—Ç–æ–π –∫–∞—Ä—Ç—ã, –æ–Ω –∂–µ—Ä—Ç–≤—É–µ—Ç 1 —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –∏–≥—Ä–æ–∫—É.","Cuando alguien juega una pieza de tablero sobre esta carta,¬†le da una carta aleatoria al jugador anterior.","Áï∂ÊúâÁé©ÂÆ∂Âú®ÈÄôÂºµÂç°‰πãÂæåÁôºÂá∫Âè¶‰∏ÄÂºµÊ£ãÂ≠êÂç°Áâå, ‰ªñÊúÉÊääÈö®Ê©ü‰∏ÄÂºµÊâã‰∏≠ÁöÑÁâåÈÄÅÁµ¶‰∏ä‰∏ÄÂÄãÁé©ÂÆ∂„ÄÇ","Gdy kto≈õ zagra figurƒÖ szachowƒÖ na tej karcie, daje 1 losowƒÖ kartƒô dla poprzedniego gracza.","Ha valaki egy sakk k√°rty√°t j√°tszik erre a k√°rty√°ra, egy v√©letlenszer≈± k√°rty√°t adom√°nyoz az el≈ëz≈ë j√°t√©kosnak.","Birisi bu kartƒ±n √ºzerinde satran√ß kartƒ± oynadƒ±ƒüƒ±nda, √∂nceki oyuncuya 1 rastgele kart baƒüƒ±≈ülar."},
CARD_KNIGHT ={"When someone plays a chess card over this card, the order of play is reversed and the next player draws 1 card and misses their turn.","Quando algu√©m jogar uma pe√ßa de xadrez em cima desta carta, o jogo inverte e o pr√≥ximo jogador compra 1 carta e perde a vez.","","–ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –ª–æ–∂–∏—Ç —à–∞—Ö–º–∞—Ç–Ω—É—é –∫–∞—Ä—Ç—É –ø–æ–≤–µ—Ä—Ö —ç—Ç–æ–π –∫–∞—Ä—Ç—ã, –ø–æ—Ä—è–¥–æ–∫ –∏–≥—Ä—ã –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π, –∏ —Å–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –±–µ—Ä—ë—Ç 1 –∫–∞—Ä—Ç—É –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å–≤–æ–π —Ö–æ–¥.","Cuando alguien juega una pieza de tablero sobre esta carta, el juego se torna de reverso¬†y el sigueinte jugador sortea una carta y pierde su turno.","Áï∂ÊúâÁé©ÂÆ∂Âú®ÈÄôÂºµÂç°‰πãÂæåÁôºÂá∫Âè¶‰∏ÄÂºµÊ£ãÂ≠êÂç°Áâå, ÈÅäÊà≤ÊñπÂêëÂèçËΩâËÄå‰∏î‰∏ã‰∏ÄÂÄãÁé©ÂÆ∂ÁΩ∞ÊäΩ 1 ÂºµÂç°ÂèäÂ§±Âéª‰ªñÁöÑÂõûÂêà„ÄÇ","Gdy kto≈õ zagra figurƒÖ szachowƒÖ na tej karcie, kierunek gry siƒô odwraca, a nastƒôpny gracz dobiera 1 kartƒô i traci swojƒÖ kolej.","Ha valaki egy sakk k√°rty√°t j√°tszik erre a k√°rty√°ra, a k√∂r ir√°nya megfordul, a k√∂vetkez≈ë j√°t√©kos h√∫z egy k√°rty√°t, √©s kimarad a k√∂rb≈ël.","Birisi bu kartƒ±n √ºzerinde bir satran√ß kartƒ± oynadƒ±ƒüƒ±nda, oyun sƒ±rasƒ± tersine √ßevrilir ve bir sonraki oyuncu 1 kart √ßeker ve sƒ±rasƒ±nƒ± ka√ßƒ±rƒ±r."},
CARD_ROOK ={"When someone plays a chess card over this card, the previous player draws 2 cards.","Quando algu√©m jogar uma pe√ßa de xadrez em cima desta carta, o jogador anterior compra 2 cartas.","","–ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –ª–æ–∂–∏—Ç —à–∞—Ö–º–∞—Ç–Ω—É—é –∫–∞—Ä—Ç—É –ø–æ–≤–µ—Ä—Ö —ç—Ç–æ–π –∫–∞—Ä—Ç—ã, –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–≥—Ä–æ–∫ –±–µ—Ä—ë—Ç 2 –∫–∞—Ä—Ç—ã.","Cuando alguien juega una pieza de tablero sobre esta carta, el jugador anterior sortea dos cartas.","Áï∂ÊúâÁé©ÂÆ∂Âú®ÈÄôÂºµÂç°‰πãÂæåÁôºÂá∫Âè¶‰∏ÄÂºµÊ£ãÂ≠êÂç°Áâå, ‰∏ä‰∏ÄÂÄãÁé©ÂÆ∂ÁΩ∞ÊäΩ 2 ÂºµÂç°Áâå„ÄÇ","Gdy kto≈õ zagra figurƒÖ szachowƒÖ na tej karcie, poprzedni gracz dobiera 2 karty.","Ha valaki egy sakk k√°rty√°t j√°tszik erre a k√°rty√°ra, az el≈ëz≈ë j√°t√©kos h√∫z k√©t k√°rty√°t.","Birisi bu kartƒ±n √ºzerinde satran√ß kartƒ± oynadƒ±ƒüƒ±nda, √∂nceki oyuncu 2 kart √ßeker."},
CARD_QUEEN ={"When someone plays a chess card over this card, the previous player will draw cards until they have 10 cards.","Quando algu√©m jogar uma pe√ßa de xadrez em cima desta carta, o jogador anterior compra cartas at√© ter 10 cartas na m√£o.","","–ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –ª–æ–∂–∏—Ç —à–∞—Ö–º–∞—Ç–Ω—É—é –∫–∞—Ä—Ç—É –ø–æ–≤–µ—Ä—Ö —ç—Ç–æ–π –∫–∞—Ä—Ç—ã, –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–≥—Ä–æ–∫ –±—É–¥–µ—Ç –±—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã, –ø–æ–∫–∞ —É –Ω–µ–≥–æ –Ω–µ –±—É–¥–µ—Ç 10 –∫–∞—Ä—Ç.","Cuando alguien juega una pieza de tablero sobre esta carta, el jugador anterior tendr√° que sortear cartas hasta que tenga diez.","Áï∂ÊúâÁé©ÂÆ∂Âú®ÈÄôÂºµÂç°‰πãÂæåÁôºÂá∫Âè¶‰∏ÄÂºµÊ£ãÂ≠êÂç°Áâå,„ÄÄ‰∏ä‰∏ÄÂÄãÁé©ÂÆ∂ÈúÄË¶Å‰∏ÄÁõ¥ÁΩ∞ÊäΩÁõ¥Âà∞‰ªñÊâã‰∏≠Êúâ 10 ÂºµÂç°Áâå„ÄÇ","Gdy kto≈õ zagra figurƒÖ szachowƒÖ na tej karcie, poprzedni gracz dobiera karty, dop√≥ki nie bƒôdzie mia≈Ç ich 10.","Ha valaki egy sakk k√°rty√°t j√°tszik erre a k√°rty√°ra, az el≈ëz≈ë j√°t√©kos addig h√∫z k√°rty√°kat, am√≠g 10 lesz a kez√©ben.","Birisi bu kartƒ±n √ºzerinde satran√ß kartƒ± oynadƒ±ƒüƒ±nda, √∂nceki oyuncu 10 kart alana kadar kart √ßeker."},
CARD_KING ={"When someone plays a chess card over this card, they give all their cards, except one, to the previous player.","Quando algu√©m jogar uma pe√ßa de xadrez em cima desta carta, ele doa todas as cartas, exceto uma, para o jogador anterior.","","–ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –ª–æ–∂–∏—Ç —à–∞—Ö–º–∞—Ç–Ω—É—é –∫–∞—Ä—Ç—É –ø–æ–≤–µ—Ä—Ö —ç—Ç–æ–π –∫–∞—Ä—Ç—ã, –æ–Ω –ø–µ—Ä–µ–¥–∞–µ—Ç –≤—Å–µ —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã, –∫—Ä–æ–º–µ –æ–¥–Ω–æ–π, –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –∏–≥—Ä–æ–∫—É.","Cuando alguien juega una pieza de tablero sobre esta carta, le da todas sus cartas, excepto una, al jugador anterior.","Áï∂ÊúâÁé©ÂÆ∂Âú®ÈÄôÂºµÂç°‰πãÂæåÁôºÂá∫Âè¶‰∏ÄÂºµÊ£ãÂ≠êÂç°Áâå, ‰ªñÊúÉÊääÊâã‰∏äÁöÑÂç°Áâå (Èô§‰∫Ü‰∏ÄÂºµ‰ª•Â§ñ) ÂÖ®ÈÉ®ÈÄÅÁµ¶‰∏ä‰∏ÄÂÄãÁé©ÂÆ∂„ÄÇ","Gdy kto≈õ zagra figurƒÖ szachowƒÖ na tej karcie, oddaje wszystkie swoje karty dla poprzedniego gracza z wyjƒÖtkiem jednej.","Ha valaki egy sakk k√°rty√°t j√°tszik erre a k√°rty√°ra, egy kiv√©tel√©vel a kez√©ben l√©v≈ë √∂sszes k√°rty√°j√°t az el≈ëz≈ë j√°t√©kosnak adja.","Birisi bu kartƒ±n √ºzerinde satran√ß kartƒ± oynadƒ±ƒüƒ±nda, biri hari√ß t√ºm kartlarƒ±nƒ± bir √∂nceki oyuncuya verir."},
CARD_TREASURE ={"When you play this card, you win the game!","Ao jogar esta carta, voc√™ vence o jogo!","","–ö–æ–≥–¥–∞ –≤—ã –ª–æ–∂–∏—Ç–µ —ç—Ç—É –∫–∞—Ä—Ç—É - –≤—ã –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç–µ –∏–≥—Ä—É!","¬°Cuando juegues esta carta ganar√°s el juego!","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°Áâå, ‰Ω†Áõ¥Êé•ÂãùÂá∫!","Kiedy zagrasz tƒÖ kartƒÖ, wygrywasz grƒô!","Ha kij√°tszod ezt a k√°rty√°t, megnyered a j√°t√©kot!","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda oyunu kazanƒ±rsƒ±nƒ±z!"},
CARD_SHIELD ={"This card can protect you against +2 and +4 cards.","Esta carta pode te proteger de +2 e +4.","","–≠—Ç–∞ –∫–∞—Ä—Ç–∞ –º–æ–∂–µ—Ç –∑–∞—â–∏—Ç–∏—Ç—å –≤–∞—Å –æ—Ç +2 –∏ +4","Esta carta te protege contra +2 y +4.","ÈÄôÂºµÂç°‰øùË≠∑‰Ω†‰∏çÂèóÂà∞ +2 Âèä +4 ÁöÑÁΩ∞ÊäΩÊïàÊûú„ÄÇ","Ta karta chroni Ciƒô przed kartami +2 i +4.","Ezzel a k√°rty√°val kiv√©dheted a +2-es √©s +4-es k√°rty√°kat.","Bu kart sizi +2 ve +4 kartlara kar≈üƒ± koruyabilir."},
CARD_MIX1 ={"When you play this card, you reverse the game and the next player misses their turn.","Ao jogar esta carta, inverta o jogo e ent√£o o pr√≥ximo jogador perde a vez.","","–ö–æ–≥–¥–∞ –≤—ã –ª–æ–∂–∏—Ç–µ —ç—Ç—É –∫–∞—Ä—Ç—É, –≤—ã –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç–µ –∏–≥—Ä—É, –∏ —Å–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å–≤–æ–π —Ö–æ–¥.","Cuando juegas esta carta, el juego se reversa y el siguiente jugador pierde su turno.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°Áâå, ‰Ω†ÊîπËÆäÈÅäÊà≤ÊñπÂêë‰ª•Âèä‰∏ã‰∏ÄÂÄãÁé©ÂÆ∂ÊúÉÂ§±Âéª‰ªñÁöÑÂõûÂêà„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ, odwracasz kierunek gry, a nastƒôpny gracz traci swojƒÖ kolej.","Ha kij√°tszod ezt a k√°rty√°t, a k√∂r ir√°nya megfordul, √©s a k√∂vetkez≈ë j√°t√©kos kimarad a k√∂rb≈ël.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, oyunu tersine √ßevirirsiniz ve bir sonraki oyuncu sƒ±ralarƒ±nƒ± ka√ßƒ±rƒ±r."},
CARD_MIX2 ={"When you play this card, you reverse the game and the next player draws 2 cards and misses their turn.","Ao jogar esta carta, inverta o jogo e ent√£o o pr√≥ximo jogador compra 2 cartas e perde a vez.","","–ö–æ–≥–¥–∞ –≤—ã –ª–æ–∂–∏—Ç–µ —ç—Ç—É –∫–∞—Ä—Ç—É, –≤—ã –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç–µ –∏–≥—Ä—É, –∞ —Å–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –±–µ—Ä–µ—Ç 2 –∫–∞—Ä—Ç—ã –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å–≤–æ–π —Ö–æ–¥.","Cuando juegas esta carta, el juego se reversa y el siguiente jugador sortea dos cartas y pierde su turno.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°Áâå, ‰Ω†ÊîπËÆäÈÅäÊà≤ÊñπÂêë‰ª•Âèä‰∏ã‰∏ÄÂÄãÁé©ÂÆ∂ÈúÄË¶ÅÁΩ∞ÊäΩ 2 ÂºµÂç°‰∏¶‰∏îÊúÉÂ§±Âéª‰ªñÁöÑÂõûÂêà„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ, odwracasz kierunek gry, a nastƒôpny gracz dobiera 2 karty i traci swojƒÖ kolej.","Ha kij√°tszod ezt a k√°rty√°t, a k√∂r ir√°nya megfordul, a k√∂vetkez≈ë j√°t√©kos h√∫z 2 k√°rty√°t, √©s kimarad a k√∂rb≈ël.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, oyunu tersine √ßevirirsiniz ve bir sonraki oyuncu 2 kart √ßeker ve sƒ±ralarƒ±nƒ± ka√ßƒ±rƒ±r."},
CARD_MIX3 ={"When you play this card, the next player misses their turn and the subsequent player draws 2 cards and misses their turn.","Ao jogar esta carta, o pr√≥ximo jogador perde a vez e ent√£o o jogador subsequente compra 2 cartas e perde a vez.","","–ö–æ–≥–¥–∞ –≤—ã –ª–æ–∂–∏—Ç–µ —ç—Ç—É –∫–∞—Ä—Ç—É, —Å–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å–≤–æ–π —Ö–æ–¥, –∞ –ø–æ—Å–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –±–µ—Ä–µ—Ç 2 –∫–∞—Ä—Ç—ã –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å–≤–æ–π —Ö–æ–¥.","Cuando juegas esta carta, el siguiente jugador pierde su turno y el siguiente a √©l consecuentemente sortea dos cartas y pierde su turno.","Áï∂‰Ω†ÁôºÂá∫ÈÄôÂç°Áâå, ‰∏ã‰∏ÄÂÄãÁé©ÂÆ∂ÊúÉÂ§±Âéª‰ªñÁöÑÂõûÂêàËÄåÂÜç‰∏ã‰∏ÄÂÄãÁé©ÂÆ∂ÊúÉË¢´ÁΩ∞ÊäΩ 2 ÂºµÂç°‰∏¶‰∏îÂ§±Âéª‰ªñÁöÑÂõûÂêà„ÄÇ","Kiedy zagrasz tƒÖ kartƒÖ, nastƒôpny gracz traci swojƒÖ kolejkƒô, a kolejny gracz dobiera 2 karty i traci swojƒÖ kolej.","Ha kij√°tszod ezt a k√°rty√°t, a k√∂vetkez≈ë j√°t√©kos kimarad a k√∂rb≈ël, √©s az ut√°na k√∂vetkez≈ë j√°t√©kos h√∫z 2 k√°rty√°t, majd szint√©n kimarad a k√∂rb≈ël.","Bu kartƒ± oynadƒ±ƒüƒ±nƒ±zda, bir sonraki oyuncu sƒ±rasƒ±nƒ± ve sonraki oyuncu 2 kart √ßeker ve sƒ±rasƒ±nƒ± ka√ßƒ±rƒ±r."},
HOUSE_DREKKEMAUS ={"Von Drekkemaus","","","","","","","",""},
HOUSE_DREKKEMAUS_DESC ={"He is immune to Thunder cards and he draws cards using the Tracking rule.","Ele √© imune a Trov√µes e compra cartas usando a regra Rastrear.","","–û–Ω –Ω–µ–≤–æ—Å–ø—Ä–∏–∏–º—á–∏–≤ –∫ –ö–∞—Ä—Ç–∞–º –ì—Ä–æ–º–∞ –∏ –±–µ—Ä—ë—Ç –∫–∞—Ä—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª–æ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.","√âl es inmune a las cartas rel√°mpago y el sortea cartas usando la regla de rastreo.","‰ªñÂ∞çÈõ∑ÈõªÊö¥ÊìäÂç°ÁâåÁöÑÊïàÊûúÂÖçÁñ´‰ª•Âèä‰ªñ‰ΩøÁî®\"ËøΩËπ§\"Ë¶èÁü©‰æÜÊäΩÂèñÂç°Áâå„ÄÇ ","Jest odporny na Kartƒô Grzmotu i dobiera karty zgodnie z zasadƒÖ ≈öledzenie.","Nem hat r√° a Mennyd√∂rg√©s K√°rtya, √©s a Nyomk√∂vet√©s szab√°llyal h√∫z k√°rty√°t.","Yƒ±ldƒ±rƒ±m kartlarƒ±ndan muaftƒ±r ve ƒ∞zleme kuralƒ±nƒ± kullanarak kart √ßeker."},
HOUSE_JINGLE ={"Jingle","","","","","","","",""},
HOUSE_JINGLE_DESC ={"He donates two cards instead of one and he draws cards using the Tracking rule.","Ele doa 2 cartas ao inv√©s de uma e compra cartas usando a regra Rastrear.","","–û–Ω –∂–µ—Ä—Ç–≤—É–µ—Ç –¥–≤–µ –∫–∞—Ä—Ç—ã –≤–º–µ—Å—Ç–æ –æ–¥–Ω–æ–π –∏ –±–µ—Ä—ë—Ç –∫–∞—Ä—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª–æ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.","√âl dona dos cartas en vez de una y sortea cartas usando la regla de rastreo.","‰ªñÊúÉÂú®\"ÊçêÁçªÂç°\"Ë¶èÁü©‰∏ãÈÄÅÂá∫ÂÖ©ÂºµÂç°Áâå‰ª•Âèä‰ΩøÁî®\"ËøΩËπ§\"Ë¶èÁü©‰æÜÊäΩÂèñÂç°Áâå„ÄÇ","Przekazuje dwie karty zamiast jednej i dobiera je zgodnie z zasadƒÖ ≈öledzenie. ","Adom√°nyoz√°skor egy k√°rtya helyett kett≈ët adom√°nyoz, √©s a Nyomk√∂vet√©s szab√°llyal h√∫z k√°rty√°t.","Bir yerine iki kart baƒüƒ±≈ülar ve ƒ∞zleme kuralƒ±nƒ± kullanarak kart √ßeker."},
HOUSE_PAPAILLE ={"Papaille","","","","","","","",""},
HOUSE_PAPAILLE_DESC ={"He starts with 9 cards, draws cards using the Fast Drawing rule and cannot receive card donations.","Ele come√ßa com 9 cartas, compra cartas usando Compra R√°pida e n√£o pode receber doa√ß√µes.","","–û–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç —Å 9 –∫–∞—Ä—Ç, –±–µ—Ä—ë—Ç –∫–∞—Ä—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª–æ –ë—ã—Å—Ç—Ä–æ–π –í–∑—è—Ç–∫–∏, –∏ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç.","√âl empieza con nueve cartas, surtea cartas usando la regla de Sorteo r√°pdio y no puede recibir donaciones.","‰ªñËµ∑ÂàùÊâã‰∏≠ÁöÑÂç°ÁâåÊúÉÊòØ 9 Âºµ, ‰ΩøÁî®\"Âø´ÈÄüÊäΩÂèñ\"Ë¶èÁü©ÊäΩÂç°ÁâåËÄå‰∏î‰∏çÊúÉÊé•Êî∂ÊçêÁçªÁöÑÂç°Áâå„ÄÇ","Rozpoczyna z 9 kartami, dobiera karty zgodnie z zasadƒÖ Szybkie Dobieranie i nie otrzymuje darowanych kart.","9 k√°rty√°val kezdi a j√°t√©kot, a Gyors H√∫z√°s szab√°llyal h√∫z k√°rty√°t, √©s nem fogad el adom√°nyt.","9 kartla ba≈ülar, Hƒ±zlƒ± Kart √áekme kuralƒ±nƒ± kullanarak kart √ßeker ve kart baƒüƒ±≈ülarƒ± alamaz."},
HOUSE_CHARLOTTE ={"Charlotte","","","","","","","",""},
HOUSE_CHARLOTTE_DESC ={"She draws cards using the Tracking rule and she cannot be eliminated.","Ela compra cartas usando a regra Rastrear e ela n√£o pode ser eliminada.","","–û–Ω–∞ –±–µ—Ä—ë—Ç –∫–∞—Ä—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª–æ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –∏ –µ—ë –Ω–µ–ª—å–∑—è –∏—Å–∫–ª—é—á–∏—Ç—å.","Ella sortea cartas usando la regla de rastreo y no puede ser eliminada.","Â•π‰ΩøÁî®\"ËøΩËπ§\"Ë¶èÁü©ÊäΩÂèñÂç°ÁâåËÄå‰∏î‰∏çÊúÉË¢´Ê∑òÊ±∞„ÄÇ","Dobiera karty zgodnie z zasadƒÖ ≈öledzenie i nie mo≈ºe zostaƒá wyeliminowana.","A Nyomk√∂vet√©s szab√°llyal h√∫z k√°rty√°t, √©s nem lehet kiejteni a j√°t√©kb√≥l.","Takip kuralƒ±nƒ± kullanarak kart √ßeker ve elenemez."},
HOUSE_ELISAH ={"Elisah","","","","","","","",""},
HOUSE_ELISAH_DESC ={"She starts with 3 Curse Cards and she is immune to Curses.","Ela come√ßa com 3 Cartas da Maldi√ß√£o e ela √© imune a Maldi√ß√µes.","","–û–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å 3 –ü—Ä–æ–∫–ª—è—Ç—ã—Ö –ö–∞—Ä—Ç –∏ –Ω–µ—É—è–∑–≤–∏–º–∞ –¥–ª—è –ü—Ä–æ–∫–ª—è—Ç–∏–π.","Ella empieza con tres cartas de maldici√≥n y es inmune a las maldiciones.","Â•πËµ∑ÂàùÊâã‰∏≠ÊúÉÊúâ3ÂºµË©õÂííÂç°ÁâåËÄåÂ•πÊòØÂ∞çË©õÂííÂÖçÁñ´„ÄÇ","Rozpoczyna z 3 Kartami Przekle≈Ñstwa i jest na nie odporna.","3 √Åtok K√°rty√°val kezdi a j√°t√©kot, √©s nem hatnak r√° az √°tkok.","3 Lanetli Kart ile ba≈ülar ve Lanetlerden etkilenmez."},
HOUSE_BUFFY ={"Buffy","","","","","","","",""},
HOUSE_BUFFY_DESC ={"She's still learning to play, so she starts with 5 cards.","Ela est√° aprendendo a jogar, por isso come√ßa com 5 cartas.","","–û–Ω–∞ –≤—Å–µ –µ—â—ë —É—á–∏—Ç—Å—è –∏–≥—Ä–∞—Ç—å, –ø–æ—ç—Ç–æ–º—É –Ω–∞—á–∏–Ω–∞–µ—Ç —Å 5 –∫–∞—Ä—Ç.","Ella est√° aprendiendo a jugar, por lo que empieza con cinco cartas.","Â•πÈÇÑÂú®Â≠∏ÁøíË¶ÅÊÄéÈ∫ºÁé©, ÊâÄ‰ª•Â•πËµ∑ÂàùÂè™Êúâ 5 ÂºµÂç°Áâå„ÄÇ","Ona uczy siƒô gry, wiƒôc zaczyna z 5 kartami.","M√©g tanulja a j√°t√©kot, ez√©rt 5 k√°rty√°val kezd.","Hala oynamayƒ± √∂ƒüreniyor, bu y√ºzden 5 kartla ba≈ülƒ±yor."},
HOUSE_SNOWY ={"Snowy","","","","","","","",""},
HOUSE_SNOWY_DESC ={"If eliminated, he distributes his cards to the other players.","Se ele for eliminado, ele distribuir√° as cartas dele para os outros jogadores.","","–í —Å–ª—É—á–∞–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –æ–Ω —Ä–∞–∑–¥–∞–µ—Ç —Å–≤–æ–∏ –∫–∞—Ä—Ç—ã –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º.","Si √©l es eliminado, distribuir√° sus cartas a los¬†dem√°s jugadores.","Â¶ÇÊûúË¢´Ê∑òÊ±∞‰∫Ü, ‰ªñÊúÉÊää‰ªñÂâ©‰∏ãÁöÑÂç°ÁâåÂàÜÁôºÁµ¶ÊâÄÊúâÁé©ÂÆ∂„ÄÇ","Je≈õli zostanie wyeliminowany, rozdaje swoje wszystkie karty innym graczom.","Ha kiesik a j√°t√©kb√≥l, sz√©tosztja a k√°rty√°it a t√∂bbi j√°t√©kosnak.","Elendiƒüinde kartlarƒ±nƒ± diƒüer oyunculara daƒüƒ±tƒ±r."},
HOUSE_ICEMICE ={"Icemice","","","","","","","",""},
HOUSE_ICEMICE_DESC ={"Whenever he draws cards, another random player will draw 1 card.","Sempre que ele comprar cartas, outro jogador aleat√≥rio compra 1 carta.","","–í—Å—è–∫–∏–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –æ–Ω –±–µ—Ä—ë—Ç –∫–∞—Ä—Ç—ã, –¥—Ä—É–≥–æ–π —Å–ª—É—á–∞–π–Ω—ã–π –∏–≥—Ä–æ–∫ –±–µ—Ä—ë—Ç –æ–¥–Ω—É –∫–∞—Ä—Ç—É.","Siempre que sortee cartas, un jugador aleatorio sortear√° una carta.","ÊØèÁï∂‰ªñÊäΩÂç°, Âè¶‰∏ÄÂÄãÈö®Ê©üÁöÑÁé©ÂÆ∂‰πüÊúÉË¢´ÁΩ∞ÊäΩ 1 ÂºµÂç°„ÄÇ","Za ka≈ºdym razem, gdy dobierze karty, inny losowy gracz dobierze 1 kartƒô.","Valah√°nyszor k√°rty√°t h√∫z, egy v√©letlenszer≈± j√°t√©kos is h√∫z egy k√°rty√°t.","Ne zaman kart √ßekse, ba≈üka bir rastgele oyuncu 1 kart √ßeker."},
HOUSE_ELISE ={"Elise","","","","","","","",""},
HOUSE_ELISE_DESC ={"She plays fair.","Ela joga de forma justa.","","–û–Ω–∞ –∏–≥—Ä–∞–µ—Ç —á–µ—Å—Ç–Ω–æ.","Ella juega limpiamente.","Â•πÊúÉÂÖ¨Âπ≥ÁöÑÁé©„ÄÇ","Ona gra fair.","Rendesen j√°tszik.","Adil oynuyor."},
HOUSE_NINGUEM ={"Ninguem_v2","","","","","","","",""},
HOUSE_NINGUEM_DESC ={"I don't know how I got here...","N√£o sei como isto veio parar aqui...","","","","Êàë‰∏çÁü•ÈÅìÂÆÉÊÄéÈ∫ºÊúÉÂú®ÈÄô...","","Nem tudom hogy ker√ºlt ez ide...","Buraya nasƒ±l geldiƒüimi bilmiyorum ..."},
HOUSE_DERP ={"Derp","","","","","","","",""},
HOUSE_DERP_DESC ={"He won't let you win!","Ele n√£o deixar√° voc√™ vencer!","","","","‰ªñ‰∏çÊúÉËÆì‰Ω†Ë¥è!","","Nem fog nyerni hagyni!","Kazanmana izin vermiyor!"},
HOUSE_RED ={"Love?","Amor?","Amour?","–õ—é–±–æ–≤—å?","¬øAmor?","ÊÑõ?","Mi≈Ço≈õƒá?","Szeretet?","A≈ük?"},
HOUSE_RED_DESC ={"When Charlotte plays a red numerical card, she donates a numerical card to a random player.","Quando Charlotte joga um n√∫mero vermelho, ela doa uma carta num√©rica para algu√©m.","Lorsque Charlotte joue une carte num√©rique rouge, elle donne une carte num√©rique √† un joueur al√©atoire.","–ö–æ–≥–¥–∞ Charlotte –ª–æ–∂–∏—Ç –∫—Ä–∞—Å–Ω—É—é —Ü–∏—Ñ—Ä–æ–≤—É—é –∫–∞—Ä—Ç—É, –æ–Ω–∞ –∂–µ—Ä—Ç–≤—É–µ—Ç —Ü–∏—Ñ—Ä–æ–≤—É—é –∫–∞—Ä—Ç—É —Å–ª—É—á–∞–π–Ω–æ–º—É –∏–≥—Ä–æ–∫—É.","Cuando Charlotte juega una carta num√©rica roja, le dona una carta a un jugador aleatorio.","Áï∂ Charlotte ÁôºÂá∫Á¥ÖËâ≤ÁöÑÊï∏Â≠óÂç°Áâå, Â•πÊúÉÂêëÈö®Ê©ü‰∏ÄÂÄãÁé©ÂÆ∂ÊçêÁçª‰∏ÄÂºµÊï∏Â≠óÂç°Áâå„ÄÇ","Kiedy Charlotte zagra czerwonƒÖ kartƒÖ z liczbƒÖ, przekazuje kartƒô z liczbƒÖ losowemu graczowi.","Ha Charlotte piros sz√°mk√°rty√°t j√°tszik, eladom√°nyoz egy sz√°mk√°rty√°t egy v√©letlenszer≈± j√°t√©kosnak.","Charlotte kƒ±rmƒ±zƒ± bir sayƒ±sal kart oynadƒ±ƒüƒ±nda, rastgele bir oyuncuya sayƒ±sal bir kart baƒüƒ±≈ülar."},
HOUSE_BLUE ={"Peace?","Paz?","Paix?","–ú–∏—Ä?","¬øPaz?","ÂíåÂπ≥?","Pok√≥j?","B√©ke?","Barƒ±≈ü?"},
HOUSE_BLUE_DESC ={"When Charlotte plays a blue numerical card, every other player can only play numerical cards during the next turn.","Quando Charlotte joga um n√∫mero azul, os outros podem jogar apenas cartas num√©ricas no pr√≥ximo turno.","Lorsque Charlotte joue une carte num√©rique bleue, tous les autres joueursWhen Charlotte plays a blue numerical card, tous les autres joueurs ne peuvent jouer que des cartes num√©riques pendant le tour suivant.","–ö–æ–≥–¥–∞ Charlotte –ª–æ–∂–∏—Ç —Å–∏–Ω—é—é —Ü–∏—Ñ—Ä–æ–≤—É—é –∫–∞—Ä—Ç—É, –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –∏–≥—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞.","Cuando Charlotte juega una carta num√©rica azul, todos los dem√°s jugadores solo podr√°n jugar cartas num√©ricas en su siguiente turno.","Áï∂ Charlotte ÁôºÂá∫ËóçËâ≤ÁöÑÊï∏Â≠óÂç°Áâå, ÊâÄÊúâÁé©ÂÆ∂‰∏ã‰∏ÄÂõûÂêàÂè™ÂèØ‰ª•ÁôºÂá∫Êï∏Â≠óÂç°Áâå„ÄÇ","Kiedy Charlotte zagra niebieskƒÖ kartƒÖ z liczbƒÖ, ka≈ºdy gracz musi zagraƒá numerycznƒÖ kartƒÖ podczas nastƒôpnej tury .","Ha Charlotte k√©k sz√°mk√°rty√°t j√°tszik, a t√∂bbi j√°t√©kos egy k√∂rig csak sz√°mk√°rty√°t j√°tszhat.","Charlotte mavi bir sayƒ±sal kart oynadƒ±ƒüƒ±nda, diƒüer t√ºm oyuncular bir sonraki turda yalnƒ±zca sayƒ±sal kartlarƒ± oynayabilir."},
HOUSE_YELLOW ={"Rage?","Ira?","","–Ø—Ä–æ—Å—Ç—å?","¬øRabia?","ÁãÇÊö¥?","W≈õciek≈Ço≈õƒá?","Harag?",""},
HOUSE_YELLOW_DESC ={"When Charlotte plays a yellow numerical card, another random player draws 1-3 cards.","Quando Charlotte joga um n√∫mero amarelo, outro jogador aleat√≥rio compra de 1 a 3 cartas.","Lorsque Charlotte joue une carte num√©rique jaune, un joueur au hasard tire 1-3 cartes.","–ö–æ–≥–¥–∞ Charlotte –ª–æ–∂–∏—Ç –∂—ë–ª—Ç—É—é —Ü–∏—Ñ—Ä–æ–≤—É—é –∫–∞—Ä—Ç—É, –¥—Ä—É–≥–æ–π —Å–ª—É—á–∞–π–Ω—ã–π –∏–≥—Ä–æ–∫ –±–µ—Ä—ë—Ç 1-3 –∫–∞—Ä—Ç—ã.","Cuando Charlotte juega una carta num√©rica amarilla, un jugador aleatorio recibe de una a tres cartas.","Áï∂ Charlotte ÁôºÂá∫ÈªÉËâ≤ÁöÑÊï∏Â≠óÂç°Áâå, Èö®Ê©ü‰∏ÄÂÄãÁé©ÂÆ∂ÁΩ∞ÊäΩ 1-3 ÂºµÂç°Áâå„ÄÇ","Kiedy Charlotte zagra ≈º√≥≈ÇtƒÖ kartƒÖ, losowy gracz dobiera 1-3 karty.","Ha Charlotte s√°rga sz√°mk√°rty√°t j√°tszik, egy v√©letlenszer≈± j√°t√©kos h√∫z 1-3 k√°rty√°t.","Charlotte sarƒ± bir sayƒ±sal kart oynadƒ±ƒüƒ±nda, ba≈üka bir rastgele oyuncu 1-3 kart √ßeker."},
HOUSE_GREEN ={"Equality?","Igualdade?","√âgalit√©?","–†–∞–≤–µ–Ω—Å—Ç–≤–æ?","¬øIgualdad?","Âπ≥Á≠â?","R√≥wno≈õƒá?","Egyenl≈ës√©g?","E≈üitlik?"},
HOUSE_GREEN_DESC ={"When Charlotte plays a green numerical card, her number of cards will adjust to be equal to the player's with the least cards.","Quando Charlotte joga um n√∫mero verde, ela fica com o mesmo n√∫mero de cartas de quem est√° vencendo.","Lorsque Charlotte joue une carte num√©rique verte, son nombre de cartes s'ajustera pour √™tre √©gal √† celui du joueur ayant le moins de cartes.","–ö–æ–≥–¥–∞ Charlotte –ª–æ–∂–∏—Ç –∑–µ–ª—ë–Ω—É—é —Ü–∏—Ñ—Ä–æ–≤—É—é –∫–∞—Ä—Ç—É, –µ—ë –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç –±—É–¥–µ—Ç —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ, —á—Ç–æ–±—ã –±—ã—Ç—å —Ä–∞–≤–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–∞—Ä—Ç.","Cuando Charlotte juega una carta num√©rica verde, su n√∫mero de cartas se ajustar√° para ser igual al del jugador con menos cartas.","Áï∂ Charlotte ÁôºÂá∫Á∂†Ëâ≤ÁöÑÊï∏Â≠óÂç°Áâå, Â•πÁöÑÂç°ÁâåÊï∏ÁõÆÊúÉË™øÊï¥Âà∞Á≠âÊñºÁé©ÂÆ∂‰∏≠ÊìÅÊúâÊúÄÂ∞ëÂç°ÁâåÁöÑÊï∏ÁõÆ„ÄÇ","Kiedy Charlotte zagra zielonƒÖ numerycznƒÖ kartƒÖ, jej liczba zostanie dostosowana tak by byƒá r√≥wna graczowi z najmniejszƒÖ ilo≈õciƒÖ kart. ","Ha Charlotte z√∂ld sz√°mk√°rty√°t j√°tszik, annyi k√°rty√°t h√∫z vagy dob el, hogy annyi legyen a kez√©ben, mint amennyi a legkevesebb k√°rty√°val rendelkez≈ë j√°t√©kosnak van.","Charlotte ye≈üil bir sayƒ±sal kart oynadƒ±ƒüƒ±nda, kart sayƒ±sƒ± oyuncunun en az kartƒ± olan oyuncuya e≈üit olacak ≈üekilde ayarlanƒ±r."},
CURSE_ANVIL ={"When someone draws a card, they draw an additional one.","Quem comprar cartas comprar√° 1 carta a mais","Lorsque quelqu'un tire une carte, il en tire une autre.","–ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –±–µ—Ä—ë—Ç –∫–∞—Ä—Ç—É, –æ–Ω –±–µ—Ä–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é.","Aquel que sortee cartas tambi√©n sortear√° una m√°s","Áï∂Êúâ‰∫∫ÊäΩÂç°, Ë¶ÅÈ°çÂ§ñÂÜçÁΩ∞ÊäΩ‰∏ÄÂºµ„ÄÇ","Kto dobiera karty, dobiera o 1 kartƒô wiƒôcej","Ha valaki k√°rty√°t h√∫zna, h√∫znia kell m√©gegyet.","Birisi bir kart √ßektiƒüinde, ba≈üka bir kart √ßeker."},
CURSE_ICE ={"No one can draw cards.","Ningu√©m pode comprar cartas","Personne ne peut tirer de cartes.","–ù–∏–∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –±—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã.","No podr√° sortear cartas","Ê≤íÊúâ‰∫∫ËÉΩÊäΩÂç°„ÄÇ„ÄÄ","Nikt nie mo≈ºe dobraƒá kart","Senki sem h√∫zhat k√°rty√°kat.","Kimse kart √ßekemez."},
CURSE_SHOE ={"When someone plays an action card, they draw 1 card.","Quem jogar carta de a√ß√£o compra 1 carta","Quand quelqu'un joue une carte action, il tire 1 carte.","–ö–æ–≥–¥–∞ –∫—Ç–æ-—Ç–æ –∫–ª–∞–¥—ë—Ç –∫–∞—Ä—Ç—É –¥–µ–π—Å—Ç–≤–∏—è, –æ–Ω –±–µ—Ä—ë—Ç –æ–¥–Ω—É –∫–∞—Ä—Ç—É.","El que juega una acci√≥n recibir√° una carta","Áï∂Êúâ‰∫∫ÁôºÂá∫Ë°åÂãïÂç°Áâå, ‰ªñÂÄëÈúÄË¶ÅÁΩ∞ÊäΩ‰∏ÄÂºµÂç°„ÄÇ","Kto zagra kartƒÖ akcji dobiera jednƒÖ kartƒô","Ha valaki akci√≥k√°rty√°t j√°tszik, h√∫znia kell 1 k√°rty√°t","Birisi bir aksiyon kartƒ± oynadƒ±ƒüƒ±nda 1 kart √ßeker."},
CURSE_THORN ={"Anyone that draws cards will be eliminated.","Quem comprar cartas ser√° eliminado","Quiconque tire des cartes sera √©limin√©.","–õ—é–±–æ–π, –∫—Ç–æ –±–µ—Ä—ë—Ç –∫–∞—Ä—Ç—ã, –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω.","Aquel que sortee cartas ser√° eliminado","‰ªª‰Ωï‰∫∫Ë¶ÅÊäΩÂç°ÁöÑË©±Â∞±ÊúÉË¢´Ê∑òÊ±∞„ÄÇ","Kto dobierze karty zostanie wyeliminowany","Aki k√°rty√°t h√∫z, az kiesik a j√°t√©kb√≥l.","Kart √ßeken herkes elenecek."},
CURSE_TIME ={"Everyone has only 3 seconds to play.","S√£o apenas 3 segundos para jogar","Tout le monde n'a que 3 secondes pour jouer.","–£ –≤—Å–µ—Ö –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ 3 —Å–µ–∫—É–Ω–¥—ã, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å.","Todos los jugadores solo tienen tres segundos para jugar","ÊâÄÊúâ‰∫∫Âè™Êúâ 3 ÁßíÂõûÂêàÊôÇÈñì„ÄÇ","Wszyscy gracze majƒÖ tylko 3 sekundy by zagraƒá","Mindenkinek csak 3 m√°sodperce van j√°tszani.","Herkesin oynamasƒ± i√ßin sadece 3 saniyesi vardƒ±r."},
CURSE_POISON ={"Everyone becomes confused.","Todos ficam confusos","Tout le monde devient confus.","–í—Å–µ —Å–º—É—â–∞—é—Ç—Å—è.","Todos se confunden","ÊâÄÊúâ‰∫∫ÈÉΩË¢´Âõ∞ÊÉë‰∫Ü„ÄÇ","Wszyscy gracze sƒÖ zdezorientowani","Mindenki zavarodott lesz.","Herkesin kafasƒ± karƒ±≈üƒ±r."},
DICE_1 ={"Take 1 card from the previous player.","Pegue 1 carta do jogador anterior.","Prenez 1 carte du joueur pr√©c√©dent.","–í–æ–∑—å–º–∏—Ç–µ 1 –∫–∞—Ä—Ç—É –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞.","Toma una carta del jugador anterior.","Âæû‰∏ä‰∏ÄÂÄãÁé©ÂÆ∂Êâã‰∏≠Êãø‰∏ÄÂºµÂç°„ÄÇ","We≈∫ 1 kartƒô od poprzedniego gracza.","Vegy√©l el 1 k√°rty√°t az el≈ëz≈ë j√°t√©kost√≥l.","√ñnceki oyuncudan 1 kart alƒ±n."},
DICE_2 ={"Draw 2 cards.","Compre 2 cartas.","Tirez 2 cartes.","–í–æ–∑—å–º–∏—Ç–µ 2 –∫–∞—Ä—Ç—ã.","Sortea dos cartas.","ÊäΩÂèñ 2 ÂºµÂç°„ÄÇ","Dobierz 2 karty.","H√∫zz 2 k√°rty√°t.","2 kart √ßek."},
DICE_3 ={"Discard cards until you have 3 cards in your hand.","Descarte cartas at√© ficar com 3 cartas na m√£o.","Jetez des cartes jusqu'√† ce que vous en ayez 3 dans votre main.","–°–±—Ä–∞—Å—ã–≤–∞–π—Ç–µ –∫–∞—Ä—Ç—ã, –ø–æ–∫–∞ –≤ –≤–∞—à–µ–π —Ä—É–∫–µ –Ω–µ –æ–∫–∞–∂–µ—Ç—Å—è 3 –∫–∞—Ä—Ç—ã.","Descarta cartas hasta que tengas tres cartas en tu baraja.","‰∏ÄÁõ¥‰∏üÊ£ÑÂç°ÁâåÁõ¥Âà∞Êâã‰∏≠Âè™Ââ© 3 ÂºµÂç°„ÄÇ","Odrzuƒá karty, dop√≥ki nie masz 3 kart w rƒôce","Dobj el k√°rty√°kat a kezedb≈ël, am√≠g csak 3 k√°rtya marad.","Elinizde 3 kart olana kadar kartlarƒ± atƒ±n."},
DICE_4 ={"Play a 4 or draw 4 cards.","Jogue um 4 ou compre 4 cartas.","Jouez un 4 ou tirez 4 cartes.","–°—ã–≥—Ä–∞–π—Ç–µ 4 –∏–ª–∏ –≤–æ–∑—å–º–∏—Ç–µ 4 –∫–∞—Ä—Ç—ã.","Juega un +4 o sortea cuatro cartas.","ÁôºÂá∫Êï∏Â≠ó 4 ÁöÑÂç°Áâå‰∏çÁÑ∂ÁΩ∞ÊäΩ 4 ÂºµÂç°„ÄÇ","Zagraj kartƒÖ o numerze 4 lub dobierz 4 karty.","J√°tssz ki egy 4-es sz√°mk√°rty√°t, vagy h√∫zz 4 k√°rty√°t.","4 oynayƒ±n veya 4 kart √ßekin."},
DICE_5 ={"Hand out 5 cards to the other players.","Distribua 5 cartas para os outros jogadores.","Distribuez 5 cartes aux autres joueurs.","–†–∞–∑–¥–∞–π—Ç–µ 5 –∫–∞—Ä—Ç –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º.","Barajea cinco cartas a los otros jugadores.","ÂàÜÁôº 5 ÂºµÂç°ÁâåÁµ¶ÂÖ∂‰ªñÁé©ÂÆ∂„ÄÇ","Rozdaj 5 kart innym graczom.","Adj oda 5 k√°rty√°t a t√∂bbi j√°t√©kosnak.","Diƒüer oyunculara 5 kart daƒüƒ±tƒ±n."},
DICE_6 ={"Draw cards until you have 6 cards in your hand.","Compre cartas at√© ficar com 6 cartas na m√£o.","Tirez des cartes jusqu'√† ce que vous en ayez 6 dans votre main.","–ë–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—ã, –ø–æ–∫–∞ –≤ –≤–∞—à–µ–π —Ä—É–∫–µ –Ω–µ –±—É–¥–µ—Ç 6 –∫–∞—Ä—Ç.","Sortea cartas hasta que tengas seis cartas en tu baraja.","‰∏ÄÁõ¥ÊäΩÁâåÁõ¥Âà∞Êâã‰∏≠Êúâ 6 ÂºµÂç°„ÄÇ","WyciƒÖgaj karty, dop√≥ki nie masz 6 kart w rƒôce.","H√∫zz k√°rty√°kat, am√≠g 6 k√°rtya lesz a kezedben.","Elinizde 6 kart olana kadar kartlarƒ± √ßizin."},
FORBIDEN_ODD ={"Unable to win with odd numerical cards.","Proibido vencer com cartas √çMPARES","Impossible de gagner avec des cartes impaires.","–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–∏–≥—Ä–∞—Ç—å —Å –Ω–µ—á—ë—Ç–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∫–∞—Ä—Ç–∞–º–∏.","Prohibido ganar con cartas IMPARES","‰∏çËÉΩÂ§†Áî®ÂñÆÊï∏Êï∏Â≠óÂç°ÁâåÂãùÂá∫„ÄÇ","Zabronione jest wygrywanie kartami o numerach nieparzystych.","Nem lehet p√°ratlan sz√°mmal nyerni.","Tek sayƒ±lƒ± kartlarla kazanƒ±lamƒ±yor."},
FORBIDEN_EVEN ={"Unable to win with even numerical cards.","Proibido vencer com cartas PARES","Impossible de gagner avec des cartes paires.","–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–∏–≥—Ä–∞—Ç—å –¥–∞–∂–µ —Å –ø–æ–º–æ—â—å—é —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∫–∞—Ä—Ç.","Prohibido ganar con cartas PARES","‰∏çËÉΩÂ§†Áî®ÈõôÊï∏Êï∏Â≠óÂç°ÁâåÂãùÂá∫„ÄÇ","Zabronione jest wygrywanie kartami o numerach parzystych.","Nem lehet p√°ros sz√°mmal nyerni.","Sayƒ±sal kartlarla kazanƒ±lamƒ±yor."},
UNLOCK_RULE ={"Win a match with this rule to unlock it!","Ven√ßa uma partida com essa regra para desbloque√°-la!","Gagnez une partie avec cette r√®gle pour d√©verouiller!","–í—ã–∏–≥—Ä–∞–π—Ç–µ –º–∞—Ç—á —Å —ç—Ç–∏–º –ø—Ä–∞–≤–∏–ª–æ–º, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ!","¬°Gana una partida con esta regla para desbloquearla!","Âú®Áî®ÈÄôË¶èÁü©ÁöÑ‰∏ÄÂ†¥ÈÅäÊà≤Ë£°ÂãùÂá∫ÂæåËß£ÈéñÂÆÉ!","Wygraj rundƒô z danƒÖ zasadƒÖ aby jƒÖ odblokowaƒá!","Nyerj meg egy j√°t√©kot ezzel a szab√°llyal, hogy feloldd magadnak!","Kilidini a√ßmak i√ßin bu kuralla bir ma√ß kazanƒ±n!"},
TEAM_RULE ={"Win 10 matches with this rule to unlock it!","Ven√ßa 10 jogos com esta regra pra desbloque√°-la.","Gagnez 10 parties avec cette r√®gle pour d√©verouiller!","–í—ã–∏–≥—Ä–∞–π—Ç–µ 10 –º–∞—Ç—á–µ–π —Å —ç—Ç–∏–º –ø—Ä–∞–≤–∏–ª–æ–º, —á—Ç–æ–±—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ!","¬°Gana diez partidas con esta regla para desbloquearla!","Âú® 10 Â†¥Áî®ÈÄôË¶èÁü©ÁöÑÈÅäÊà≤Ë£°ÂãùÂá∫ÂæåËß£ÈéñÂÆÉ!","Wygraj 10 rund z tƒÖ zasadƒÖ, aby jƒÖ odblokowaƒá!","Nyerj meg 10 j√°t√©kot ezzel a szab√°llyal, hogy feloldd magadnak!","Kilidini a√ßmak i√ßin bu kuralla 10 ma√ß kazanƒ±n!"},
ACTION_DRAW ={"Draw cards","Comprar cartas","Tirer des cartes","–ë—Ä–∞—Ç—å –∫–∞—Ä—Ç—ã","Sortear cartas","ÊäΩÂç°","Dobierz karty","K√°rtyah√∫z√°s","Kartlarƒ± √ßek"},
ACTION_DISCARD ={"Discard cards","Descartar cartas","D√©fausser des cartes","–°–±—Ä–æ—Å–∏—Ç—å –∫–∞—Ä—Ç—ã","Descartar cartas","Ê£ÑÂç°","Odrzuƒá karty","K√°rtyaeldob√°s","Kartlarƒ± sil"},
ACTION_DONATE ={"Donate cards","Doar cartas","Donner des cartes","–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—ã","Donar cartas","ÊçêÁçªÂç°Áâå","Podaruj kartƒô","K√°rtyaadom√°nyoz√°s","Baƒüƒ±≈ü kartlarƒ±"},
ACTION_SHOW ={"Show card","Mostrar carta","Montrer les cartes","–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É","Mostrar carta","È°ØÁ§∫Âç°Áâå","Poka≈º kartƒô","K√°rtya megmutat√°sa","≈ûov Kartƒ±"},
ACTION_SKIP ={"Lose a turn","Perder a vez","Rater un tour","–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–≤–æ—Ä–æ—Ç","Perder turno","ÈåØÈÅé‰∫ÜÂõûÂêà","Straƒá kolejkƒô","K√∂rb≈ël kimarad√°s","Bir tur kaybet"},
ACTION_SWAP ={"Exchange places","Trocar de lugar","√âchanger les places","–û–±–º–µ–Ω –º–µ—Å—Ç–∞–º–∏","Intercambiar lugares","‰∫§Êèõ‰∫Ü‰ΩçÂ≠ê","Wymie≈Ñ miejsca","Helycsere","Deƒüi≈üim yerleri"},
ACTION_TRADE ={"Swap cards","Trocar de cartas","√âchanger les cartes","–û–±–º–µ–Ω—è—Ç—å –∫–∞—Ä—Ç—ã","Cambiar cartas","‰∫§ÊèõÂç°Áâå","Zmie≈Ñ karty","K√°rty√°k cser√©l√©se","Kartlarƒ± takas"},
ACTION_ELIMINATE ={"Eliminate","Eliminar","√âliminer","–£—Å—Ç—Ä–∞–Ω–∏—Ç—å","Eliminar","Ê∑òÊ±∞","Eliminacja","Kiejt√©s","Eleme"},
WHO_YOURSELF ={"yourself","voc√™ mesmo","vous-m√™me","—Å–∞–º","t√∫ mismo","‰Ω†","siebie","te","kendin"},
WHO_NEXT ={"next player","pr√≥ximo jogador","joueur suivant","—Å–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫","siguiente jugador","‰∏ã‰∏ÄÂÄãÁé©ÂÆ∂","nastƒôpny gracz","a k√∂vetkez≈ë j√°t√©kos","sonraki oyuncu"},
WHO_PREVIOUS ={"previous player","jogador anterior","joueur pr√©c√©dent","–ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–≥—Ä–æ–∫","anterior jugador","‰∏ä‰∏ÄÂÄãÁé©ÂÆ∂","poprzedni gracz","az el≈ëz≈ë j√°t√©kos","√∂nceki oyuncu"},
WHO_ALL ={"all players","todos os jogadores","tous les joueurs","–≤—Å–µ –∏–≥—Ä–æ–∫–∏","todos los jugadores","ÊâÄÊúâÁé©ÂÆ∂","wszyscy gracze","minden j√°t√©kos","t√ºm oyuncular"},
WHO_OTHERS ={"other players","os outros jogadores","autres joueurs","–¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏","otros jugadores","ÂÖ∂‰ªñÁé©ÂÆ∂","inni gracze","m√°s j√°t√©kosok","diƒüer oyuncular"},
WHO_CHOOSE ={"a player of your choice","um jogador a sua escolha","un joueur de votre choix","–∏–≥—Ä–æ–∫ –ø–æ –≤–∞—à–µ–º—É –≤—ã–±–æ—Ä—É","un jugador a tu elecci√≥n","‰Ω†ÈÅ∏ÊìáÁöÑ‰∏ÄÂÄãÁé©ÂÆ∂","gracz twojego wyboru","egy √°ltalad v√°lasztott j√°t√©kos","se√ßtiƒüiniz bir oyuncu"},
WHO_RANDOM ={"a random player","um jogador aleat√≥rio","un joueur au hasard","—Å–ª—É—á–∞–π–Ω—ã–π –∏–≥—Ä–æ–∫","un jugador aleatorio","Èö®Ê©ü‰∏ÄÂÄãÁé©ÂÆ∂","losowy gracz","egy v√©letlenszer≈± j√°t√©kos","rastgele bir oyuncu"},
WHO_RANDOM2 ={"two random players","dois jogadores aleat√≥rios","deux joueurs au hasard","–¥–≤–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞","dos jugadores aleatorios","Èö®Ê©üÂÖ©ÂÄãÁé©ÂÆ∂","dw√≥ch losowych graczy","k√©t v√©letlenszer≈± j√°t√©kos","iki rastgele oyuncu"},
WHO_RANDOM3 ={"three random players","tr√™s jogadores aleat√≥rios","trois joueurs au hasard","—Ç—Ä–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞","tres jugadores aleatorios","Èö®Ê©ü‰∏âÂÄãÁé©ÂÆ∂","trzech losowych graczy","h√°rom v√©letlenszer≈± j√°t√©kos","√º√ß rastgele oyuncu"},
AMOUNT_X ={"%s card(s)","%s carta(s)","carte(s) de %s","%s –∫–∞—Ä—Ç(—ã)","%s cartas","%s ÂºµÂç°","%s karta(y)","%s k√°rtya","%s kart(lar)"},
AMOUNT_RANGE ={"%s-%s cards","de %s a %s cartas","cartes de %s-%s","%s-%s –∫–∞—Ä—Ç—ã","%s-%s cartas","%s-%s ÂºµÂç°","%s-%s kart","%s-%s k√°rtya","%s-%s kart"},
AMOUNT_UNTIL ={"until to have %s card(s)","at√© ter %s carta(s)","","–ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç %s –∫–∞—Ä—Ç(—ã)","hasta tener %s cartas","Áõ¥Âà∞Êúâ %s ÂºµÂç°","a≈º do %s kart","am√≠g %s k√°rtya van","%s karta sahip olana kadar"},
AMOUNT_RETURN ={"return of action %s","sa√≠da da a√ß√£o %s","","–≤–æ–∑–≤—Ä–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è %s","retorno de acci√≥n¬†%s","Êí§Èä∑Ë°åÂãï %s","wr√≥ƒá do akcji %s","a %s akci√≥ visszat√©r√©se","eylem d√∂n√º≈ü√º %s"},
CONDITION_ANY ={"any card","qualquer carta","n'importe quelle carte","–ª—é–±–∞—è –∫–∞—Ä—Ç–∞","cualquier carta","‰ªª‰Ωï‰∏ÄÂºµÂç°Áâå","dowolna karta","b√°rmely k√°rtya","herhangi bir kart"},
CONDITION_NUMBER ={"numerical cards","cartas num√©ricas","cartes num√©riques","—Ü–∏—Ñ—Ä–æ–≤—ã–µ –∫–∞—Ä—Ç—ã","cartas num√©ricas","Êï∏Â≠óÂç°Áâå","karty ponumerowane","sz√°mk√°rty√°k","sayƒ±sal kartlar"},
CONDITION_ACTION ={"action cards","cartas de a√ß√£o","cartes action","–∫–∞—Ä—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π","cartas de acci√≥n","Ë°åÂãïÂç°Áâå","karty akcji","akci√≥k√°rty√°k","aksiyon kartlarƒ±"},
CONDITION_RED ={"red cards","cartas vermelhas","cartes rouges","–∫—Ä–∞—Å–Ω—ã–µ –∫–∞—Ä—Ç—ã","cartas rojas","Á¥ÖËâ≤Âç°Áâå","czerwone karty","piros k√°rty√°k","kƒ±rmƒ±zƒ± kartlar"},
CONDITION_BLUE ={"blue cards","cartas azuis","cartes bleues","—Å–∏–Ω–∏–µ –∫–∞—Ä—Ç—ã","cartas azules","ËóçËâ≤Âç°Áâå","niebieskie karty","k√©k k√°rty√°k","mavi kartlar"},
CONDITION_YELLOW ={"yellow cards","cartas amarelas","cartes jaunes","–∂—ë–ª—Ç—ã–µ –∫–∞—Ä—Ç—ã","cartas amarillas","ÈªÉËâ≤Âç°Áâå","≈º√≥≈Çte karty","s√°rga k√°rty√°k","sarƒ± kartlar"},
CONDITION_GREEN ={"green cards","cartas verdes","cartes vertes","–∑–µ–ª—ë–Ω—ã–µ –∫–∞—Ä—Ç—ã","cartas verdes","Á∂†Ëâ≤Âç°Áâå","zielone karty","z√∂ld k√°rty√°k","ye≈üil kartlar"},
CONDITION_WILD ={"wild cards","curingas","cartes noires","—á—ë—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã","cartas comod√≠n","ÊèõËâ≤Âç°Áâå","karty wild","Sz√≠nv√°lt√≥ k√°rty√°k","renk kartlarƒ±"},
CONDITION_SAME ={"cards of the same color as this","cartas da mesma cor que esta","cartes de la m√™me couleur que celle-ci","–∫–∞—Ä—Ç—ã —Ç–æ–≥–æ –∂–µ —Ü–≤–µ—Ç–∞, —á—Ç–æ –∏ —ç—Ç–æ—Ç","cartas del mismo color que √©ste","Ë∑üÈÄô‰∏ÄÊ®£È°èËâ≤ÁöÑÂç°Áâå","karty z takim samym kolorem jak to","ugyanolyan sz√≠n≈± k√°rty√°k, mint ez","bununla aynƒ± renkteki kartlar"},
ADD_ACTION ={"add action","adicionar a√ß√£o","ajouter une action","–¥–æ–±–∞–≤–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ","a√±adir acci√≥n","Â¢ûÂä†Ë°åÂãï","dodaj akcjƒô","akci√≥ hozz√°ad√°sa","aksyon ekle"},
CUSTOM_DESC ={"Description","Descri√ß√£o","Description","–û–ø–∏—Å–∞–Ω–∏–µ","Descripci√≥n","ÊèèËø∞","Opis","Le√≠r√°s","A√ßƒ±klama"},
CUSTOM_DESC_INFO ={"Describe what the card does","Descreva o que a carta faz","D√©crit ce que la carte fait","–û–ø–∏—Å—ã–≤–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–∞—Ä—Ç–∞","Describe que hace la carta","ÊèèËø∞Âç°ÁâåÊúÉÊúâ‰ªÄÈ∫ºÂäüËÉΩ","Opisz co karta robi","√çrd le, hogy mit tud a k√°rtya","Kartƒ±n ne yaptƒ±ƒüƒ±nƒ± a√ßƒ±klayƒ±n"},
CUSTOM_COPIES ={"Copies of each color","C√≥pias de cada cor","Copies de chaque couleur","–ö–æ–ø–∏–∏ –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∞","Copia de cada color","ÊØè‰∏ÄÂÄãÈ°èËâ≤ÁöÑË§áÊú¨","Kopie ka≈ºdego koloru","Minden sz√≠nb≈ël darab","Her rengin kopyalarƒ±"},
CUSTOM_EDIT ={"Edit","Editar","Modifier","–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å","Editar","Á∑®ËºØ","Edytuj","Szerkeszt√©s","D√ºzenle"},
CUSTOM_ERROR ={"There was an error in editing","Houve um erro ao editar","Il y a eu une erreur dans les modifications","–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏","Hubo un error al editar","Á∑®ËºØ‰∏≠ÊúâÈåØË™§","WystƒÖpi≈Ç b≈ÇƒÖd w edycji","Hiba t√∂rt√©nt szerkeszt√©skor","D√ºzenleme sƒ±rasƒ±nda bir hata olu≈ütu"},
CUSTOM ={"Customize card","Customizar carta","Personnaliser la carte","–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞—Ä—Ç—É","Personalizar carta","Ëá™ÂÆöÁæ©Âç°Áâå","Dostosuj kartƒô","K√°rtya testreszab√°sa","Kartƒ± √∂zelle≈ütirin"},
CUSTOM_LOAD ={"Load card","Carregar carta","Charger une carte","–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç—É","Cargar carta","Âä†ËºâÂç°Áâå","Za≈Çaduj kartƒô","K√°rtya bet√∂lt√©se","Kartƒ± y√ºkle"},
CUSTOM_SAVE ={"Copy card","Copiar carta","Copier la carte","–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É","Copiar carta","Ë§áË£ΩÂç°Áâå","Kopiuj kartƒô","K√°rtya m√°sol√°sa","Kartƒ± kopyala"},
CUSTOM_CODE ={"Save this code to share your card: <vp>%s","Guarde este c√≥digo para compartilhar sua carta: <vp>%s","Sauvegardez ce code pour partager votre carte: <vp>%s","–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π –∫–∞—Ä—Ç–æ–π: <vp>%s","Guarda este c√≥digo para compartir tu carta: <vp>%s","ÊääÈÄôÂÄã‰ª£Á¢ºÂÑ≤Â≠ò‰∏ã‰æÜ‰ª•ÂàÜ‰∫´‰Ω†ÁöÑÂç°Áâå: <vp>%s","Zapisz ten kod, aby udostƒôpniƒá swojƒÖ kartƒô: <vp>%s","Mentsd le ezt a k√≥dot, hogy megoszthasd a k√°rty√°d: <vp>%s","Kartƒ±nƒ±zƒ± payla≈ümak i√ßin bu kodu kaydedin: <vp>%s"},
TOURNAMENT_HELP ={"The winner of a match earns points from the opponents' remaining cards. Whoever reaches %s points wins the tournament!\n\nNumerical cards: Their face value.\nAction cards: 20 points.\nWild cards: 50 points.","O vencedor da partida ganha pontos das cartas que restaram nas m√£os dos advers√°rios. Quem atingir %s pontos vence o torneio!\n\nCartas num√©ricas: seus valores de face\nCartas de a√ß√£o: 20 pontos\nCartas curinga: 50 pontos","Le vainqueur d'un match gagne des points sur les cartes restantes de l'adversaire. Celui qui atteint %s points gagne la partie! Cartes num√©riques: leur valeur est sur la carte. Cartes Action: 20 points. Cartes Noires: 50 points.","–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –º–∞—Ç—á–∞ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–∫–∏ —Å –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–∞—Ä—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤. –¢–æ—Ç, –∫—Ç–æ –Ω–∞–±–µ—Ä—ë—Ç %s –æ—á–∫–æ–≤, –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç —Ç—É—Ä–Ω–∏—Ä!\n\n–¶–∏—Ñ—Ä–æ–≤—ã–µ –∫–∞—Ä—Ç—ã: –ò—Ö –Ω–æ–º–∏–Ω–∞–ª.\n–ö–∞—Ä—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π: 20 –æ—á–∫–æ–≤.\n–ß—ë—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã: 50 –æ—á–∫–æ–≤.","El ganador de una partida gana puntuaci√≥n por las cartas restantes de los oponentes. ¬°Cuando un jugador alcanza %s puntos, se corona ganador!\n\nCartas num√©ricas: El n√∫mero que representan\nCartas de acci√≥n:¬†20 puntos\nCarta comod√≠n: 50 puntos.","Âú®ÊØèÂ†¥ÈÅäÊà≤‰∏≠ÂãùÂá∫ÁöÑÁé©ÂÆ∂ÊúÉÂæûÂ∞çÊâãÂâ©‰∏ãÁöÑÂç°Áâå‰∏≠Ë¥èÂæóÂàÜÊï∏„ÄÇ Âè™Ë¶ÅÊúâ‰∫∫Ë¥èÂæó %s ÂàÜ‰ªñÂ∞±ÊúÉÂãùÂá∫ËÅØË≥Ω!\n\nÊï∏Â≠óÂç°: Êï∏Â≠óÈù¢ÂÄºÂ∞±ÊòØÂàÜÊï∏„ÄÇ\nË°åÂãïÂç°: 20 ÂàÜ„ÄÇ\nÊèõËâ≤Âç°: 50 ÂàÜ„ÄÇ","Zwyciƒôzca meczu zdobywa punkty od przeciwnik√≥w z pozosta≈Çych kart. Kiedy gracz osiƒÖgnie %s punkt√≥w, zostanie zwyciƒôzcƒÖ!\n\nPonumerowane karty: zgodnie z ich numeracjƒÖ\nKarty Akcji: 20 points\nKarty Wild: 50 points","A j√°t√©k nyertese √∂sszes√≠tett pontsz√°mot kap az ellenfelei h√°tral√©v≈ë k√°rty√°inak √©rt√©k√©b≈ël. Aki el√©ri a(z) %s pontot megnyeri a bajnoks√°got!\n\nSz√°mk√°rty√°k: A rajtuk l√©v≈ë sz√°m√©rt√©k.\nAkci√≥k√°rty√°k: 20 pont.\nSz√≠nv√°lt√≥ k√°rty√°k: 50 pont. ","Bir ma√ßƒ±n galibi, rakiplerin kalan kartlarƒ±ndan puan kazanƒ±r. %s puana ula≈üan herkes turnuvayƒ± kazanƒ±r!\n\nNumerik kartlar: Y√ºz deƒüeri.\nAksiyon kartlarƒ±: 20 puan.\nWild kartlarƒ±: 50 puan."},
TOURNAMENT_HELP2 ={"When a match ends, the players earn points from their own remaining cards. Whoever reaches %s points gets eliminated.\n\nNumerical cards: Their face value.\nAction cards: 20 points.\nWild cards: 50 points.","Quando uma partida terminar, os jogadores recebem pontos das suas pr√≥prias cartas. Quem atingir %s pontos ser√° eliminado do torneio.\n\nCartas num√©ricas: seus valores de face\nCartas de a√ß√£o: 20 pontos\nCartas curinga: 50 pontos","Quand une partie se termine, les joueurs gagnent des points √† partir de leurs propres cartes restantes. Celui qui atteint %s points sera √©limin√©. Cartes num√©riques: leur valeur est sur la carte. Cartes Action: 20 points. Cartes Noires: 50 points.","–ö–æ–≥–¥–∞ –º–∞—Ç—á –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –∏–≥—Ä–æ–∫–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –æ—á–∫–∏ —Å–æ —Å–≤–æ–∏—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∫–∞—Ä—Ç. –¢–æ—Ç, –∫—Ç–æ –Ω–∞–±–µ—Ä—ë—Ç %s –æ—á–∫–æ–≤, –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω.\n\n–¶–∏—Ñ—Ä–æ–≤—ã–µ –∫–∞—Ä—Ç—ã: –ò—Ö –Ω–æ–º–∏–Ω–∞–ª.\n–ö–∞—Ä—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π: 20 –æ—á–∫–æ–≤.\n–î–∏–∫–∏–µ –∫–∞—Ä—Ç—ã: 50 –æ—á–∫–æ–≤.","El ganador de una partida gana puntuaci√≥n por las cartas restantes de los oponentes. ¬°Cuando un jugador alcanza %s puntos, se corona ganador!\n\nCartas num√©ricas: El n√∫mero que representan\nCartas de acci√≥n:¬†20 puntos\nCarta comod√≠n: 50 puntos.","Áï∂‰∏ÄÂ†¥ÈÅäÊà≤ÁµêÊùü, Áé©ÂÆ∂ÊúÉÂæûËá™Â∑±Ââ©‰∏ãÁöÑÂç°Áâå‰∏≠ÂæóÂà∞ÂàÜÊï∏„ÄÇ Âè™Ë¶ÅÊúâ‰∫∫ÈÅîÂà∞ %s ÂàÜÂ∞±ÊúÉË¢´Ê∑òÊ±∞„ÄÇ\n\nÊï∏Â≠óÂç°: Êï∏Â≠óÈù¢ÂÄºÂ∞±ÊòØÂàÜÊï∏„ÄÇ\nË°åÂãïÂç°: 20 ÂàÜ„ÄÇ\nÊèõËâ≤Âç°: 50 ÂàÜ„ÄÇ","Po zako≈Ñczeniu rundy gracze otrzymajƒÖ punkty z pozosta≈Çych kart. Kiedy gracz osiƒÖgnie %s punkt√≥w, zostanie wyeliminowany!\n\nPonumerowane karty: zgodnie z ich numeracjƒÖ\nKarty Akcji: 20 points\nKarty Wild: 50 points","A j√°t√©k v√©g√©n a j√°t√©kosok pontokat kapnak a h√°tral√©v≈ë k√°rty√°ik √©rt√©k√©b≈ël. Aki el√©ri a(z) %s pontot kiesik a bajnoks√°gb√≥l.\n\nSz√°mk√°rty√°k: A rajtuk l√©v≈ë sz√°m√©rt√©k.\nAkci√≥k√°rty√°k: 20 pont.\nSz√≠nv√°lt√≥ k√°rty√°k: 50 pont. ","Bir ma√ß sona erdiƒüinde, oyuncular kalan kartlarƒ±ndan puan kazanƒ±rlar. %s puana ula≈üan herkes elenir.\n\ nNumerik kartlar: Y√ºz deƒüeri.\nAksiyon kartlarƒ±: 20 puan.\nWild kartlarƒ±: 50 puan."},
TOURNAMENT_EDIT ={"Edit score","Editar pontua√ß√£o","Modifier le score","–ò–∑–º–µ–Ω–∏—Ç—å —Å—á—ë—Ç","Editar puntuaci√≥n","Á∑®ËºØÂàÜÊï∏","Edytuj wynik","Pontsz√°m m√≥dos√≠t√°sa","Skoru d√ºzenle"},
HOUSE_FIXED ={"Fixed rules","Regras fixas","R√®gles fixes","–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞","Reglas Fijas","Âõ∫ÂÆöË¶èÂâá","Popraw zasady","Megszabott szab√°lyok","Sabit kurallar"},
ROOM_OPTIONS ={"Room options","Op√ß√µes da Sala","Options de salon","–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–Ω–∞—Ç—ã","Opciones de la sala","ÊàøÈñìÈÅ∏È†Ö","Opcje pokoju","Szoba be√°ll√≠t√°sok","Oda se√ßenekleri"},
CLEAR_HOUSE ={"Reset rules","Limpar regras","R√©initialiser les r√®gles","–°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞","Resetear Reglas","ÈáçÁΩÆË¶èÁü©","Zrestartuj zasady","Szab√°lyok alap√©rtelmez√©se","Kurallarƒ± sƒ±fƒ±rla"},
HOUSE_NEW_PLAYER ={"Allow new players","Permitir novos jogadores","Autoriser les nouveaux joueurs","–†–∞–∑—Ä–µ—à–∏—Ç—å –Ω–æ–≤—ã–º –∏–≥—Ä–æ–∫–∞–º","Permitir nuevos jugadores","ÂáÜË®±Êñ∞Áé©ÂÆ∂Âä†ÂÖ•","Wpuszczaƒá nowych graczy","√öj j√°t√©kosok enged√©lyez√©se","Yeni oyunculara izin ver"},
HOUSE_FIXED_CHAIRS ={"Fixed chairs","Cadeiras fixas","Chaises fixes","–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–µ—Å–ª–∞","Sillas Fijas","Âõ∫ÂÆöÂ∫ß‰Ωç","Poprawiono fotele","Foglalt √ºl≈ëhelyek","Sabit sandalyeler"},
HOUSE_AUTOSTART ={"Start automatically","Iniciar automaticamente","D√©marrer automatiquement","–ù–∞—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏","Empezar autom√°ticamente","Ëá™ÂãïÈñãÂßãÈÅäÊà≤","Automatyczny start","Automatikus indul√°s","Otomatik ba≈ülat"},
SCORE_BY ={"Score","Pontua√ß√£o","","–°—á—ë—Ç","Puntuaci√≥n","ÂàÜÊï∏","Punkty","Pontsz√°m","Puan"},
SCORE_1 ={"from opponents' cards","das cartas dos advers√°rios","des cartes de l'adversaire","—Å –∫–∞—Ä—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞","de las cartas de los oponentes","ÂæûÂ∞çÊâãÂâ©‰∏ãÁöÑÂç°Áâå‰∏≠Ë®àÁÆó","z kart przeciwnika","az ellenfelek k√°rty√°ib√≥l","rakiplerin kartlarƒ±ndan"},
SCORE_2 ={"from own cards","das pr√≥prias cartas","de ses propres cartes","—Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç","de las cartas propias","ÂæûËá™Â∑±Ââ©‰∏ãÁöÑÂç°Áâå‰∏≠Ë®àÁÆó","z w≈Çasnych kart","a saj√°t k√°rty√°idb√≥l","Kendi kartlarƒ±ndan"},
SCORE_3 ={"1 point per victory","1 ponto por vit√≥ria","1 point par victoire","1 –æ—á–∫–æ –∑–∞ –ø–æ–±–µ–¥—É","un punto por victoria","ÊØèÊ¨°ÂãùÂá∫Â∞±ÂæóÂà∞ 1 ÂàÜ","1 punkt do zwyciƒôstwa","1 pont gy≈ëzelmenk√©nt","Zafer ba≈üƒ±na 1 puan"},
RESET_SCORE ={"Reset score","Zerar pontua√ß√£o","R√©initialiser le score","–°–±—Ä–æ—Å–∏—Ç—å —Å—á—ë—Ç","resetear puntuaci√≥n","ÈáçÁΩÆÂàÜÊï∏","Restartuj punkty","Pontsz√°m alap√©rtelmez√©se","Skoru sƒ±fƒ±rla"},
YES ={"yes","sim","oui","–¥–∞","s√≠","ÊòØ","tak","igen","Evet"},
NO ={"no","n√£o","non","–Ω–µ—Ç","no","‰∏çÊòØ","nie","nem","Hayƒ±r"},
COMMANDS ={"See commands","Ver comandos","Voir les commandes","–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥—ã","Ver comandos","Êü•ÁúãÊåá‰ª§","Zobacz komendy","Parancsok mutat√°sa","Komutlara bakƒ±n"},
PARTY_ROOM ={"Make your room!","Crie sua sala!","Cr√©ez votre salon!","–°–¥–µ–ª–∞–π —Å–≤–æ—é –∫–æ–º–Ω–∞—Ç—É!","¬°Haz tu sala!","ÂâµÂª∫Ëá™Â∑±ÁöÑÊàøÈñì!","Zr√≥b sw√≥j pok√≥j!","K√©sz√≠tsd el a szob√°d!","Odanƒ± yap!"},
COMMAND_START ={"start the round manually","inicia a partida manualmente","d√©marrer la partie manuellement","–Ω–∞—á–∞—Ç—å —Ä–∞—É–Ω–¥ –≤—Ä—É—á–Ω—É—é","comienza la ronda manualmente","ÊâãÂãïÈñãÂßãÈÅäÊà≤","manualny start rundy","j√°t√©k k√©zi ind√≠t√°sa","raundu elle ba≈ülat"},
COMMAND_NEW ={"start a new round","inicia uma nova partida","d√©marrer une nouvelle partie","–Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥","inicia una nueva ronda","ÈñãÂßãÊñ∞‰∏ÄËº™ÈÅäÊà≤","start nowej rundy","√∫j k√∂r ind√≠t√°sa","yeni bir raunt ba≈üla"},
COMMAND_MAP ={"put a specific map","coloca um mapa espec√≠fico","jouer une carte sp√©cifique","–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–∞—Ä—Ç—É","pone un mapa en espec√≠fico","Áî®ÊåáÂÆöÁöÑÂúñ","w≈ÇƒÖcza konkretnƒÖ mapƒô","megadott p√°lya berak√°sa","belirli bir harita koy"},
COMMAND_RESET ={"reset the room score","zera a pontua√ß√£o da sala","r√©initialiser le score du salon","—Å–±—Ä–æ—Å–∏—Ç—å —Å—á—ë—Ç –∫–æ–º–Ω–∞—Ç—ã","resetea la puntuaci√≥n en la sala","ÈáçË®≠ÊàøÈñìÂàÜÊï∏","restartuje punkty w pokoju","a szoba pontsz√°m√°nak lenull√°z√°sa","oda puanƒ±nƒ± sƒ±fƒ±rla"},
COMMAND_KICK ={"kick a player from the round","tira um jogador da partida","√©jecter un joueur de la partie","–≤—ã–≥–Ω–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ —Ä–∞—É–Ω–¥–∞","expulsa a un jugador de la ronda","ÊääÁé©ÂÆ∂Âæû‰∏ÄÂ±ÄÈÅäÊà≤‰∏≠Ë∏¢Èô§","wyrzuca gracza z tej rundy","j√°t√©kos kir√∫g√°sa a j√°t√©kb√≥l","turdan bir oyuncu vur"},
COMMAND_BAN ={"ban a player from the room","bane um jogador da sala","bannir un joueur de la partie","–∑–∞–±–∞–Ω–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ","sanciona a un jugador de la sala","ÊääÁé©ÂÆ∂ÂæûÊàøÈñìË£° ban Êéâ","banuje gracza w tym pokoju","j√°t√©kos kiz√°r√°sa a szob√°b√≥l","oyuncuyu odadan yasakla"},
COMMAND_UNBAN ={"unban a player","desbane um jogador","retirer le ban d'un joueur","—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞","remueve la sanci√≥n a un jugador","Ëß£Èô§Ë¢´ ban ‰∫ÜÁöÑÁé©ÂÆ∂","odbanowywuje gracza","j√°t√©kos kiz√°r√°s√°nak felold√°sa","oyuncunun yasaƒüƒ±nƒ± kaldƒ±r"},
COMMAND_ADM ={"give/revoke admin powers to a player","d√°/tira poderes de administrador para um jogador","donner/retirer le pouvoir d'administrateur √† un joueur","–¥–∞—Ç—å / –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–ª–Ω–æ–º–æ—á–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞","da/remueve poderes de administrador a un jugador","Áµ¶‰∫à/Êí§Èä∑ Áé©ÂÆ∂ÊàøÈñìÁÆ°ÁêÜËÉΩÂäõ","daje/wycofuje admina graczowi","admin k√©pess√©gek ad√°sa/elv√©tele j√°t√©kosnak","bir oyuncuya y√∂netici yetkileri verme/iptal etme"},
COMMAND_CHAIR ={"put a player on a chair manually","coloca um jogador em uma cadeira manualmente","d√©placer manuellement un joueur sur une chaise","–ø–æ—Å–∞–¥–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –Ω–∞ –∫—Ä–µ—Å–ª–æ –≤—Ä—É—á–Ω—É—é","pone a un jugador manualmente en un asiento","ÊâãÂãïÊääÁé©ÂÆ∂ÂÆâÊéíÂà∞Â∫ß‰Ωç‰∏ä","umieszcza gracza w fotelu manualnie","j√°t√©kos k√©zi le√ºltet√©se","oyuncuyu manuel olarak sandalyeye oturtmak"},
COMMAND_PW ={"equal to /pw","igual ao /pw","√©quivaut √† /pw","—Ä–∞–≤–Ω–æ /pw","pone contrase√±a a la sala","Ë∑ü /pw Áî®ÈÄî‰∏ÄÊ®£","jak /pw","ugyanaz mint a /pw","odaya ≈üifre koy /pw"},
COMMAND_SPECTATOR ={"allows you to view the cards of every player, but you can't play","permite ver as cartas de todos os jogadores, mas voc√™ n√£o pode jogar","vous permet de voir les cartes de chaque joueur, mais vous ne pouvez pas jouer","–ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞—Ä—Ç—ã –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –Ω–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å","deja mirar las cartas de todos los jugadores, no podr√°s jugar con el comando activo","ÂáÜË®±‰Ω†ÂèØ‰ª•Êü•ÁúãÊâÄÊúâÁé©ÂÆ∂Êâã‰∏≠ÁöÑÂç°Áâå, ‰ΩÜÊòØ‰Ω†‰∏çËÉΩÂä†ÂÖ•ÈÅäÊà≤","pozwala obserwowaƒá karty wszystkich graczy, ale nie mo≈ºna graƒá","l√°thatod m√°sok k√°rty√°it, de te magad nem j√°tszhatsz","her oyuncunun kartlarƒ±nƒ± g√∂rmenizi saƒülar, ancak oynayamazsƒ±nƒ±z"},
PASSWORD ={"Password","Senha","Mot de passe","–ü–∞—Ä–æ–ª—å.","Contrase√±a","ÂØÜÁ¢º","Has≈Ço","Jelsz√≥","≈ûifre"},
PASSWORD_REMOVED ={"Password disabled.","Senha desativada.","Mot de passe d√©sactiv√©.","–ü–∞—Ä–æ–ª—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.","Contrase√±a desactivada","ÂØÜÁ¢ºËß£Èô§‰∫Ü„ÄÇ","Wy≈ÇƒÖczone has≈Ço","Jelsz√≥ kikapcsolva.","≈ûifre devre dƒ±≈üƒ±."},
MANAGE_OWNER ={"%s is the room owner!","%s √© o dono da sala!","%s est le ma√Ætre du salon!","%s –≤–ª–∞–¥–µ–ª–µ—Ü –∫–æ–º–Ω–∞—Ç—ã!","%s es el due√±o de la sala!","%s ÊòØÊàø‰∏ª!","%s jest w≈Ça≈õcicielem pokoju.","%s a szoba tulajdonosa!","%s oda sahibi!"},
MANAGE_ADM ={"%s is now room manager.","%s agora √© gerenciador da sala.","%s est maintenant ma√Ætre du salon.","%s —Å–µ–π—á–∞—Å –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–Ω–∞—Ç—ã.","%s ahora es administrador de la sala.","%s ÁèæÂú®ÊòØÊàøÈñìÁÆ°ÁêÜÂì°„ÄÇ","%s jest teraz pokojowym menad≈ºerem.","%s mostm√°r szobakezel≈ë.","%s ≈üimdi oda y√∂neticisidir."},
MANAGE_ADM_REMOVE ={"%s is not room manager anymore.","%s n√£o √© mais gerenciador da sala.","%s n'est plus ma√Ætre du salon.","%s –±–æ–ª—å—à–µ –Ω–µ –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–Ω–∞—Ç—ã.","%s ya no es m√°s administador.","%s ‰∏çÂÜçÊòØÊàøÈñìÁÆ°ÁêÜÂì°‰∫Ü„ÄÇ","%s nie jest ju≈º menad≈ºerem.","%s m√°r nem szobakezel≈ë.","%s artƒ±k oda y√∂neticisi deƒüil."},
MANAGE_KICK ={"%s kicked from round.","%s kickado da partida.","%s a √©t√© √©ject√© de la partie.","%s –≤—ã–≥–Ω–∞–ª–∏ –∏–∑ —Ä–∞—É–Ω–¥–∞.","%s ha sido expulsado de la ronda.","%s ÂæûÈÅäÊà≤‰∏≠Ë¢´Ë∏¢Èô§‰∫Ü„ÄÇ","%s zosta≈Ç wyrzucony z bie≈ºƒÖcej rundy.","%s kir√∫gva a j√°t√©kb√≥l.","%s turdan atƒ±ldƒ±."},
MANAGE_BAN ={"%s banned from room.","%s banido da sala.","%s a √©t√© banni du salon.","%s –∑–∞–±–∞–Ω–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ.","%s ha sido sancionado de la sala.","%s ÂæûÊàøÈñì‰∏≠Ë¢´Ë∏¢Èô§‰∫Ü„ÄÇ","%s zosta≈Ç zbanowany w tym pokoju.","%s kitiltva a szob√°b√≥l.","%s odadan yasaklandƒ±."},
MANAGE_UNBANED ={"%s unbanned from room.","%s desbanido da sala.","%s n'est plus banni du salon.","%s –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –≤ –∫–æ–º–Ω–∞—Ç–µ.","Se le ha removido la sanci√≥n a %s de la sala.","%s ÁöÑ ban Ëß£Èô§‰∫Ü„ÄÇ","%s zosta≈Ç odbanowany w tym pokoju.","%s kitilt√°sa feloldva.","%s odadan yasaƒüƒ±n kaldƒ±rƒ±ldƒ±."},
UNO_FAIL ={"You did not say UNO!","Voc√™ n√£o disse UNO!","Vous n'avez pas dit UNO!","–í—ã –Ω–µ —Å–∫–∞–∑–∞–ª–∏ –£–ù–û!","¬°No dijiste UNO!","‰Ω†Ê≤íÊúâË™™ UNO!","Nie powiedzia≈Çe≈õ UNO!","Nem mondt√°l UNO-t!","UNO demedin!"},
DRAW_TWO ={"Discard a +2 or draw %s cards!","Descarte um +2 ou compre %s cartas!","D√©faussez un +2 ou tirez %s cartes!","–°–±—Ä–æ—Å—å—Ç–µ +2 –∏–ª–∏ –≤–æ–∑—å–º–∏—Ç–µ %s –∫–∞—Ä—Ç(—ã)!","¬°Descarta un +2 o toma %s cartas!","ÁôºÂá∫ +2 Âç°ÁâåÊàñÊòØÁΩ∞ÊäΩ %s ÂºµÂç°!","Odrzuƒá +2 lub dobierz %s kart!","J√°tssz ki egy +2-t vagy h√∫zz %s k√°rty√°t!"," +2 atƒ±n veya %s kart √ßekin!"},
DRAW_FOUR ={"Discard a +4, challenge or draw %s cards!","Descarte um +4, desafie ou compre %s cartas!","D√©faussez un +2, d√©fiez, ou tirez %s cartes!","–°–±—Ä–æ—Å—å—Ç–µ +4, –±—Ä–æ—Å—å—Ç–µ –≤—ã–∑–æ–≤ –∏–ª–∏ –≤–æ–∑—å–º–∏—Ç–µ %s –∫–∞—Ä—Ç(—ã)!","¬°Descarta un +4, desaf√≠a o toma %s cartas! ","ÁôºÂá∫ +4 Âç°Áâå, Ë≥™Áñë ÊàñÊòØÁΩ∞ÊäΩ %s ÂºµÂç°!","Odrzuƒá +4, wyzwanie lub dobierz %s kart!","J√°tssz ki egy +4-et, h√≠vd ki az el≈ëz≈ë j√°t√©kost vagy h√∫zz %s k√°rty√°t!","Bir +4 atƒ±n, itiraz edin veya %s kart √ßekin!"},
DRAW_FOUR_ANTICHALLENGE ={"Discard a +4 or draw %s cards!","Descarte um +4 ou compre %s cartas!","D√©faussez un +4 ou tirez %s cartes!","–°–±—Ä–æ—Å—å—Ç–µ +4 –∏–ª–∏ –≤–æ–∑—å–º–∏—Ç–µ %s –∫–∞—Ä—Ç(—ã)!","¬°Descarta un +4 o toma %s cartas!","ÁôºÂá∫ +4 Âç°ÁâåÊàñÊòØÁΩ∞ÊäΩ %s ÂºµÂç°!","Odrzuƒá +4 lub dobierz %s kart!","J√°tssz ki egy +4-et vagy h√∫zz %s k√°rty√°t!","Bir +4 atƒ±n veya %s kart √ßekin!"},
DRAW_PLUS ={"Discard a card with + or draw %s cards!","Descarte uma carta com + ou compre %s cartas!","D√©faussez une carte avec un + ou tirez %s cartes!","–°–±—Ä–æ—Å—å—Ç–µ –∫–∞—Ä—Ç—É —Å + –∏–ª–∏ –≤–æ–∑—å–º–∏—Ç–µ %s –∫–∞—Ä—Ç(—ã)!","¬°Descarta una carta con + o toma %s cartas!","ÁôºÂá∫Â∏∂ + ËôüÁöÑÂç°ÊàñÊòØÁΩ∞ÊäΩ %s ÂºµÂç°!","Odrzuƒá kartƒô z + lub dobierz %s kart!","J√°tssz ki egy k√°rty√°t + szimb√≥lummal vagy h√∫zz %s k√°rty√°t!"," + ƒ∞≈üaretli bir kartƒ± atƒ±n veya %s kart √ßekin!"},
DRAW_PLUS_FOUR ={"Discard a card with +, challenge or draw %s cards!","Descarte uma carta com +, desafie ou compre %s cartas!","D√©faussez une carte avec un +, d√©fiez, ou tirez %s cartes!","–°–±—Ä–æ—Å—å—Ç–µ –∫–∞—Ä—Ç—É —Å +, –±—Ä–æ—Å—å—Ç–µ –≤—ã–∑–æ–≤ –∏–ª–∏ –≤–æ–∑—å–º–∏—Ç–µ %s –∫–∞—Ä—Ç(—ã)!","¬°Descarta una carta con +, desaf√≠a o toma %s cartas!","ÁôºÂá∫Â∏∂ + ËôüÁöÑÂç°, Ë≥™Áñë ÊàñÊòØÁΩ∞ÊäΩ %s ÂºµÂç°!","Odrzuƒá kartƒô z +, wyzwanie lub dobierz %s kart!","J√°tssz ki egy k√°rty√°t + szimb√≥lummal, h√≠vd ki az el≈ëz≈ë j√°t√©kost vagy h√∫zz %s k√°rty√°t!"," + ƒ∞le bir kartƒ± atƒ±n, itiraz edin veya %s kart √ßekin! "},
DRAW_PLUS_FOUR_ANTICHALLENGE ={"Discard a card with + or draw %s cards!","Descarte uma carta com + ou compre %s cartas!","D√©faussez une carte avec un + ou tirez %s cartes!","–°–±—Ä–æ—Å—å—Ç–µ –∫–∞—Ä—Ç—É —Å + –∏–ª–∏ –≤–æ–∑—å–º–∏—Ç–µ %s –∫–∞—Ä—Ç(—ã)!","¬°Descarta una carta con + o toma %s cartas!","ÁôºÂá∫Â∏∂ + ËôüÁöÑÂç°ÊàñÊòØÁΩ∞ÊäΩ %s ÂºµÂç°!","Odrzuƒá kartƒô z + lub dobierz %s kart!","J√°tssz ki egy k√°rty√°t + szimb√≥lummal vagy h√∫zz %s k√°rty√°t!"," + ƒ∞≈üaretli bir kartƒ± atƒ±n veya %s kart √ßekin!"},
DRAW_HELL ={"Discard an action card or draw %s cards!","Descarte uma carta de a√ß√£o ou compre %s cartas!","D√©faussez une carte action ou tirez %s cartes!","–°–±—Ä–æ—Å—å—Ç–µ –∫–∞—Ä—Ç—É –¥–µ–π—Å—Ç–≤–∏–π –∏–ª–∏ –≤–æ–∑—å–º–∏—Ç–µ %s –∫–∞—Ä—Ç(—ã)!","¬°Descarta una carta de acci√≥n o toma %s cartas!","ÁôºÂá∫Ë°åÂãïÂç°ÁâåÊàñÊòØÁΩ∞ÊäΩ %s ÂºµÂç°!","Odrzuƒá kartƒô akcji lub dobierz %s kart!","J√°tssz ki egy akci√≥k√°rty√°t vagy h√∫zz %s k√°rty√°t!","Bir eylem kartƒ±nƒ± atƒ±n veya %s kart √ßekin!"},
DRAW_HELL_FOUR ={"Discard an action card, challenge or draw %s cards!","Descarte uma carta de a√ß√£o, desafie ou compre %s cartas!","D√©faussez une carte action, d√©fiez, ou tirez %s cartes!","–°–±—Ä–æ—Å—å—Ç–µ –∫–∞—Ä—Ç—É –¥–µ–π—Å—Ç–≤–∏–π, –±—Ä–æ—Å—å—Ç–µ –≤—ã–∑–æ–≤ –∏–ª–∏ –≤–æ–∑—å–º–∏—Ç–µ %s –∫–∞—Ä—Ç(—ã)!","¬°Descarta una carta de acci√≥n, desaf√≠a o toma %s cartas!","ÁôºÂá∫Ë°åÂãïÂç°Áâå, Ë≥™Áñë ÊàñÊòØÁΩ∞ÊäΩ %s ÂºµÂç°!","Odrzuƒá kartƒô akcji, wyzwanie lub dobierz %s kart!","J√°tssz ki egy akci√≥k√°rty√°t, h√≠vd ki az el≈ëz≈ë j√°t√©kost vagy h√∫zz %s k√°rty√°t!","Bir aksiyon kartƒ±nƒ± atƒ±n, itiraz edin veya %s kart √ßekin!"},
DRAW_HELL_FOUR_ANTICHALLENGE ={"Discard an action card or draw %s cards!","Descarte uma carta de a√ß√£o ou compre %s cartas!","D√©faussez une carte action ou tirez %s cartes!","–°–±—Ä–æ—Å—å—Ç–µ –∫–∞—Ä—Ç—É –¥–µ–π—Å—Ç–≤–∏–π –∏–ª–∏ –≤–æ–∑—å–º–∏—Ç–µ %s –∫–∞—Ä—Ç(—ã)!","¬°Descarta una carta de acci√≥m o toma %s cartas!","ÁôºÂá∫Ë°åÂãïÂç°ÁâåÊàñÊòØÁΩ∞ÊäΩ %s ÂºµÂç°!","Odrzuƒá kartƒô akcji lub dobierz %s kart!","J√°tssz ki egy akci√≥k√°rty√°t vagy h√∫zz %s k√°rty√°t!","Bir aksyon kartƒ± atƒ±n veya %s kart √ßekin!"},
DRAW_CHALLENGE ={"Challenge or draw %s cards!","Desafie ou compre %s cartas!","D√©fiez ou d√©faussez %s cartes!","–ë—Ä–æ—Å—å—Ç–µ –≤—ã–∑–æ–≤ –∏–ª–∏ –≤–æ–∑—å–º–∏—Ç–µ %s –∫–∞—Ä—Ç—ã(—ã)!","¬°Desaf√≠a o toma %s cartas!","Ë≥™ÁñëÊàñÊòØÁΩ∞ÊäΩ %s ÂºµÂç°!","Wyzwanie lub dobranie %s kart!","H√≠vd ki az el≈ëz≈ë j√°t√©kost vagy h√∫zz %s k√°rty√°t!","ƒ∞tiraz et veya %s kart √ßek!"},
WARN_PERFECTION ={"Play again!","Jogue novamente!","Rejouez!","–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞!","¬°Juega otra vez!","ÂÜçÁôº‰∏ÄÂºµÂç°!","Zagraj ponownie!","J√°tssz m√©g egyszer.","Tekrar oyna!"},
WARN_STACKING ={"Play more %s or pass your turn.","Jogue outros %s ou passe a vez.","Play more %s or pass your turn.","–ò–≥—Ä–∞–π –±–æ–ª—å—à–µ %s –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏ —Å–≤–æ–π —Ö–æ–¥.","Juega m√°s %s o pasa tu turno.","Â§öÁôº‰∏ÄÂºµ %s ÊàñÊòØËº™Âà∞‰∏ã‰∏ÄÂÄãÁé©ÂÆ∂„ÄÇ","Zagraj wiƒôcej %s lub przeczekaj kolejkƒô.","J√°tssz m√©g %s k√°rty√°t vagy add √°t a k√∂rt.","Daha fazla %s oynayƒ±n veya sƒ±ranƒ±zƒ± ge√ßin."},
WARN_UP_DOWN ={"Play a numerical card with a value of either 1 higher or 1 lower, or pass your turn.","Jogue um n√∫mero acima ou abaixo ou passe a vez.","Jouez une carte num√©rique d'une valeur sup√©rieure ou inf√©rieure de 1 ou passez votre tour.","–°—ã–≥—Ä–∞–π—Ç–µ —Å —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–∞—Ä—Ç–æ–π —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤—ã—à–µ 1 –∏–ª–∏ –Ω–∏–∂–µ 1, –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —Ö–æ–¥.","Juega una carta num√©rica con un valor mayor o menor por uno, o pasa tu turno.","ÁôºÂá∫‰∏ÄÂºµÊï∏ÂÄºÊØîÂâõÂâõ Â§ö/Â∞ë 1 ÁöÑÊï∏Â≠óÂç°Áâå, ÊàñÊòØËº™Âà∞‰∏ã‰∏ÄÂÄãÁé©ÂÆ∂„ÄÇ","Graj numerowanƒÖ kartƒÖ z warto≈õciƒÖ wiƒôkszƒÖ od 1 lub mniejszƒÖ od 1, albo oddaj swojƒÖ kolejkƒô.","J√°tssz egy sz√°mk√°rty√°t amely √©rt√©ke eggyel kisebb vagy nagyobb, vagy add √°t a k√∂r√∂d.","1 veya daha y√ºksek bir deƒüere sahip bir sayƒ±sal kart oynayƒ±n veya sƒ±ranƒ±zƒ± ge√ßin."},
WARN_UP ={"Play a numerical card with a value of 1 higher, or pass your turn.","Jogue um n√∫mero acima ou passe a vez.","Jouez une carte num√©rique d'une valeur sup√©rieure de 1, ou passez votre tour.","–°—ã–≥—Ä–∞–π—Ç–µ —Å —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–∞—Ä—Ç–æ–π —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤—ã—à–µ 1 –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏ —Ö–æ–¥.","Juega una carta num√©rica con un valor superior por uno, o pasa tu turno.","ÁôºÂá∫‰∏ÄÂºµÊï∏ÂÄºÊØîÂâõÂâõÂ§ö 1 ÁöÑÊï∏Â≠óÂç°Áâå, ÊàñÊòØËº™Âà∞‰∏ã‰∏ÄÂÄãÁé©ÂÆ∂„ÄÇ","Graj numerowanƒÖ kartƒÖ z warto≈õciƒÖ wiƒôkszƒÖ od 1, albo oddaj swojƒÖ kolejkƒô.","J√°tssz egy sz√°mk√°rty√°t amely √©rt√©ke eggyel nagyobb, vagy add √°t a k√∂r√∂d.","Deƒüeri 1 daha y√ºksek olan bir sayƒ±sal kart oynayƒ±n veya sƒ±ranƒ±zƒ± ge√ßin."},
WARN_DOWN ={"Play a numerical card with a value of 1 lower, or pass your turn.","Jogue um n√∫mero abaixo ou passe a vez.","Jouez une carte num√©rique d'une valeur inf√©rieure de 1, ou passez votre tour.","–°—ã–≥—Ä–∞–π—Ç–µ —Å —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–∞—Ä—Ç–æ–π —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –Ω–∏–∂–µ 1 –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —Ö–æ–¥.","Juega una carta num√©rica con un valor inferior por uno, o pasa tu turno.","ÁôºÂá∫‰∏ÄÂºµÊï∏ÂÄºÊØîÂâõÂâõÂ∞ë 1 ÁöÑÊï∏Â≠óÂç°Áâå, ÊàñÊòØËº™Âà∞‰∏ã‰∏ÄÂÄãÁé©ÂÆ∂„ÄÇ","Graj numerowanƒÖ kartƒÖ z warto≈õniƒÖ mniejszƒÖ od 1, albo oddaj swojƒÖ kolejkƒô.","J√°tssz egy sz√°mk√°rty√°t amely √©rt√©ke eggyel kisebb, vagy add √°t a k√∂r√∂d.","Deƒüeri 1 daha d√º≈ü√ºk olan bir sayƒ±sal kart oynayƒ±n veya sƒ±ranƒ±zƒ± ge√ßin."},
WARN_IMITATE ={"Perform this emote!","Imite essa express√£o!","Fa√Ætes cette √©mote!","–í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç—É —ç–º–æ—Ü–∏—é!","¬°Imita este emote!","ÂÅöÂá∫ÈÄôÂÄãÂãï‰Ωú!","Wykonaj tƒô emotkƒô!","Fejezd ki ezt az √©rz√©st!","Bu ifadeyi ger√ßekle≈ütir!"},
ONLY_NUMBERS ={"You can only play numerical cards on this turn.","Voc√™ pode jogar apenas cartas num√©ricas neste turno.","Vous ne pouvez jouer que des cartes num√©riques √† ce tour.","–í —ç—Ç–æ–º —Ö–æ–¥—É –≤—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å —Ü–∏—Ñ—Ä–æ–≤—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏.","S√≥lo puedes jugar cartas num√©ricas en este turno.","‰Ω†Âè™ÂèØ‰ª•Âú®ÈÄôÂõûÂêàÁôºÂá∫Êï∏Â≠óÂç°Áâå„ÄÇ","Mo≈ºesz graƒá tylko kartami z numerami w tej kolejce.","A k√∂r√∂dben csak sz√°mk√°rty√°t j√°tszhatsz.","Bu sƒ±rada yalnƒ±zca sayƒ±sal kartlarƒ± oynayabilirsiniz."},
WELCOME_TEXT ={"<j>Welcome to <b>UNO!</b> Press <vp>H <j>to learn how to play. Wait for the next map to play.","<j>Bem vindo ao <b>UNO!</b> Pressione <vp>H <j>para aprender como jogar. Aguarde o pr√≥ximo mapa para jogar.","<j>Bienvenue dans <b>UNO!</b> Appuyez sur <vp>H<j> pour apprendre √† jouer. Attendez la prochaine partie pour jouer.","<j>–î–æ–±—Ä–æ –ø–æ–¥–∞–ª–æ–≤–∞—Ç—å –≤ <b>–£–ù–û!</b> –ù–∞–∂–º–∏ <vp>H <j>—á—Ç–æ–±—ã –Ω–∞—É—á–∏—Ç—å—Å—è –∏–≥—Ä–∞—Ç—å. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç—ã, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å.","<j>¬°Bienvenido/a¬†a <b>UNO!</b> Presiona <vp>H <j>para aprender a jugar. Espera el siguiente mapa para jugar.","<j>Ê≠°Ëøé‰æÜÂà∞ <b>UNO!</b> Ë´ãÊåâ <vp>H Èçµ <j>‰∫ÜËß£ÈÅäÊà≤Áé©Ê≥ï„ÄÇ Ë´ãÁ≠âÂæÖ‰∏ã‰∏ÄÂºµÂúñ‰æÜÂä†ÂÖ•ÈÅäÊà≤„ÄÇ","<j>Witaj w <b>UNO</b> Kliknij <vp>H<j> by poczytaƒá jak graƒá. Zaczekaj do nastƒôpnej mapy by zagraƒá.","<j>√údv√∂zlet az <b>UNO</b> j√°t√©kban! Nyomd meg a <vp>H <j>bet≈±t, hogy megismerkedj a j√°t√©kszab√°lyokkal. V√°rd meg a k√∂vetkez≈ë p√°ly√°t, hogy j√°tszhass.","<b>UNO‚Äôya  </b><j>ho≈ü geldin!  Nasƒ±l oynanacaƒüƒ±nƒ± √∂ƒürenmek i√ßin <vp>H<j> tu≈üuna basƒ±n. Sonraki haritanƒ±n oynamasƒ±nƒ± bekleyin."},
WELCOME_DISCORD ={"<j>Enter #unotfm Discord group to interact with other players and pick up on game news: <vp>%s","<j>Entre no grupo de #unotfm no Discord para interagir com outros jogadores e ficar por dentro de novidades do jogo: <vp>%s","<j>Rejoignez le groupe Discord d'#unotfm pour int√©ragir avec les autres joueurs et √™tre au courant des nouveaut√©s sur le jeu: <vp>%s","<j>–í—Å—Ç—É–ø–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É #unotfm Discord, —á—Ç–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –æ–± –∏–≥—Ä–µ: <vp>%s","<j>Entra al grupo de #unotfm en Discord para interactuar con otros jugadores y conocer antes¬†todas las novedades: <vp>%s","<j>Âä†ÂÖ• #unotfm Discord ‰º∫ÊúçÂô®ËàáÂÖ∂‰ªñÁé©ÂÆ∂‰∫§ÊµÅ‰ª•ÂèäÂæóÂà∞Â∞èÈÅäÊà≤ÊúÄÊñ∞ÁöÑË≥áË®ä: <vp>%s","<j>Wejd≈∫ w grupƒô #unotfm na Discordzie, aby wchodziƒá w interakcje z innymi graczami i odbieraƒá wiadomo≈õci z gry: <vp>%s","<j>L√©pj be az #unotfm Discord csoportba, hogy besz√©lgethess m√°s j√°t√©kosokkal, √©s elolvashasd a j√°t√©kbeli h√≠reket: <vp>%s","<j>Diƒüer oyuncularla etkile≈üim kurmak ve oyun haberlerini almak i√ßin #unotfm Discord sunucusuna katƒ±lƒ±n: <vp>%s"},
WARNING_SOURIS ={"Create an account on Transformice to be able to play in this room.","Crie uma conta no Transformice para poder jogar nesta sala.","Cr√©ez un compte sur Transformice pour pouvoir jouer dans ce salon.","–°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –≤ Transformice, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏–≥—Ä–∞—Ç—å –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ.","Crea una cuenta en Transformice para que se te permita el acceso a jugar.","Ë®ªÂÜä‰∏ÄÂÄã Transformice Áî®Êà∂‰æÜÂú®ÈÄôÊàøÈñìÈÅäÁé©„ÄÇ","Za≈Ç√≥≈º konto na Transformice by zagraƒá w tym pokoju.","Regisztr√°lj egy Transformice felhaszn√°l√≥t, hogy ebben a szob√°ban j√°tszhass.","Bu odada oynayabilmek i√ßin Transformice'de bir hesap olu≈üturun."},
TIME_REMAINING ={"60 seconds remaining!","60 segundos restantes!","60 secondes restantes!","–æ—Å—Ç–∞–ª–æ—Å—å 60 —Å–µ–∫—É–Ω–¥!","¬°Quedan 60 segundos!","Ââ©‰∏ã 60 Áßí!","Pozosta≈Ço 60 sekund!","60 m√°sodperc van h√°tra!","60 saniye kaldƒ±!"},
WARNING_DATA ={"Your data was not loaded. Please reenter the room or return later.","Seus dados n√£o foram carregados corretamente. Por favor reentre na sala ou volte mais tarde.","Vos donn√©es n'ont pas √©t√© charg√©es. Merci de partir et revenir, ou de rejoindre un peu plus tard.","–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∫–æ–º–Ω–∞—Ç—É –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ.","Tus datos no han sido cargados. Por favor, entra nuevamente a la sala o regresa despu√©s.","‰Ω†ÁöÑË≥áÊñôÂä†ËºâÂ§±Êïó„ÄÇ Ë´ãÈáçÊñ∞ÈÄ≤ÂÖ•ÊàøÈñìÊàñÊòØÊôöÈªûÂÜçÈÄ≤‰æÜ„ÄÇ","Twoje dane nie zosta≈Çy wczytane. Proszƒô wr√≥ciƒá do pokoju za chwile lub p√≥≈∫niej.","Nem tudtuk bet√∂lteni az adataid. L√©pj be √∫jra a szob√°ba, vagy t√©rj vissza k√©s≈ëbb.","Verileriniz y√ºklenmedi. L√ºtfen odaya tekrar girin veya daha sonra geri d√∂n√ºn."},
CHAIR_UNLOCKED ={"You unlocked the chair '%s'!","Voc√™ desbloqueou a cadeira '%s'!","Vous avez d√©bloqu√© la chaise \"%s\"!","–í—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ —Å—Ç—É–ª '%s'!","¬°La silla¬†''%s'' ha sido desbloqueada!","‰Ω†Ëß£Èéñ‰∫ÜÊ§ÖÂ≠ê '%s'!","Odblokowa≈Çe≈õ nowy fotel '%s'!","Feloldottad a k√∂vetkez≈ë tr√≥nt: '%s'!","%s' sandalyesinin kilidini a√ßtƒ±nƒ±z!"},
RULE_UNLOCKED ={"You unlocked the rule '%s'!","Voc√™ desbloqueou a regra '%s'!","Vous avez d√©bloqu√© la r√®gle \"%s\"!","–í—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–∞–≤–∏–ª–æ '%s'!","¬°La regla ''%s'' ha sido desbloqueada!","‰Ω†Ëß£Èéñ‰∫ÜË¶èÁü© '%s'!","Odblokowa≈Çe≈õ zasadƒô '%s'!","Feloldottad a k√∂vetkez≈ë szab√°lyt: '%s'!","%s' kuralƒ±nƒ±n kilidini a√ßtƒ±nƒ±z!"},
MEDAL_UNLOCKED ={"You unlocked a medal!","Voc√™ desbloqueou uma medalha!","Vous avez d√©bloqu√© une m√©daille!","–í—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –º–µ–¥–∞–ª—å!","¬°Has desbloqueado una medalla!","‰Ω†Ëß£Èéñ‰∫Ü‰∏ÄÂÄãÁçéÁâå!","Odblokowa≈Çe≈õ medal!","Feloldott√°l egy med√°lt!","Madalyayƒ± a√ßtƒ±n!"},
TIP_1 ={"Press the 'UNO!' button before playing your penultimate card.","Pressione o bot√£o 'UNO!' antes de jogar sua pen√∫ltima carta.","Appuyez sur le bouton \"UNO!\" avant de jouer votre avant-derni√®re carte.","–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–£–ù–û!¬ª, –ø—Ä–µ–∂–¥–µ —á–µ–º –ª–æ–∂–∏—Ç—å –≤–∞—à—É –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω—é—é –∫–∞—Ä—Ç—É.","Presiona el bot√≥n de ''UNO!'' antes de jugar tu pen√∫ltima carta.¬†","Ââ©‰∏ãÊúÄÂæå‰∫åÂºµÂç°ÁâåÁöÑÊôÇÂÄô, ‰Ω†Âú®ÁôºÁâå‰πãÂâçÊáâË©≤ÂÖàÊåâ UNO Èçµ„ÄÇ","Kliknij 'UNO' przed zagraniem twojƒÖ ostatniƒÖ kartƒÖ.","Nyomd meg az 'UNO!' gombot, miel≈ëtt kij√°tszan√°d az utols√≥ el≈ëtti k√°rty√°d.","Sondan bir √∂nceki kartƒ±nƒ±zƒ± oynamadan √∂nce 'UNO! d√ºƒümesine basƒ±n."},
TIP_2 ={"Click on the name of each rule to find out their meaning.","Clique nos nomes das regras para saber o que elas significam.","Cliquez sur le nom de chaque r√®gle pour en savoir plus sur celles-ci.","–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∏—Ö –∑–Ω–∞—á–µ–Ω–∏–µ.","Da clic en el nombre de cada regla para conocer su significado.","ÈªûÊìäÊØè‰∏ÄÈÅìË¶èÁü©ÁöÑÂêçÂ≠ó‰æÜÊü•ÁúãË©≥ÊÉÖ„ÄÇ","Kliknij nazwƒô zasad by dowiedzieƒá siƒô wiƒôcej.","Kattints a h√°zszab√°lyok neveire, hogy megtudd mit jelentenek.","Anlamlarƒ±nƒ± √∂ƒürenmek i√ßin her kuralƒ±n adƒ±na tƒ±klayƒ±n."},
TIP_3 ={"The more you play, the more the delay to get a seat will increase.","Quanto mais partidas consecutivas voc√™ jogar, maior √© o delay para pegar uma cadeira.","Plus vous jouez, plus le plus le d√©lai pour obtenir une place augmentera.","–ß–µ–º –±–æ–ª—å—à–µ –≤—ã –∏–≥—Ä–∞–µ—Ç–µ, —Ç–µ–º –±–æ–ª—å—à–µ –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ.","Cuanto m√°s juegues, el retraso al escojer un asiento incrementar√°.","‰Ω†Áé©ÁöÑÊÑà‰πÖ, ‰Ω†ÊØèÂ±ÄÈñãÂßãÂâçÂùê‰∏ãÁöÑÁ∑©Ë°ùÊôÇÈñìÊÑà‰πÖ„ÄÇ","Je≈õli grasz wiƒôcej, op√≥≈∫nienie aby dostaƒá krzes≈Ço wzro≈õnie.","Min√©l t√∂bb j√°t√©kot j√°tszol egy huzamban, ann√°l hosszabb ideig nem fogsz tudni le√ºlni.","Ne kadar √ßok oynarsanƒ±z, koltuk alma gecikmesi o kadar artar."},
TIP_4 ={"Clicking on the wrong card will show it to the other players.","Clicar em carta errada far√° voc√™ mostr√°-la para os outros jogadores.","Cliquer sur la mauvaise carte la montrera aux autres joueurs.","–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–∞—Ä—Ç—É –ø–æ–∫–∞–∂–µ—Ç –µ—ë –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º.","Darle clic a la carta equivocada har√° que sea mostrada a los dem√°s jugadores.","Ë¶ÅÊòØÊåâÂà∞‰∫Ü‰∏çËÉΩÁôºÂá∫ÁöÑÂç°ÁâåÂÆÉÂ∞±ÊúÉÈ°ØÁ§∫Áµ¶ÂÖ∂‰ªñ‰∫∫Áúã„ÄÇ","Klikniƒôcie niew≈Ça≈õciwej karty poskutkuje pokazaniem jej innym graczom.","A helytelen k√°rty√°ra kattint√°s felfedi a k√°rty√°t a t√∂bbi j√°t√©kosnak.","Yanlƒ±≈ü karta tƒ±klamak onu diƒüer oyunculara g√∂sterecektir."},
TIP_5 ={"If you stay idle for 2 rounds, you'll lose your chair!","Se voc√™ ficar ausente por 2 turnos seguidos, voc√™ perde o seu lugar!","Si vous restez inactif pendant 2 rounds, vous perdrez votre chaise!","–ï—Å–ª–∏ –≤—ã –±—É–¥–µ—Ç–µ –±–µ–∑–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 2 —Ä–∞—É–Ω–¥–æ–≤, –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ!","¬°Si te quedas ausente por dos rondas, perder√°s tu silla!","Â¶ÇÊûú‰Ω†ÊéõËëóË∂ÖÈÅé 2 ÂõûÂêà, ‰Ω†ÊúÉÂ§±Âéª‰Ω†ÁöÑÂ∫ß‰Ωç‰∏¶ÂæûÈÅäÊà≤‰∏≠Ë∏¢Âá∫!","Je≈õli bƒôdziesz afk podczas 2 kolejek stracisz krzes≈Ço!","Ha k√©t k√∂r√∂n √°t t√©tlen maradsz, elvesz√≠ted az √ºl≈ëhelyed!","2 tur bo≈üta kalƒ±rsanƒ±z, sandalyenizi kaybedersiniz!"},
TIP_6 ={"If someone leaves the game, you can sit on their chair before their turn.","Se algu√©m sair da partida, voc√™ pode pegar seu lugar at√© que seja a vez dele.","Si quelqu'un quitte la partie, vous pouvez vous asseoir sur leur chaise avant son tour.","–ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –≤—ã–π–¥–µ—Ç –∏–∑ –∏–≥—Ä—ã, –≤—ã –º–æ–∂–µ—Ç–µ —Å–µ—Å—Ç—å –Ω–∞ –µ–≥–æ –º–µ—Å—Ç–æ –¥–æ —Å–≤–æ–µ–π –æ—á–µ—Ä–µ–¥–∏.","Si alguien deja el juego, podr√°s sentarse en su silla antes de que toque su turno.","Â¶ÇÊûúÊúâ‰∫∫‰∏≠ÈÄîÈõ¢Èñã‰∫ÜÈÅäÊà≤, ‰Ω†ÂèØ‰ª•Âú®Ëº™Âà∞‰ªñÁöÑÂõûÂêàÂâçÂùê‰∏ä‰ªñÁöÑÂ∫ß‰ΩçÂèñ‰ª£‰ªñ„ÄÇ","Je≈õli kto≈õ opu≈õci grƒô mo≈ºesz zajƒÖƒá jego miejsce.","Ha valaki elhagyja a j√°t√©kot, le√ºlhetsz a hely√©re a k√∂re el≈ëtt.","Biri oyunu terk ederse, sƒ±rasƒ± gelmeden onun sandalyesine oturabilirsiniz."},
TIP_7 ={"Create your own UNO room with your rules by going to #unotfm0Yournickname","Crie sua pr√≥pria sala de UNO com suas regras indo em #unotfm0Seunick","Cr√©ez votre propre salon UNO, avec vos propres r√®gles en allant en #unotfm0Votrepseudo","–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É –£–ù–û —Å –≤–∞—à–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏, –ø–µ—Ä–µ–π–¥—è –≤ #unotfm0–¢–≤–æ–π–ü—Å–µ–≤–¥–æ–Ω–∏–º","Crea tu propia sala de UNO con tus propias reglas yendo a #unotfm0nombre#tag","‰Ω†ÂèØ‰ª•Âà∞ #unotfm0(‰Ω†ÁöÑÂêçÂ≠ó) ÂâµÂª∫‰Ω†Ëá™Â∑±ÁöÑ UNO ÊàøÈñì‰∏¶‰ΩøÁî®Ëá™Â∑±Ë®≠ÂÆöÁöÑË¶èÁü©ÈÅäÁé© „ÄÇ","Stw√≥rz w≈Çasny pok√≥j UNO z twoimi zasadami idƒÖc do #unotfm0Tw√≥jNick","K√©sz√≠ts saj√°t UNO szob√°t saj√°t szab√°lyokkal: #unotfm0Saj√°tn√©v","#Unotfm0Kullanƒ±cƒ±Adƒ±nƒ±z adresine giderek kendi kurallarƒ±nƒ±zla UNO odanƒ±zƒ± olu≈üturun"},
TIP_8 ={"Unlock house rules so you can use them in your private rooms.","Desbloqueie regras da casa para poder usar em suas salas privadas.","D√©bloquez des r√®gles de la maison pour pouvoir les utiliser dans vos salons priv√©s.","–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –¥–æ–º–∞—à–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –≤ —Å–≤–æ–∏—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö.","Desbloquea m√°s reglas de la casa, las podr√°s usar en tus salas privadas.","Ëß£ÈéñËá™Ë®ÇË¶èÁü©‰πãÂæå‰Ω†Â∞±ÂèØ‰ª•Âú®Ëá™Â∑±ÁöÑÁßÅ‰∫∫ÊàøÈñìË£°‰ΩøÁî®„ÄÇ","Odblokuj domowe zasady kt√≥rych mo≈ºesz u≈ºywaƒá w twoich prywatnych pokojach.","Ha feloldasz egy h√°zszab√°lyt, haszn√°lhatod azt priv√°t szob√°kban.","Ev kurallarƒ±nƒ±n kilidini a√ßƒ±n, b√∂ylece bunlarƒ± √∂zel odalarƒ±nƒ±zda kullanabilirsiniz."},
TIP_9 ={"Challenge a +4 only when you believe someone has played it unnecessarily.","Desafie um +4 apenas quando voc√™ acredita que algu√©m jogou de prop√≥sito.","D√©fiez un +4 uniquement lorsque vous pensez que quelqu'un l'a jou√© inutilement.","–ë—Ä–æ—Å—å—Ç–µ –≤—ã–∑–æ–≤ +4, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ –∫—Ç–æ-—Ç–æ —Å—ã–≥—Ä–∞–ª –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.","Desafia un +4 solamente cuando creas que alguien la ha jugado innecesariamente.","‰Ω†Âè™ÊáâË©≤Âú®Áõ∏‰ø°Êúâ‰∫∫‰∏çÈÅ©Áï∂ÁöÑÁôºÂá∫‰∫Ü +4 Âç°ÁâåÂæåÊâç‰ΩúÂá∫Ë≥™Áñë„ÄÇ","Wyzwij +4 tylko wtedy kiedy uwa≈ºasz ≈ºe kto≈õ je niepotrzebnie rozegra≈Ç.","Csak akkor h√≠vj ki egy +4-et ha szerinted valaki feleslegesen j√°tszotta ki."," +4'e yalnƒ±zca birinin gereksiz yere oynadƒ±ƒüƒ±na inandƒ±ƒüƒ±nƒ±zda itiraz edin."},
TIP_10 ={"Zero is the only number that has no duplicates in the deck.","O zero √© o √∫nico n√∫mero que n√£o possui duplicatas no baralho.","Z√©ro est le seul nombre qui n'a pas de double dans le jeu.","–ù–æ–ª—å - —ç—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –∏–º–µ–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –∫–æ–ª–æ–¥–µ.","El cero es el √∫nico numero que no tiene duplicados en la baraja.","0 ËôüÂç°ÁâåÊòØÂîØ‰∏Ä‰∏ÄÂÄãÂú®ÁâåÂ∫´‰∏≠Ê≤íÊúâÈáçË§áÁöÑÊï∏Â≠óÂç°Áâå„ÄÇ","Zero jest jedynƒÖ liczbƒÖ kt√≥ra nie ma duplikatu w talii.","Csak a null√°s k√°rty√°kb√≥l nincs m√°solat a pakliban.","Sƒ±fƒ±r, destede kopyasƒ± olmayan tek sayƒ±dƒ±r."},
TIP_11 ={"House rules can be unlocked in any room.","Regras da casa podem ser desbloqueadas em qualquer sala.","Les r√®gles de la maison peuvent √™tre d√©bloqu√©e dans n'importe quel salon.","–î–æ–º–∞—à–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –º–æ–∂–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤ –ª—é–±–æ–π –∫–æ–º–Ω–∞—Ç–µ.","Reglas de la Casa se pueden desbloquear en cualquier sala.","Ëá™ÂÆöË¶èÁü©ÂèØ‰ª•Âú®‰ªª‰Ωï uno ÊàøÈñì‰∏≠Ëß£Èéñ„ÄÇ","Domowe zasady mo≈ºna odblokowaƒá w ka≈ºdym pokoju.","A h√°zszab√°lyokat b√°rmely szob√°ban fel lehet oldani.","Ev kurallarƒ± herhangi bir odada a√ßƒ±labilir."},
TIP_12 ={"Victories and chairs can only be obtained in rooms #unotfm1 to #unotfm9 with 4 or more players.","Vit√≥rias e cadeiras s√≥ s√£o adquiridos nas salas #unotfm1 at√© #unotfm9 com 4 ou mais jogadores.","Les victoires et les chaises peuvent √™tre obtenues uniquement dans les salons #unotfm1 √† #unotfm9 avec 4 joueurs ou plus","–ü–æ–±–µ–¥—ã –∏ –∫—Ä–µ—Å–ª–∞ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –∫–æ–º–Ω–∞—Ç–∞—Ö —Å #unotfm1 –¥–æ #unotfm9 —Å 4 –∏–ª–∏ –±–æ–ª–µ–µ –∏–≥—Ä–æ–∫–∞–º–∏.","Victorias y sillas solamente pueden ser obtenidas en salas de¬†#unotfm1 hasta #unotfm9 con cuatro¬†o m√°s jugadores.","ÂãùÂà©Ê¨°Êï∏/Ë≥áÊñô ÂèäÊ§ÖÂ≠êÂè™ÂèØ‰ª•Âú®4‰∫∫Êàñ‰ª•‰∏äÁöÑ #unotfm1 Ëá≥ #unotfm9 ÊàøÈñìË£°ÂæóÂà∞„ÄÇ","Zwyciƒôstwa i fotele mogƒÖ byƒá odblokowywane tylko w pokojach #unotfm1 do #unotfm9 z 4 lub wiƒôcej graczy.","Gy≈ëzelmeket √©s sz√©keket csak 4 vagy t√∂bb j√°t√©kossal rendelkez≈ë, #unotfm1-t≈ël #unotfm9-ig terjed≈ë tartom√°nyba tartoz√≥ szob√°kban lehet szerezni.","Zaferler ve sandalyeler yalnƒ±zca 4 veya daha fazla oyuncuyla #unotfm1 ile #unotfm9 arasƒ±ndaki odalarda elde edilebilir."},
TIP_13 ={"Are the visual effects confusing you? You can disable visual effects from Transformice's configuration menu.","Os efeitos visuais est√£o te atrapalhando? Desative-os nas configura√ß√µes do Transformice.","Les effets visuels vous troublent ? Vous pouvez d√©sactiver les effets visuels √† partir du menu de configuration de Transformice.","–í–∞—Å —Å–º—É—â–∞—é—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã? –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –∏—Ö –≤ –º–µ–Ω—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Transformice.","¬øLos efectos visuales te est√°n confundiendo? Puedes desactivarlos en cualquier momento desde el men√∫ de opciones de Transformice.","Ë¶ñË¶∫ÊïàÊûúËÆì‰Ω†Âõ∞Êìæ? ‰Ω†ÂèØ‰ª•Âú® Transformice ÁöÑË®≠ÁΩÆËèúÂñÆË£°ÈóúÈñâÊïàÊûú„ÄÇ","Wizualne efekty mylƒÖ ciƒô? Mo≈ºesz wy≈ÇƒÖczyƒá wizualne efekty w ustawieniach Transformice.","Megzavarnak a vizu√°lis effektek √©s hat√°sok? Kikapcsolhatod ≈ëket a Transformice be√°ll√≠t√°saiban.","G√∂rsel efektler kafanƒ±zƒ± karƒ±≈ütƒ±rƒ±yor mu? G√∂rsel efektleri Transformice'nin konfig√ºrasyon men√ºs√ºnden devre dƒ±≈üƒ± bƒ±rakabilirsiniz."},
TIP_14 ={"Click on the top card on the table to see the previously played card underneath it.","Clique na carta da mesa para ver a carta que est√° por baixo.","Cliquez sur la carte du haut de la table pour voir la carte pr√©c√©demment jou√©e en dessous.","–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –≤–µ—Ä—Ö–Ω—é—é –∫–∞—Ä—Ç—É –Ω–∞ —Å—Ç–æ–ª–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥ –Ω–µ–π —Ä–∞–Ω–µ–µ —Å—ã–≥—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É.","Da clic en la carta superior de la tabla para ver la carta anteriormente jugada debajo de ella.","ÈªûÊåâÊ°åÈù¢ÁøªÈñã‰∫ÜÁöÑÂç°‰æÜÊü•Áúã‰∏ãÈù¢‰πãÂâçÁôºÂá∫ÁöÑÂç°Áâå„ÄÇ","Kliknij na g√≥rnƒÖ kartƒô na stole by zobaczyƒá wcze≈õniej zagranƒÖ.","Kattints az asztalon l√©v≈ë k√°rty√°ra, hogy l√°sd az el≈ëtte kij√°tszott, alatta l√©v≈ë k√°rty√°t.","Altƒ±nda daha √∂nce oynanan kartƒ± g√∂rmek i√ßin masanƒ±n √ºst√ºndeki karta tƒ±klayƒ±n."},
TIP_15 ={"Try memorizing the colors that your opponent doesn't have.","Procure memorizar cores que seus advers√°rios n√£o possuem.","Essayez de m√©moriser les couleurs que vos adversaires n'ont pas.","–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–æ–º–Ω–∏—Ç—å —Ü–≤–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç —É –≤–∞—à–µ–≥–æ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞.","Intenta memorizar los colores que tu oponente no tiene.","ÂòóË©¶Ë®òËëóÂ∞çÊâãÊâã‰∏≠Âç°ÁâåÊ≤íÊúâÁöÑÈ°èËâ≤„ÄÇ","Spr√≥buj zapamiƒôtaƒá kolory, kt√≥rych tw√≥j przeciwnik nie ma.","Pr√≥b√°ld meg megjegyezni, hogy milyen sz√≠nnel nem rendelkeznek ellenfeleid.","Rakibinizin sahip olmadƒ±ƒüƒ± renkleri ezberlemeyi deneyin."},
TIP_16 ={"If you press space repeatedly at the beginning of the game, your chances of getting a chair are reduced.","Pressionar espa√ßo muitas vezes diminui suas chances de garantir seu lugar no in√≠cio da partida.","Si vous appuyez sur espace plusieurs fois au d√©but d'une partie, les chances d'avoir une chaise sont r√©duites.","–ï—Å–ª–∏ –≤—ã –Ω–∞–∂–∏–º–∞–µ—Ç–µ –ø—Ä–æ–±–µ–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã, –≤–∞—à–∏ —à–∞–Ω—Å—ã –ø–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ —É–º–µ–Ω—å—à–∞—é—Ç—Å—è.","Si precionas espacio repetidamente al inicio del juego, las posibilidades de que obtengas una silla se reducir√°n.","Â¶ÇÊûú‰Ω†Âú®ÈÅäÊà≤Ë¶ÅÈñãÂßã‰πãÂâç‰∏ÄÁõ¥ÊåâÁ©∫Ê†ºÈçµ, ‰Ω†ÂæóÂà∞Â∫ß‰ΩçÁöÑÊ©üÁéáÊúÉÊ∏õÂ∞ë„ÄÇ","Je≈õli naci≈õniesz spacjƒô na poczƒÖtku gry, twoje szanse na zdobycie fotela sƒÖ ograniczone.","Ha a j√°t√©k kezdetekor folyamatosan nyomkodod a sz√≥k√∂zt, a sz√©kszerz√©si es√©lyeid cs√∂kkennek.","Oyunun ba≈üƒ±nda tekrar tekrar bo≈üluk tu≈üuna basarsanƒ±z, sandalye alma ≈üansƒ±nƒ±z azalƒ±r."},
TIP_17 ={"Complete objectives and win special chairs! Press C and click on a chair for more information about it.","Complete objetivos e adquira cadeiras especiais! Pressione C e clique nas cadeiras para mais informa√ß√µes.","Compl√©tez vos objectifs et gagnez des chaises sp√©ciales! Appuyez sur C et cliquez sur une chaise pour plus d'informations √† son sujet.","–í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫—Ä–µ—Å–ª–∞! –ù–∞–∂–º–∏—Ç–µ C –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Ç—É–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω—ë–º.","¬°Completa objetivos y gana sillas especiales! Presiona C y da clic en una silla para m√°s informaci√≥n al respecto.","ÈÅîÂà∞ÊåáÂÆöË¶ÅÊ±Ç‰æÜÂæóÂà∞ÁâπÂà•ÁöÑÊ§ÖÂ≠êÂêß! Êåâ CÈçµ ÂèäÈªûÊìäÊ§ÖÂ≠ê‰æÜÊü•ÁúãÂÆÉÁöÑË≥áË®ä„ÄÇ","Spe≈Çniaj cele i wygrywaj specjalne fotele! Wci≈õnij C a nastƒôpnie kliknij na wybrany fotel by zobaczyƒá informacje o nim.","Teljes√≠ts c√©lokat √©s nyerj √©rte k√ºl√∂nleges sz√©keket! Nyomd meg a C bet≈±t √©s kattints egy sz√©kre t√∂bb inform√°ci√≥√©rt.","Hedefleri tamamlayƒ±n ve √∂zel sandalyeler kazanƒ±n! Daha fazla bilgi i√ßin C'ye basƒ±n ve bir sandalyeye tƒ±klayƒ±n."},
TIP_18 ={"Wild cards are worth 50 points, action cards 20 and numerical cards are worth the number they depict (0,1,2...9).","Curingas valem 50 pontos, cartas de a√ß√£o valem 20 e cartas num√©ricas valem seus pr√≥prios n√∫meros de face.","Les cartes noires valent 50 points, les cartes action valent 20 et les cartes num√©riques valent le nombre qui leur est affich√© (0,1,2...9).","–ß—ë—Ä–Ω—ã–µ –∫–∞—Ä—Ç—ã –ø—Ä–∏–Ω–æ—Å—è—Ç 50 –æ—á–∫–æ–≤, –∫–∞—Ä—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π 20 –∏ —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –ø—Ä–∏–Ω–æ—Å—è—Ç —Ç–æ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ –æ–Ω–∏ –∏–∑–æ–±—Ä–∞–∂–∞—é—Ç (0,1,2...9).","Las cartas comod√≠n tienen un valor de cincuenta puntos, las cartas de acci√≥n veinte y las cartas num√©ricas tienen el valor del respectivo n√∫mero que tienen.","ÊèõËâ≤Âç°ÁâåÂÉπÂÄº 50 ÂàÜÊï∏, Ë°åÂãïÂç°ÁâåÂÉπÂÄº 20ÂàÜÊï∏ËÄåÊï∏Â≠óÂç°ÁâåÂÉπÂÄºÁâåÁ≠âÊñº‰∏äÈù¢ÁöÑÊï∏Â≠ó (0,1,2...9)„ÄÇ","Karty Wild warte sƒÖ 50 punkt√≥w, karty akcji 20, a karty z numerami sƒÖ warte numerom (0,1,2...9).","A Sz√≠nv√°lt√≥ k√°rty√°k 50 pontot √©rtnek, az akci√≥k√°rty√°k 20 pontot, √©s a sz√°mk√°rty√°k a rajtuk √°br√°zolt sz√°m √©rt√©k√©vel rendelkeznek.","Renk kartlarƒ± 50 puan, aksiyon kartlarƒ± 20 ve sayƒ±sal kartlar tasvir ettikleri sayƒ±ya deƒüerdir (0,1,2 ... 9)."},
TIP_19 ={"The Reverse card has the effect of the Skip card when there are only 2 players in the round.","A carta Reverter tem o efeito da carta Pular quando h√° somente 2 jogadores na partida.","","–û–±—Ä–∞—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –∏–º–µ–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –∫–∞—Ä—Ç—ã –ø—Ä–æ–ø—É—Å–∫–∞, –∫–æ–≥–¥–∞ –≤ —Ä–∞—É–Ω–¥–µ –≤—Å–µ–≥–æ 2 –∏–≥—Ä–æ–∫–∞.","La carta de reversa tiene el efecto de la carta de omisi√≥n cuando hay dos jugadores en la ronda.","ÂèçËΩâÂç°Âú®Âè™ÊúâÂÖ©ÂÄãÁé©ÂÆ∂ÁöÑÊÉÖÊ≥Å‰∏ãÊúâËëóË∑üË∑≥ÈÅéÂç°Áâå‰∏ÄÊ®£ÁöÑÊïàÊûú„ÄÇ","Karta zmiany ruchu ma podobny efekt jak karta pomi≈Ñ, gdy w grze sƒÖ tylko 2 gracze.","A Visszaford√≠t√≥ k√°rtya a Kimaradsz k√°rtya hat√°s√°t veszi fel 2 j√°t√©kost tartalmaz√≥ j√°t√©kokban.","Ters kart, turda sadece 2 oyuncu varken Skip kartƒ±nƒ±n etkisine sahiptir."},
TIP_20 ={"If you have any doubts about the rules, press H.","D√∫vidas sobre as regras? Pressione H.","Si vous avez des doutes √† propos des r√®gles, appuyez sur H.","–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ —Å–æ–º–Ω–µ–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∞–≤–∏–ª, –Ω–∞–∂–º–∏—Ç–µ H.","Por cualquier duda respecto a las reglas, presiona H.","Â¶ÇÊûú‰Ω†Â∞çË¶èÁü©ÊúâÁñëÊÉë, ÂèØ‰ª•Êåâ HÈçµ Êü•Áúã„ÄÇ","Je≈õli masz wƒÖtpliwo≈õci co do zasad wci≈õnij H.","Ha k√©telyeid mer√ºln√©nek fel a szab√°lyokkal kapcsolatban, nyomd meg a H bet≈±t, hogy felhozd a seg√≠ts√©g ablakot.","Kurallar hakkƒ±nda herhangi bir ≈ü√ºpheniz varsa, H'ye basƒ±n."},
TIP_21 ={"Do you want to know what a card does? Hold <b>Ctrl</b> and click on it!","Quer saber o que uma carta faz? Segure <b>Ctrl</b> e clique nela!","Vous voulez savoir ce qu'une carte fait? Appuyez sur <b>Ctrl</b> et cliquez dessus!","–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–Ω–∞—Ç—å, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–∞—Ä—Ç–∞? –£–¥–µ—Ä–∂–∏–∞–π—Ç–µ <b>Ctrl</b> –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ—ë!","¬øQuieres saber¬†qu√© es lo que hace una carta?¬†¬°Presiona <b>Ctrl</b> y cliquea en la cual desees conocer!","‰Ω†ÊÉ≥Áü•ÈÅìÈÇ£‰∏ÄÂºµÂç°ÁâåÂèØ‰ª•ÂππÂòõ? ÂêåÊôÇÊåâËëó <b>Ctrl</b> ÂèäÈº†Ê®ôÈªûÊìäÂÆÉ!","Chcesz wiedzieƒá co robi karta? Przytrzymaj klawisz <b>Ctrl</b> i kliknij na to!","Szeretn√©d tudni mire k√©pes egy k√°rtya? Tartsd nyomva a <b>Ctrl</b> billenty≈±t √©s kattints r√°!","Bir kartƒ±n ne i≈üe yaradƒ±ƒüƒ±nƒ± bilmek ister misiniz? <b>Ctrl</b> tu≈üunu basƒ±lƒ± tutun ve √ºzerine tƒ±klayƒ±n!"},
TIP_23 ={"Learn about the house rules by pressing U and clicking on their names.","Aprenda sobre as regras da casa pressionando U e clicando sobre os nomes delas.","Apprenez-en plus √† propos des r√®gles de la maison en appuyant sur U et en cliquant sur leur nom. Learn about the house rules by pressing U and clicking on their names.","–£–∑–Ω–∞–π—Ç–µ –æ –¥–æ–º–∞—à–Ω–∏—Ö –ø—Ä–∞–≤–∏–ª–∞—Ö, –Ω–∞–∂–∞–≤ U –∏ –Ω–∞ –∏—Ö –∏–º–µ–Ω–∞.","Aprende las reglas de la casa presionando U y cliqueando en sus nombres.","Êåâ UÈçµ ÊàñÈªûÊìäËá™Ë®ÇË¶èÁü©ÁöÑÂêçÂ≠ó‰æÜ‰∫ÜËß£ÂÆÉÂÄëÁöÑÂÖßÂÆπ„ÄÇ","Dowiedz siƒô wiƒôcej o zasadach wciskajƒÖc U i klikajƒÖc nazwƒô zasady.","Ha szeretn√©l a h√°zszab√°lyokr√≥l tanulni, nyomd meg az U bet≈±t, √©s kattints a nev√ºkre.","U tu≈üuna basarak ve isimlerine tƒ±klayarak ev kurallarƒ± hakkƒ±nda bilgi edinin."},
TIP_24 ={"Try to have as many available moves as possible.","Procure ter o maior n√∫mero de poss√≠veis jogadas na m√£o.","Essayez de pouvoir faire le plus de d√©placements que possible.","–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —Å–¥–µ–ª–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ö–æ–¥–æ–≤.","Intenta tener la mayor cantidad de movimientos posibles.","ÂòóË©¶ËÆìËá™Â∑±ÊúâÂ§ö‰∏Ä‰∫õÂèØË°åÁöÑÊñπÊ≥ï‰æÜÁç≤ÂæóÂãùÂà©„ÄÇ","Staraj siƒô miec jak najwiƒôcej dostƒôpnych ruch√≥w jak to mo≈ºliwe.","Pr√≥b√°lj √∫gy j√°tszani, hogy min√©l t√∂bb lehets√©ges l√©p√©ssel √©s lehet≈ës√©ggel tudj √©lni.","M√ºmk√ºn olduƒüunca √ßok sayƒ±da hamle yapmaya √ßalƒ±≈üƒ±n."},
TIP_25 ={"You can see other players' profiles by typing !p [username] or by clicking on their names during a game.","Veja o perfil de outros jogadores digitando !p [nome] ou clicando no nome deles durante a partida.","Vous pouvez voir le profil des autres joueurs en tapant !p [pseudo] ou en cliquant sur leur pseudo pendant la partie.","–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞–±—Ä–∞–≤ !p [–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] –∏–ª–∏ –Ω–∞–∂–∞–≤ –Ω–∞ –∏—Ö –∏–º–µ–Ω–∞ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã.","Podr√°s ver el perfil de otros jugadores escribiendo !p [nombre] o cliqueando su nombre durante alg√∫n juego.","‰Ω†ÂèØ‰ª•Ëº∏ÂÖ• !p [Áé©ÂÆ∂ÂêçÁ®±] ÊàñÊòØÂú®ÈÅäÊà≤Ë£°ÈªûÊìä‰ªñÂÄëÁöÑÂêçÂ≠ó‰æÜÊü•Áúã‰ªñÂÄëÁöÑÂÄã‰∫∫Ë≥áÊñô„ÄÇ","Profile innych graczy mo≈ºesz zobaczyƒá wpisujƒÖc !p [nick] lub klikajƒÖc na nazwy podczas gry.","M√°sok profilj√°t megtekintheted a !p [felhaszn√°l√≥n√©v] paranccsal, illetve ha r√°kattintasz a nev√ºkre j√°t√©k k√∂zben.","Diƒüer oyuncularƒ±n profillerini !p [kullanƒ±cƒ±Adƒ±] yazarak veya oyun sƒ±rasƒ±nda isimlerine tƒ±klayarak g√∂rebilirsiniz."},
TIP_26 ={"Difficult to tell colors apart? Press O and activate colorblind mode to show symbols on the cards.","Dificuldades para diferenciar as cores? Pressione O e ative o modo dalt√¥nico para mostrar s√≠mbolos nas cartas.","","","","","","","Renkleri birbirinden ayƒ±rmak zor mu? Kartlarda sembolleri g√∂stermek i√ßin O tu≈üuna basƒ±n ve renk k√∂r√º modunu etkinle≈ütirin."},
TIP_27 ={"When you show a card in Team Matches, only your partner can see it.","No Jogo em Duplas, as cartas que voc√™ mostra s√£o vis√≠veis apenas para sua dupla.","Quand vous montrez une carte dans une Partie en √âquipe, seul votre co√©quipier peut la voir.","–ö–æ–≥–¥–∞ –≤—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç–µ –∫–∞—Ä—Ç—É –≤ –ö–æ–º–∞–Ω–¥–Ω–æ–π –ò–≥—Ä–µ, –µ—ë –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ –≤–∞—à –ø–∞—Ä—Ç–Ω—ë—Ä.","Cuando muestras una carta en partidas en equipo, s√≥lo tu compa√±ero puede verla.","Áï∂‰Ω†Âú®ÂúòÈöäÊ®°Âºè‰∏≠È°ØÁ§∫Âç°Áâå, Âè™Êúâ‰Ω†ÁöÑÊê≠Ê™îÊâçÁúãÁöÑË¶ã„ÄÇ","Kiedy poka≈ºesz kartƒô w Rundzie Dru≈ºynowej, tylko tw√≥j partnej mo≈ºe jƒÖ zobaczyƒá.","Ha felfedsz egy k√°rty√°t egy Csapatm√©rk≈ëz√©sben, csak a t√°rsad l√°thatja.","Takƒ±m Ma√ßlarƒ±nda bir kart g√∂sterdiƒüinizde, onu yalnƒ±zca partneriniz g√∂rebilir."},
TIP_28 ={"Complete quests and earn tickets to spend at the #unotfm shop! Press N for more information.","Conclua miss√µes e receba tickets para gastar na loja do #unotfm! Pressione N para mais informa√ß√µes..","","","","","","","G√∂revleri tamamlayƒ±n ve #unotfm maƒüazasƒ±nda harcayabileceƒüiniz biletler kazanƒ±n! Daha fazla bilgi i√ßin N'ye basƒ±n."},
TIP_29 ={"Your favorite map will appear in the room if you are the player with the most points.","O seu mapa favorito aparecer√° na sala caso voc√™ seja o jogador com mais pontos.","","","","","","","En √ßok puana sahip oyuncuysanƒ±z, favori haritanƒ±z odada g√∂r√ºnecektir."},
TIP_30 ={"At the #unotfm shop you can buy chairs and rules, among other cool items!","Na loja do #unotfm voc√™ pode comprar cadeiras, regras, entre outros itens legais!","","","","","","","#Unotfm maƒüazasƒ±ndan diƒüer harika √∂ƒüelerin yanƒ± sƒ±ra sandalye ve kurallar satƒ±n alabilirsiniz!"},
TIP_31 ={"The shop offers 10 random items. The prices and the color of the ticket charged can be different every day!","A loja oferece 10 itens aleat√≥rios. Os pre√ßos e a cor do ticket cobrado podem ser diferentes a cada dia!","","","","","","","D√ºkkan rastgele 10 √ºr√ºn sunuyor. √úcretlendirilen biletin fiyatlarƒ± ve rengi her g√ºn farklƒ± olabilir!"},
TIP_32 ={"You receive a ticket for each victory and also randomly when playing games.","Voc√™ recebe um ticket por cada vit√≥ria e tamb√©m alguns aleatoriamente ao jogar partidas.","","","","","","","Her zafer i√ßin ve ayrƒ±ca oyun oynarken rastgele bir bilet alƒ±rsƒ±nƒ±z."},
TIP_33 ={"#unotfm is a non-profit voluntary project. If you want to support it, visit the Credits area in the Menu.","O #unotfm √© um projeto volunt√°rio. Se voc√™ quiser apoiar, visite a √°rea Cr√©ditos no Menu.","","","","","","","#unotfm, kar amacƒ± g√ºtmeyen g√∂n√ºll√º bir projedir. Desteklemek istiyorsanƒ±z, Men√ºdeki Krediler alanƒ±nƒ± ziyaret edin."},
TIP_34 ={"Consumables can be purchased at the #unotfm shop and provide you with some extra help.","Consum√≠veis podem ser comprados na loja do #unotfm e oferecem algumas ajudas para voc√™.","","","","","","","T√ºketim maddeleri #unotfm maƒüazasƒ±ndan satƒ±n alƒ±nabilir ve size ekstra yardƒ±m saƒülayabilir."},
QUOTE_1 ={"welcome to my mansion","boas vindas √† minha mans√£o","bienvenue dans mon manoir","–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–π –æ—Å–æ–±–Ω—è–∫","bienvenido a mi mansi√≥n","Ê≠°Ëøé‰æÜÂà∞ÊàëÁöÑÂ§ßÂÆÖ","witam w mojej rezydencji","√ºdv√∂z√∂llek a kast√©lyomban","konaƒüƒ±ma ho≈ügeldin"},
QUOTE_2 ={"how about we bet candy?","que tal apostarmos doces?","et si on pariait des bonbons?","–∫–∞–∫ –Ω–∞—Å—á–µ—Ç —Å—Ç–∞–≤–æ–∫ –Ω–∞ –∫–æ–Ω—Ñ–µ—Ç—ã?","¬øqu√© tal si apostamos caramelos?","ÊàëÂÄë‰æÜÊâìË≥≠Á≥ñÊûúÊÄéÈ∫ºÊ®£?","jak zak≈Çadamy sie o cukierki?","mit sz√≥ln√°l, ha cukorban fogadn√°nk?","≈üekerleme bahse ne dersin?"},
QUOTE_3 ={"I arrived well in time for the party","cheguei bem a tempo para a festa","je suis arriv√© dans les temps pour faire la f√™te","—è –ø—Ä–∏–±—ã–ª –≤–æ–≤—Ä–µ–º—è –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω–∫—É","llegu√© en buen momento para la fiesta","ÊàëÂâõÂ•ΩÊ∫ñÊôÇÂú®Ê¥æÂ∞çÈñãÂßãÂâçÂèÉÂä†","Przyby≈Çem dobrze w czasie na imprezƒô.","√∫gy n√©z ki √©ppen id≈ëben √©rkeztem a bulihoz","Parti i√ßin zamanƒ±nda geldim"},
QUOTE_4 ={"I hope you forgive me","espero que me perdoe","j'esp√®re que tu me pardonneras","—è –Ω–∞–¥–µ—é—Å—å —Ç—ã –º–µ–Ω—è –ø—Ä–æ—Å—Ç–∏—à—å","creo que te olvidastes de m√≠","ÊàëÂ∏åÊúõ‰Ω†ÊúÉÂéüË´íÊàë","Mam nadziejƒô, ≈ºe mi wybaczysz","rem√©lem meg tudsz nekem bocs√°tani","Umarƒ±m beni affedersin"},
QUOTE_5 ={"nice try","boa tentativa","bien essay√©","—Ö–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞","buen intento","‰∏çÈåØÁöÑÂòóË©¶","Niez≈Ça pr√≥ba","sz√©p pr√≥b√°lkoz√°s","iyi deneme"},
QUOTE_6 ={"mmmph mph","","","–º–º–º ","hmmmmm hmmm","ÂóØÂóØÂëÉ ÂëÉ","",""},
QUOTE_7 ={"%s plays worse than Buffy","%s joga pior que a Buffy","Buffy joue mieux que %s","%s –∏–≥—Ä–∞–µ—Ç —Ö—É–∂–µ Buffy","%s¬†juega peor que¬†Buffy","%s ÊØî Buffy Áé©ÁöÑÈÇÑË¶ÅÁ≥üÁ≥ï","%s gra gorzej ni≈º Buffy","%s rosszabbul j√°tszik mint Buffy","%s Buffy'den daha k√∂t√º oynuyor"},
QUOTE_8 ={"arggh!","","–∞—Ä–≥—Ö!","ÂïäÂëÄ!","","ahh!"},
QUOTE_9 ={"easy game","f√°cil f√°cil","c'√©tait facile","–ª—ë–≥–∫–∞—è –∏–≥—Ä–∞","juego sencillo","ÁúüÂÆπÊòì","≈Çatwa gra","k√∂nny≈±","kolay oyun"},
QUOTE_10 ={"did anyone doubt my victory?","algu√©m duvidava da minha vit√≥ria?","quelqu'un a-t-il dout√© de ma victoire?","–∫—Ç–æ-–Ω–∏–±—É–¥—å —Å–æ–º–Ω–µ–≤–∞–ª—Å—è –≤ –º–æ–µ–π –ø–æ–±–µ–¥–µ?","¬øacaso alguien duda de mi victoria?","Êúâ‰∫∫Ë¶ÅÂê¶ÂÆöÊàëÁöÑÂãùÂà©Âóé?","Kto≈õ wƒÖtpi≈Ç w moje zwyciƒôstwo?","volt b√°rki, aki k√©telkedni mert a gy≈ëzelmemben?","kimse benim zaferimden ≈ü√ºphe etti mi?"},
QUOTE_11 ={"this was a scheme! I want a rematch","isso foi compl√¥! quero revanche","c'√©tait un coup mont√©! je veux une revanche","—ç—Ç–æ –±—ã–ª–∞ —Å—Ö–µ–º–∞! —è —Ö–æ—á—É —Ä–µ–≤–∞–Ω—à","¬°esto es culpa del sistema! exijo una revancha","ÈÄôÂè™ÊòØÊàëË®àÂäÉÁöÑ‰∏ÄÈÉ®ÂàÜ! ÊàëË¶ÅÈáç‰æÜ‰∏ÄÂ±Ä","to by≈Ça fabu≈Ça! Chcƒô rewan≈ºu","ez csak egy csel volt! √∫j j√°t√©kot k√∂vetelek","bu bir plandƒ±! R√∂van≈ü istiyorum"},
QUOTE_12 ={"my cards are great","minhas cartas est√£o √≥timas","mes cartes sont int√©ressantes","–º–æ–∏ –∫–∞—Ä—Ç—ã –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã","mis cartas son buenas","ÊàëÊâã‰∏äÁöÑÂç°ÁâåÁúüÊ£í","moje karty sƒÖ ≈õwietne","a k√°rty√°im remekek","kartlarƒ±m harika"},
QUOTE_13 ={"#!@%","","","","","","","",""},
QUOTE_85 ={"beginners' luck","sorte de principiante","la chance du d√©butant","–Ω–æ–≤–∏—á–∫–∞–º –≤–µ–∑—ë—Ç","suerte de principiante","Êñ∞ÊâãÈÅãÂêß","fart","kezd≈ë szerencs√©je","acemi ≈üansƒ±"},
QUOTE_86 ={"treachery!","na trairagem","triche!","–ø—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ!","¬°traici√≥n!","‰Ω†ËÉåÂèõÊàë!","zdrada!","√°rul√°s!","hƒ±yanet!"},
QUOTE_87 ={"ok, sweetie","t√° bem, meu amor","ok, ma puce","—Ö–æ—Ä–æ—à–æ, –º–∏–ª–∞—è","ok, cari√±o","ÂæàÂ•Ω, ÂØ∂Ë≤ù","ok, kochanie","rendben, √©desem","tamam tatlƒ±m"},
QUOTE_14 ={"does anyone need help?","algu√©m precisa de ajuda?","quelqu'un a besoin d'aide?","–∫–æ–º—É-–Ω–∏–±—É–¥—å –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?","¬ønadie me quiere ayudar?","Êúâ‰∫∫ÈúÄË¶ÅÂπ´ÂøôÂóé?","czy kto≈õ potrzebuje pomocy?","sz√ºks√©ge van valakinek seg√≠ts√©gre?","yardƒ±ma ihtiyacƒ± var mƒ±?"},
QUOTE_15 ={"uhu, I knew we could do it!","uhu, eu sabia que n√≥s conseguir√≠amos!","huhu, je savais qu'on pouvait le faire!","—é—Ö—É—É, —è –∑–Ω–∞–ª–∞, —á—Ç–æ –º—ã –º–æ–∂–µ–º —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å!","¬°huu, sab√≠a que pod√≠amos hacerlo!","ÂëÉ, ÊàëÁü•ÈÅìÊàëÂÄëÂÅöÁöÑÂà∞!","uhu, wiedzia≈Çam, ≈ºe mo≈ºemy to zrobiƒá!","uhu, tudtam hogy menni fog nek√ºnk!","uhu, yapabileceƒüimizi biliyordum!"},
QUOTE_16 ={"good job!","mandou bem!","bien jou√©!","—Ö–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞!","¬°buen trabajo!","ÂÅöÁöÑÂ•Ω!","dobra robota!","sz√©p munka!","aferin!"},
QUOTE_17 ={"merry christmas! give me presents","feliz natal! doem presentes para mim","joyeux no√´l! donnez moi des cadeaux!","—Å—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –†–æ–∂–¥–µ—Å—Ç–≤–∞! –ø–æ–¥–∞—Ä–∏—Ç–µ –º–Ω–µ –ø–æ–¥–∞—Ä–∫–∏","¬°feliz navidad! denme¬†mis regalos","ËÅñË™ïÂø´Ê®Ç! Âø´Áµ¶ÊàëÁ¶ÆÁâ©","weso≈Çych ≈õwiƒÖt! dajcie mi prezenty","boldog kar√°csonyt! k√©rem az aj√°nd√©kokat!","mutlu Noeller! bana hediyeler ver"},
QUOTE_18 ={"no presents for you, you phoney Santa Claus!","nada de presentes para voc√™, seu papai noel fajuto!","pas de cadeaux pour toi, faux P√®re No√´l !","–Ω–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è —Ç–µ–±—è, —Ç—ã —Ñ–∞–ª—å—à–∏–≤—ã–π –°–∞–Ω—Ç–∞-–ö–ª–∞—É—Å!","no hay regalos para ti, ¬°t√∫... falso Santa Claus!","Ê≤íÊúâÁµ¶‰Ω†ÁöÑÁ¶ÆÁâ©, ‰Ω†ÈÄôÂÅáËÅñË™ïËÄÅ‰∫∫È®ôÂ≠ê!","≈ºadnych prezent√≥w dla ciebie, ty fa≈Çszywy ≈öwiƒôty Miko≈Çaju!","nem √©rdemelsz aj√°nd√©kot, te kis hamis T√©lap√≥!","sana hediye yok, seni sahte Noel Baba!"},
QUOTE_19 ={"hohoho! merry christmas!","hohoho! feliz natal!","hohoho! joyeux no√´l!!","—Ö–æ-—Ö–æ-—Ö–æ! —Å—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –†–æ–∂–¥–µ—Å—Ç–≤–∞!","¬°hohoho! ¬°feliz navidad!","ÂëµÂëµÂëµ! ËÅñË™ïÂø´Ê®Ç!","hohoho! weso≈Çych ≈õwiƒÖt!","hohoho! boldog kar√°csonyt!","hohoho! mutlu Noeller!"},
QUOTE_20 ={"I thought you were just something grown-ups created to make us behave","achei que voc√™ era s√≥ uma inven√ß√£o para sermos bons ratinhos","","—è –¥—É–º–∞–ª, —á—Ç–æ —Ç—ã –ø—Ä–æ—Å—Ç–æ –≤–∑—Ä–æ—Å–ª—ã–π —á–µ–ª–æ–≤–µ–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã –∑–∞—Å—Ç–∞–≤–∏—Ç—å –Ω–∞—Å –≤–µ—Å—Ç–∏ —Å–µ–±—è –≤–∑—Ä–æ—Å–ª–µ–µ","pens√© que solo eres alguien mayor hecho para hacernos comportarnos","Êàë‰ª•ÁÇ∫‰Ω†Âè™ÊòØÁÇ∫‰∫ÜËÆìÊàëÂÄë‰πñ‰πñËÅΩË©±ËÄåÂ°ëÈÄ†ÁöÑ‰∫∫Áâ©","My≈õla≈Çem, ≈ºe jeste≈õ kim≈õ doros≈Çym stworzonym po to, aby≈õmy siƒô zachowywali","Azt hittem te csak egy dolog vagy amelyet a feln≈ëttek k√©sz√≠tettek, hogy fogadjunk sz√≥t","Bizi uslu kƒ±lmak i√ßin yaratƒ±lmƒ±≈ü yeti≈ükinler olduƒüunu sanƒ±yordum."},
QUOTE_21 ={"I thought you were just selling trinkets in room 801","e eu achei que voc√™ s√≥ vendia muambas na sala 801","je croyais que tu vendais des babioles dans le salon 801","—è –¥—É–º–∞–ª, —á—Ç–æ —Ç—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–∞–≤–∞–ª –±–µ–∑–¥–µ–ª—É—à–∫–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ 801","pens√© que solo estabas vendiendo trincheras en la sala 801","Êàë‰ª•ÁÇ∫‰Ω†Âè™ÊòØÂú® 801 ÊàøÈñìË≥£ÂªâÂÉπË£ùÈ£æÂìÅÁöÑÂ∞èÈº†","My≈õla≈Çem, ≈ºe sprzedajesz ozd√≥bki w pokoju 801","Azt hittem bizsut √°rulsz a 801-es szob√°ban","801 numaralƒ± odada ƒ±vƒ±r zƒ±vƒ±r sattƒ±ƒüƒ±nƒ± sanƒ±yordum."},
QUOTE_22 ={"I'm the real Transformice Christmas NPC","eu que sou o verdadeiro NPC de natal do Transformice","je suis le vrai PNJ de no√´l sur Transformice","—è –Ω–∞—Å—Ç–æ—è—â–∏–π –†–æ–∂–¥–µ—Å—Ç–≤–µ–Ω—Å–∫–∏–π Transformice NPC","soy el verdadero NPC de navidad de Transformice","ÊàëÊòØ Trasnformice ÁúüÊ≠£ÁöÑËÅñË™ï NPC","Jestem prawdziwym Myszkowym ≈öwiƒÖtecznym NPC","√ân vagyok az igazi Transformice Kar√°csonyi NPC","Ben ger√ßek Transformice Noel NPC'siyim"},
QUOTE_23 ={"so why does nobody remember you?","ent√£o por que ningu√©m lembra de voc√™?","alors pouquoi personne se souvient de toi?","—Ç–∞–∫ –ø–æ—á–µ–º—É –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–º–Ω–∏—Ç —Ç–µ–±—è?","¬øpor qu√© nadie te recuerda?","ÈÇ£ÁÇ∫‰ªÄÈ∫ºÊ≤íÊúâ‰∫∫Ë®òÂæó‰Ω†?","wiƒôc czemu nikt ciebie nie pamiƒôta? ","nos, mi√©rt nem eml√©kszik r√°d senki?","√ñyleyse neden kimse seni hatƒ±rlamƒ±yor?"},
QUOTE_24 ={"why don't you go back to your shop?","por que voc√™ n√£o volta para sua loja?","pourquoi ne retournes-tu pas √† ton magasin?","–ø–æ—á–µ–º—É –±—ã —Ç–µ–±–µ –Ω–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Å–≤–æ–π –º–∞–≥–∞–∑–∏–Ω?","¬øpor qu√© no te regresas a tu tienda?","ÁÇ∫‰ªÄÈ∫º‰Ω†‰∏çÂõûÂéª‰Ω†ÁöÑÂ∫óÈã™ÁπºÁ∫åÂ∑•‰Ωú?","czemu nie wr√≥cisz do swojego sklepu?","mi√©rt nem m√©sz vissza a boltocsk√°dba?","neden d√ºkkanƒ±na geri d√∂nm√ºyorsun?"},
QUOTE_25 ={"presents for everyone!","presentes para todos!","cadeaux pour tout le monde!","–ø–æ–¥–∞—Ä–∫–∏ –¥–ª—è –≤—Å–µ—Ö!","¬°regalos para todos!","Áµ¶ÊâÄÊúâ‰∫∫ÁöÑËÅñË™ïÁ¶ÆÁâ©!","prezenty dla wszystkich!","aj√°nd√©kok mindenkinek!","herkese hediyeler!"},
QUOTE_26 ={"yay","oba","","—É—Ä–∞","","Â•ΩÊ£í","jej","","yeey"},
QUOTE_27 ={"except for you","menos para voc√™","sauf pour toi","–∫—Ä–æ–º–µ —Ç–µ–±—è","excepto para ti","Èô§‰∫Ü‰Ω†","opr√≥cz ciebie","kiv√©ve neked","sen hari√ß"},
QUOTE_28 ={"%s behaved this year","%s se comportou muito bem neste ano","%s s'est bien comport√©e cette ann√©e","%s —Ö–æ—Ä–æ—à–æ –≤—ë–ª —Å–µ–±—è –≤ —ç—Ç–æ–º –≥–æ–¥—É","%s se port√≥ bien este a√±o","%s ‰ªäÂπ¥ÊúâÂ•ΩÂ•ΩËÅΩË©±Âì¶","%s zachowywa≈Ç siƒô w tym roku","%s id√©n j√≥l viselkedett","%s bu yƒ±l iyi davrandƒ±"},
QUOTE_29 ={"thank you! you are very kind","obrigado! voc√™ √© muito gentil","merci! tu es tr√®s gentil","–±–ª–∞–≥–æ–¥–∞—Ä—é —Ç–µ–±—è! —Ç—ã –æ—á–µ–Ω—å –¥–æ–±—Ä—ã–π","¬°gracias! ¬°eres muy amable!","Ë¨ùË¨ù! ‰Ω†‰∫∫ÁúüÂ•Ω","dziƒôkuje! jeste≈õ bardzo mi≈Çy!","k√∂sz√∂n√∂m! nagyon kedves t≈ëled","te≈üekk√ºr ederim! √ßok kibarsƒ±n"},
QUOTE_30 ={"why, you...","ora, seu...","pourquoi, tu...","–ø–æ—á–µ–º—É, —Ç—ã...","por qu√©, t√∫...","ÁÇ∫‰ªÄÈ∫º, ‰Ω†...","czemu, ty...","mi√©rt, te kis...","neden sen..."},
QUOTE_31 ={"humph!","","","–≥–º!","","Á¢∞!","","",""},
QUOTE_32 ={"thank you, but I'll leave this gift for %s","agrade√ßo, mas vou deixar este presente para %s","merci, mais je laisserai ce cadeau √† %s","—Å–ø–∞—Å–∏–±–æ, –Ω–æ —è –æ—Å—Ç–∞–≤–ª—é —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è %s","gracias, pero dejar√© este regalo para %s","Ë¨ùË¨ù, ‰ΩÜÊàëÊúÉÊääÈÄôÁ¶ÆÁâ©ÈÄÅÁµ¶ %s","dziƒôkujƒô, ale dam ten prezent %s","k√∂sz√∂n√∂m, de ezt az aj√°nd√©kot ink√°bb meghagyom %s sz√°m√°ra","te≈üekk√ºr ederim, ama bu hediyeyi %s i√ßin bƒ±rakacaƒüƒ±m"},
QUOTE_33 ={"thanks for the gift, but I'd rather win","obrigado pelo presente, mas eu prefiro ganhar","merci pour le cadeau, mais je pr√©f√®re gagner","—Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–∞—Ä–æ–∫, –Ω–æ –ª—É—á—à–µ –±—ã —è –≤—ã–∏–≥—Ä–∞–ª","gracias por el regalo, pero prefiero ganar","Ë¨ùË¨ù‰Ω†ÁöÑÁ¶ÆÁâ©, ÂèØÊòØÊàëÊØîËºÉÊÉ≥ÂãùÂá∫ÈÄôÂ±ÄÈÅäÊà≤","dziƒôkuje za prezent, ale wole wygraƒá","k√∂sz√∂n√∂m az aj√°nd√©kot, de ink√°bb nyern√©k","hediye i√ßin te≈üekk√ºrler ama ben kazanmayƒ± tercih ederim"},
QUOTE_34 ={"thanks for the gift, guys! merry christmas!","obrigado pelo presente, pessoal! feliz natal!","merci pour le cadeau les gars! joyeux no√´l!","—Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–∞—Ä–æ–∫, —Ä–µ–±—è—Ç–∞! —Å—á–∞—Å—Ç–ª–∏–≤–æ–≥–æ –†–æ–∂–¥–µ—Å—Ç–≤–∞!","¬°gracias por el regalo, chicos! ¬°feliz navidad!","Ë¨ùË¨ù‰Ω†ÁöÑÁ¶ÆÁâ©, ÂêÑ‰Ωç! ËÅñË™ïÂø´Ê®Ç!","dziƒôkuje za prezent, ch≈Çopaki! weso≈Çych ≈õwiƒÖt!","k√∂sz√∂n√∂m az aj√°nd√©kot, sr√°cok! boldog kar√°csonyt!","hediye i√ßin te≈üekk√ºrler beyler! mutlu Noeller!"},
QUOTE_35 ={"now go back to your toys!","agora volte para seus brinquedinhos!","maintenant retournes √† tes jouets!","—Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∫ —Å–≤–æ–∏–º –∏–≥—Ä—É—à–∫–∞–º!","¬°ahora de vuelta a jugar!","ÁèæÂú®‰Ω†ÂÄëÁπºÁ∫åÁé©Âêß!","teraz wracaj do swoich zabawek!","most pedig menj sz√©pen vissza a j√°t√©kaidhoz!","≈üimdi oyuncaklarƒ±nƒ±za geri d√∂n√ºn!"},
QUOTE_36 ={"great victory! thanks guys!","grande vit√≥ria! obrigado gente!","belle victoire! merci les gars!","–æ—Ç–ª–∏—á–Ω–∞—è –ø–æ–±–µ–¥–∞! —Å–ø–∞—Å–∏–±–æ, —Ä–µ–±—è—Ç–∞!","¬°gran victoria! ¬°gracias chicos!","ÁúüÊòØÁ≤æÂΩ©ÁöÑÂãùÂà©! Ë¨ùË¨ùÂêÑ‰Ωç!","wielkie zwyciƒôstwo! dziƒôki ch≈Çopaki!","sz√©p gy≈ëzelem! k√∂sz√∂n√∂m, sr√°cok!","b√ºy√ºk zafer! te≈üekk√ºrler beyler!"},
QUOTE_37 ={"you didn't deserve this!","voc√™ n√£o merecia isso!","tu ne m√©ritais pas √ßa!","—Ç—ã —ç—Ç–æ–≥–æ –Ω–µ –∑–∞—Å–ª—É–∂–∏–ª!","¬°t√∫ no mereces esto!","‰Ω†Êâç‰∏çÂÄºÂæóÂãùÂà©!","nie zas≈Çu≈ºy≈Çe≈õ na to!","te nem ezt √©rdemelted volna!","bunu hak etmedin!"},
QUOTE_38 ={"zzzz...","","","","","","","",""},
QUOTE_39 ={"nom nom...","nam nam...","miam miam...","–Ω—è–º –Ω—è–º...","","Âëº Âô¢...","","",""},
QUOTE_40 ={"what, are we playing?","u√©, estamos jogando?","quoi, est-ce qu'on joue?","—á—Ç–æ? –º—ã –∏–≥—Ä–∞–µ–º?","¬øqu√©? ¬øestamos jugando?","‰ªÄÈ∫º, ÊàëÂÄëÂú®Áé©Âóé?","chwila, gramy?","hogy mi, m√°r megy a j√°t√©k?","ne oynuyoruz?"},
QUOTE_41 ={"did you start without me?","come√ßaram sem mim?","as-tu commenc√© sans moi?","—Ç—ã –Ω–∞—á–∞–ª –±–µ–∑ –º–µ–Ω—è?","¬øempezastes sin m√≠?","‰Ω†ÂâõÂâõÊ≤íÁ≠âÊàëÂ∞±ÈñãÂßã‰∫ÜÈÅäÊà≤?","zaczeli≈õcie beze mnie?","elkezdt√©tek n√©lk√ºlem?","bensiz mi ba≈üladƒ±n?"},
QUOTE_42 ={"it started? but no one warned me","come√ßou? mas ningu√©m me avisou","√ßa a commenc√©? personne ne m'a pr√©venu","–∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å? –Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª –º–µ–Ω—è","¬øempez√≥? pero si nadie me hab√≠a dicho","ÈÅäÊà≤ÈñãÂßã‰∫Ü? ÂèØÊòØÊ≤íÊúâ‰∫∫ÊèêÈÜíÊàë","zaczƒô≈Ço siƒô? nikt mnie nie ostrzeg≈Ç","elkezd≈ëd√∂tt? de senki sem figyelmeztetett","ba≈üladƒ±? ama kimse beni uyarmadƒ±"},
QUOTE_43 ={"it's over already?","j√° acabou?","c'est d√©j√† fini?","–≤—Å–µ —É–∂–µ –∫–æ–Ω—á–µ–Ω–æ?","¬øya se acab√≥?","Â∑≤Á∂ìÂÆåÁµê‰∫ÜÂóé?","to ju≈º koniec?","m√°ris v√©ge?","√ßoktan bitti mi?"},
QUOTE_44 ={"I was not prepared!","eu n√£o estava preparada!","j'√©tais pas pr√™te!","—è –Ω–µ –±—ã–ª –≥–æ—Ç–æ–≤–∞!","¬°no estaba preparada!","ÊàëÈÇÑÊ≤íÊúâÊ∫ñÂÇô!","Nie by≈Çam gotowa!","nem voltam felk√©sz√ºlve!","Hazƒ±r deƒüildim!"},
QUOTE_45 ={"I won!","ganhei!","j'ai gagn√©!","—è –ø–æ–±–µ–¥–∏–ª–∞!","¬°gan√©!","ÊàëÂãùÂá∫‰∫Ü!","Wygra≈Çam!","√©n nyertem!","Kazandƒ±m!"},
QUOTE_46 ={"now I'm going to take a... zzzz","agora eu vou tirar um... zzzz","maintenant je vais faire une... zzzz","—Ç–µ–ø–µ—Ä—å —è —Å–æ–±–∏—Ä–∞—é—Å—å –≤–∑—è—Ç—å... zzzz","ahora me voy a... zzzz","ÁèæÂú®ÊàëË¶ÅÂéªÁù°‰∏Ä‰∏ã‰∫Ü... zzzz","teraz wezmƒô... zzzz","most pedig lefekszek kicsit... zzzz...","≈üimdi bir ... zzzz alacaƒüƒ±m"},
QUOTE_47 ={"let me play!","deixa eu jogar!","laisse moi jouer!","–¥–∞–π –º–Ω–µ –ø–æ–∏–≥—Ä–∞—Ç—å!","¬°d√©jame jugar!","ËÆìÊàëÁé©Âòõ!","daj mi zagraƒá!","hadd j√°tsszak √©n is!","oynamama izin ver!"},
QUOTE_48 ={"one less","menos um","un de moins","–Ω–∞ –æ–¥–Ω–æ–≥–æ –º–µ–Ω—å—à–µ","uno menos","ÈÇÑÂ∑Æ‰∏ÄÂÄã","jeden mniej","eggyel kevesebb!","bir tane daha az"},
QUOTE_49 ={"so close, but I am prepared","quase, mas estou preparada","si proche, mais je suis pr√™te","—Ç–∞–∫ –±–ª–∏–∑–∫–æ, –Ω–æ —è –≥–æ—Ç–æ–≤–∞","muy cerca, pero estoy preparada","Â∑ÆÈªû, ‰∏çÈÅéÊàëÂ∑≤Á∂ìÊ∫ñÂÇôÂ•Ω‰∫Ü","tak blisko, ale jestem przygotowana","k√∂zeli, de fel vagyok k√©sz√ºlve","√ßok yakƒ±n ama hazƒ±rƒ±m"},
QUOTE_50 ={"I AM ALREADY AWAKE","J√Å ESTOU ACORDADA","JE SUIS D√âJ√Ä R√âVEILL√âE","–Ø –£–ñ–ï –ü–†–û–°–ù–£–õ–ê–°–¨","ESTOY DESPIERTA OK","Êàë.Â∑≤.Á∂ì.ÈÜí.‰æÜ.‰∫Ü.","JU≈ª SIƒò OBUDZI≈ÅAM","M√ÅR √âBREN VAGYOK","ZATEN UYANIYORDUM"},
QUOTE_51 ={"it's not fair!","n√£o √© justo!","c'est pas du jeu!","—ç—Ç–æ –Ω–µ—á–µ—Å—Ç–Ω–æ!","¬°no es justo!","ÈÄô‰∏çÂÖ¨Âπ≥!","to niesprawiedliwe!","nem √©r!","bu adil deƒüil!"},
QUOTE_52 ={"thanks ^^","obrigada ^^","merci ^^","—Å–ø–∞—Å–∏–±–æ ^^","gracias¬†^^","Ë¨ùË¨ù ^^","dziƒôki ^^","k√∂sz√∂n√∂m ^^","te≈üekk√ºrler ^^"},
QUOTE_53 ={"%s is gone","%s se foi","%s est parti","%s —É—à—ë–ª","%s est√° perdido","%s Èõ¢Èñã‰∫Ü","%s zniknƒÖ≈Ç","%s elt≈±nt","%s gitti"},
QUOTE_54 ={"welcome to my temple!","boas vindas ao meu templo!","bienvenue dans mon temple!","–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ–π —Ö—Ä–∞–º!","¬°bienvenido/a a mi templo!","Ê≠°Ëøé‰æÜÂà∞ÊàëÁöÑÂªüÂÆá!","witam w mojej ≈õwiƒÖtyni!","√ºdv√∂z√∂llek a templomomban!","tapƒ±naƒüƒ±ma ho≈ü geldiniz!"},
QUOTE_55 ={"today you will be put to the test!","hoje voc√™s ser√£o colocados a prova!","aujourd'hui tu seras mis √† l'√©preuve!","—Å–µ–≥–æ–¥–Ω—è –≤–∞—Å –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å!","¬°hoy ser√°n puestas a prueba tus capacidades!","‰ªäÂ§©‰Ω†Ë¶ÅÈù¢Â∞ç‰∏ÄÂÄãÊåëÊà∞!","dzisiaj zostaniecie wystawieni na pr√≥bƒô!","a mai napon te teszel megm√©rettetve!","bug√ºn teste tabi tutulacaksƒ±n!"},
QUOTE_56 ={"get ready!","estejam preparados!","pr√©pare-toi!","–ø—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å!","¬°prep√°rate!","Ê∫ñÂÇôÂõâ!","przygotujcie siƒô!","k√©sz√ºlj fel!","Hazƒ±rlan!"},
QUOTE_57 ={"a penalty for anyone who dares to touch the sacred deck!","uma penalidade para quem ousar tocar no baralho sagrado!","une penalit√© pour tous ceux qui osent toucher le jeu sacr√©!","–Ω–∞–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –æ—Å–º–µ–ª–∏—Ç—Å—è –ø—Ä–∏–∫–æ—Å–Ω—É—Ç—å—Å—è –∫ —Å–≤—è—â–µ–Ω–Ω–æ–π –∫–æ–ª–æ–¥–µ!","¬°le dar√© una penalizaci√≥n a quien se atreva a tocar el mazo sagrado!","Ë™∞Êï¢Á¢∞ÈÇ£ÂèØÊÄïÁöÑÁâåÂ∫´Ë™∞Â∞±ÊúÉÂæóÂà∞Êá≤ÁΩ∞!","kara dla ka≈ºdego, kto o≈õmieli siƒô dotknƒÖƒá ≈õwiƒôtej talii!","b√ºntet√©s azoknak, akik hozz√° mernek √©rni a szent paklihot!","kutsal g√ºverteye dokunmaya cesaret eden herkes i√ßin bir ceza!"},
QUOTE_58 ={"winter has come! supplies are scarce!","o inverno chegou! os suprimentos est√£o escassos!","l'hiver est arriv√©! les provisions se font rares!","–∑–∏–º–∞ –ø—Ä–∏—à–ª–∞! –∑–∞–ø–∞—Å—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã!","¬°el invierno arriv√≥! las reservas se agotan...","ÂÜ¨Â§©‰æÜ‰∫Ü! Ë≥áÊ∫êËÆäÁ®ÄÂ∞ë‰∫Ü!","nadesz≈Ça zima! dostawy sƒÖ rzadko≈õciƒÖ!","a t√©l meg√©rkezett! az ell√°tm√°nyok sz≈±k√∂sek","kƒ±≈ü geldi! malzeme kƒ±t!"},
QUOTE_59 ={"peace? anything but that","paz? quase isso","paix? tout sauf √ßa","–º–∏—Ä? —á—Ç–æ-–Ω–∏–±—É–¥—å –∫—Ä–æ–º–µ —ç—Ç–æ–≥–æ","¬øpaz? todo menos eso","ÂíåÂπ≥? Èô§‰∫ÜÈÄôÂÄãÂÖ∂‰ªñÁöÑÈÉΩÊ≤íÊâÄË¨Ç","pok√≥j? cokolwiek ale to","b√©kess√©g? b√°rmit, csak azt nem","Barƒ±≈ü? bundan ba≈üka bir ≈üey"},
QUOTE_60 ={"deja vu","","d√©j√† vu","–¥–µ–∂–∞–≤—é","d√©j√† vu","deja vu (ÂπªË¶∫Ë®òÊÜ∂)","","",""},
QUOTE_61 ={"hurry up! time is running out!","se apressem! o tempo est√° acabando!","d√©p√®che-toi! le temps presse!","–ø–æ—Ç–æ—Ä–æ–ø–∏—Å—å! –≤—Ä–µ–º—è –∏–¥—ë—Ç!","¬°arriba! ¬°es tiempo de marcharse!","Âø´Èªû! Ë¶ÅÊ≤íÊôÇÈñì‰∫Ü!","szybciej! czas siƒô ko≈Ñczy!","siess! fogy az id≈ëd!","acele et! zaman bitiyor!"},
QUOTE_62 ={"don't lose control!","n√£o percam o controle!","ne perds pas le contr√¥le!","–Ω–µ —Ç–µ—Ä—è–π –∫–æ–Ω—Ç—Ä–æ–ª—å!","¬°no pierdas el contro!l","Âà•Â§±ÂéªÁêÜÊô∫!","nie traƒá kontroli!","ne vesz√≠tsd el az ir√°ny√≠t√°st","kontrol√º kaybetme!"},
QUOTE_63 ={"you are not ready","voc√™s n√£o est√£o prontos","tu n'es pas pr√™t","—Ç—ã –Ω–µ –≥–æ—Ç–æ–≤","no es suficiente","‰Ω†ÈÇÑÊ≤íÊúâÊ∫ñÂÇôÂ•Ω","nie jeste≈õ gotowy","nem √°llsz k√©szen","hazƒ±r deƒüilsin"},
QUOTE_64 ={"better luck next time!","mais sorte da pr√≥xima vez!","plus de chance la prochaine fois!","–ø–æ–≤–µ–∑—ë—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!","¬°buena suerte la pr√≥xima vez!","Á•ù‰Ω†‰∏ãÊ¨°Â•ΩÈÅã!","nastƒôpnym razem bƒôdzie lepiej!","sok sikert legk√∂zelebb!","bir dahaki sefere iyi ≈üanslar!"},
QUOTE_65 ={"%s will be a great shaman!","%s ser√° um √≥timo shaman!","%s va √™tre un excellent chamane!","%s –±—É–¥–µ—Ç –≤–µ–ª–∏–∫–∏–º —à–∞–º–∞–Ω–æ–º!","¬°%s ser√° una gran cham√°n!","%s Â∞áÊúÉÊàêÁÇ∫‰∏ÄÂÄãÂº∑Â§ßÁöÑËñ©Êªø!","%s bƒôdzie ≈õwietnym szamanem!","%s kit≈±n≈ë s√°m√°n lesz!","%s harika bir ≈üaman!"},
QUOTE_66 ={"I'm mad, even though I shouldn't be","acho que estou sentindo raiva, mas eu n√£o deveria","Je suis en col√®re, m√™me si je ne devrais pas l'√™tre","—è –∑–ª—é—Å—å, —Ö–æ—Ç—è —è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–∞–∫–æ–π","creo que estoy enfurecida, no deber√≠a de estarlo","ÊàëË¶ÅÊäìÁãÇ‰∫Ü, ÈõñÁÑ∂Êàë‰∏çÊáâË©≤ÈÄôÊ®£","My≈õlƒô, ≈ºe jestem w≈õciek≈Çy, a nie powinienem byƒá","m√©rges vagyok, pedig nem kellene annak lennem","Kƒ±zmam gerekse bile kƒ±zgƒ±nƒ±m"},
QUOTE_67 ={"%s unlocked the title ¬´Adorer¬ª","%s desbloqueou o t√≠tulo ¬´Adorador¬ª","%s a d√©bloqu√© le titre ¬´Adorer¬ª","%s —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª —Ç–∏—Ç—É–ª ¬´–û–±–æ–∂–∞—Ç–µ–ª—å¬ª","%s¬†ha desbloqueado el t√≠tulo¬†¬´Adorador¬ª","%s Ëß£Èéñ‰∫ÜÁ®±Ëôü ¬´ÂÅ∂ÂÉè¬ª","%s odblokowa≈Ç tytu≈Ç ¬´Wielbiciel¬ª","%s megszerezte a(z) ¬´Im√°d√≥¬ª c√≠met.","%s, ¬´Hayran¬ª unvanƒ±nƒ±n kilidini a√ßtƒ±"},
QUOTE_68 ={"or not","s√≥ que n√£o","ou pas","–∏–ª–∏ –Ω–µ—Ç","o no","‰∏çÁÑ∂Âë¢","albo nie","vagy nem","ya da deƒüil"},
QUOTE_69 ={"hey, how dare you!","ei, como ousa!","eh! comment oses-tu!","—ç–π, –∫–∞–∫ —Ç—ã —Å–º–µ–µ—à—å!","hey, ¬°c√≥mo pudiste!","ÂñÇ, ‰Ω†Á´üÊï¢ÈÄôÊ®£Â∞çÊàë!","hej, jak mog≈Çe≈õ! ","h√©, hogy mer√©szeled!","hey, nasƒ±l c√ºret edersin!"},
QUOTE_70 ={"did you play this card on me? suffer the wrath of the sacred cannon!","jogaste esta carta em mim? sofra com a ira do cannon sagrado!","as-tu jou√© cette carte sur moi? did you play this card on me? subis la col√®re du canon sacr√©!","—Ç—ã –ø–æ–ª–æ–∂–∏–ª —ç—Ç—É –∫–∞—Ä—Ç—É –º–Ω–µ? —Ç–µ—Ä–ø–∏ –≥–Ω–µ–≤ —Å–≤—è—â–µ–Ω–Ω–æ–π –ø—É—à–∫–∏!","¬øacabas de jugar esa carta en m√≠? ¬°ahora sufrir√°s el dolor del ca√±√≥n sagrado!","‰Ω†ÂâõÂâõÊòØÂêëÊàëÁôºÂá∫‰∫ÜÈÄôÂºµÂç°Âóé? ÊâøÂèóË¢´ÂöáÂÄíËÄåÊÜ§ÊÄíÁöÑÁÇÆÂΩàÁöÑÂèçÊìäÂêß!","u≈ºy≈Çe≈õ tej karty na mnie? ponie≈õ gniew ≈õwiƒôtej armaty!","ellenem mer√©szelted j√°tszani ezt a k√°rty√°t? tapasztald meg a szentelt √°gy√∫goly√≥ haragj√°t!","bu kartƒ± bana mƒ± oynadƒ±n? kutsal topun gazabƒ±na uƒürayƒ±n!"},
QUOTE_71 ={"it could have been a better curse...","podia ter vindo uma maldi√ß√£o melhor...","√ßa aurait pu √™tre une meilleure mal√©diction...","—ç—Ç–æ –º–æ–≥–ª–æ –±—ã—Ç—å –ª—É—á—à–µ–µ –ø—Ä–æ–∫–ª—è—Ç–∏–µ...","pudo ser una mejor maldici√≥n...","ÈÇ£ÂÄãÊú¨‰æÜÂèØ‰ª•ÊòØÊõ¥Â•ΩÁöÑË©õÂíí...","mog≈Ço to byƒá lepsze przekle≈Ñstwo ...","lehetett volna valami jobb √°tok is...","daha iyi bir lanet olabilirdi ..."},
QUOTE_72 ={"you have a good taste for appearances, %s!","voc√™ tem um bom gosto para visuais, %s!","tu as un bon go√ªt pour les apparences, %s!","—É —Ç–µ–±—è —Ö–æ—Ä–æ—à–∏–π –≤–∫—É—Å –∫ –≤–Ω–µ—à–Ω–µ–º—É –≤–∏–¥—É %s!","¬°tienes un buen gusto por las apariencias, %s!","%s, ‰Ω†Â∞çÊôÇË£ùÁöÑÂìÅÂë≥ÁúüÂ•Ω!","masz dobry gust do wystƒôp√≥w, %s!","remek divat√©rz√©ked van, %s!","g√∂r√ºn√ºmler konusunda iyi bir zevkin var, %s!"},
QUOTE_73 ={"we have visitors!","oba temos visitas!","on a des visiteurs!","—É –Ω–∞—Å –µ—Å—Ç—å –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏!","¬°tenemos visitantes!","ÊàëÂÄëÊúâË®™ÂÆ¢‰∫Ü!","mamy go≈õci!","l√°togat√≥ink vannak!","ziyaret√ßilerimiz var!"},
QUOTE_74 ={"no bets! don't you remember what happened the last time?","nada de apostas! voc√™ sabe o que aconteceu da √∫ltima vez","pas de paris! tu ne te souviens pas de ce qui s'est pass√© la derni√®re fois?","–Ω–µ—Ç —Å—Ç–∞–≤–æ–∫! —Ç—ã –Ω–µ –ø–æ–º–Ω–∏—à—å, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑?","¬°sin apuestas! ¬øno recuerdas lo que ocurri√≥ la √∫ltima vez?","Âà•ÊâìË≥≠! ‰Ω†ÂøòË®ò‰∫Ü‰∏äÊ¨°ÁöÑ‰∫ãÂóé?","bez zak≈Çad√≥w! nie pamiƒôtasz, co siƒô sta≈Ço ostatnim razem?","nincs fogad√°s! nem eml√©kszel mi t√∂rt√©nt legut√≥bb?","bahis yok! en son ne olduƒüunu hatƒ±rlamƒ±yor musun?"},
QUOTE_75 ={"I will never forgive you!","eu n√£o vou perdoar!","Je ne te pardonnerai jamais !","—è –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–æ—â—É —Ç–µ–±—è!","¬°nunca te lo perdonar√©!","Êàë‰∏çÊúÉÂéüË´í‰Ω†ÁöÑ!","Nigdy Ci nie wybaczƒô!","soha nem bocs√°tok meg neked!","Seni asla affetmeyeceƒüim!"},
QUOTE_76 ={"my mother was right, I shouldn't have married a vampire","minha m√£e estava certa, eu n√£o devia ter casado com um vampiro","ma m√®re avait raison, je n'aurais pas du me marier avec un vampire.","–º–æ—è –º–∞–º–∞ –±—ã–ª–∞ –ø—Ä–∞–≤–∞, —è –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª –∂–µ–Ω–∏—Ç—å—Å—è –Ω–∞ –≤–∞–º–ø–∏—Ä–µ","mi madre ten√≠a raz√≥n, nunca deb√≠ casarme con un vampiro","ÊàëÂ™ΩË™™ÁöÑÂ∞ç, Êàë‰∏çÊáâË©≤Â´ÅÁµ¶‰∏ÄÂÄãÂê∏Ë°ÄÈ¨º","moja matka mia≈Ça racjƒô, nie powinnam by≈Ça po≈õlubiƒá wampira","az anyuk√°mnak igaza volt, nem kellett volna hozz√°mennem egy v√°mp√≠rhoz","annem haklƒ±ydƒ±, bir vampirle evlenmemeliydim"},
QUOTE_77 ={"calm down, honey, it's just a game","calma, meu amor, √© s√≥ um jogo","du calme, ch√©ri, ce n'est qu'un jeu.","—É—Å–ø–æ–∫–æ–π—Å—è, –º–∏–ª–∞—è, —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–≥—Ä–∞","c√°lmate amigo, es s√≥lo un juego","ÊîæËºïÈ¨ÜÈªû, ÂØ∂Ë≤ù, ÈÄôÂè™ÊòØ‰∏ÄÂÄãÈÅäÊà≤","uspok√≥j siƒô, kochanie, to tylko gra","nyugodj meg, √©desem, ez csak egy j√°t√©k","sakin ol tatlƒ±m, bu sadece bir oyun"},
QUOTE_78 ={"but they're still better than you","mas ainda n√£o chega aos seus p√©s","mais ils sont toujours meilleurs que toi","–Ω–æ –æ–Ω–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –ª—É—á—à–µ —Ç–µ–±—è","pero ellos no son oponentes dignos para ti","ÂèØÊòØ‰ªñÂÄëÈÇÑÊòØÊØî‰Ω†Áé©ÁöÑÊõ¥Â•Ω","ale one nie pasujƒÖ do ciebie","de m√©g mindig jobbak n√°lad","ama yine de senden daha iyiler"},
QUOTE_79 ={"congratulations, my love","parab√©ns, meu amor","f√©licitations, mon amour","–ø–æ–∑–¥—Ä–∞–≤–ª—è—é, –º–æ—è –ª—é–±–æ–≤—å","felicidades, mi amor","ÊÅ≠Âñú, ÊàëË¶™ÊÑõÁöÑ","gratulacje, kochanie","gratul√°lok, szerelmem","tebrikler a≈ükƒ±m"},
QUOTE_80 ={"can you choose what to draw? people, he's cheating!","voc√™ pode escolher o que vai comprar? gente ele t√° trapaceando!","tu peux choisir la carte √† tirer? les gens, c'est un tricheur!","—Ç—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å, —á—Ç–æ –≤–∑—è—Ç—å? –ª—é–¥–∏, –æ–Ω –æ–±–º–∞–Ω—ã–≤–∞–µ—Ç!","¬øpuedes elegir que sortear? ¬°gente, est√° haciendo trampa!","‰Ω†ÂèØ‰ª•ÈÅ∏ÊìáË¶ÅÊäΩÂà∞‰ªÄÈ∫ºÂç°? ÂêÑ‰Ωç, ‰ªñÂú®‰ΩúÂºä!","czy mo≈ºesz wybraƒá to co chcesz dobraƒá? ludzie, on oszukuje!","kiv√°laszthatod mit h√∫zol fel? emberek, egy csal√≥!","ne √ßekeceƒüini se√ßebilir misin? insanlar, hile yapƒ±yor!"},
QUOTE_81 ={"I'm beginning to get the hang of it","j√° estou come√ßando a pegar o jeito","je commence √† m'y faire","—è –Ω–∞—á–∏–Ω–∞—é –ø–æ–Ω–∏–º–∞—Ç—å —ç—Ç–æ","estoy empezando a entender esto","ÊàëÈñãÂßãÁü•ÈÅìÂÆÉÁöÑÁ´ÖÈñÄ‰∫Ü","Zaczynam rozumieƒá to","kezdem √©rteni a l√©nyeg√©t","Asmaya ba≈ülƒ±yorum"},
QUOTE_82 ={"is that how you play?","√© assim que se joga?","est-ce comme √ßa que tu joues?","—Ç–∞–∫ —Ç—ã –∏–≥—Ä–∞–µ—à—å?","¬øas√≠ es como juegas?","ÈÄôÂ∞±ÊòØ‰Ω†ÁöÑÁé©Ê≥ï?","to w≈Ça≈õnie tak by≈õ zagra≈Ç? ","sz√≥val √∫gy kell j√°tszani?","b√∂yle mi oynuyorsun"},
QUOTE_83 ={"ok, now go take care of Voldemouse, he's crying","ok, agora v√° cuidar do Voldemouse, ele est√° chorando","ok, maintenant, va t'occuper de Voldemouse, il est en train de pleurer","—Ö–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –∏–¥–∏ –ø–æ–∑–∞–±–æ—Ç—å—Å—è –æ Voldemouse, –æ–Ω –ø–ª–∞—á–µ—Ç Voldemouse","bien,¬†ahora ve a consolar a¬†Voldemouse, est√° llorando","Â•ΩÁöÑ, ÁèæÂú®ÂéªÁÖßÈ°ß‰∏Ä‰∏ã Voldemouse, ‰ªñÂú®Âì≠‰∫Ü","ok, teraz zajmij siƒô Voldemousem, on p≈Çacze","rendben, most figyelj oda Voldemouse-ra, elkezdett s√≠rni","tamam ≈üimdi git Voldemouse'a iyi bak, aƒülƒ±yor"},
QUOTE_84 ={"uno! hahahahaha","","","—É–Ω–æ! –∞—Ö–∞—Ö–∞—Ö–∞—Ö–∞","","uno! ÂìàÂìàÂìàÂìàÂìà","",""},
QUOTE_88 ={"this cave is melting, we'd better finish soon!","esta caverna est√° derretendo, melhor terminarmos logo!","cette cave est en train de fondre, on devrait terminer au plus t√¥t!","—ç—Ç–∞ –ø–µ—â–µ—Ä–∞ —Ç–∞–µ—Ç, –Ω–∞–º –ª—É—á—à–µ –ø–æ—Ç–æ—Ä–æ–ø–∏—Ç—å—Å—è!","¬°esta cueva se est√° derritiedo, deber√≠amos salir de aqu√≠!","ÈÄôÂÄãÊ¥ûÁ©¥Âú®ËûçÂåñ, ÊàëÂÄëÊúÄÂ•ΩÂø´ÈªûÊääÈÄôÂ±ÄÈÅäÊà≤ÂÆåÁµêÊéâ!","ta jaskinia topnieje, lepiej ju≈º nied≈Çugo ko≈Ñczyƒá!","olvadozik a barlang, fejezz√ºk be min√©l hamarabb!","bu maƒüara eriyor, yakƒ±nda bitirsek iyi olur!"},
QUOTE_89 ={"welcome to my house! I don't remember typing /inv...","bem vindos ao meu cafofo! u√© eu n√£o lembro de ter dado /inv...","bienvenue chez moi! je me souviens pas avoir tap√© /inv...","–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∫–æ –º–Ω–µ –¥–æ–º–æ–π! –Ø –Ω–µ –ø–æ–º–Ω—é –∫–∞–∫ –ø–µ—á–∞—Ç–∞—Ç—å /inv...","¬°bienvenido/a a mi casa! no me acuerdo de haber escrito /inv...","Ê≠°Ëøé‰æÜÂà∞ÊàëÂÆ∂! ÊàëË®òÂæóÊàëÊ≤íÊúâËº∏ÂÖ• /inv...","Witamy w moim domu! Nie pamiƒôtam pisania / inv ...","√ºdv√∂z√∂llek a h√°zamban! nem eml√©kszem hogy be√≠rtam volna hogy /inv...","Evime ho≈ügeldiniz! /ƒ∞nv yazdƒ±ƒüƒ±mƒ± hatƒ±rlamƒ±yorum ..."},
QUOTE_90 ={"how kind of you, %s!","bondade a sua, %s!","comme c'est gentil de ta part, %s!","how kind of you, %s!","¬°c√≥mo pudiste, %s!","%s, ‰Ω†‰∫∫ÁúüÂ•Ω!","jak mi≈Ço z twojej strony, %s!","mily kedves t≈ëled, %s!","ne kadar naziksin,%s!"},
QUOTE_91 ={"I'm just a snowmouse, I can't hold so many cards!","sou s√≥ um boneco de neve, n√£o posso segurar tantas cartas!","je ne suis juste qu'une souris de neige, je ne peux pas tenir autant de cartes!","—è –ø—Ä–æ—Å—Ç–æ —Å–Ω–µ–∂–Ω–∞—è –º—ã—à–∫–∞, —è –Ω–µ –º–æ–≥—É –¥–µ—Ä–∂–∞—Ç—å —Å—Ç–æ–ª—å–∫–æ –∫–∞—Ä—Ç!","s√≥lo soy un rat√≥n de nieve, ¬°no puedo tener tantas cartas!","ÊàëÂè™ÊòØ‰∏ÄÂÄãÈõ™Èº†, ÊàëÊâãÊãø‰∏çÂà∞ÈÇ£È∫ºÂ§öÂç°ÁâåÂï¶!","Jestem tylko myszkƒÖ ze ≈õniegu, nie mogƒô trzymaƒá tak wielu kart!","√©n csak egy szer√©ny h√≥eg√©r vagyok, nem tudok annyi k√°rty√°t tartani","Ben sadece bir kar faresiyim, bu kadar √ßok kart tutamƒ±yorum!"},
QUOTE_92 ={"is there a title with my name?","ser√° que existe um t√≠tulo com meu nome?","il y a un titre avec mon nom?","–µ—Å—Ç—å –ª–∏ —Ç–∏—Ç—É–ª —Å –º–æ–∏–º –∏–º–µ–Ω–µ–º?","¬øhay un t√≠tulo con mi nombre?","ÊòØ‰∏çÊòØÊúâ‰∏ÄÂÄãÁ®±ËôüÁî®‰∏äÊàëÁöÑÂêçÂ≠ó‰∫Ü?","czy istnieje tytu≈Ç z moim imieniem?","l√©tezik egy c√≠m a nevemmel?","benim adƒ±ma ait bir √ºnvan var mƒ±?"},
QUOTE_93 ={"you're so quiet... let's break the ice, people!","voc√™s est√£o t√£o calados... vamos quebrar esse gelo galera!","vous √™tes si silencieux... brisons la glace, tout le monde!","–≤—ã —Ç–∞–∫–æ–π —Ç–∏—Ö–∏–µ... –¥–∞–≤–∞–π—Ç–µ —Å–ª–æ–º–∞–µ–º –ª—ë–¥, –ª—é–¥–∏!","est√°s muy tieso... ¬°hay que romper el hielo, gente!","‰Ω†ÁúüÂÆâÈùú... ÊàëÂÄë‰æÜÁé©ÂÄãÁ†¥ÂÜ∞ÈÅäÊà≤Âêß, ÂêÑ‰Ωç!","jeste≈õ taki cichy ... pora prze≈Çamaƒá l√≥d, ludzie!","annyira csendesek vagytok.. t√∂rj√ºk fel a jeget, emberek!","√ßok sessizsiniz ... buzlarƒ± kƒ±ralƒ±m millet!"},
QUOTE_94 ={"...","","","","","","","",""},
QUOTE_95 ={"I think I'm melting!","acho que estou derretendo!","je crois que je fond!","—è –¥—É–º–∞—é, —á—Ç–æ —è —Ç–∞—é!","¬°creo que me estoy derritiendo!","ÊàëË¶∫ÂæóÊàëÂú®ËûçÂåñ‰∫Ü!","My≈õlƒô, ≈ºe topniejƒô!","√∫gy t≈±nik olvadok!","Sanƒ±rƒ±m eriyorum!"},
QUOTE_96 ={"great game! visit more often!","√≥timo jogo! venham mais vezes!","super jeu! rends moi visite plus souvent!","–æ—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞! –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ —á–∞—â–µ!","¬°buen juego! ¬°visita m√°s seguido!","Â•Ω‰∏ÄÂ†¥ÈÅäÊà≤! Â§öÈªû‰æÜÊé¢ÊúõÊàëÂêß!","≈õwietna gra! odwiedzaj czƒô≈õciej!","remek j√°t√©k! megl√°togathatn√°l gyakrabban!","ƒ∞yi oyun! daha sƒ±k ziyaret edin!"},
QUOTE_97 ={"oh, no! %s's cards got wet!","oh, n√£o! as cartas de %s molharam!","oh, non! les cartes %s sont mouill√©es!","–æ—Ö, –Ω–µ—Ç! —É %s's –ø—Ä–æ–º–æ–∫–ª–∏ –∫–∞—Ä—Ç—ã!","¬°oh no! ¬°las cartas de %s se mojaron!","Âô¢, ‰∏ç! %s ÁöÑÂç°ÁâåÈÉΩÊøïÈÄè‰∫Ü!","o nie! Karty %s zamoczy≈Çy siƒô!","√≥ ne, %s k√°rty√°i benedvesedtek!","Oh hayƒ±r! %s kartlarƒ±n ƒ±slandƒ±!"},
QUOTE_98 ={"Papaille? don't talk to me about him! he sells canned snowmen...","Papaille? n√£o me fale dele! ele vende bonecos de neve enlatados...","Papaille? ne me parle pas de lui, il vend des bonhommes de neige en conserve...","Papaille? –Ω–µ –≥–æ–≤–æ—Ä–∏ —Å–æ –º–Ω–æ–π –æ –Ω—ë–º! –æ–Ω –ø—Ä–æ–¥–∞–µ—Ç –∫–æ–Ω—Å–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–Ω–µ–≥–æ–≤–∏–∫–æ–≤...","¬øPapaille? ¬°no me hables de √©l! vende hombres de nieve enlatados...","Papaille? ‰∏çË¶ÅË∑üÊàëË™™Âà∞‰ªñ! ‰ªñÂîÆË≥£ÁΩêË£ùÈõ™‰∫∫...","Papaille? nie m√≥w mi o nim! sprzedaje puszkowane ba≈Çwany ...","Papaille? ne besz√©lj r√≥la hozz√°m, konzerv h√≥embereket √°rul...","Papaille? benimle onun hakkƒ±nda konu≈üma! konserve kardan adam satƒ±yor ..."},
QUOTE_99 ={"nice title, %s!","t√≠tulo legal, %s!","joli titre, %s!","—Ö–æ—Ä–æ—à–∏–π —Ç–∏—Ç—É–ª, %s!","¬°buen t√≠tulo, %s!","%s, ‰Ω†ÁöÑÁ®±Ëôü‰∏çÈåØÂïä!","niez≈Çy tytu≈Ç, %s!","sz√©p c√≠m, %s!","g√ºzel √ºnvan, %s!"},
QUOTE_100 ={"Jingle is too busy sending mice to fetch things for him","Jingle est√° muito ocupado mandando ratos buscarem as coisas para ele","Jingle est trop occup√© √† envoyer des souris chercher des choses pour lui","Jingle —Å–ª–∏—à–∫–æ–º –∑–∞–Ω—è—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è—è –º—ã—à–µ–π –∑–∞ –≤–µ—â–∞–º–∏ –¥–ª—è –Ω–µ–≥–æ","Jingle estar√° tan ocupado como para enviar ratones para recuparle cosas","Jingle ‰ªñÂ∏∏Â∏∏ÂøôËëóÂè´Â∞èÈº†Âπ´‰ªñÊâæÊù±Ë•ø","Jingle jest zbyt zajƒôty wysy≈Çaniem myszy do przyniesienia rzeczy dla niego.","Jingle t√∫ls√°gosan elfoglalt azzal, hogy egereket k√ºld t√°rgyakat hordozni neki","Jingle, ona bir ≈üeyler getiremeyecek kadar fare g√∂ndermekle me≈ügul"},
QUOTE_101 ={"Icemice is frozen, he can't talk","Icemice est√° congelado, ele n√£o pode falar","Icemice est gel√©, il ne peut pas parler","Icemice –∑–∞–º–æ—Ä–æ–∂–µ–Ω, –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –≥–æ–≤–æ—Ä–∏—Ç—å","Icemice est√° congelado, no puede hablar","Icemice ÊòØÂÆåÂÖ®ÁöÑÂáç‰Ωè‰∫Ü, ‰ªñ‰∏çËÉΩË™™Ë©±","Icemice jest zamro≈ºony, nie mo≈ºe m√≥wiƒá","Icemice lefagyott, nem tud besz√©lni","Icemice dondu, konu≈üamaz"},
QUOTE_102 ={"I just don't know how he plays...","eu s√≥ n√£o sei como ele joga...","je ne sais m√™me pas comment il joue...","—è –ø—Ä–æ—Å—Ç–æ –Ω–µ –∑–Ω–∞—é, –∫–∞–∫ –æ–Ω –∏–≥—Ä–∞–µ—Ç...","no s√© c√≥mo es que √©l juega...","Êàë‰∏çÁü•ÈÅì‰ªñÊÄéÈ∫ºÁé©ÁöÑ...","Po prostu nie wiem jak on gra...","nem tudom hogy m√©gis hogyan tud j√°tszani...","Nasƒ±l oynadƒ±ƒüƒ±nƒ± bilmiyorum ..."},
}


--[[ src/bots/autoplay.lua ]]--

BOT.B = { -- Autoplay
	img = "16004ade907.png",
	chair = "test",
	medal = "none",
	victory = 801000,
	autoPlay = function ()
		local n = ROUND.turn
		if ROUND.chair[n].mode == "BUSY" then
			if ROUND.chair[n].action then
				if ROUND.chair[n].action.func then
					local pool = {}
					for i, v in pairs(ROUND.chair[n].action.op) do
						table.insert(pool, i)
					end
					ROUND.chair[n].action.func(n, pool[math.random(#pool)])
				elseif ROUND.chair[n].action.name == "WILD" then
					local pool = {"red", "blue", "yellow", "green"}
					paintCard(pool[math.random(#pool)], n)
				elseif ROUND.chair[n].action.name == "TRACKING" then
					drawCardTracking(n, ROUND.chair[n].action.card[math.random(3)])
					eventMouse(ROUND.chair[n].owner, 350, 220, true)
				elseif ROUND.chair[n].action.name == "WISH" then
					makeWish(n, ROUND.chair[n].action.card[math.random(3)])
					eventMouse(ROUND.chair[n].owner, 350, 220, true)
				elseif ROUND.chair[n].action.name == "RULE" then
					selectRule(n, math.random(1,2))
				elseif ROUND.chair[n].action.name == "IMITATE" then
					emoteVerify(true)
				end
			elseif ROUND.chair[n].flag == "circuit" and not ROUND.chair[n].circuitPlayed and canPlayHand(n) then
				local pool = {}
				for i, v in pairs(ROUND.chair[n].hand) do
					if canPlay(n, i) then
						table.insert(pool, i)
					end
				end
				if #ROUND.chair[n].hand == 2 then
					sayUno(n)
				end
				ROUND.chair[n].circuitPlayed = true
				ROUND.chair[n].flag = "circuitused"
				drawChair(n)
				local img = tfm.exec.addImage(IMG.misc.robot, "!1000", ROUND.chair[n].x-50, 30)
				TIMER.img[img] = GLOBAL_TIME+500
				playCard(n, pool[math.random(#pool)])
			else
				local m = n
				eventMouse(ROUND.chair[n].owner, 350, 220, true)
				eventMouse(ROUND.chair[n].owner, 680, 280, true)
				if m == ROUND.turn then
					ROUND.time = GLOBAL_TIME + 3000
					updateTurnTimer()
				end
			end
		end
	end
}


--[[ src/bots/buffy.lua ]]--

BOT.Buffy = {
	img = "165e3e947ca.png",
	chair = "default",
	medal = "buffy",
	victory = 0,
	eventWelcome = function ()
		BOT.Buffy.uno = nil
		BOT.Buffy.play = nil
	end,
	eventWin = function ()
		if math.random() > 0.5 then
			quote("Buffy", "QUOTE_81")
			if math.random() > 0.5 then
				addFunctionTimer(quote, 4000, "Drekkemaus", "QUOTE_85")
			end
		end
	end,
	eventRandom = function (name)
		if name == "Buffy" and not BOT.Buffy.play and math.random() > 0.60 then
			quote("Buffy", "QUOTE_82")
			Bot.Buffy.play = true
		end
	end,
	eventLoop = function (n)
		if ROUND.chair[ROUND.turn].action then
			if ROUND.chair[ROUND.turn].action.name == "IMITATE" and math.random() > 0.8 then
				eventEmotePlayed("Buffy", ROUND.chair[ROUND.turn].action.action)
			end
		elseif ROUND.gameMode.jumpin and ROUND.turn ~= n and math.random() > 0.9 and not ROUND.chair[ROUND.turn].action and not ROUND.chair[n].action and not isCursed(n, "poison") and not ROUND.chair[n].confuse then
			local can = false
			for i, v in pairs(ROUND.chair[n].hand) do
				if canPlay(n, i) then
					missCard(n, v, 1000)
					jumpIn(ROUND.turn, n)
					updateArrow()
					playCard(n, i, false, true)
					break
				end
			end
		end
	end,
	autoPlay = function ()
		if ROUND.chair[ROUND.turn].mode == "BUSY" then
			eventMouse(ROUND.chair[ROUND.turn].owner, 750, 210)
			if ROUND.chair[ROUND.turn].action then
				if ROUND.chair[ROUND.turn].action.func then
					local pool = {}
					for i, v in pairs(ROUND.chair[ROUND.turn].action.op) do
						table.insert(pool, i)
					end
					local target = pool[math.random(#pool)]
					tfm.exec.addShamanObject(0, ROUND.chair[target].x, 50)
					ROUND.chair[ROUND.turn].action.func(ROUND.turn, target)
				elseif ROUND.chair[ROUND.turn].action.name == "WILD" then
					local pool = {"red", "blue", "yellow", "green"}
					paintCard(pool[math.random(#pool)], ROUND.turn)
				elseif ROUND.chair[ROUND.turn].action.name == "TRACKING" then
					drawCardTracking(ROUND.turn, ROUND.chair[ROUND.turn].action.card[math.random(3)])
				elseif ROUND.chair[ROUND.turn].action.name == "WISH" then
					makeWish(ROUND.turn, ROUND.chair[ROUND.turn].action.card[math.random(3)])
				elseif ROUND.chair[ROUND.turn].action.name == "BAN" then
					makeBan(ROUND.turn, ROUND.chair[ROUND.turn].action.card[math.random(3)])
				elseif ROUND.chair[ROUND.turn].action.name == "RULE" then
					ROUND.chair[ROUND.turn].confuse = false
					selectRule(ROUND.turn, math.random(1,2))
				end
			else
				if canPlayHand(ROUND.turn) then
					local pool = {}
					for i, v in pairs(ROUND.chair[ROUND.turn].hand) do
						if canPlay(ROUND.turn, i) then
							table.insert(pool, i)
						end
					end
					if #ROUND.chair[ROUND.turn].hand == 2 then
						sayUno(ROUND.turn)
						if not BOT.Buffy.uno and math.random() > 0.5 then
							quote("Buffy", "QUOTE_84")
							BOT.Buffy.uno = true
						end
					end
					playCard(ROUND.turn, pool[math.random(#pool)])
				else
					if not (ROUND.chair[ROUND.turn].draw and not ROUND.chair[ROUND.turn].played) then
						eventMouse(ROUND.chair[ROUND.turn].owner, 350, 220, true)
					else
						ROUND.chair[ROUND.turn].confuse = false
						eventMouse(ROUND.chair[ROUND.turn].owner, 680, 280, true)
					end
				end
			end
		end
	end
}


--[[ src/bots/charlotte.lua ]]--

BOT.Charlotte = {
	sleep = true,
	imgAwake = "16114b7cd0c.png",
	imgSleepy = "16114b83a04.png",
	img = "16114b83a04.png",
	chair = "wood",
	medal = "charlotte",
	victory = 1000,
	eventBlock = function ()
		if math.random() > 0.5 then
			quote("Charlotte", "QUOTE_49")
		end
	end,
	eventInk = function (color)
		if ROUND.gameMode[color] then
			quote("Charlotte", "QUOTE_52")
		elseif not BOT.Charlotte.sleep then
			quote("Charlotte", "QUOTE_51")
		end
	end,
	eventPenalty = function ()
		local pool = {"QUOTE_47", "QUOTE_51"}
		if not BOT.Charlotte.sleep and math.random() > 0.5 then
			quote("Charlotte", pool[math.random(#pool)])
		end
	end,
	eventEliminate = function (name)
		local pool = {"QUOTE_48", "QUOTE_53"}
		if not BOT.Charlotte.sleep and math.random() > 0.5 then
			quote("Charlotte", pool[math.random(#pool)], name)
		end
	end,
	eventWelcome = function (i)
		BOT.Charlotte.img = BOT.Charlotte.imgSleepy
		BOT.Charlotte.sleep = true
		BOT.Charlotte.chat = false
		drawChair(i)
	end,
	eventWin = function ()
		quote("Charlotte", "QUOTE_45")
		if math.random() > 0.5 then
			addFunctionTimer(quote, 3000, "Charlotte", "QUOTE_46")
		end
		BOT.Charlotte.img = BOT.Charlotte.imgSleepy
	end,
	eventLose = function ()
		if BOT.Charlotte.sleep then
			quote("Charlotte", "QUOTE_43")
		elseif math.random() > 0.5 then
			quote("Charlotte", "QUOTE_44")
		end
		BOT.Charlotte.img = BOT.Charlotte.imgSleepy
	end,
	eventLoop = function (n)
		if not BOT.Charlotte.sleep then
			if ROUND.chair[ROUND.turn].action and ROUND.chair[ROUND.turn].action.name == "IMITATE" and math.random() > 0.7 then
				eventEmotePlayed("Charlotte", ROUND.chair[ROUND.turn].action.action)
			elseif ROUND.gameMode.jumpin and ROUND.turn ~= n and math.random() > 0.7 and not ROUND.chair[ROUND.turn].action and not ROUND.chair[n].action and not isCursed(n, "poison") and not ROUND.chair[n].confuse then
				local can = false
				for i, v in pairs(ROUND.chair[n].hand) do
					if canPlay(n, i) then
						missCard(n, v, 1000)
						jumpIn(ROUND.turn, n)
						updateArrow()
						playCard(n, i, false, true)
						break
					end
				end
			end
		end
	end,
	eventChat = function (p, msg)
		if not BOT.Charlotte.sleep and string.find(msg, "CHARLOTTE") and not BOT.Charlotte.chat then
			addFunctionTimer(quote, 3000, "Charlotte", "QUOTE_50")
			BOT.Charlotte.chat = true
		end
	end,
	autoPlay = function ()
		ROUND.chair[ROUND.turn].afk = false
		if BOT.Charlotte.sleep then
			if #ROUND.chair[ROUND.turn].hand >= 10 and not ROUND.accumulated then
				BOT.Charlotte.sleep = false
				BOT.Charlotte.img = BOT.Charlotte.imgAwake
				drawChair(ROUND.turn)
				power(ROUND.turn)
				local pool = {"QUOTE_40", "QUOTE_41", "QUOTE_42"}
				quote("Charlotte", pool[math.random(#pool)])
			elseif ROUND.time - GLOBAL_TIME > 5000 then
				ROUND.chair[ROUND.turn].afk = false
				ROUND.time = GLOBAL_TIME + 5000
				updateTurnTimer()
				if math.random() > 0.7 then
					local pool = {"QUOTE_38", "QUOTE_39"}
					quote("Charlotte", pool[math.random(#pool)])
				end
			end
		else
			local action = botMakeAction()
			if action == "DRAW" then
				BOT.Charlotte.eventPenalty()
			elseif action == "BLOCK" then
				BOT.Charlotte.eventBlock()
			end
		end
	end
}


--[[ src/bots/confuse.lua ]]--

BOT.A = { -- Confus√£o
	img = "16004ade907.png",
	chair = "test",
	medal = "none",
	victory = 801000,
	autoPlay = function ()
		if ROUND.chair[ROUND.turn].mode == "BUSY" then
			sayUno(ROUND.turn)
			if ROUND.chair[ROUND.turn].action then
				if ROUND.chair[ROUND.turn].action.func then
					local pool = {}
					for i, v in pairs(ROUND.chair[ROUND.turn].action.op) do
						table.insert(pool, i)
					end
					ROUND.chair[ROUND.turn].action.func(ROUND.turn, pool[math.random(#pool)])
				elseif ROUND.chair[ROUND.turn].action.name == "WILD" then
					local pool = {"red", "blue", "yellow", "green"}
					ROUND.chair[ROUND.turn].confuse = false
					paintCard(pool[math.random(#pool)], ROUND.turn)
				elseif ROUND.chair[ROUND.turn].action.name == "TRACKING" then
					drawCardTracking(ROUND.turn, ROUND.chair[ROUND.turn].action.card[math.random(3)])
				elseif ROUND.chair[ROUND.turn].action.name == "WISH" then
					ROUND.chair[ROUND.turn].confuse = false
					makeWish(ROUND.turn, ROUND.chair[ROUND.turn].action.card[math.random(3)])
				elseif ROUND.chair[ROUND.turn].action.name == "BAN" then
					ROUND.chair[ROUND.turn].confuse = false
					makeBan(ROUND.turn, ROUND.chair[ROUND.turn].action.card[math.random(3)])
				elseif ROUND.chair[ROUND.turn].action.name == "RULE" then
					ROUND.chair[ROUND.turn].confuse = false
					selectRule(ROUND.turn, math.random(1,2))
				end
			else
				if canPlayHand(ROUND.turn) then
					local pool = {}
					for i, v in pairs(ROUND.chair[ROUND.turn].hand) do
						if canPlay(ROUND.turn, i) then
							table.insert(pool, i)
						end
					end
					if math.random(0,#pool) > 0 then
						playCard(ROUND.turn, pool[math.random(#pool)])
					else
						if ROUND.chair[ROUND.turn].draw then
							ROUND.chair[ROUND.turn].confuse = false
							eventMouse(ROUND.chair[ROUND.turn].owner, 680, 280, true)
						else
							eventMouse(ROUND.chair[ROUND.turn].owner, 350, 220, true)
						end
					end
				else
					if not (ROUND.chair[ROUND.turn].draw and not ROUND.chair[ROUND.turn].played) then
						eventMouse(ROUND.chair[ROUND.turn].owner, 350, 220, true)
					else
						ROUND.chair[ROUND.turn].confuse = false
						eventMouse(ROUND.chair[ROUND.turn].owner, 680, 280, true)
					end
				end
			end
		end
	end
}


--[[ src/bots/drekkemaus.lua ]]--

BOT.Drekkemaus = {
	img = "15ed4ecf2e3.png",
	chair = "hell",
	medal = "drekkemaus",
	victory = 40000,
	eventWelcome = function ()
		if math.random() > 0.5 then 
			local pool = {"QUOTE_1", "QUOTE_3"}
			quote("Drekkemaus", pool[math.random(#pool)])
		else
			quote("Buffy", "QUOTE_73")
		end
		BOT.Drekkemaus.buffy = nil
		BOT.Drekkemaus.tracking = nil
		local pool = {"picnic", "metal", "paper", "carpet"}
		PLAYER.Drekkemaus.flagEquipped = pool[math.random(#pool)]
	end,
	eventWin = function ()
		local pool = {"QUOTE_9", "QUOTE_10"}
		if math.random() > 0.5 then
			quote("Drekkemaus", pool[math.random(#pool)])
			if math.random() > 0.5 then
				addFunctionTimer(quote, 3000, "Buffy", "QUOTE_83")
				addFunctionTimer(quote, 6000, "Drekkemaus", "QUOTE_87")
			end
		else
			quote("Buffy", "QUOTE_79")
		end
	end,
	eventLose = function (name)
		if math.random() > 0.5 then
			quote("Drekkemaus", "QUOTE_11")
		end
		if PLAYER[name].trophy.buffy then
			unlockTrophy(name, "drekkemaus")
		else
			unlockTrophy(name, "buffy")
		end
	end,
	eventBlock = function ()
		if math.random() > 0.5 then
			quote("Drekkemaus", "QUOTE_5")
		end
	end,
	eventLoop = function (n)
		if ROUND.chair[ROUND.turn].action then
			if ROUND.chair[ROUND.turn].action.name == "IMITATE" and math.random() > 0.5 then
				eventEmotePlayed("Drekkemaus", ROUND.chair[ROUND.turn].action.action)
			end
		elseif ROUND.gameMode.jumpin and ROUND.turn ~= n and math.random() > 0.5 and not ROUND.chair[ROUND.turn].action and not ROUND.chair[n].action and not isCursed(n, "poison") and not ROUND.chair[n].confuse then
			local can = false
			for i, v in pairs(ROUND.chair[n].hand) do
				if canPlay(n, i) then
					missCard(n, v, 1000)
					jumpIn(ROUND.turn, n)
					updateArrow()
					playCard(n, i, false, true)
					break
				end
			end
		end
	end,
	eventRandom = function (name)
		if name ~= "Buffy" and not BOT.Drekkemaus.buffy and math.random() > 0.985 then
			quote("Drekkemaus", "QUOTE_7", name)
			BOT.Drekkemaus.buffy = true
			if math.random() > 0.5 then
				addFunctionTimer(quote, 5000, "Buffy", "QUOTE_78")
			end
		end
	end,
	eventWeb = function ()
		if math.random() > 0.7 then
			quote("Drekkemaus", "QUOTE_6")
		end
	end,
	eventSorry = function ()
		if math.random() > 0.7 then
			quote("Drekkemaus", "QUOTE_4")
			local nextPlayer = nextChair(ROUND.turn)
			if ROUND.chair[nextPlayer].owner == "Buffy" then
				local pool = {"QUOTE_75", "QUOTE_76"}
				addFunctionTimer(quote, 5000, "Buffy", pool[math.random(#pool)])
			end
		end
	end,
	eventStart = function ()
		local pool = {"QUOTE_2", "QUOTE_12"}
		local rand = pool[math.random(#pool)]
		quote("Drekkemaus", rand)
		if rand == "QUOTE_2" then
			addFunctionTimer(quote, 5000, "Buffy", "QUOTE_74")
		end
	end,
	eventPenalty = function ()
		local previousPlayer = previousChair(ROUND.turn)
		if ROUND.chair[previousPlayer].owner == "Buffy" then
			quote("Drekkemaus", "QUOTE_86")
			addFunctionTimer(quote, 5000, "Buffy", "QUOTE_77")
		else
			local pool = {"QUOTE_8", "QUOTE_13"}
			if math.random() > 0.7 then
				quote("Drekkemaus", pool[math.random(#pool)])
			end
		end
	end,
	autoPlay = function ()
		local action = botMakeAction()
		if action == "TRACKING" and not BOT.Drekkemaus.tracking and math.random() > 0.7 then
			quote("Buffy", "QUOTE_80")
		elseif action == "BLOCK" or action == "CHALLENGE" then
			BOT.Drekkemaus.eventBlock()
		elseif action == "DRAW" then
			BOT.Drekkemaus.eventPenalty()
		elseif action == "PLAY" and ROUND.topCard.card[2] == "draw2" or ROUND.topCard.card[2] == "draw4" then
			BOT.Drekkemaus.eventSorry()
		end
	end
}


--[[ src/bots/elisah.lua ]]--

BOT.Elisah = {
	img = "163137ccd95.png",
	chair = "shaman",
	medal = "elisah",
	victory = 45000,
	eventWelcome = function ()
		BOT.Elisah.chat = false
		BOT.Elisah.ice = false
		BOT.Elisah.shoe = false
		BOT.Elisah.thorn = false
		BOT.Elisah.poison = false
		BOT.Elisah.anvil = false
		BOT.Elisah.time = false
		quote("Elisah", "QUOTE_54")
	end,
	eventStart = function ()
		if math.random() > 0.5 then
			quote("Elisah", "QUOTE_55")
			addFunctionTimer(quote, 3000, "Elisah", "QUOTE_56")
		end
	end,
	eventPenalty = function ()
		local pool = {"QUOTE_69", "QUOTE_70"}
		if math.random() > 0.5 then
			quote("Elisah", pool[math.random(#pool)])
		end
	end,
	eventCurse = function (curse)
		txt = {anvil="QUOTE_57", ice="QUOTE_58", shoe="QUOTE_59", thorn="QUOTE_60", time="QUOTE_61", poison="QUOTE_62"}
		if not BOT.Elisah[curse] then
			if curse == "ice" and math.random() > 0.5 then
				addFunctionTimer(quote, 1000, "Elisah", "QUOTE_71")
			elseif math.random() > 0.5 then
				addFunctionTimer(quote, 1000, "Elisah", txt[curse])
				BOT.Elisah[curse] = true
			end
		end
	end,
	eventWin = function ()
		local pool = {"QUOTE_63", "QUOTE_64"}
		quote("Elisah", pool[math.random(#pool)])
	end,
	eventLose = function (p)
		local pool = {"QUOTE_65", "QUOTE_66"}
		if p and math.random() > 0.5 then
			quote("Elisah", pool[math.random(#pool)], p)
		end
		unlockTrophy(p, "elisah")
	end,
	eventChat = function (p, msg)
		if msg == "Elisah" and not BOT.Elisah.chat then
			addFunctionTimer(quote, 3000, "Elisah", "QUOTE_67", p)
			addFunctionTimer(quote, 5000, "Elisah", "QUOTE_68")
			BOT.Elisah.chat = true
		end
	end,
	eventLoop = function (n)
		if ROUND.chair[ROUND.turn].action then
			if ROUND.chair[ROUND.turn].action.name == "IMITATE" and math.random() > 0.7 then
				eventEmotePlayed("Elisah", ROUND.chair[ROUND.turn].action.action)
			end
		elseif ROUND.gameMode.jumpin and ROUND.turn ~= n and math.random() > 0.5 and not ROUND.chair[ROUND.turn].action and not ROUND.chair[n].action and not isCursed(n, "poison") and not ROUND.chair[n].confuse then
			local can = false
			for i, v in pairs(ROUND.chair[n].hand) do
				if canPlay(n, i) then
					missCard(n, v, 1000)
					jumpIn(ROUND.turn, n)
					updateArrow()
					playCard(n, i, false, true)
					break
				end
			end
		end
	end,
	autoPlay = function ()
		local action = botMakeAction()
		if action == "DRAW" then
			BOT.Elisah.eventPenalty()
		end
	end
}


--[[ src/bots/elise.lua ]]--

BOT.Elise = {
	img = "15f5bca2c64.png",
	chair = "marine",
	medal = "none",
	victory = 0,
	eventWelcome = function ()
		quote("Elise", "QUOTE_14")
	end,
	eventWin = function ()
		quote("Elise", "QUOTE_15")
	end,
	eventLoop = function (n)
		if ROUND.chair[ROUND.turn].action then
			if ROUND.chair[ROUND.turn].action.name == "IMITATE" and math.random() > 0.7 then
				eventEmotePlayed("Elise", ROUND.chair[ROUND.turn].action.action)
			end
		elseif ROUND.gameMode.jumpin and ROUND.turn ~= n and math.random() > 0.7 and not ROUND.chair[ROUND.turn].action and not ROUND.chair[n].action and not isCursed(n, "poison") and not ROUND.chair[n].confuse then
			local can = false
			for i, v in pairs(ROUND.chair[n].hand) do
				if ROUND.topCard.card[1] == v[1] and ROUND.topCard.card[2] == v[2] then
					missCard(n, v, 1000)
					jumpIn(ROUND.turn, n)
					updateArrow()
					playCard(n, i)
					break
				end
			end
		elseif ROUND.turn ~= n and ROUND.gameMode.team and #ROUND.chair[n].hand == 1 and os.time() > ROUND.chair[n].clickDelay+8000 then
			missCard(n, 1, 2000, true)
		end
	end,
	autoPlay = function ()
		botMakeAction()
	end
}


--[[ src/bots/func.lua ]]--

function botMakeAction()
	local chair = ROUND.chair[ROUND.turn]
	sayUno(ROUND.turn)
	if chair.action then
		if chair.action.name == "WEB" then
			local target = nil
			local less = 30
			for i, v in pairs(ROUND.chair) do
				if v.mode ~= "DELETED" and #v.hand < less and not v.action then
					target = i
					less = #v.hand
				end
			end
			if target then
				tfm.exec.addShamanObject(0, ROUND.chair[target].x, 50)
				makeWeb(ROUND.turn, target)
			else
				makeWeb(ROUND.turn, ROUND.turn)
			end
			return "WEB", target
		elseif chair.action.name == "GIFT" then
			local target = nil
			local less = 30
			for i, v in pairs(ROUND.chair) do
				if i ~= ROUND.turn and v.owner ~= "Papaille" and v.mode ~= "DELETED" and #v.hand < less and not v.action then
					target = i
					less = #v.hand
				end
			end
			if target then
				tfm.exec.addShamanObject(0, ROUND.chair[target].x, 50)
				makeGift(ROUND.turn, target)
			else
				makeGift(ROUND.turn, ROUND.turn)
			end
			return "GIFT", target
		elseif chair.action.name == "TRADE" then
			local target = nil
			local less = 30
			for i, v in pairs(ROUND.chair) do
				if i ~= ROUND.turn and v.mode ~= "DELETED" and #v.hand < less and not v.action then
					target = i
					less = #v.hand
				end
			end
			if target then
				tfm.exec.addShamanObject(0, ROUND.chair[target].x, 50)
				makeTrade(ROUND.turn, target)
			else
				makeTrade(ROUND.turn, ROUND.turn)
			end
			return "TRADE", target
		elseif chair.action.name == "BATATA" then
			local target = nil
			local less = 30
			for i, v in pairs(ROUND.chair) do
				if i ~= ROUND.turn and v.mode ~= "DELETED" and #v.hand < less and not v.action then
					target = i
					less = #v.hand
				end
			end
			if target then
				tfm.exec.addShamanObject(0, ROUND.chair[target].x, 50)
				makeBatata(ROUND.turn, target)
			else
				makeBatata(ROUND.turn, ROUND.turn)
			end
			return "BATATA", target
		elseif chair.action.name == "MIMIC" then
			local target = nil
			local bigger = 0
			for i, v in pairs(ROUND.chair) do
				if i ~= ROUND.turn and v.mode ~= "DELETED" and #v.hand > bigger then
					target = i
					bigger = #v.hand
				end
			end
			if target then
				tfm.exec.addShamanObject(0, ROUND.chair[target].x, 50)
				makeMimic(ROUND.turn, target)
			else
				makeMimic(ROUND.turn, ROUND.turn)
			end
			return "MIMIC", target
		elseif chair.action.name == "THEFT" then
			local target = nil
			local bigger = 0
			for i, v in pairs(ROUND.chair) do
				if i ~= ROUND.turn and v.mode ~= "DELETED" and #v.hand > bigger then
					target = i
					bigger = #v.hand
				end
			end
			if target then
				tfm.exec.addShamanObject(0, ROUND.chair[target].x, 50)
				makeTheft(ROUND.turn, target)
			else
				makeTheft(ROUND.turn, ROUND.turn)
			end
			return "THEFT", target
		elseif chair.action.name == "WILD" then
			local color = "red"
			if ROUND.topCard.card[2] == "simon" and chair.action.simon ~= "FINAL" then
				if math.random() > 0.7 then
					local pool = {"red", "blue", "yellow", "green"}
					color = pool[math.random(#pool)]
				else
					color = ROUND.simon[chair.action.simon]
				end
			else
				local pool = {"red", "blue", "yellow", "green"}
				for i, v in pairs(chair.hand) do
					if v[1] ~= "black" then
						for i=1, 5 do
							table.insert(pool, v[1])
						end
					end
				end
				color = pool[math.random(#pool)]
			end
			paintCard(color, ROUND.turn)
			return "WILD"
		elseif chair.action.name == "TRACKING" then
			local wild = false
			for i, v in pairs(chair.action.card) do
				if ROUND.deck[v][1] == "black" then
					wild = v
					break
				end
			end
			if wild then
				drawCardTracking(ROUND.turn, wild)
			else
				local discard = false
				for i, v in pairs(chair.action.card) do
					if ROUND.deck[v][1] == ROUND.topCard.card[1] or ROUND.deck[v][2] == ROUND.topCard.card[2] then
						discard = v
						break
					end
				end
				if discard then
					drawCardTracking(ROUND.turn, discard)
				else
					drawCardTracking(ROUND.turn, chair.action.card[math.random(3)])
				end
			end
			return "TRACKING"
		elseif chair.action.name == "WISH" then
			local wild = false
			for i, v in pairs(chair.action.card) do
				if ROUND.pile[v][1] == "black" then
					wild = v
					break
				end
			end
			if wild then
				makeWish(ROUND.turn, wild)
			else
				local discard = false
				for i, v in pairs(chair.action.card) do
					if ROUND.pile[v][1] == ROUND.topCard.card[1] or ROUND.pile[v][2] == ROUND.topCard.card[2] then
						discard = v
						break
					end
				end
				if discard then
					makeWish(ROUND.turn, discard)
				else
					makeWish(ROUND.turn, chair.action.card[math.random(3)])
				end
			end
			return "WISH"
		elseif chair.action.name == "BAN" then
			makeBan(ROUND.turn, chair.action.card[math.random(3)])
			return "BAN"
		elseif ROUND.chair[ROUND.turn].action.name == "RULE" then
			selectRule(ROUND.turn, math.random(1,2))
			return "RULE"
		end
	else
		if ROUND.accumulated and not ROUND.gameMode.hell then
			if ROUND.topCard.card[2] == "draw4" then
				local play = false
				for i, v in pairs(chair.hand) do
					if canPlay(ROUND.turn, i) then
						play = i
						break
					end
				end
				if play then
					playCard(ROUND.turn, play)
					return "BLOCK"
				else
					local previous = previousChair(ROUND.turn)
					local challenge = false
					for i, v in pairs(ROUND.chair[previous].hand) do
						if v[1] == ROUND.topCard.card2[1] then
							challenge = true
							break
						end
					end
					if challenge then
						challengeDrawFour(ROUND.turn)
						return "CHALLENGE"
					else
						eventMouse(chair.owner, 350, 220)
						return "DRAW"
					end
				end
			else
				local play = false
				for i, v in pairs(chair.hand) do
					if canPlay(ROUND.turn, i) then
						play = i
						break
					end
				end
				if play then
					playCard(ROUND.turn, play)
					return "BLOCK"
				else
					eventMouse(chair.owner, 350, 220)
					return "DRAW"
				end
			end
		elseif canPlayHand(ROUND.turn) and not chair.played then
			for i, v in pairs(chair.hand) do
				if v[2] == "batata" and canPlay(ROUND.turn, i) then
					playCard(ROUND.turn, i)
					return "PLAY"
				end
			end
			local score = {}
			local tier = {red=100, blue=100, yellow=100, green=100, black=1000, draw2=20, web=4, skip=6, reverse=6, clone=10, wild=60, draw4=80, half=200, thunder=2, rain=2, box=2, n0=4, n1=6, n2=6, n3=6, n4=6, n5=6, n6=6, n7=6, n8=6, n9=6}
			for i, v in pairs(chair.hand) do
				if canPlay(ROUND.turn, i) then
					score[i] = 0
					local have = {}
					for j, v in pairs(chair.hand) do
						if j ~= i then
							have[v[1]] = have[v[1]] and (have[v[1]] * 0.5) or 1
							have[v[2]] = have[v[2]] and (have[v[2]] * 0.5) or 1
						end
					end
					for j, v in pairs(have) do
						if tier[j] then
							score[i] = score[i] + tier[j]*v
						else
							score[i] = score[i] + 20*v
						end
					end
				end
			end
			local card = false
			local best = -1
			for i, v in pairs(score) do
				if v > best then
					card = i
					best = v
				end
			end
			if card then
				playCard(ROUND.turn, card)
				return "PLAY"
			end
		else
			if chair.draw then
				eventMouse(chair.owner, 680, 280)
				return "COMMON_DRAW"
			else
				eventMouse(chair.owner, 350, 220)
				return "PASS"
			end
		end
	end
end


--[[ src/bots/icemice.lua ]]--

BOT.Icemice = {
	img = "167d2c9497a.png",
	chair = "diamond",
	medal = "snowy",
	victory = 0,
	eventWelcome = function ()
		--quote("Elise", "QUOTE_14")
	end,
	eventWin = function ()
		--quote("Elise", "QUOTE_15")
	end,
	eventLoop = function (n)
		if ROUND.chair[ROUND.turn].action then
			if ROUND.chair[ROUND.turn].action.name == "IMITATE" and math.random() > 0.7 then
				eventEmotePlayed("Icemice", ROUND.chair[ROUND.turn].action.action)
			end
		elseif ROUND.gameMode.jumpin and ROUND.turn ~= n and math.random() > 0.7 and not ROUND.chair[ROUND.turn].action and not ROUND.chair[n].action and not isCursed(n, "poison") and not ROUND.chair[n].confuse then
			local can = false
			for i, v in pairs(ROUND.chair[n].hand) do
				if ROUND.topCard.card[1] == v[1] and ROUND.topCard.card[2] == v[2] then
					missCard(n, v, 1000)
					jumpIn(ROUND.turn, n)
					updateArrow()
					playCard(n, i)
					break
				end
			end
		end
	end,
	autoPlay = function ()
		botMakeAction()
	end
}


--[[ src/bots/jingle.lua ]]--

BOT.Jingle = {
	img = " 16004adc40b.png",
	chair = "gift",
	medal = "noel",
	victory = 251200,
	eventStart = function ()
		local dialog = math.random(4)
		if dialog == 1 then
			quote("Papaille", "QUOTE_17")
			if math.random(3) > 1 then
				addFunctionTimer(quote, 5000, "Jingle", "QUOTE_18")
			end
		elseif dialog == 2 then
			quote("Jingle", "QUOTE_19")
			if math.random(2) == 1 then
				addFunctionTimer(quote, 5000, "Papaille", "QUOTE_20")
				if math.random(2) == 1 then
					addFunctionTimer(quote, 10000, "Jingle", "QUOTE_21")
				end
			end
		elseif dialog == 3 then
			quote("Jingle", "QUOTE_22")
			if math.random(3) > 1 then
				addFunctionTimer(quote, 5000, "Papaille", "QUOTE_23")
				if math.random(2) == 1 then
					addFunctionTimer(quote, 10000, "Jingle", "QUOTE_24")
				end
			end
		elseif dialog == 4 then
			quote("Jingle", "QUOTE_25")
			if math.random(5) > 1 then
				addFunctionTimer(quote, 5000, "Papaille", "QUOTE_26")
				if math.random(5) == 1 then
					addFunctionTimer(quote, 10000, "Jingle", "QUOTE_27")
				end
			end
		end
	end,
	
	eventBlock = function ()
		if math.random() > 0.5 then
			local n = nextChair(ROUND.turn)
			quote("Jingle", "QUOTE_32", ROUND.chair[n].owner)
		end
	end,
	eventDonate = function ()
		if math.random() > 0.7 then
			quote("Jingle", "QUOTE_29")
		end
	end,
	eventPenalty = function ()
		if math.random() > 0.7 then
			quote("Jingle", "QUOTE_30")
		end
	end,
	eventWin = function ()
		if math.random(2) == 1 then
			quote("Jingle", "QUOTE_34")
			if math.random(2) == 1 then
				addFunctionTimer(quote, 3000, "Papaille", "QUOTE_35")
			end
		end
	end,
	eventLose = function (name)
		unlockTrophy(name, "noel")
	end,
	eventLoop = function (n)
		if ROUND.chair[ROUND.turn].action then
			if ROUND.chair[ROUND.turn].action.name == "IMITATE" and math.random() > 0.6 then
				eventEmotePlayed("Jingle", ROUND.chair[ROUND.turn].action.action)
			end
		elseif ROUND.gameMode.jumpin and ROUND.turn ~= n and math.random() > 0.7 and not ROUND.chair[ROUND.turn].action and not ROUND.chair[n].action and not isCursed(n, "poison") and not ROUND.chair[n].confuse then
			local can = false
			for i, v in pairs(ROUND.chair[n].hand) do
				if canPlay(n, i) then
					missCard(n, v, 1000)
					jumpIn(ROUND.turn, n)
					updateArrow()
					playCard(n, i, false, true)
					break
				end
			end
		end
	end,
	autoPlay = function ()
		local action, target = botMakeAction()
		if action == "GIFT" then
			quote("Jingle", "QUOTE_28", ROUND.chair[target].owner)
		elseif action == "DRAW" then
			BOT.Jingle.eventPenalty()
		elseif action == "BLOCK" then
			BOT.Jingle.eventBlock()
		end
	end
}


--[[ src/bots/ninguem_v2.lua ]]--

BOT.Ninguem_v2 = {
	img = "1712da199c2.png",
	chair = "max",
	medal = "none",
	victory = 0,
	eventLoop = function (n)
		if ROUND.chair[ROUND.turn].action then
			if ROUND.chair[ROUND.turn].action.name == "IMITATE" then
				eventEmotePlayed("Ninguem_v2", ROUND.chair[ROUND.turn].action.action)
			end
		elseif ROUND.gameMode.jumpin and ROUND.turn ~= n and math.random() > 0.3 and not ROUND.chair[ROUND.turn].action and not ROUND.chair[n].action and not isCursed(n, "poison") and not ROUND.chair[n].confuse then
			local can = false
			for i, v in pairs(ROUND.chair[n].hand) do
				if ROUND.topCard.card[1] == v[1] and ROUND.topCard.card[2] == v[2] then
					missCard(n, v, 1000)
					jumpIn(ROUND.turn, n)
					updateArrow()
					playCard(n, i)
					break
				end
			end
		end
	end,
	autoPlay = function ()
		botMakeAction()
	end
}


--[[ src/bots/papaille.lua ]]--

BOT.Papaille = {
	img = "16004ade907.png",
	chair = "candy",
	medal = "noel",
	victory = 801000,
	eventWin = function ()
		if math.random(2) == 1 then
			quote("Papaille", "QUOTE_36")
			if math.random(2) == 1 then
				addFunctionTimer(quote, 3000, "Jingle", "QUOTE_37")
			end
		end
	end,
	eventPenalty = function ()
		if math.random() > 0.7 then
			quote("Papaille", "QUOTE_31")
		end
	end,
	eventBlock = function ()
		if math.random() > 0.5 then
			quote("Papaille", "QUOTE_33")
		end
	end,
	eventLoop = function (n)
		if ROUND.chair[ROUND.turn].action then
			if ROUND.chair[ROUND.turn].action.name == "IMITATE" and math.random() > 0.5 then
				eventEmotePlayed("Papaille", ROUND.chair[ROUND.turn].action.action)
			end
		elseif ROUND.gameMode.jumpin and ROUND.turn ~= n and math.random() > 0.7 and not ROUND.chair[ROUND.turn].action and not ROUND.chair[n].action and not isCursed(n, "poison") and not ROUND.chair[n].confuse then
			local can = false
			for i, v in pairs(ROUND.chair[n].hand) do
				if canPlay(n, i) then
					missCard(n, v, 1000)
					jumpIn(ROUND.turn, n)
					updateArrow()
					playCard(n, i, false, true)
					break
				end
			end
		end
	end,
	autoPlay = function ()
		local action = botMakeAction()
		if action == "DRAW" then
			BOT.Papaille.eventPenalty()
		elseif action == "BLOCK" then
			BOT.Papaille.eventBlock()
		end
	end
}


--[[ src/bots/snowy.lua ]]--

BOT.Snowy = {
	img = "167d2c921bb.png",
	chair = "fire",
	medal = "snowy",
	victory = 0,
	eventWelcome = function ()
		BOT.Snowy.title = false
		BOT.Snowy.chat = false
		BOT.Snowy.talk = false
		local pool = {"QUOTE_88", "QUOTE_89"}
		quote("Snowy", pool[math.random(#pool)])
	end,
	eventWin = function ()
		quote("Snowy", "QUOTE_96")
	end,
	eventDonate = function (p)
		if math.random() > 0.5 then
			quote("Snowy", "QUOTE_90", p)
		end
	end,
	eventPenalty = function ()
		if math.random() > 0.7 then
			quote("Snowy", "QUOTE_91")
		end
	end,
	eventEliminate = function (name)
		if name == "Snowy" then
			if math.random() > 0.5 then
				quote("Snowy", "QUOTE_95", name)
			end
		elseif math.random() > 0.8 then
			quote("Snowy", "QUOTE_97", name)
		end
	end,
	eventLose = function (name)
		unlockTrophy(name, "snowy")
	end,
	eventChat = function (p, msg)
		if not BOT.Snowy.talk then
			if string.find(msg, "jingle") then
				addFunctionTimer(quote, 3000, "Snowy", "QUOTE_100")
				BOT.Snowy.talk = true
			elseif string.find(msg, "papaille") then
				addFunctionTimer(quote, 3000, "Snowy", "QUOTE_98")
				BOT.Snowy.talk = true
			elseif string.find(msg, "icemice") then
				addFunctionTimer(quote, 3000, "Snowy", "QUOTE_101")
				addFunctionTimer(quote, 5000, "Snowy", "QUOTE_102")
				BOT.Snowy.talk = true
			end
		end
	end,
	eventRandom = function (name)
		if not BOT.Snowy.title then
			if tfm.get.room.playerList[name] and tfm.get.room.playerList[name].title == 244 then
				quote("Snowy", "QUOTE_99", name)
				BOT.Snowy.title = true
			elseif math.random() > 0.985 then
				quote("Snowy", "QUOTE_92")
				BOT.Snowy.title = true
			end
		end
		if not BOT.Snowy.chat and math.random() > 0.985 then
			quote("Snowy", "QUOTE_93")
			addFunctionTimer(quote, 3000, "Icemice", "QUOTE_94")
			BOT.Snowy.chat = true
		end
	end,
	eventLoop = function (n)
		if ROUND.chair[ROUND.turn].action then
			if ROUND.chair[ROUND.turn].action.name == "IMITATE" and math.random() > 0.7 then
				eventEmotePlayed("Snowy", ROUND.chair[ROUND.turn].action.action)
			end
		elseif ROUND.gameMode.jumpin and ROUND.turn ~= n and math.random() > 0.7 and not ROUND.chair[ROUND.turn].action and not ROUND.chair[n].action and not isCursed(n, "poison") and not ROUND.chair[n].confuse then
			local can = false
			for i, v in pairs(ROUND.chair[n].hand) do
				if ROUND.topCard.card[1] == v[1] and ROUND.topCard.card[2] == v[2] then
					missCard(n, v, 1000)
					jumpIn(ROUND.turn, n)
					updateArrow()
					playCard(n, i)
					break
				end
			end
		end
	end,
	autoPlay = function ()
		botMakeAction()
	end
}


--[[ src/libs/custom.lua ]]--

function customAddAction(p, name)
	local blank = {
		DRAW = {action=name, who="NEXT", amount="2"},
		DISCARD = {action=name, who="ALL", amount="#3", condition="ANY"},
		SHOW = {action=name, who="ALL", condition="ANY"},
		SKIP = {action=name, who="NEXT"},
		DONATE = {action=name, who="YOURSELF", who2="CHOOSE", amount="1", condition="ANY"},
		SWAP = {action=name, who="YOURSELF", who2="CHOOSE"},
		TRADE = {action=name, who="YOURSELF", who2="CHOOSE"},
		ELIMINATE = {action=name, who="CHOOSE"},
	}
	if p == OWNER and blank[name] and #CONFIG.custom.action < 5 then
		table.insert(CONFIG.custom.action, blank[name])
	else
		tfm.exec.chatMessage("<r>"..translate(p, "CUSTOM_ERROR"), p)
	end
end

function customEditAction(p, action, atribute, value)
	-- EDI√á√ïES PERMITIDAS
	local can = {
		DRAW = {who=1, amount=1},
		DISCARD = {who=1, condition=1, amount=1},
		SHOW = {who=1, condition=1},
		SKIP = {who=1},
		DONATE = {who=1, who2=1, condition=1, amount=1},
		SWAP = {who=1, who2=1},
		TRADE = {who=1, who2=1},
		ELIMINATE = {who=1},
	}
	--
	local edit = CONFIG.custom.action[action]
	if p==OWNER and edit and can[edit.action][atribute] then
		if atribute == "who" then
			if value ~= CONFIG.custom.action[action].who2 then
				edit[atribute] = value
			else
				tfm.exec.chatMessage("<r>"..translate(p, "CUSTOM_ERROR"), p)
			end
		elseif atribute == "who2" then
			if value ~= CONFIG.custom.action[action].who then
				edit[atribute] = value
			else
				tfm.exec.chatMessage("<r>"..translate(p, "CUSTOM_ERROR"), p)
			end
		else
			edit[atribute] = value
		end
	else
		tfm.exec.chatMessage("<r>"..translate(p, "CUSTOM_ERROR"), p)
	end
end

function customRemoveAction(p, action)
	local can = true
	for i, v in pairs(CONFIG.custom.action) do
		if v.amount == "&"..action then
			can = false
			break
		end
	end
	if p==OWNER and CONFIG.custom.action[action] and can then
		for i, v in pairs(CONFIG.custom.action) do
			if v.amount and v.amount:sub(1,1) == "&" then
				local num = tonumber(v.amount:sub(2))
				if num > action then
					v.amount = "&"..num-1
				end
			end
		end
		table.remove(CONFIG.custom.action, action)
	else
		tfm.exec.chatMessage("<r>"..translate(p, "CUSTOM_ERROR"), p)
	end
end

function customValidAmount(action, str)
	local unt = str:match("^#(%d)$")
	local ret = str:match("^%&(%d)$")
	local x, y = str:match("^(%d)%-(%d)$")
	if unt and tonumber(unt) then
		local n = tonumber(unt)
		return n >= 0 and n <= 10
	elseif ret and tonumber(ret) then
		local n = tonumber(ret)
		return n >= 1 and n < action
	elseif x and y and tonumber(x) and tonumber(y) then
		local x = tonumber(x)
		local y = tonumber(y)
		return y > x and x >= 0 and x <= 10 and y >= 0 and y <= 10
	elseif tonumber(str) then
		local n = tonumber(str)
		return n >= 0 and n <= 10
	end
end

function customEditCopies(color)
	CONFIG.custom.color[color] = (CONFIG.custom.color[color]+1)%5
end

function printAction(p, action)
	local order = {"who", "who2", "amount", "condition"}
	local txt = ""
	local l = {
		YOURSELF = "WHO_YOURSELF",
		NEXT = "WHO_NEXT",
		PREVIOUS = "WHO_PREVIOUS",
		ALL = "WHO_ALL",
		OTHERS = "WHO_OTHERS",
		CHOOSE = "WHO_CHOOSE",
		RANDOM = "WHO_RANDOM",
		RANDOM2 = "WHO_RANDOM2",
		RANDOM3 = "WHO_RANDOM3",
		ANY = "CONDITION_ANY",
		NUMBER = "CONDITION_NUMBER",
		ACTION = "CONDITION_ACTION",
		RED = "CONDITION_RED",
		BLUE = "CONDITION_BLUE",
		YELLOW = "CONDITION_YELLOW",
		GREEN = "CONDITION_GREEN",
		WILD = "CONDITION_WILD",
		SAME = "CONDITION_SAME"
	}
	for i, v in pairs(order) do
		if CONFIG.custom.action[action][v] then
			if v == "amount" then
				local unt = CONFIG.custom.action[action][v]:match("^#(%d)$")
				local ret = CONFIG.custom.action[action][v]:match("^%&(%d)$")
				local x, y = CONFIG.custom.action[action][v]:match("^(%d)%-(%d)$")
				if unt then
					txt = txt .. string.format("<j><a href='event:edit %s %s'>[%s]</a> ", action, v, string.format(translate(p, "AMOUNT_UNTIL"), unt))
				elseif ret then
					txt = txt .. string.format("<j><a href='event:edit %s %s'>[%s]</a> ", action, v, string.format(translate(p, "AMOUNT_RETURN"), ret))
				elseif x and y then
					txt = txt .. string.format("<j><a href='event:edit %s %s'>[%s]</a> ", action, v, string.format(translate(p, "AMOUNT_RANGE"), x, y))
				else
					txt = txt .. string.format("<j><a href='event:edit %s %s'>[%s]</a> ", action, v, string.format(translate(p, "AMOUNT_X"), CONFIG.custom.action[action][v]))
				end
			else
				txt = txt .. string.format("<j><a href='event:edit %s %s'>[%s]</a><n> ", action, v, translate(p, l[CONFIG.custom.action[action][v]] or "OPA"))
			end
		end
	end
	return string.format("<v>%d)<n> %s <r><a href='event:remove %s'>[x]</a>\n\t%s", action, translate(p, "ACTION_"..CONFIG.custom.action[action].action), action, txt)
end

function printAdd(p)
	local pool = {"DRAW", "DONATE", "DISCARD", "SHOW", "SKIP", "SWAP", "TRADE", "ELIMINATE"}
	local txt = "<p align='center'>"
	for i, v in pairs(pool) do
		txt = txt .. string.format("<a href='event:add %s'>%s\n", v, translate(p, "ACTION_"..v))
	end
	return txt .. string.format("<a href='event:exit'><r>[%s]", translate(p, "CLOSE"))
end

function printOptions(p, action, atribute)
	local can = {
		DRAW = {who={"YOURSELF","NEXT","PREVIOUS","ALL","OTHERS","CHOOSE","RANDOM","RANDOM2","RANDOM3"}},
		DISCARD = {who={"YOURSELF","NEXT","PREVIOUS","ALL","OTHERS","CHOOSE","RANDOM","RANDOM2","RANDOM3"}, condition={"ANY","NUMBER","ACTION","RED","BLUE","YELLOW","GREEN","WILD","SAME"}},
		SHOW = {who={"YOURSELF","NEXT","PREVIOUS","ALL","OTHERS","CHOOSE","RANDOM","RANDOM2","RANDOM3"}, condition={"ANY","NUMBER","ACTION","RED","BLUE","YELLOW","GREEN","WILD","SAME"}},
		SKIP = {who={"YOURSELF","NEXT","PREVIOUS","ALL","OTHERS","CHOOSE","RANDOM","RANDOM2","RANDOM3"}},
		DONATE = {who={"YOURSELF","NEXT","PREVIOUS","CHOOSE","RANDOM"}, who2={"YOURSELF","NEXT","PREVIOUS","CHOOSE","RANDOM"}, condition={"ANY","NUMBER","ACTION","RED","BLUE","YELLOW","GREEN","WILD","SAME"}},
		SWAP = {who={"YOURSELF","NEXT","PREVIOUS","CHOOSE","RANDOM"}, who2={"YOURSELF","NEXT","PREVIOUS","CHOOSE","RANDOM"}},
		TRADE = {who={"YOURSELF","NEXT","PREVIOUS","CHOOSE","RANDOM"}, who2={"YOURSELF","NEXT","PREVIOUS","CHOOSE","RANDOM"}},
		ELIMINATE = {who={"YOURSELF","NEXT","PREVIOUS","ALL","OTHERS","CHOOSE","RANDOM","RANDOM2","RANDOM3"}},
	}
	local l = {
		YOURSELF = "WHO_YOURSELF",
		NEXT = "WHO_NEXT",
		PREVIOUS = "WHO_PREVIOUS",
		ALL = "WHO_ALL",
		OTHERS = "WHO_OTHERS",
		CHOOSE = "WHO_CHOOSE",
		RANDOM = "WHO_RANDOM",
		RANDOM2 = "WHO_RANDOM2",
		RANDOM3 = "WHO_RANDOM3",
		ANY = "CONDITION_ANY",
		NUMBER = "CONDITION_NUMBER",
		ACTION = "CONDITION_ACTION",
		RED = "CONDITION_RED",
		BLUE = "CONDITION_BLUE",
		YELLOW = "CONDITION_YELLOW",
		GREEN = "CONDITION_GREEN",
		WILD = "CONDITION_WILD",
		SAME = "CONDITION_SAME"
	}
	local txt = "<p align='center'>"
	for i, v in pairs(can[CONFIG.custom.action[action].action][atribute]) do
		txt = txt .. string.format(string.format("<a href='event:edit2 %s %s %s'>%s\n", action, atribute, v, translate(p, l[v] or "OPA")))
	end
	return txt .. string.format("<a href='event:exit'><r>[%s]", translate(p, "CLOSE"))
end


--[[ src/libs/data.lua ]]--

PACK = {
	chairs = {"default","red","blue","yellow","green","white","fire","water","earth","air","rainbow","wood","stone","gold","diamond","king","luck","angel","junky","shaman","beach","cine","hell","cards","candy","cheese","fraise","illuminati","gift","bog","got","hamburguer","skull","school","time","pencil","chess","show","anvil","garden","falls","unicorn","psycho","television","radio","newspaper","cat","potato","rip","apple","heart","breakfast","bones","chocolate","marine","loot","random","astral","computer","elemental","guitar","popcorn","trash","wonderland","friend","football","cuphead","bootcamp","gaga","gothic","mecatopus","pumpkin","ufo","aquarium","help","font","chimney","circus","cisne","coffee","croissant","space","mermaid","phone","quartz","snowman","totoro","vangogh","chest","coca","flamingo","honey","old","pineapple","sack","smartphone","vampire","moon","max","bill","horn","toast","pizza","samson","fashion","undertale","forest","kiss","mountain","pikachu","simpsons","truelove","cyan","orange","pink","purple","black","toxic","thunder","crystal","dark","light","eclipse","toothless","lightfury","kratos","shenlong","spider"},

	rules = {"nochallenge","mini","maxi","noaction","clean","nocombo","supercombo","hell","satisfaction","insatisfaction","camouflage","flash","limit","jumpin","black","revelation","stack","perfection","tracking","mulligan","overload","peace","death","gift","trade","carousel","chair","spy","rain","equality","imitate","meep","random","bomb","rule","chess","steal","fastdraw","hard","web","thunder","clone","sequence","luck","box","wish","ink","confuse","shiny","neighbor","team","batata","limbo","curse","magnet","portal","compass","mess","custom","tornado","theft","ban","simon","half","paradox","oddeven","mimic","mix","justice","bluegreen","elise","charlotte","elisah", "drekkemaus","buffy","jingle","papaille","snowy","icemice","key","share"},

	medals = {"none", "beta", "drekkemaus", "noel", "charlotte", "elisah", "buffy", "snowy"},

	panels = {"default", "picnic", "metal", "paper", "carpet", "disco", "cloud", "circuit"},
}

function packChair(t)
	local str = ""
	for i, v in pairs(PACK.chairs) do
		t[v] = t[v] == true and "1" or t[v]
		str = str .. (t and t[v] or "0")
	end
	return str
end

function packRules(t)
	local str = ""
	for i, v in pairs(PACK.rules) do
		t[v] = t[v] == true and "1" or t[v]
		str = str .. (t and t[v] or "0")
	end
	return str
end

function packTrophy(t)
	local str = ""
	for i, v in pairs(PACK.medals) do
		t[v] = t[v] == true and "1" or t[v]
		str = str .. (t and t[v] or "0")
	end
	return str
end

function packFlag(t)
	local str = ""
	for i, v in pairs(PACK.panels) do
		t[v] = t[v] == true and "1" or t[v]
		str = str .. (t and t[v] or "0")
	end
	return str
end

function unpackChair(str)
	local t = {}
	for i=1, #str do
		if str:sub(i,i) and str:sub(i,i) ~= "0" then
			t[PACK.chairs[i]] = tonumber(str:sub(i,i))
		end
	end
	return t
end

function unpackRules(str)
	local t = {}
	for i=1, #str do
		if str:sub(i,i) and str:sub(i,i) ~= "0" then
			t[PACK.rules[i]] = tonumber(str:sub(i,i))
		end
	end
	return t
end

function unpackTrophy(str)
	local t = {}
	for i=1, #str do
		if str:sub(i,i) and str:sub(i,i) ~= "0" then
			t[PACK.medals[i]] = tonumber(str:sub(i,i))
		end
	end
	return t
end

function unpackFlag(str)
	local t = {}
	for i=1, #str do
		if str:sub(i,i) and str:sub(i,i) ~= "0" then
			t[PACK.panels[i]] = tonumber(str:sub(i,i))
		end
	end
	return t
end

function saveData(p)
	if p:sub(1,1) ~= "*" and PLAYER[p] and PLAYER[p].loaded and not BOT[p] then
		--PLAYER[p].rules.nochallenge = true
		PLAYER[p].trophy.none = PLAYER[p].trophy.none or 1
		PLAYER[p].skin.default = PLAYER[p].skin.default or 1
		PLAYER[p].skinEquiped = PLAYER[p].skinEquiped or "default"
		PLAYER[p].trophyEquiped = PLAYER[p].trophyEquiped or "none"
		PLAYER[p].flagEquipped = PLAYER[p].flagEquipped or "default"
		local stats = playerData.load(p, "uno")
		if stats then
			stats.spectator = PLAYER[p].stats.spectator
			stats.round = PLAYER[p].stats.round
			stats.win = PLAYER[p].stats.victory.all
			stats.team = PLAYER[p].stats.victory.team
			stats.red = PLAYER[p].stats.victory.red
			stats.blue = PLAYER[p].stats.victory.blue
			stats.green = PLAYER[p].stats.victory.green
			stats.yellow = PLAYER[p].stats.victory.yellow
			stats.wild = PLAYER[p].stats.victory.wild
			stats.cian = PLAYER[p].stats.victory.cian
			stats.orange = PLAYER[p].stats.victory.orange
			stats.pink = PLAYER[p].stats.victory.pink
			stats.purple = PLAYER[p].stats.victory.purple
			stats.white = PLAYER[p].stats.victory.white
			stats.lightWin = PLAYER[p].stats.victory.lightWin
			stats.darkWin = PLAYER[p].stats.victory.darkWin
			stats.mess = PLAYER[p].stats.victory.mess
			stats.skin = packChair(PLAYER[p].skin)
			stats.rules = packRules(PLAYER[p].rules)
			stats.trophy = packTrophy(PLAYER[p].trophy)
			stats.flags = packFlag(PLAYER[p].flags)
			stats.skinEquiped = PLAYER[p].skinEquiped
			stats.trophyEquiped = PLAYER[p].trophyEquiped
			stats.flagEquipped = PLAYER[p].flagEquipped
			stats.shadow = PLAYER[p].shadow and "1" or "0"
			stats.challengePopup = PLAYER[p].challengePopup and "1" or "0"
			stats.colorblind = PLAYER[p].colorBlind and "1" or "0"
			stats.bell = PLAYER[p].bell and "1" or "0"
			stats.community = PLAYER[p].community
			stats.match = PLAYER[p].match
			stats.challenge = PLAYER[p].challenge
			stats.team = PLAYER[p].stats.victory.team
			stats.pencil = PLAYER[p].pencil
			stats.chess = PLAYER[p].chess
			stats.portal1= PLAYER[p].portal1
			stats.portal2 = PLAYER[p].portal2
			stats.block = PLAYER[p].block
			stats.action = PLAYER[p].action
			stats.dayStreak = PLAYER[p].dayStreak
			stats.lastDayPlayed = PLAYER[p].lastDayPlayed
			system.savePlayerData(p, playerData.pack(p))
		end
	end
end

function instanceData()
	return {
		skin = {default=1},
		rules = {},
		trophy = {none=1},
		flags = {default=1},
		lights = {yellow=true},
		--maps = {none=true},
		skinEquiped = "default",
		trophyEquiped = "none",
		flagEquipped = "default",
		lightEquiped = "yellow",
		--mapEquiped = "none",
		shadow = true,
		challengePopup = true,
		colorBlind = false,
		bell = false,
		community = "auto",
		challenge = 0, -- GOT throne
		pencil = 0, -- pencil throne
		chess = 0, -- chess throne
		portal1 = 0, -- lightfury throne
		portal2 = 0, -- toothless throne
		block = 0, -- soccer throne
		action = 0, -- rosequartz throne
		dayStreak = 0, -- asgore throne
		lastDayPlayed = 0,
		--powerup = {
		--	shiny = 0,
		--	uno = 0,
		--	bot = 0,
		--	mallet = 0,
		--	lamp = 0,
		--	rematch = 0
		--},
		--coin = {
		--	red = 0,
		--	blue = 0,
		--	yellow = 0,
		--	green = 0,
		--},
		--bank = {},
		--missions = {},
		--lastDayEntered = 0,
		--buyed = {},
		--converted = false,

		-- not save
		spaceDelay = os.time(),
		chairDelay = 0,
		sequence = 0, -- school throne
		chair = false,
		coffee = os.time(), -- coffee throne

		--
		stats = {
			spectator = 0, -- rounds watched
			round = 0,
			victory = {
				all = 0,
				team = 0,
				red = 0,
				blue = 0,
				green = 0,
				yellow = 0,
				wild = 0,
				cian = 0,
				orange = 0,
				pink = 0,
				purple = 0,
				white = 0,
				lightWin = 0,
				darkWin = 0,
				mess = 0
			}
		}
	}
end

DATATYPE = {
	spectator = {type="number"},
	round = {type="number"},
	win = {type="number", name="all"},
	team = {type="number"},
	red = {type="number"},
	blue = {type="number"},
	green = {type="number"},
	yellow = {type="number"},
	wild = {type="number"},
	cian = {type="number"},
	orange = {type="number"},
	pink = {type="number"},
	purple = {type="number"},
	white = {type="number"},
	mess = {type="number"},
	lightWin = {type="number"},
	darkWin = {type="number"},
	skin = {type="table", default="1", func=unpackChair},
	rules = {type="table", default="0", func=unpackRules},
	trophy = {type="number", default="1", func=unpackTrophy},
	flags = {type="number", default="1", func=unpackFlag},
	skinEquiped = {type="string", default="default"},
	trophyEquiped = {type="number", default="none"},
	flagEquipped = {type="number", default="default"},
	shadow = {type="boolean", default="1"},
	challengePopup = {type="boolean", default="1"},
	colorBlind = {type="boolean", default="0"},
	bell = {type="boolean", default="0"},
	community = {type="string", default="auto"},
	challenge = {type="number"},
	pencil = {type="number"},
	chess = {type="number"},
	portal1 = {type="number"},
	portal2 = {type="number"},
	block = {type="number"},
	action = {type="number"},
	dayStreak = {type="number"},
	lastDayPlayed = {type="number"},
}

function newData()
	local data = {}
	for i, v in pairs(DATATYPE) do
		data[i] = v.default or "0"
	end
	return data
end


--[[ src/libs/end_game.lua ]]--

function scoreHand(n)
	local sum = {n0=0, n1=1, n2=2, n3=3, n4=4, n5=5, n6=6, n7=7, n8=8, n9=9, skip=20, reverse=20, draw2=20, wild=50, draw4=50, peace=20, death=20, carousel=20, trade=20, gift=20, random=20, spy=20, tornado=20, chair=20, imitate=20, silence=20, equal=20}
	local score = 0
	for i, v in pairs(ROUND.chair[n].hand) do
		score = score + (sum[v[2]] or 20)
	end
	return score
end

function endGame(p, card, winners, mode)
	if ROUND.state == "FINISH" then
		return false
	end
	winningEffect()
	ROUND.state = "FINISH"
	ROUND.time = GLOBAL_TIME + 10000
	local score = 0
	local qtdPlayers = 0
	for i, v in pairs(ROUND.chair) do
		if v.owner and v.owner ~= "" then
			qtdPlayers = qtdPlayers + 1
		end
	end
	for i=10001, 10005 do
		ui.removeTextArea(i)
	end
	ui.removeTextArea(10)
	ui.removeTextArea(11)
	ui.removeTextArea(12)
	ui.removeTextArea(27)
	ui.removeTextArea(32)
	ui.removeTextArea(33)
	if p and ROUND.chair[PLAYER[p].chair].mode == "BUSY" then
		local pp = false
		local ccont = 0
		local qtdBots = 0
		if ROUND.chair[PLAYER[p].chair].team then
			for i, v in pairs(ROUND.team[ROUND.chair[PLAYER[p].chair].team]) do
				ccont = ccont + 1
				if PLAYER[p].chair ~= i and ROUND.chair[i].owner ~= "" and PLAYER[ROUND.chair[i].owner] and PLAYER[ROUND.chair[i].owner].chair then
					pp = ROUND.chair[i].owner
					break
				end
				if ccont >= 2 then
				--  break
				end
			end
		end
		if BOT[p] and BOT[p].eventWin then
			BOT[p].eventWin()
		end
		if pp and BOT[pp] and BOT[pp].eventWin then
			BOT[pp].eventWin()
		end
		ROUND.turn = nextChair(ROUND.turn)
		-- rules
		ui.addTextArea(13, "", nil, 0, 0, 800, 400, 1, 1, 0.2, false)
		if pp then
			for i, v in pairs(PLAYER) do
				ui.addTextArea(14, string.format("<p align='center'><font size='40px' color='#ffffff'>%s", string.format(translate(i, "TEAM_WON"), nickHashtag(p), nickHashtag(pp))), i, 0, 160, 800, 400, 1, 1, 0.7, false)
				tfm.exec.chatMessage("<j>"..string.format(translate(i, "TEAM_WON"), nickHashtag(p), nickHashtag(pp)), i)
				if not v.chair then
					v.chairDelay = 0
				end
			end
		else
			for i, v in pairs(PLAYER) do
				ui.addTextArea(14, string.format("<p align='center'><font size='40px' color='#ffffff'>%s", string.format(translate(i, "PLAYER_WON"), nickHashtag(p))), i, 0, 160, 800, 400, 1, 1, 0.7, false)
				tfm.exec.chatMessage("<j>"..string.format(translate(i, "PLAYER_WON"), nickHashtag(p)), i)
				if not v.chair then
					v.chairDelay = 0
				end
			end
		end
		for i, v in pairs(ROUND.chair) do
			updateHand(i)
			if BOT[v.owner] then
				CONFIG.chair[i] = nil
				if BOT[v.owner].eventLose then
					BOT[v.owner].eventLose(p)
				end
				qtdBots = qtdBots + 1
			elseif v.owner ~= "" then
				if (v.mode == "BUSY" or v.score) and v.owner ~= p and v.owner ~= pp then
					local tempScore = scoreHand(i)
					score = score + tempScore
					if not BOT[p] then
						SCORE[p] = SCORE[p] and (SCORE[p] + tempScore) or tempScore
					end
					if CONFIG.scoreBy == "SCORE_2" then
						tfm.exec.setPlayerScore(v.owner, tempScore, true)
					else
						ui.addTextArea(3010+i, "<p align='center'><font size='30px' color='#000000'><b>"..tempScore, nil, v.x-49, 331, 100, nil, 0, 0, 0, false)
						ui.addTextArea(3000+i, "<p align='center'><font size='30px'><b><j>"..tempScore, nil, v.x-50, 330, 100, nil, 0, 0, 0, false)
					end
				end
				if v.owner and v.owner ~= "" and PLAYER[v.owner] then
					if (CONFIG.ranked and tfm.get.room.uniquePlayers >= 4) or RANKED then
						PLAYER[v.owner].stats.round = PLAYER[v.owner].stats.round + 1
						if PLAYER[v.owner].stats.round >= 1000 then
							unlockChair(v.owner, "stone")
						elseif PLAYER[v.owner].stats.round >= 100 then
							unlockChair(v.owner, "wood")
						end
						if PLAYER[v.owner].stats.round >= 2500 then
							unlockChair(v.owner, "cat")
						end
						if PLAYER[v.owner].stats.round >= 5000 then
							unlockChair(v.owner, "garden")
						end
						if PLAYER[v.owner].stats.round >= 7500 then
							unlockChair(v.owner, "friend")
						end
						if PLAYER[v.owner].stats.round >= 10000 then
							unlockChair(v.owner, "anvil")
						end
						if not v.playedChair then
							unlockChair(v.owner, "bog")
						end
						if ROUND.chair[nextChair(i)].skin.id == "vampire" or ROUND.chair[previousChair(i)].skin.id == "vampire" then
							unlockChair(v.owner, "vampire")
						end
						local today = math.floor(os.time()/86400000)
						if PLAYER[v.owner].lastDayPlayed and PLAYER[v.owner].lastDayPlayed ~= today then
							if PLAYER[v.owner].lastDayPlayed + 1 == today then
								PLAYER[v.owner].dayStreak = PLAYER[v.owner].dayStreak + 1
							else
								PLAYER[v.owner].dayStreak = 1
							end
							PLAYER[v.owner].lastDayPlayed = today
							if PLAYER[v.owner].dayStreak >= 7 then
								unlockChair(v.owner, "fashion")
							end
							if PLAYER[v.owner].dayStreak >= 15 then
								unlockChair(v.owner, "undertale")
							end
						end
					end
				else
					CONFIG.chair[i] = nil
				end
			end
		end
		if pp then
			score = math.ceil(score/2)
		end
		if CONFIG.scoreBy == "SCORE_1" then
			tfm.exec.setPlayerScore(p, score, true)
			ui.addTextArea(3010+PLAYER[p].chair, "<p align='center'><font size='30px' color='#000000'><b>"..score, nil, ROUND.chair[PLAYER[p].chair].x-49, 51, 100, nil, 0, 0, 0, false)
			ui.addTextArea(3000+PLAYER[p].chair, "<p align='center'><font size='30px'><b><vp>"..score, nil, ROUND.chair[PLAYER[p].chair].x-50, 50, 100, nil, 0, 0, 0, false)
			if pp then
				tfm.exec.setPlayerScore(pp, score, true)
				ui.addTextArea(3010+PLAYER[pp].chair, "<p align='center'><font size='30px' color='#000000'><b>"..score, nil, ROUND.chair[PLAYER[pp].chair].x-49, 51, 100, nil, 0, 0, 0, false)
				ui.addTextArea(3000+PLAYER[pp].chair, "<p align='center'><font size='30px'><b><vp>"..score, nil, ROUND.chair[PLAYER[pp].chair].x-50, 50, 100, nil, 0, 0, 0, false)
			end
		elseif CONFIG.scoreBy == "SCORE_3" then
			tfm.exec.setPlayerScore(p, 1, true)
			if pp then
				tfm.exec.setPlayerScore(pp, 1, true)
			end
		end
		PLAYER[p].chairDelay = 0
		if pp then
			PLAYER[pp].chairDelay = 0
		end
		ROUND.winner = p
		local contRules = 0
		for i, v in pairs(ROUND.gameMode) do
			unlockRule(p, i)
			if pp then
				unlockRule(pp, i)
			end
			contRules = contRules + 1
		end
		if countRules(PLAYER[p].rules) >= CONFIG.qtdRule then
			unlockChair(p, "candy", true)
			unlockRule(p, "custom", true)
		end
		if pp then
			if countRules(PLAYER[pp].rules) >= CONFIG.qtdRule then
				unlockChair(pp, "candy", true)
				unlockRule(pp, "custom", true)
			end
		end
		if not BOT[p] and not ROUND.spectator and qtdBots == 9 then
			local canUnlock = true
			for i, v in pairs(ROUND.gameMode) do
				if RULE[i].type ~= "BOSS" and RULE[i].type ~= "EXTRA" then
					canUnlock = false
					break
				end
			end
			if canUnlock then
				unlockFlag(p, "circuit", true)
			end
			unlockChair(p, "max", true)
		end
		if OWNER ~= "Ninguem#0095" and PLAYER[OWNER] and tfm.get.room.uniquePlayers >= qtdPlayers and math.random(100) <= qtdPlayers*5 then
			for i, v in pairs(PLAYER) do
				if v.chair then
					unlockChair(i, "show", true)
				else
					unlockChair(i, "smartphone", true)
				end
			end
		end
		addFunctionTimer(function()
			if (CONFIG.ranked and qtdPlayers >= 4 and tfm.get.room.uniquePlayers >= 4) or RANKED then
				if pp then
					PLAYER[p].stats.victory.team = PLAYER[p].stats.victory.team + 1
					PLAYER[pp].stats.victory.team = PLAYER[pp].stats.victory.team + 1
					if PLAYER[p].stats.victory.team >= 100 then
						unlockChair(p, "breakfast")
					end
					if PLAYER[pp].stats.victory.team >= 100 then
						unlockChair(pp, "breakfast")
					end
					if PLAYER[p].stats.victory.team >= 250 then
						unlockChair(p, "hamburguer")
					end
					if PLAYER[pp].stats.victory.team >= 250 then
						unlockChair(pp, "hamburguer")
					end
					if PLAYER[p].stats.victory.team >= 487.5 then
						unlockChair(p, "croissant")
					end
					if PLAYER[pp].stats.victory.team >= 487.5 then
						unlockChair(pp, "croissant")
					end
					if PLAYER[p].stats.victory.team >= 600 then
						unlockChair(p, "toast")
					end
					if PLAYER[pp].stats.victory.team >= 600 then
						unlockChair(pp, "toast")
					end
					if PLAYER[p].stats.victory.team >= 1000 then
						unlockChair(p, "pizza")
					end
					if PLAYER[pp].stats.victory.team >= 1000 then
						unlockChair(pp, "pizza")
					end
					
					if PLAYER[p].stats.victory.team >= 10 then
						unlockRule(p, "team", true)
					end
					if PLAYER[pp].stats.victory.team >= 10 then
						unlockRule(pp, "team", true)
					end
					if p == "Elise" then
						unlockChair(pp, "marine")
					end
					if pp and not BOT[p] and not BOT[pp] then
						if tfm.get.room.playerList[p].spouseId == tfm.get.room.playerList[pp].id then
							unlockChair(p, "cisne")
							unlockChair(pp, "cisne")
						end
					end
					if card then
						for i, v in pairs(ROUND.chair[PLAYER[pp].chair].hand) do
							if card[1] == v[1] and card[2] == v[2] then
								unlockChair(p, "eclipse")
								break
							end
						end
					end
				elseif not BOT[p] then
					PLAYER[p].stats.victory.all = PLAYER[p].stats.victory.all + 1
					if PLAYER[p].stats.victory.all >= 1000 then
						unlockChair(p, "diamond")
					elseif PLAYER[p].stats.victory.all >= 100 then
						unlockChair(p, "gold")
					end
					if PLAYER[p].stats.victory.all >= 2000 then
						unlockChair(p, "unicorn")
					end
					if PLAYER[p].stats.victory.all >= 3000 then
						unlockChair(p, "cheese")
					end
				end
				if card then
					if ROUND.portal.side == "orange" then
						if card[1] == "red" then
							PLAYER[p].stats.victory.red = PLAYER[p].stats.victory.red + 1
							if PLAYER[p].stats.victory.red >= 100 then
								unlockChair(p, "fire")
							end
							if PLAYER[p].stats.victory.red >= 300 then
								unlockFlag(p, "picnic")
							end
							unlockChair(p, "red")
						elseif card[1] == "blue" then
							PLAYER[p].stats.victory.blue = PLAYER[p].stats.victory.blue + 1
							if PLAYER[p].stats.victory.blue >= 100 then
								unlockChair(p, "water")
							end
							if PLAYER[p].stats.victory.blue >= 300 then
								unlockFlag(p, "metal")
							end
							unlockChair(p, "blue")
						elseif card[1] == "yellow" then
							PLAYER[p].stats.victory.yellow = PLAYER[p].stats.victory.yellow + 1
							if PLAYER[p].stats.victory.yellow >= 100 then
								unlockChair(p, "earth")
							end
							if PLAYER[p].stats.victory.yellow >= 300 then
								unlockFlag(p, "paper")
							end
							unlockChair(p, "yellow")
						elseif card[1] == "green" then
							PLAYER[p].stats.victory.green = PLAYER[p].stats.victory.green + 1
							if PLAYER[p].stats.victory.green >= 100 then
								unlockChair(p, "air")
							end
							if PLAYER[p].stats.victory.green >= 300 then
								unlockFlag(p, "carpet")
							end
							unlockChair(p, "green")
						elseif card[1] == "black" then
							PLAYER[p].stats.victory.wild = PLAYER[p].stats.victory.wild + 1
							if PLAYER[p].stats.victory.wild >= 100 then
								unlockChair(p, "rainbow")
							end
							if PLAYER[p].stats.victory.wild >= 300 then
								unlockFlag(p, "disco")
							end
							unlockChair(p, "white")
						end
					else
						if card[1] == "red" then
							PLAYER[p].stats.victory.cian = PLAYER[p].stats.victory.cian + 1
							if PLAYER[p].stats.victory.cian >= 15 then
								unlockChair(p, "toxic")
							end
							unlockChair(p, "cyan")
						elseif card[1] == "blue" then
							PLAYER[p].stats.victory.orange = PLAYER[p].stats.victory.orange + 1
							if PLAYER[p].stats.victory.orange >= 15 then
								unlockChair(p, "thunder")
							end
							unlockChair(p, "orange")
						elseif card[1] == "yellow" then
							PLAYER[p].stats.victory.purple = PLAYER[p].stats.victory.purple + 1
							if PLAYER[p].stats.victory.purple >= 15 then
								unlockChair(p, "dark")
							end
							unlockChair(p, "purple")
						elseif card[1] == "green" then
							PLAYER[p].stats.victory.pink = PLAYER[p].stats.victory.pink + 1
							if PLAYER[p].stats.victory.pink >= 15 then
								unlockChair(p, "crystal")
							end
							unlockChair(p, "pink")
						elseif card[1] == "black" then
							PLAYER[p].stats.victory.white = PLAYER[p].stats.victory.white + 1
							if PLAYER[p].stats.victory.white >= 15 then
								unlockChair(p, "light")
							end
							unlockChair(p, "black")
						end
					end
					if card[2] == "batata" then
						unlockChair(p, "potato")
					end
					if card[2] == "thunder" then
						unlockChair(p, "pikachu")
					end
					if card[2] == "portal" and card[1] == "green" and ROUND.portal.side == "blue" then
						unlockChair(p, "forest")
					end
					if mode == "JUMPIN" then
						unlockChair(p, "popcorn")
					end
					if ROUND.subitDeath then
						unlockChair(p, "help")
						if card[2] == "tornado" then
							unlockChair(p, "mountain")
						end
					end
				elseif mode then
					if mode == "ELIMINATION" then
						unlockChair(p, "skull")
						if pp then
							unlockChair(pp, "skull")
						end
					elseif mode == "TIME" then
						unlockChair(p, "time")
						if pp then
							unlockChair(pp, "time")
						end
					end
				end
				if os.time() - ROUND.startTime < 60000 then
					unlockChair(p, "chocolate")
					if pp then
						unlockChair(pp, "chocolate")
					end
				end
				-- candy
				if ROUND.chair[PLAYER[p].chair].luck then
					unlockChair(p, "mermaid")
				end
				-- CONFUSO
				if ROUND.chair[PLAYER[p].chair].confuse or isCursed(PLAYER[p].chair, "poison") then
					unlockChair(p, "pineapple")
				end
				if ROUND.accumulated then
					unlockChair(p, "king")
				end
				if ROUND.chair[PLAYER[p].chair].underTime then
					unlockChair(p, "angel")
				end
				if ROUND.chair[PLAYER[p].chair].maxDraw == 0 then
					unlockChair(p, "luck")
				end
				if ROUND.chair[PLAYER[p].chair].maxHand >= 15 then
					unlockChair(p, "junky")
				end
				if ROUND.gameMode.mess then
					if not BOT[p] then
						PLAYER[p].stats.victory.mess = PLAYER[p].stats.victory.mess or 0
						PLAYER[p].stats.victory.mess = PLAYER[p].stats.victory.mess + 1
						if PLAYER[p].stats.victory.mess >= 50 then
							unlockFlag(p, "cloud")
						end
						unlockChair(p, "psycho")
					end
					if pp and PLAYER[pp] then
						PLAYER[pp].stats.victory.mess = PLAYER[pp].stats.victory.mess + 1
						if PLAYER[pp].stats.victory.mess >= 50 then
							unlockFlag(pp, "cloud")
						end
						unlockChair(pp, "psycho")
					end
				end
				if not ROUND.chair[PLAYER[p].chair].saidUno then
					unlockChair(p, "bootcamp")
				end
				if moonPhase() == 5 then
					unlockChair(p, "moon")
				end
				if contRules == 0 then
					unlockChair(p, "old")
				elseif contRules >= 5 then
					unlockChair(p, "flamingo")
				end
				if ROUND.gameMode.portal or ROUND.gameMode.mess then
					if ROUND.portal.side == "orange" then
						PLAYER[p].portal1 = 1
						PLAYER[p].stats.victory.lightWin = PLAYER[p].stats.victory.lightWin + 1
						if PLAYER[p].stats.victory.lightWin >= 10 then
							unlockChair(p, "lightfury")
						end
						if pp and not BOT[pp] then
							PLAYER[pp].portal1 = 1
							PLAYER[pp].stats.victory.lightWin = PLAYER[pp].stats.victory.lightWin + 1
							if PLAYER[pp].stats.victory.lightWin >= 10 then
								unlockChair(pp, "lightfury")
							end
						end
					elseif ROUND.portal.side == "blue" then
						PLAYER[p].portal2 = 1
						PLAYER[p].stats.victory.darkWin = PLAYER[p].stats.victory.darkWin + 1
						if PLAYER[p].stats.victory.darkWin >= 10 then
							unlockChair(p, "toothless")
						end
						if pp and not BOT[pp] then
							PLAYER[pp].portal2 = 1
							PLAYER[pp].stats.victory.darkWin = PLAYER[pp].stats.victory.darkWin + 1
							if PLAYER[pp].stats.victory.darkWin >= 10 then
								unlockChair(pp, "toothless")
							end
						end
					end
					if (PLAYER[p].portal1 + PLAYER[p].portal2) == 2 then
						unlockChair(p, "wonderland")
					end
					if pp and (PLAYER[pp].portal1 + PLAYER[pp].portal2) == 2 then
						unlockChair(pp, "wonderland")
					end
				end
				if not BOT[p] then
					if not RANKED and tfm.get.room.playerList[p].score+score >= 3000 then
						unlockChair(p, "shaman")
					end
					if RANKED then
						PLAYER[p].stats.ranking.scoreWeek = PLAYER[p].stats.ranking.scoreWeek + score
					end
				end
				if pp then
					if not BOT[pp] then
						if not RANKED and tfm.get.room.playerList[pp].score+score >= 3000 then
							unlockChair(pp, "shaman")
						end
						if RANKED then
							PLAYER[pp].stats.ranking.scoreWeek = PLAYER[pp].stats.ranking.scoreWeek + score
						end
					end
				end
				if not BOT[p] and useFraise(p) then
					unlockChair(p, "fraise")
				end
				if not BOT[p] and useFish(p) then
					unlockChair(p, "aquarium")
				end
				if not BOT[p] and useTree(p) then
					unlockChair(p, "chimney")
				end
				if not BOT[p] and isNaked(p) then
					unlockChair(p, "simpsons")
				end
				addFunctionTimer(function()
					for i, v in pairs(PLAYER) do
						if not BOT[i] and tfm.get.room.playerList[i] and i:sub(1,1) ~= "*" then
							if not v.chair then
								v.stats.spectator = v.stats.spectator + 1
								if v.stats.spectator >= 1000 then
									unlockChair(i, "cine")
								elseif v.stats.spectator >= 100 then
									unlockChair(i, "beach")
								end
								if v.stats.spectator >= 2500 then
									unlockChair(i, "newspaper")
								end
								if v.stats.spectator >= 5000 then
									unlockChair(i, "radio")
								end
								if v.stats.spectator >= 7500 then
									unlockChair(i, "television")
								end
								if v.stats.spectator >= 10000 then
									unlockChair(i, "computer")
								end
							end
							
						end
						saveData(i)
					end
				end, 500)
			end
		end,500)
	elseif winners then
		ui.addTextArea(13, "", nil, 0, 0, 800, 400, 1, 1, 0.2, false)
		for i, v in pairs(PLAYER) do
			ui.addTextArea(14, string.format("<p align='center'><font size='40px' color='#ffffff'>%s", translate(i, "PLAYER_TIED")).."\n<font size='30px'>"..table.concat(winners, ", "), i, 0, 160, 800, 400, 1, 1, 0.7, false)
			tfm.exec.chatMessage("<j>"..translate(i, "PLAYER_TIED").."("..table.concat(winners, ", ")..")", i)
			if not v.chair then
				v.chairDelay = 0
			end
		end
	else
		ui.addTextArea(13, "", nil, 0, 0, 800, 400, 1, 1, 0.2, false)
		for i, v in pairs(PLAYER) do
			ui.addTextArea(14, string.format("<p align='center'><font size='40px' color='#ffffff'>%s", translate(i, "PLAYER_LOST")), i, 0, 160, 800, 400, 1, 1, 0.7, false)
			tfm.exec.chatMessage("<j>"..translate(i, "PLAYER_LOST"), i)
			if not v.chair then
				v.chairDelay = 0
			end
		end
		if CONFIG.ranked and qtdPlayers >= 4 and tfm.get.room.uniquePlayers >= 4 then
			for i, v in pairs(PLAYER) do
				if not BOT[i] and tfm.get.room.playerList[i] and i:sub(1,1) ~= "*" then
					if not v.chair and v.notAfk then
						v.stats.spectator = v.stats.spectator + 1
						if v.stats.spectator >= 1000 then
							unlockChair(i, "cine")
						elseif v.stats.spectator >= 100 then
							unlockChair(i, "beach")
						end
					end
					saveData(i)
				end
			end
		end
	end
	if not ROUND.startTime or os.time() - ROUND.startTime < 180000 then
		CONFIG.noRules = true
	end
end


--[[ src/libs/event_control.lua ]]--

function checkVars(nameFunc, values, types, recursion)
	if not recursion then
		--checkVars("checkVars", {nameFunc, values, types}, {"string", "table", "table"}, true)
	elseif #values ~= #types then
		error("checkVars() : the tables must have the same size", 2)
	end
	for i=1, #types do
		if type(types[i]) == "table" then
			local ok = false
			for j, v in pairs(types[i]) do
				if type(values[i]) == v then
					ok = true
					break
				end
			end
			if not ok then
				error(string.format("%s() : %s expected as argument %s, got %s", nameFunc, table.concat(types[i], "|"), i, type(values[i])), 3)
			end
		elseif type(values[i]) ~= types[i] then
			error(string.format("%s() : %s expected as argument %s, got %s", nameFunc, types[i], i, type(values[i])), 3)
		end
	end
end

function stopScript(err, func, ...)
	local args = table.pack(...)
	local valuesStr = {}
	for i=1, args.n do
		local v = args[i]
		table.insert(valuesStr, v == nil and "nil" or v == true and "true" or v == false and "false" or type(v) == "table" and table.tostring(v) or type(v) == "function" and "function" or type(v) == "string" and ('"'..v..'"') or v)
	end
	err = string.format("%s\n%s(%s)- %s\n<j>Please, send this error to Ninguem#0095", err, func, table.concat(valuesStr, ", "), VERSION)
	tfm.exec.chatMessage("<r>[ERROR] "..err)
	ui.addTextArea(9999999999999, "", nil, 0, 0, 800, 400, nil, nil, 0.9, true)
	ui.addTextArea(9999999999998, "<p align='center'><font color='#ffffff'><font size='14px'>Oh no! We broke this room! :(</font>\n\n"..err.."\n\n<n>If you want to play more #unotfm, go to another room. This room is broken.", nil, 0, 170, 800, nil, 0, 0, 0, true)
	ERROR = true
	tfm.exec.setRoomMaxPlayers(1)
end

--[[



-- ## Eventos ## --

function eventMouse(p, x, y)
	if not ERROR then
		local ok, err = pcall(EventMouse, p, x, y)
		if not ok then
			stopScript(err, "eventMouse", p, x, y)
		end
	end
end

function eventChatCommand(p, cmd)
	if not ERROR then
		local ok, err = pcall(EventChatCommand, p, cmd)
		if not ok then
			stopScript(err, "eventChatCommand", p, cmd)
		end
	end
end

function eventKeyboard(p, key, down, x, y)
	if not ERROR then
		local ok, err = pcall(EventKeyboard, p, key, down, x, y)
		if not ok then
			stopScript(err, "eventKeyboard", p, key, down, x, y)
		end
	end
end

function eventTextAreaCallback(id, player, cmd)
	if not ERROR then
		local ok, err = pcall(EventTextAreaCallback, id, player, cmd)
		if not ok then
			stopScript(err, "eventTextAreaCallback", id, player, cmd)
		end
	end
end

function eventPopupAnswer(id, player, msg)
	if not ERROR then
		local ok, err = pcall(EventPopupAnswer, id, player, msg)
		if not ok then
			stopScript(err, "eventPopupAnswer", id, player, msg)
		end
	end
end

function eventPlayerRespawn(p)
	if not ERROR then
		local ok, err = pcall(EventPlayerRespawn, p)
		if not ok then
			stopScript(err, "EventPlayerRespawn", p)
		end
	end
end

function eventPlayerDied(p)
	if not ERROR then
		local ok, err = pcall(EventPlayerDied, p)
		if not ok then
			stopScript(err, "eventPlayerDied", p)
		end
	end
end

function eventChatMessage(p, msg)
	if not ERROR then
		local ok, err = pcall(EventChatMessage, p, msg)
		if not ok then
			stopScript(err, "eventChatMessage", p, msg)
		end
	end
end

function eventEmotePlayed(p, id, arg)
	if not ERROR then
		local ok, err = pcall(EventEmotePlayed, p, id, arg)
		if not ok then
			stopScript(err, "eventEmotePlayed", p, id, arg)
		end
	end
end

function eventLoop(current, remaining)
	if not ERROR then
		local ok, err = pcall(EventLoop, current, remaining)
		if not ok then
			stopScript(err, "eventLoop", current, remaining)
		end
	end
end

function eventNewPlayer(p)
	if not ERROR then
		local ok, err = pcall(EventNewPlayer, p)
		if not ok then
			stopScript(err, "eventNewPlayer", p)
		end
	end
end

function eventPlayerLeft(p)
	if not ERROR then
		local ok, err = pcall(EventPlayerLeft, p)
		if not ok then
			stopScript(err, "eventPlayerLeft", p)
		end
	end
end

function eventNewGame()
	if not ERROR then
		local ok, err = pcall(EventNewGame)
		if not ok then
			stopScript(err, "eventNewGame")
		end
	end
end

function eventPlayerDataLoaded(p, data)
	if not ERROR then
		local ok, err = pcall(EventPlayerDataLoaded, p, data)
		if not ok then
			stopScript(err, "eventPlayerDataLoaded", p, data)
		end
	end
end]]--


--[[ src/libs/event_sheduler.lua ]]--

local runtime = 0
local onEvent
do
	local os_time = os.time
	local math_floor = math.floor
	local runtime_check = 0
	local events = {}
	local scheduled = {_count = 0, _pointer = 1}
	local paused = false
	local runtime_threshold = 20
	local _paused = false

	local function runScheduledEvents()
		local count, pointer = scheduled._count, scheduled._pointer

		local data
		while pointer <= count do
			data = scheduled[pointer]
			-- An event can have up to 5 arguments. In this case, this is faster than table.unpack.
			data[1](data[2], data[3], data[4], data[5], data[6])
			pointer = pointer + 1

			if runtime >= runtime_threshold then
				scheduled._count = count
				scheduled._pointer = pointer
				return false
			end
		end
		scheduled._pointer = pointer
		return true
	end

	--[[
	local function emergencyShutdown(limit_players, err)
		if limit_players then
			message = 'Game crashed :/ Please go to another room'
			tfm.exec.setRoomMaxPlayers(1)
		end
		room.requiredPlayers = 1000
		--genLobby()

		for _, event in next, events do
			event._count = 0
		end
	end]]--

	function onEvent(name, callback)
		local evt
		if events[name] then
			evt = events[name]
		else
			evt = {_count = 0}
			events[name] = evt

			-- An event can have up to 5 arguments. In this case, this is faster than `...`
			local function caller(when, a, b, c, d, e)
				for index = 1, evt._count do
					evt[index](a, b, c, d, e)

					if os_time() >= when then
						break
					end
				end
			end

			local schedule = name ~= "Loop"
			local done, result
			local event_fnc
			event_fnc = function(a, b, c, d, e)
				if ERROR then return false end
				local start = os_time()
				local this_check = math_floor(start / 4000)
				if runtime_check < this_check then
					runtime_check = this_check
					runtime = 0
					paused = false

					if not runScheduledEvents() then
						runtime_check = this_check + 1
						paused = true
						return
					end

					if _paused then
						--message = 'Resuming game...'
						--tfm.exec.chatMessage('Resuming game...')
						ui.removeTextArea(9999999999999)
						ui.removeTextArea(9999999999998)
						_paused = false
					end
				elseif paused then
					if schedule then
						scheduled._count = scheduled._count + 1
						scheduled[scheduled._count] = {event_fnc, a, b, c, d, e}
					end
					return
				end

				done, result = pcall(caller, start + runtime_threshold - runtime, a, b, c, d, e)
				if not done then
					--TFM.chatMessage(result)

					return stopScript(result, name, a, b, c, d, e)
				end

				runtime = runtime + (os_time() - start)

				if runtime >= runtime_threshold then
					if not _paused then
						--message = 'Pausing game...'
						--tfm.exec.chatMessage('Pausing game...')
						ui.addTextArea(9999999999999, "", nil, 0, 0, 800, 400, nil, nil, 0.4, true)
						for i, v in pairs(PLAYER) do
							ui.addTextArea(9999999999998, "<p align='center'><font size='20px'>\n<j>"..translate(i, "PROCESSING"), i, 0, 0, 800, nil, nil, nil, 0.7, true)
						end
					end

					runtime_check = this_check + 1
					paused = true
					_paused = true
					scheduled._count = 0
					scheduled._pointer = 1
				end
			end

			_G["event" .. name] = event_fnc
		end

		evt._count = evt._count + 1
		evt[evt._count] = callback
	end
end


--[[ src/libs/game_control.lua ]]--

function resetTimer()
	local t = 10000
	if isCursed(ROUND.turn, "time") then
		t = 3000
	elseif ROUND.gameMode.flash or ROUND.chair[ROUND.turn].mode == "EMPTY" then
		t = 5000
	end
	ROUND.time = GLOBAL_TIME + t
end

function canPlay(n, c)
	checkVars("canPlay", {n, c}, {"number", {"number", "table"}}, recursion)
	local card = type(c) == "number" and ROUND.chair[n].hand[c] or c -- carta a ser comparada
	local top = ROUND.topCard.card -- carta do topo
	if not top then return false end
	local can = {
			n0 = {"x","n1"},
			n1 = {"n0","n2"},
			n2 = {"n1","n3"},
			n3 = {"n2","n4"},
			n4 = {"n3","n5"},
			n5 = {"n4","n6"},
			n6 = {"n5","n7"},
			n7 = {"n6","n8"},
			n8 = {"n7","n9"},
			n9 = {"n8","x"},
		}
	local trafficMatch = {
		odd = {n1=1, n3=1, n5=1, n7=1, n9=1},
		even = {n0=1, n2=1, n4=1, n6=1, n8=1}
	}
	local mix = {mix1=true, mix2=true, mix3=true}
	local bg = {blue=true, green=true}
	if card.lock then return false end
	if ROUND.turn == n then
		if ROUND.accumulated then
			local numeric = isNumeric(card)
			local peace = numeric or not (ROUND.chair[n].peace or (ROUND.gameMode.clean and #ROUND.chair[n].hand == 1))
			--return ROUND.gameMode.hell and not (isNumeric(card) or isNumeric(top)) and not (ROUND.chair[n].peace or (ROUND.gameMode.clean and #ROUND.chair[n].hand == 1)) or ROUND.accumulated.allowed[card[2]]
			
			return (ROUND.gameMode.hell and not numeric or ROUND.accumulated.allowed[card[2]]) and peace
		else
			local numeric = isNumeric(card) -- carta √© numerica
			local hell = ROUND.gameMode.hell and not (numeric or isNumeric(top)) -- satisfaz a regra do inferno
			local peace = numeric or not (ROUND.chair[n].peace or (ROUND.gameMode.clean and #ROUND.chair[n].hand == 1)) -- satisfaz a regra da paz e final limpo
			local traffic = not ROUND.traffic or not (trafficMatch[ROUND.traffic][card[2]] and #ROUND.chair[n].hand == 1) -- satisfaz a regra do par ou √≠mpar
			local matchSymbol = false
			if ROUND.gameMode.neighbor and numeric then
				matchSymbol = can[card[2]][1] == top[2] or can[card[2]][2] == top[2]
			else
				matchSymbol = card[2] == top[2] or (mix[card[2]] and mix[top[2]])
			end
			local matchColor = card[1] == top[1] or (ROUND.gameMode.bluegreen and bg[card[1]] and bg[top[1]]) or card[1] == "black" -- combina a cor
			local whiteList = not ROUND.chair[n].whiteList or ROUND.chair[n].whiteList[c]
			return (hell or matchSymbol or matchColor) and peace and whiteList and traffic
		end
	elseif ROUND.gameMode.jumpin and not ROUND.chair[ROUND.turn].action and card[2] ~= "black" and card[2] == top[2] and (card[1] == top[1] or (ROUND.gameMode.bluegreen and bg[card[1]] and bg[top[1]])) then -- condi√ß√µes pro corte
		return (isNumeric(card) or not (ROUND.chair[n].peace or (ROUND.gameMode.clean and #ROUND.chair[n].hand == 1))) and (not ROUND.traffic or not (trafficMatch[ROUND.traffic][card[2]] and #ROUND.chair[n].hand == 1))
	end
end

function canPlayHand(n, card)
	for i, v in pairs(ROUND.chair[n].hand) do
		if canPlay(n, i) then
			return true
		end
	end
end

function mustBeEliminated(n)
	return (ROUND.limit and #ROUND.chair[n].hand > ROUND.limit or bombInHand(n)) and ROUND.chair[n].mode ~= "DELETED" and ROUND.chair[n].owner ~= "Charlotte"
end

function limboTimer()
	if ROUND.gameMode.limbo then
		if ROUND.limbo then
			if GLOBAL_TIME > ROUND.limbo and ROUND.limit > 1 then
				ROUND.limit = ROUND.limit - 1
				for i, v in pairs(ROUND.chair) do
					if mustBeEliminated(i) then
						eliminate(i)
					else
						updateScore(i)
						explosion(0, v.x, 135, 5, 20)
					end
				end
				ui.removeTextArea(28)
				ROUND.limbo = GLOBAL_TIME+60000
				if ROUND.limit == 4 then
					for i, v in pairs(ROUND.chair) do
						if v.mode == "BUSY" then
							unlockChair(v.owner, "bones")
						end
					end
				end
			end
		else
			ROUND.limbo = GLOBAL_TIME+60000
		end
	end
end

function randomActionCard()
	local symbol = {"draw2", "draw2", "draw2", "skip", "skip", "skip", "reverse", "reverse", "reverse"}
	local color = {"red", "blue", "green", "yellow"}
	local nope = {mix=true, chess=true, box=true, bomb=true, batata=true, draw99=true, half=true}
	for i, v in pairs(RULE) do
		if (ROUND.gameMode[i] or (ROUND.gameMode.mess and not RULE[i].notMess)) and RULE[i].card and not nope[i] then
			table.insert(symbol, i)
		end
	end
	return {color[math.random(#color)], symbol[math.random(#symbol)]}
end

function isEndGame(form)
	if ROUND.state == "PLAY" then
		local win = {}
		local live = {}
		local card = (form=="PLAY" or form=="JUMPIN") and ROUND.topCard.card
		for i, v in pairs(ROUND.chair) do
			if v.mode == "BUSY" then
				table.insert(live, v.owner)
				if #v.hand == 0 then
					table.insert(win, v.owner)
				end
			end
		end
		if #win > 0 then
			if form == "BAN" then
				for i, v in pairs(win) do
					unlockChair(v, "ufo")
				end
			elseif form == "LINK" then
				for i, v in pairs(win) do
					if ROUND.chair[PLAYER[v].chair].mimic then
						unlockChair(v, "bill")
					end
				end
			end
		end
		if #win == 1 then
			endGame(win[1], card, nil, form)
		elseif #win > 1 then
			for i, v in pairs(win) do
				unlockChair(v, "horn")
			end
			endGame(nil, nil, win, form)
		elseif live == 1 then
			endGame(live[1], nil, nil, "ELIMINATION")
		elseif live == 2 and ROUND.gameMode.team and ROUND.chair[live[1]].team == ROUND.chair[live[2]].team then
			endGame(live[1], nil, nil, "ELIMINATION")
		end
		return #win > 0
	end
end

function resetBatata(n)
	for i, v in pairs(ROUND.chair[n].hand) do
		if v[2] == "batata" then
			return false
		end
	end
	ROUND.chair[n].batata = 1
end

function batataTimer(n, dontReset)
	local found = false
	local index = false
	local locked = false
	for i, v in pairs(ROUND.chair[n].hand) do
		if v[2] == "batata" then
			found = v
			index = i
		end
		if v.lock then
			v.lock = false
			locked = true
		end
	end
	if not dontReset then
		if ROUND.chair[n].cardsPlayed == 0 and ROUND.love ~= 0 then
			if PLAYER[ROUND.chair[n].owner] and PLAYER[ROUND.chair[n].owner].faustao then
				tfm.exec.chatMessage("Reverse chain broke (batataTimer)", ROUND.chair[n].owner)
			end
			ROUND.love = 0
		end
		ROUND.chair[n].cardsPlayed = 0
	end
	if found then
		ROUND.chair[n].batata = ROUND.chair[n].batata + 1
		if ROUND.chair[n].batata > 5 then
			missCard(n, found, 2000)
			local card = table.remove(ROUND.chair[n].hand, index)
			eliminate(n)
			changeColorBatata(card)
			local pool = {}
			for i, v in pairs(ROUND.chair) do
				if v.mode ~= "DELETED" then
					table.insert(pool, i)
				end
			end
			local target = pool[math.random(#pool)]
			if target then
				table.insert(ROUND.chair[target].hand, card)
				missCard(target, card, 2000)
				explosion(5, ROUND.chair[target].x, 100, 5, 10)
				sortHand(ROUND.chair[target].hand)
				showCardsGainned(target, 1)
				updateHand(target)
				updateScore(target)
				if mustBeEliminated(target) then
					eliminate(target)
				end
			end
		else
			updateHand(n)
		end
	elseif locked then
		updateHand(n)
	else
		ROUND.chair[n].batata = 1
	end
	
end

function changeColorBatata(card)
	local pool = {red=1, blue=1, yellow=1, green=1}
	pool[card[1]] = nil
	local color = {}
	for i, v in pairs(pool) do
		table.insert(color, i)
	end
	--local color = {"red", "blue", "yellow", "green"}
	card[1] = color[math.random(#color)]
end

function actionCardEffect()
	local fx = {red=13, blue=1, yellow=11, green=9}
	y = 210 - (#ROUND.pile/108 * 10)
	for i=1, 10 do
		local vel = i/10*75
		tfm.exec.displayParticle(fx[ROUND.topCard.card[1]] or 0, 430, y+vel, -math.random(7,15)/5, (vel-37)/20, 0, 0)
	end
	for i=1, 10 do
		local vel = i/10*75
		tfm.exec.displayParticle(fx[ROUND.topCard.card[1]] or 0, 480, y+vel, math.random(7,15)/5, (vel-37)/20, 0, 0)
	end
end

function actionCard(n, action)
	ROUND.chair[n].action = {name="PLAY"}
	ROUND.time = GLOBAL_TIME + 10000
	addFunctionTimer(function()
		ROUND.chair[n].action = nil
		if action then
			action(n)
		else
			n0(n)
		end
	end, 1000)
end


function isCursed(n, curse)
	return ROUND.chair[n].curse == curse
end

function winningEffect()
	if ROUND.chatWarning then
		if ROUND.winningEffect then
			tfm.exec.removeImage(ROUND.winningEffect)
		end
		local winning = false
		local score = math.huge
		for i, v in pairs(ROUND.chair) do
			local qtd = scoreHand(i)
			if v.mode ~= "DELETED" and qtd < score then
				winning = i
				score = qtd
				if #v.hand == 0 then
					break
				end
			end
		end
		if winning then
			ROUND.winningEffect = tfm.exec.addImage(IMG.misc.winning, "!1000", ROUND.chair[winning].x-50, -5, p)
		end
	end
end

function isAstral()
	if ROUND and ROUND.state == "PLAY" then
		local cont = 0
		local all = 0
		for i, v in pairs(ROUND.chair) do
			if v.mode ~= "DELETED" then
				all = all + 1
				if #v.hand == 1 then
					cont = cont + 1
				end
			end
		end
		if cont == all and cont >= 6 then
			for i, v in pairs(ROUND.chair) do
				if v.mode == "BUSY" then
					unlockChair(v.owner, "astral")
				end
			end
		end
	end
end

function isCuphead()
	for i, v in pairs(ROUND.chair) do
		if v.mode == "BUSY" and #v.hand == 1 and v.hand2 and #v.hand2 == 1 then
			unlockChair(v.owner, "cuphead")
		end
	end
end

function isCoffee(p)
	if PLAYER[p] then
		if PLAYER[p].coffee then
			return os.time() - PLAYER[p].coffee > 14400000
		else
			PLAYER[p].coffee = os.time()
		end
	end
end 

function saidUno()
	for i, v in pairs(ROUND.chair) do
		if v.uno == "uno" then
			v.saidUno = true
		end
	end
end

function addBlockPoint(p)
	if PLAYER[p] and PLAYER[p].block and validRoom() then
		PLAYER[p].block = PLAYER[p].block + 1
		if PLAYER[p].block >= 100 then
			unlockChair(p, "football")
		end
	end
end

function shieldInHand(n)
	for i, v in pairs(ROUND.chair[n].hand) do
		if v[2] == "half" then
			return true
		end
	end
end

function chestInHand(n)
	for i, v in pairs(ROUND.chair[n].hand) do
		if v[2] == "chest" then
			return true
		end
	end
end

function tryDraw(n, qtd, ever, pass, recursion)
	if ROUND.chair[n].mode ~= "DELETED" then
		if not isCursed(n, "ice") then
			if isCursed(n, "anvil") then
				qtd = qtd + 1
			end
			if shieldInHand(n) and qtd > 1 then
				qtd = math.ceil(qtd / 2)
				missCard(n, {"black","half"}, 2000)
			end
			mimicDraw(n, qtd, recursion)
			if ROUND.chair[n].owner == "Icemice" then
				local pool = {}
				for i, v in pairs(ROUND.chair) do
					if i~=n and v.mode ~= "DELETED" then
						table.insert(pool, i)
					end
				end
				if #pool > 0 then
					local rand = pool[math.random(#pool)]
					tryDraw(rand, 1, false, false, true)
					local img = tfm.exec.addImage(IMG.misc.pow, "!1000", ROUND.chair[rand].x-50, 30)
					TIMER.img[img] = os.time()+1000
					explosion(11, ROUND.chair[rand].x, 80, 10, 20)
				end
			end
			if (isCursed(n, "thorn") or ever and ROUND.subitDeath) and ROUND.chair[n].owner ~= "Charlotte" then
				eliminate(n, pass)
			else
				drawCard(n, qtd)
				if mustBeEliminated(n) then
					eliminate(n, pass)
				end
			end
		else
			updateHand(n)
		end
	end
end

function whichCard(n, x)
	local chair = ROUND.chair[n]
	if #chair.hand > 16 then
		local i = #chair.hand
		while i > 0 do
			local xx = (i-1)/(#chair.hand-1)*750
			if x > xx and x < xx+50 then
				return i, chair.hand[i]
			end
			i = i - 1
		end
	else
		for i=1, #chair.hand do
			local xx = 400-#chair.hand*25+50*(i-1)
			if x > xx and x < xx+50 then
				return i, chair.hand[i]
			end
		end
	end
end

function whichPlayer(n, x)
	for i, v in pairs(ROUND.chair) do
		if x > v.x - 30 and x < v.x + 30 then
			return i
		end
	end
end

function nextChair(n)
	local sum = {LEFT = -1, RIGHT = 1}
	local cont = 20
	n = n or 1
	repeat
		n = n + sum[ROUND.flow or "LEFT"]
		n = n > #ROUND.chair and 1 or n < 1 and #ROUND.chair or n
		cont = cont - 1
		if cont <= 0 then
			n = nil
			break
		end
	until ROUND.chair[n].mode == "BUSY" or ROUND.chair[n].mode == "FREE"
	return n
end

function previousChair(n)
	local sum = {LEFT = 1, RIGHT = -1}
	repeat
		n = n + sum[ROUND.flow]
		n = n > #ROUND.chair and 1 or n < 1 and #ROUND.chair or n
	until ROUND.chair[n].mode == "BUSY" or ROUND.chair[n].mode == "FREE"
	return n
end

function giveCard(n, card, dontPass)
	explosion(5, ROUND.chair[n].x, 100, 5, 5)
	table.insert(ROUND.chair[n].hand, card)
	sortHand(ROUND.chair[n].hand)
	ROUND.chair[n].uno = nil
	updateHand(n)
	--updateShadow(n)
	updateScore(n)
	if #ROUND.chair[n].hand > ROUND.chair[n].maxHand then
		ROUND.chair[n].maxHand = #ROUND.chair[n].hand
	end
	if #ROUND.chair[n].hand > 25 and not ROUND.chair[n].notTrash then
		unlockChair(ROUND.chair[n].owner, "trash")
	end
	showCardsGainned(n, 1)
	if not dontPass then
		passTurn()
		batataTimer(n)
	end
end

function sortHand(hand)
	table.sort(hand, function(a, b)
		if type(a) == "table" and type(b) == "table" then
			local s = {compass=-1, shield=0, n0=0, n1=1, n2=2, n3=3, n4=4, n5=5, n6=6, n7=7, n8=8, n9=9, skip=10, reverse=11, draw2=12, wild=13, simon=13, draw4=14, chair=15, carousel=16, spy=17 , flood=18, gift=19, imitate=20, death=21, peace=22, luck=23, web=24, box=25, wish=26, trade=27, meep=28, equality=29, rain=30, portal=31, rule=32, steal=33, thunder=34, ink=35, confuse=36, batata=37, curse=38, tornado=39, theft=40, ban=41, dice=42, paradox=43, oddeven=44, mimic=45, justice=46, key=47, share=48, pawn=60, rook=61, knight=62, bishop=63, queen=64, king=65, mix1=70, mix2=71, mix3=72, custom=80, clone=81, random=82, bomb=83, draw99=84, chest=100, magnet=200, half=300}
			local c = {red=0, blue=1, yellow=2, green=3, black=4}
			if a[1] == b[1] then
				return s[a[2]] < s[b[2]]
			else
				return c[a[1]] < c[b[1]]
			end
		end
	end)
end

function drawCardTracking(n, card)
	for i, v in pairs(ROUND.chair[n].action.img) do
		tfm.exec.removeImage(v)
	end
	if ROUND.gameMode.fastdraw then
		if ROUND.chair[n].peace and not isNumeric(ROUND.deck[card]) then
			local new = drawCard(n, 1, "PASS", card)
				ROUND.chair[n].action = false
				if ROUND.gameMode.overload and #ROUND.chair[n].hand > 10 or bombInHand(n) or #ROUND.chair[n].hand > 30 then
					eliminate(n, true)
				elseif ROUND.gameMode.insatisfaction then
					ROUND.chair[n].confuse = false
					passTurn()
					batataTimer(n)
					updateHand(n)
				else
					if ROUND.gameMode.satisfaction and not canPlayHand(n) then
						ROUND.chair[n].draw = false
						showNeedDraw(n)
					else
						showPass(n)
					end
				end
		else
			ROUND.chair[n].action = false
			fastDraw(n, card)
		end
	else
		mimicDraw(n, 1)
		local new = drawCard(n, 1, "PASS", card)
		ROUND.chair[n].action = false
		if ROUND.gameMode.overload and #ROUND.chair[n].hand > 10 or bombInHand(n) or #ROUND.chair[n].hand > 30 then
			eliminate(n, true)
		elseif ROUND.gameMode.insatisfaction then
			ROUND.chair[n].confuse = false
			passTurn()
			batataTimer(n)
			updateHand(n)
		else
			if ROUND.gameMode.satisfaction and not canPlayHand(n) then
				ROUND.chair[n].draw = false
				showNeedDraw(n)
			else
				showPass(n)
			end
		end
	end
end

function drawCard(n, qtd, cause, card)
	showCardsGainned(n, qtd)
	local new = {}
	local temp = true
	if ROUND.chair[n].owner == "Ninguem_v2" and #ROUND.actionPool > qtd then
		for i=1, qtd do
			table.insert(ROUND.chair[n].hand, table.remove(ROUND.actionPool, math.random(#ROUND.actionPool)))
		end
	else
		for i=1, qtd do
			if #ROUND.deck == 0 and #ROUND.pile > 1 then
				repeat
					if ROUND.pile[1] and ROUND.pile[1][4] then
						ROUND.pile[1][1] = ROUND.pile[1][4]
						ROUND.pile[1][4] = nil
					end
					table.insert(ROUND.deck, table.remove(ROUND.pile, 1))
				until #ROUND.pile <= 1
				ROUND.deck = shuffleDeck(ROUND.deck)
				for i, v in pairs(ROUND.topCard.img) do
					tfm.exec.removeImage(v)
				end
				drawTopCard()
				for i=1, 10 do
					tfm.exec.displayParticle(3, 345, 230, math.random(-20,20)/10, math.random(-20,20)/10, 0, 0)
				end
				explosion(35, 400, 250, 20, 20)
			end
			if #ROUND.chair[n].hand < CONST.maxHand and #ROUND.deck > 0 then
				temp = card and table.remove(ROUND.deck, card) or table.remove(ROUND.deck)
				table.insert(ROUND.chair[n].hand, temp)
				table.insert(new, temp)
			end
		end
	end
	if ROUND.chair[n].uno then
		ROUND.chair[n].uno = nil
		ui.removeTextArea(6, ROUND.chair[n].owner)
	end
	if #ROUND.chair[n].hand == 2 and canPlayHand(n) then
		showUno(n)
	end
	updateScore(n)
	sortHand(ROUND.chair[n].hand)
	updateHand(n, qtd == 1 and new or nil)
	showDeck()
	ui.removeTextArea(18)
	ui.removeTextArea(19)
	if cause ~= "START" and qtd > ROUND.chair[n].maxDraw then
		ROUND.chair[n].maxDraw = qtd
		if qtd >= 16 and ROUND.accumulated then
			unlockChair(ROUND.chair[n].owner, "cards")
			for i, v in pairs(ROUND.accumulated.player) do
				if ROUND.chair[n].owner ~= i then
					unlockChair(i, "hell")
				end
			end
		end
	end
	if ROUND.accumulated then
		for i, v in pairs(ROUND.accumulated.player) do
			if ROUND.chair[n].owner == i then
				unlockChair(i, "circus")
				break
			end
		end
	end
	if #ROUND.chair[n].hand > ROUND.chair[n].maxHand then
		ROUND.chair[n].maxHand = #ROUND.chair[n].hand
	end
	if #ROUND.chair[n].hand > 25 and not ROUND.chair[n].notTrash then
		unlockChair(ROUND.chair[n].owner, "trash")
	end
	if isIlluminati(n) then
		unlockChair(ROUND.chair[n].owner, "illuminati")
	end
	return temp
end

function drawCard2(n, qtd)
	if ROUND.chair[n].owner == "Ninguem_v2" and #ROUND.actionPool > qtd then
		table.insert(ROUND.chair[n].hand2, table.remove(ROUND.actionPool, math.random(#ROUND.actionPool)))
	else
		for i=1, qtd do
			table.insert(ROUND.chair[n].hand2, table.remove(ROUND.deck2))
		end
	end
	sortHand(ROUND.chair[n].hand2)
end

function discardCard(n, qtd)
	showCardsGainned(n, -qtd)
	for i=1, qtd do
		if #ROUND.chair[n].hand == 0 then
			break
		end
		local rand = math.random(#ROUND.chair[n].hand)
		discardEffect(n, rand)
		local discarted = table.remove(ROUND.chair[n].hand, rand)
		discarted.lock = false
		if not discarted[3] then
			table.insert(ROUND.pile, 1, discarted)
		end
	end
	if #ROUND.chair[n].hand == 1 then
		ROUND.chair[n].uno = "uno"
	end
	updateScore(n)
	drawTopCard()
	updateHand(n)
end

function changeHand(n)
	ROUND.chair[n].change = true
	ui.removeTextArea(28, ROUND.chair[n].owner)
	local qtd = #ROUND.chair[n].hand
	repeat
		table.insert(ROUND.deck, table.remove(ROUND.chair[n].hand))
	until #ROUND.chair[n].hand == 0
	ROUND.deck = shuffleDeck(ROUND.deck)
	drawCard(n, qtd, "MULLIGAN")
end

function playCard(n, card, start, jumpin, fastDraw)
	-- validando valores
	checkVars("playCard", {n, card}, {"number", {"number", "table"}})
	if not fastDraw then
		mimicDiscard(n, 1)
	end
	
	window.close(ROUND.chair[n].owner, "CHALLENGE")
	if not PLAYER[ROUND.chair[n].owner] or n ~= ROUND.turn or ROUND.chair[n].action then
		return false
	end
	local p = ROUND.chair[n].owner
	PLAYER[p].antiDoubleClick3 = PLAYER[p].antiDoubleClick3 or (os.time() - 5)
	if PLAYER[p].antiDoubleClick3 < os.time() or ever then
		PLAYER[p].antiDoubleClick3 = os.time() + 200
	else
		return false
	end
	if not start then
		ROUND.chair[n].cardsPlayed = ROUND.chair[n].cardsPlayed or 0
		ROUND.chair[n].cardsPlayed = ROUND.chair[n].cardsPlayed + 1
		if ROUND.chair[n].cardsPlayed >= 4 then
			unlockChair(ROUND.chair[n].owner, "space")
		end
		if PLAYER[ROUND.chair[n].owner].faustao then
			tfm.exec.chatMessage("Cards in this turn: ".. ROUND.chair[n].cardsPlayed, ROUND.chair[n].owner)
		end
	end
	if ROUND.chair[n].skin.id == "bog" and not PLAYER[ROUND.chair[n].owner].bell and math.random() > 0.7 then
		local x = ROUND.chair[n].x + (tfm.get.room.playerList[ROUND.chair[n].owner].isFacingRight and -15 or 15)
		tfm.exec.displayParticle(3, x, 110, 0, -1.7, 0, 0.05)
	end
	local hand = {}
	for i, v in pairs(ROUND.chair[n].hand) do
		table.insert(hand, v)
	end
	for i, v in pairs(ROUND.chair) do
		if i ~= n and BOT[v.owner] and BOT[v.owner].eventRandom then
			BOT[v.owner].eventRandom(ROUND.chair[n].owner)
		end
	end
	local color = {"red","blue","yellow","green"}
	ROUND.topCard.card2 = ROUND.topCard.card or {color[math.random(#color)], "wild"}
	ROUND.chair[n].playedChair = true
	
	if type(card) == "table" then
		if not card[3] then
			table.insert(ROUND.pile, card)
		end
		ROUND.topCard.card = {card[1], card[2]}
	else
		discardEffect(n, card)
		card = table.remove(ROUND.chair[n].hand, card)
		if ROUND.gameMode.hell and card[1] ~= ROUND.topCard.card[1] and card[2] ~= ROUND.topCard.card[2] and card[1] ~= "black" then
			unlockChair(ROUND.chair[n].owner, "kratos")
		end
		if not card[3] then
			table.insert(ROUND.pile, card)
		end
		ROUND.topCard.card = {card[1], card[2]}
		updateScore(n)
		isAstral()
		isCuphead()
	end
	ROUND.love = ROUND.love or 0
	if card[2] ~= "reverse" and ROUND.love ~= 0 then
		if PLAYER[ROUND.chair[n].owner].faustao then
			tfm.exec.chatMessage("Reverse chain broke.", ROUND.chair[n].owner)
		end
		ROUND.love = 0
	end
	if ROUND.gameMode.black and (ROUND.topCard.card[1] == ROUND.topCard.card2[1]) and (ROUND.topCard.card[2] == ROUND.topCard.card2[2]) and ROUND.topCard.card[1] ~= "black" then
		local fx = {red=13, blue=1, yellow=11, green=9}
		local y = 210 - (#ROUND.pile/108 * 10)
		discardEffectRaw(430, y, fx[ROUND.topCard.card[1]])
		ROUND.topCard.card[1] = "black"
	end
	local y = drawTopCard()
	if ROUND.chair[n].played then
		local fx = {9, 2, 29, 3}
		for i=1, 20 do
			tfm.exec.displayParticle(fx[math.random(#fx)], 455, y+37, math.random(-20,20)/10, math.random(-20,20)/10, 0, 0)
		end
	else
		for i=1, 10 do
			tfm.exec.displayParticle(3, 455, y+37, math.random(-20,20)/10, math.random(-20,20)/10, 0, 0)
		end
	end
	ROUND.chair[n].afk = false
	ui.removeTextArea(18)
	ui.removeTextArea(19)
	if #ROUND.chair[n].hand == 0 then
		actionCardEffect()
		ROUND.chair[n].action = {name="PLAY"}
		ROUND.time = GLOBAL_TIME + 10000
		addFunctionTimer(function()
			ROUND.chair[n].action = nil
			--endGame(ROUND.chair[n].owner, card, false, jumpin and "JUMPIN")
			isEndGame(jumpin and "JUMPIN" or "PLAY")
		end, 1000)
	else
		if isNumeric(ROUND.topCard.card) then
			if jumpin then
				actionCardEffect()
				ROUND.chair[n].action = {name="PLAY"}
				ROUND.time = GLOBAL_TIME + 10000
				addFunctionTimer(function()
					ROUND.chair[n].action = nil
					if _G[ROUND.topCard.card[2]] then
						_G[ROUND.topCard.card[2]](n, start, hand)
					else
						n0(n, start, hand)
					end
					updateShadow(n)
				end, 1000)
			else
				_G[ROUND.topCard.card[2]](n, start, hand)
			end
		elseif ROUND.chair[n].peace2 then
			if validRoom() then
				PLAYER[ROUND.chair[n].owner].action = PLAYER[ROUND.chair[n].owner].action or 0
				PLAYER[ROUND.chair[n].owner].action = PLAYER[ROUND.chair[n].owner].action + 1
				if PLAYER[ROUND.chair[n].owner].action >= 5000 then
					unlockChair(ROUND.chair[n].owner, "quartz")
				end
			end
			if isCursed(n, "shoe") then
				drawCard(n, 1)
				if mustBeEliminated(n) then
					eliminate(n)
				end
			end
			if ROUND.topCard.card[1] == "black" then
				ROUND.topCard.card[1] = ROUND.topCard.card2[1]
				drawTopCard()
			end
			ROUND.chair[n].confuse = false
			passTurn()
			batataTimer(n)
		else
			if validRoom() then
				PLAYER[ROUND.chair[n].owner].action = PLAYER[ROUND.chair[n].owner].action or 0
				PLAYER[ROUND.chair[n].owner].action = PLAYER[ROUND.chair[n].owner].action + 1
				if PLAYER[ROUND.chair[n].owner].action >= 5000 then
					unlockChair(ROUND.chair[n].owner, "quartz")
				end
			end
			actionCardEffect()
			ROUND.chair[n].action = {name="PLAY"}
			ROUND.time = GLOBAL_TIME + 10000
			addFunctionTimer(function()
				if ROUND.state == "PLAY" then
					ROUND.chair[n].action = nil
					if isCursed(n, "shoe") then
						drawCard(n, 1)
					end
					if mustBeEliminated(n) then
						if ROUND.topCard.card[1] == "black" then
							ROUND.topCard.card[1] = ROUND.topCard.card2[1]
							drawTopCard()
						end
						eliminate(n)
						passTurn()
					else
						if _G[ROUND.topCard.card[2]] then
							_G[ROUND.topCard.card[2]](n, start, hand)
						else
							n0(n, start, hand)
						end
					end
					updateShadow(n)
				end
			end, 1000)
		end
	end
	updateHand(n)
end

function shuffleDeck(deck)
	local new = {}
	for i=1, #deck do
		table.insert(new, table.remove(deck, math.random(#deck)))
	end
	return new
end

function passTurn(skipped)
	if ROUND.state ~= "PLAY" then
		return false
	end
	if isEndGame("LINK") then return end
	for i, v in pairs(tfm.get.room.playerList) do
		window.close(i, "CHALLENGE")
	end
	for i, v in pairs(ROUND.chair) do
		v.draw = false
		v.played = false
		v.whiteList = false
		v.autoPlay = false
		if #v.hand > 1 then
			ui.removeTextArea(6, v.owner)
		end
	end
	isAstral()
	isCuphead()
	saidUno()
	showAccumulated()
	ui.removeTextArea(7)
	ui.removeTextArea(19)
	local cont = 0
	local name = ""
	limboTimer()
	updateCurse()
	if ROUND.chair[ROUND.turn].uno == "one card" and #ROUND.chair[ROUND.turn].hand == 1 and ROUND.chair[ROUND.turn].mode ~= "DELETED" then
		for i, v in pairs(ROUND.chair) do
			if i ~= ROUND.turn and v.mode == "BUSY" then
				showChallenge(i)
			end
		end
	elseif #ROUND.chair[ROUND.turn].hand ~= 1 then
		ROUND.chair[ROUND.turn].uno = nil
	end
	for i, v in pairs(ROUND.chair) do
		if v.mode == "BUSY" then
			cont = cont + 1
			name = v.owner
		end
	end
	ui.removeTextArea(5)
	ROUND.turn = nextChair(ROUND.turn)
	if cont == 1 then
		endGame(name)
	elseif ROUND.turn then
		updateArrow()
		if PLAYER[ROUND.chair[ROUND.turn].owner] and PLAYER[ROUND.chair[ROUND.turn].owner].bell and tfm.get.room.playerList[ROUND.chair[ROUND.turn].owner] then
			tfm.exec.killPlayer(ROUND.chair[ROUND.turn].owner)
			tfm.exec.respawnPlayer(ROUND.chair[ROUND.turn].owner)
			tfm.exec.movePlayer(ROUND.chair[ROUND.turn].owner, tfm.get.room.playerList[ROUND.chair[ROUND.turn].owner].x, tfm.get.room.playerList[ROUND.chair[ROUND.turn].owner].y)
		end
		if ROUND.chair[ROUND.turn].peace then
			if ROUND.chair[ROUND.turn].peace > 1 then
				ROUND.chair[ROUND.turn].peace = ROUND.chair[ROUND.turn].peace - 1
				ui.addTextArea(19, "<p align='center'><font color='#ffffff'>"..translate(ROUND.chair[ROUND.turn].owner, "ONLY_NUMBERS"), ROUND.chair[ROUND.turn].owner, 100, 305, 600, nil, 0, 0, 0, false)
			else
				ROUND.chair[ROUND.turn].peace = nil
			end
		end
		if ROUND.chair[ROUND.turn].peace2 then
			if ROUND.chair[ROUND.turn].peace2 > 1 then
				ROUND.chair[ROUND.turn].peace2 = ROUND.chair[ROUND.turn].peace2 - 1
			else
				ROUND.chair[ROUND.turn].peace2 = nil
			end
		end
		if ROUND.chair[ROUND.turn].action and ROUND.chair[ROUND.turn].action.name == "SKIP" then
			local turn = ROUND.turn
			addFunctionTimer(function()
				if turn ~= ROUND.turn then
					return
				end
				if not isCursed(ROUND.turn, "ice") then
					if ROUND.accumulated then
						if isCursed(ROUND.turn, "thorn") then
							eliminate(ROUND.turn)
						else
							drawCard(ROUND.turn, ROUND.accumulated.cards)
							if mustBeEliminated(ROUND.turn) then
								eliminate(ROUND.turn)
							end
						end
						ROUND.accumulated = false
						ui.removeTextArea(2)
					end
				else
					ROUND.accumulated = false
					ui.removeTextArea(2)
				end
				for i, v in pairs(ROUND.chair[ROUND.turn].action.img) do
					tfm.exec.removeImage(v)
				end
				explosion(1, ROUND.chair[ROUND.turn].x, 80, 20, 30)
				ROUND.chair[ROUND.turn].action = false
				passTurn()
				updateShadow(ROUND.turn)
			end, 1000)
		else
			ROUND.chair[ROUND.turn].mimic = false
			if #ROUND.chair[ROUND.turn].hand == 2 and canPlayHand(ROUND.turn) then
				if BOT[ROUND.chair[ROUND.turn].owner] then
					ROUND.chair[ROUND.turn].uno = "uno"
				else
					showUno(ROUND.turn)
				end
			end
			if (not ROUND.gameMode.nochallenge and ROUND.topCard.card[2] == "draw4" or ROUND.topCard.card[2] == "draw99") and ROUND.accumulated then
				showChallenge(ROUND.turn)
			end
			if not canPlayHand(ROUND.turn) or ROUND.accumulated then
				showNeedDraw(ROUND.turn)
			end
			if ROUND.accumulated then
				local txt = ""
				if ROUND.gameMode.supercombo then
					if ROUND.topCard.card[2] == "draw4" or ROUND.topCard.card[2] == "draw99" then
						if ROUND.gameMode.nochallenge then
							txt = string.format("<p align='center'><font color='#ffffff'>%s", translate(ROUND.chair[ROUND.turn].owner, "DRAW_PLUS_FOUR_ANTICHALLENGE"))
						else
							txt = string.format("<p align='center'><font color='#ffffff'>%s", translate(ROUND.chair[ROUND.turn].owner, "DRAW_PLUS_FOUR"))
						end
					else
						txt = string.format("<p align='center'><font color='#ffffff'>%s", translate(ROUND.chair[ROUND.turn].owner, "DRAW_PLUS"))
					end
				elseif ROUND.gameMode.hell then
					if ROUND.topCard.card[2] == "draw4" or ROUND.topCard.card[2] == "draw99" then
						if ROUND.gameMode.nochallenge then
							txt = string.format("<p align='center'><font color='#ffffff'>%s", translate(ROUND.chair[ROUND.turn].owner, "DRAW_HELL_FOUR_ANTICHALLENGE"))
						else
							txt = string.format("<p align='center'><font color='#ffffff'>%s", translate(ROUND.chair[ROUND.turn].owner, "DRAW_HELL_FOUR"))
						end
					else
						txt = string.format("<p align='center'><font color='#ffffff'>%s", translate(ROUND.chair[ROUND.turn].owner, "DRAW_HELL"))
					end
				elseif ROUND.accumulated.allowed.draw2 then
					txt = string.format("<p align='center'><font color='#ffffff'>%s", translate(ROUND.chair[ROUND.turn].owner, "DRAW_TWO"))
				elseif ROUND.accumulated.allowed.draw4 then
					if ROUND.gameMode.nocombo then
						txt = string.format("<p align='center'><font color='#ffffff'>%s", translate(ROUND.chair[ROUND.turn].owner, "DRAW_CHALLENGE"))
					elseif ROUND.accumulated.nochallenge then
						txt = string.format("<p align='center'><font color='#ffffff'>%s", translate(ROUND.chair[ROUND.turn].owner, "DRAW_FOUR_ANTICHALLENGE"))
					else
						txt = string.format("<p align='center'><font color='#ffffff'>%s", translate(ROUND.chair[ROUND.turn].owner, "DRAW_FOUR"))
					end
				end
				ui.addTextArea(19, string.format(txt, ROUND.accumulated.cards), ROUND.chair[ROUND.turn].owner, 100, 305, 600, nil, 0, 0, 0, false)
			else
				ROUND.chair[ROUND.turn].playedChair = true
			end
			updateShadow(ROUND.turn)
		end
		resetTimer()
		updateTurnTimer()
		winningEffect()
	else
		endGame()
	end
end

function validPlay(hand, card)
	if ROUND.accumulated then
		for i, v in pairs(hand) do
			if ROUND.accumulated.allowed[v[2]] then
				return true
			end
		end
	else
		for i, v in pairs(hand) do
			if v == true or ((v[1] == "black" or card[1] == v[1] or card[2] == v[2]) and (isNumeric(v) or not ROUND.chair[ROUND.turn].peace)) then
				return true
			end
			if ROUND.gameMode.hell and not isNumeric(v) and not isNumeric(card) and not ROUND.chair[ROUND.turn].peace then
				return true
			end
		end
	end
end

function validPlayColor(hand, card)
	for i, v in pairs(hand) do
		if card[1] == v[1] then
			return true
		end
	end
end

function validPlayNumber(hand, card)
	for i, v in pairs(hand) do
		if card[2] == v[2] then
			return true
		end
	end
end

function validPlayNumberColor(hand, card)
	for i, v in pairs(hand) do
		if card[2] == v[2] and card[1] == v[1] then
			return true
		end
	end
end

function validPlaySame(hand, card)
	for i, v in pairs(hand) do
		if card[1] == v[1] and card[2] == v[2] then
			return true
		end
	end
end

function sayUno(n)
	ROUND.chair[n].uno = "uno"
	if #ROUND.chair[n].hand == 1 then
		ROUND.chair[n].saidUno = true
		updateScore(n)
	end
	ui.removeTextArea(6, ROUND.chair[n].owner)
	ui.removeTextArea(7)
	if ROUND.accumulated and ROUND.topCard.card[2] == "draw4" then
		showChallenge(ROUND.turn)
	end
	for i, v in pairs(ROUND.chair) do
		if v.uno == "one card" and ROUND.turn ~= i then
			for j, w in pairs(ROUND.chair) do
				if j ~= i then
					showChallenge(j)
				end
			end
		end
	end
	if ROUND.chair[n].skin.id == "psycho" then
		local img = tfm.exec.addImage(IMG.misc.psychoBlink, "_1000", ROUND.chair[n].x-50, 20)
		TIMER.img[img] = os.time()+500
	end
	for i=1, 20 do
		local vx = (math.random()-0.5) * 5
		local vy = (math.random()-1) * 5
		tfm.exec.displayParticle(math.random(21, 24), 720, 220, vx, vy, 0, 0.1, ROUND.chair[n].owner)
	end
end

function clickChallenge(n)
	local findPlayer = false
	for i, v in pairs(ROUND.chair) do
		if i ~= n and v.mode ~= "DELETED" and v.uno == "one card" and i ~= ROUND.turn and #v.hand == 1 then
			tryDraw(i, ROUND.gameMode.hard and 4 or 2, true)
			unlockChair(ROUND.chair[n].owner, "rip")
			findPlayer = true
			local img = tfm.exec.addImage(IMG.misc.challenge, "!1000", ROUND.chair[n].x-50, 30)
			local img2 = tfm.exec.addImage(IMG.misc.fail, "!1000", v.x-50, 30)
			ui.addTextArea(21, string.format("<p align='center'><font color='#ffffff'>%s", translate(v.owner, "UNO_FAIL")), v.owner, 200, 305, 400, nil, 0, 0, 0, false)
			table.insert(TIMER.txt, {time=os.time()+5000, id=21, player=v.owner})
			TIMER.img[img] = os.time()+2000
			TIMER.img[img2] = os.time()+2000
		end
	end
	if findPlayer then
		ui.removeTextArea(7)
		if (ROUND.topCard.card[2] == "draw4" or ROUND.topCard.card[2] == "draw99") and ROUND.accumulated then
			showChallenge(ROUND.turn)
		end
	elseif (not ROUND.gameMode.nochallenge and ROUND.topCard.card[2] == "draw4" or ROUND.topCard.card[2] == "draw99") and ROUND.turn == n and ROUND.accumulated and not ROUND.accumulated.click and not ROUND.chair[n].action then
		-- COLOCAR PRA APARECER A JANELA AQUI
		if PLAYER[ROUND.chair[n].owner].challengePopup then
			closeAll(ROUND.chair[n].owner, "CHALLENGE")
			window.open(ROUND.chair[n].owner, "CHALLENGE", ROUND.topCard.card2)
		else
			challengeDrawFour(n)
		end
	end
end

function challengeDrawFour(n)
	if ROUND.accumulated.click then
		return false
	end
	ui.removeTextArea(7, ROUND.chair[n].owner)
	ui.removeTextArea(70, ROUND.chair[n].owner)
	ROUND.accumulated.click = true
	ROUND.time = GLOBAL_TIME + 10000
	ui.removeTextArea(2)
	ui.removeTextArea(7)
	ui.removeTextArea(18)
	ui.removeTextArea(19)
	local img = {
		tfm.exec.addImage(IMG.misc.challenge, "!1000", ROUND.chair[n].x-50, 30),
	}
	local prev = ROUND.accumulated.n
	local hand = ROUND.accumulated.hand
	local namePlayer = ROUND.accumulated.p
	local win = false
	local card = false
	local bg = {blue=true, green=true}
	for i in ipairs(hand) do
		if hand[i][1] == ROUND.topCard.card2[1] or (ROUND.gameMode.bluegreen and bg[hand[i][1]] and bg[ROUND.topCard.card2[1]]) then
			win = true
			card = hand[i]
		end
	end
	ROUND.chair[n].action = {name="challenge"}
	if validRoom() then
		local p = ROUND.chair[n].owner
		if win and PLAYER[p].challenge then
			PLAYER[p].challenge = PLAYER[p].challenge + 1
			if PLAYER[p].challenge >= 3 then
				unlockChair(p, "got")
			end
		else
			PLAYER[p].challenge = 0
		end
		saveData(p)
	end
	addFunctionTimer(function(w, im, nn, p)
		if ROUND.state ~= "PLAY" then
			return false
		end
		for i, v in pairs(im) do
			tfm.exec.removeImage(v)
		end
		ui.removeTextArea(19)
		ui.removeTextArea(21)
		local qtd = 4
		if ROUND.topCard.card[2] == "draw99" then
			qtd = 99
		end
		if ROUND.accumulated then
			if w then
				missCard(p, card, 2000)
				if ROUND.accumulated.cards > qtd then
					tryDraw(p, qtd, true, true)
					tryDraw(nn, ROUND.accumulated.cards-qtd, true)
				else
					tryDraw(p, ROUND.accumulated.cards, true)
				end
				ROUND.accumulated = nil
				local img = tfm.exec.addImage(IMG.misc.sucess, "!1000", ROUND.chair[n].x-50, 30)
				TIMER.img[img] = os.time()+2000
				if #ROUND.chair[n].hand == 2 and canPlayHand(n) then
					showUno(n)
				end
				updateShadow(n)
			else
				local img = tfm.exec.addImage(IMG.misc.fail, "!1000", ROUND.chair[n].x-50, 30)
				TIMER.img[img] = os.time()+2000
				for i, v in pairs(PLAYER) do
					if v.faustao then
						local img2 = tfm.exec.addImage(IMG.misc.errou, "!1000", 480, 190, i)
						TIMER.img[img2] = os.time()+2000
					end
				end
				if ROUND.turn == n then
					tryDraw(nn, ROUND.accumulated.cards+2, true)
					ROUND.accumulated = nil
					passTurn()
					updateShadow(n)
					batataTimer(n)
				end
			end
		end
		ROUND.chair[n].action = nil
	end, 3000, win, img, n, prev)
end

function isNumeric(card)
	local can = {n0=0, n1=1, n2=2, n3=3, n4=4, n5=5, n6=6, n7=7, n8=8, n9=9}
	return can[card[2]]
end

function fastDraw(n, pos)
	if #ROUND.deck == 0 and #ROUND.pile > 1 then
		repeat
			if ROUND.pile[1][4] then
				ROUND.pile[1][1] = ROUND.pile[1][4]
				ROUND.pile[1][4] = nil
			end
			table.insert(ROUND.deck, table.remove(ROUND.pile, 1))
		until #ROUND.pile == 1
		ROUND.deck = shuffleDeck(ROUND.deck)
		for i, v in pairs(ROUND.topCard.img) do
			tfm.exec.removeImage(v)
		end
		for i=1, 10 do
			tfm.exec.displayParticle(3, 345, 210, math.random(-20,20)/10, math.random(-20,20)/10, 0, 0)
		end
		drawTopCard()
	end
	if ROUND.chair[n].peace and not pos and not isNumeric(ROUND.deck[#ROUND.deck]) then
		drawCard(n, 1)
		if bombInHand(n) then
			eliminate(n, true)
		else
			ROUND.chair[n].confuse = false
			passTurn()
			batataTimer(n)
		end
	else
		if isCursed(n, "anvil") then
			drawCard(n, 0)
		end
		local card = pos and table.remove(ROUND.deck, pos) or table.remove(ROUND.deck)
		showDeck()
		ROUND.chair[n].maxDraw = 1
	if card then
		if card[2] == "bomb" then
			table.insert(ROUND.pile, card)
			eliminate(n, true)
		else
			explosion(35, 400, 250, 20, 20)
			playCard(n, card, false, false, true)
		end
	else
		ROUND.chair[n].confuse = false
		passTurn()
		batataTimer(n)
		end
	end
end

function isIlluminati(n)
	if CONFIG.ranked and not ROUND.chair[n].illuminati then
		local cont = 0
		for i, v in pairs(ROUND.chair[n].hand) do
			if v[2] == "draw4" then
				cont = cont + 1
			end
		end
		if cont == 4 then
			ROUND.chair[n].illuminati = true
			unlockChair(ROUND.chair[n].owner, "illuminati")
		end
	end
end

function autoPlay()
	local chair = ROUND.chair[ROUND.turn]
	local turn = ROUND.turn
	local n = ROUND.turn
	local afk = ROUND.chair[ROUND.turn].afk
	local autoplay = chair.autoPlay
	if chair.mode == "BUSY" then
		BOT.B.autoPlay()
		if afk and not autoplay and chair.mode ~= "DELETED" then
			kickPlayer(chair.owner, false)
		end
		chair.autoPlay = true
	elseif chair.mode == "FREE" then
		if ROUND.accumulated and ROUND.subitDeath then
			eliminate(ROUND.turn, true)
		else
			if ROUND.accumulated then
				drawCard(ROUND.turn, ROUND.accumulated.cards, "PENALTY")
				ROUND.accumulated = nil
				ui.removeTextArea(2)
			end
			if chair.team then
				ROUND.team[chair.team][ROUND.turn] = nil
				chair.team = false
			end
			repeat
				local card = table.remove(chair.hand)
				if card and not card[3] then
					table.insert(ROUND.pile, 1, card)
				end
			until #chair.hand <= 0
			drawTopCard()
			passTurn()
			chair.mode = "DELETED"
			ui.removeTextArea(n+1000)
			ui.removeTextArea(n+1010)
			for i, v in pairs(chair.skin.img) do
				tfm.exec.removeImage(v)
			end
			batataTimer(n)
			local cont = 0
			local name = ""
			for i, v in pairs(ROUND.chair) do
				if v.mode == "BUSY" then
					cont = cont + 1
					name = v.owner
				end
			end
			if cont == 1 then
				endGame(name)
			end
		end
	else
		passTurn()
	end
end

function tracking(n)
	local o = {}
	ui.removeTextArea(70, ROUND.chair[n].owner)
	if #ROUND.deck == 0 then
		repeat
			if ROUND.pile[1] and ROUND.pile[1][4] then
				ROUND.pile[1][1] = ROUND.pile[1][4]
				ROUND.pile[1][4] = nil
			end
			table.insert(ROUND.deck, table.remove(ROUND.pile, 1))
		until #ROUND.pile <= 1
		ROUND.deck = shuffleDeck(ROUND.deck)
		for i, v in pairs(ROUND.topCard.img) do
			tfm.exec.removeImage(v)
		end
		for i=1, 10 do
			tfm.exec.displayParticle(3, 345, 230, math.random(-20,20)/10, math.random(-20,20)/10, 0, 0)
		end
		explosion(35, 400, 250, 20, 20)
		drawTopCard()
		showDeck()
	end
	if #ROUND.deck > 0 then
		for i=1, 3 do
			table.insert(o, math.random(#ROUND.deck))
		end
		local player = ROUND.chair[n].owner
		local img = tfm.exec.addImage(IMG.skin[ROUND.portal.side].misc.discover, "!1000", ROUND.chair[n].x-50, 20)
		local l = tfm.exec.addImage(IMG.misc.genericLayer, "!1000", 0, 0, player)
		local t1 = showCard(ROUND.deck[o[1]], 230, 200, player, "!1000", "big")
		local t2 = showCard(ROUND.deck[o[2]], 350, 200, player, "!1000", "big")
		local t3 = showCard(ROUND.deck[o[3]], 470, 200, player, "!1000", "big")
		local images = {img, l}
		for i, v in pairs({t1,t2,t3}) do
			for j, w in pairs(v) do
				table.insert(images, w)
			end
		end
		ROUND.chair[n].action = {
			name = "TRACKING",
			img = images,
			card = o
		}
	else
		ui.removeTextArea(18)
		ROUND.chair[n].draw = true
		showPass(n)
	end
	resetTimer()
	updateTurnTimer()
end

function eliminate(n, pass, final)
	if ROUND.chair[n].owner ~= "Charlotte" and ROUND.chair[n].mode ~= "DELETED" then
		for i, v in pairs(ROUND.chair) do
			if BOT[v.owner] and BOT[v.owner].eventEliminate then
				BOT[v.owner].eventEliminate(ROUND.chair[n].owner)
			end
		end
		local chair = ROUND.chair[n]
		if PLAYER[chair.owner] then
			PLAYER[chair.owner].match = "x"
			saveData(chair.owner)
		end
		local pool = {0, 2, 3, 11, 13}
			for i=1, 40 do
				local vx = (math.random()-0.5) * 5
				local vy = (math.random()-0.5) * 5
				local particle = pool[math.random(#pool)]
				tfm.exec.displayParticle(particle, chair.x, 140, vx, vy, 0, 0)
			end
		local p = chair.owner
		chair.score = scoreHand(n)
		if p == "Snowy" then
			chair.mode = "DELETED"
			local chairs = {}
			local cardsByChairs = {}
			for i, v in pairs(ROUND.chair) do
				if i ~= n and v.mode ~= "DELETED" then
					table.insert(chairs, i)
					cardsByChairs[i] = 0
				end
			end
			for i=1, #chair.hand do
				local rand = chairs[math.random(#chairs)]
				cardsByChairs[rand] = cardsByChairs[rand] + 1
			end
			for i, v in pairs(cardsByChairs) do
				if v > 0 then
					local card = false
					for j=1, v do
						card = table.remove(chair.hand, math.random(#chair.hand))
						table.insert(ROUND.chair[i].hand, card)
					end
					sortHand(ROUND.chair[i].hand)
					updateHand(i)
					updateScore(i)
					explosion(5, ROUND.chair[i].x, 100, 5, 10)
					missCard(i, card, 2000)
					showCardsGainned(i, v)
					if mustBeEliminated(i) then
						eliminate(i)
					end
				end
			end
		else
			for i=1, #chair.hand do
				local card = chair.hand[i]
				if card and not card[3] then
					table.insert(ROUND.pile, 1, card)
				end
			end
		end
		drawTopCard()
		if pass then
			passTurn()
		end
		chair.mode = "DELETED"
		system.bindMouse(p, false)
		tfm.exec.giveMeep(p, false)
		drawChair(n)
		for i, v in pairs(chair.imgHand) do
			tfm.exec.removeImage(v)
		end
		for i, v in pairs(chair.imgShadow) do
			tfm.exec.removeImage(v)
		end
		if chair.action then
			for i, v in pairs(chair.action.img or {}) do
				tfm.exec.removeImage(v)
			end
		end
		if chair.outChair then
			tfm.exec.removeImage(chair.outChair)
			ui.removeTextArea(15, p)
			ui.removeTextArea(16, p)
			chair.outChair = nil
		end
		if chair.team then
			ROUND.team[chair.team][n] = nil
			chair.team = nil
		end
		ui.removeTextArea(5, p)
		ui.removeTextArea(6, p)
		ui.removeTextArea(7, p)
		ui.removeTextArea(10, p)
		ui.removeTextArea(11, p)
		ui.removeTextArea(12, p)
		ui.removeTextArea(15, p)
		ui.removeTextArea(16, p)
		ui.removeTextArea(18, p)
		ui.removeTextArea(19, p)
		if PLAYER[p] then
			PLAYER[p].chair = nil
		end
		if not final then
			local cont = {}
			local name = ""
			for i, v in pairs(ROUND.chair) do
				if v.mode == "BUSY" then
					table.insert(cont, i)
					name = v.owner
				end
			end
			if #cont == 1 then
				endGame(name, nil, nil, "ELIMINATION")
			elseif #cont == 2 and ROUND.gameMode.team then
				local win = true
				local team = ROUND.chair[PLAYER[name].chair].team
				for i, v in pairs(cont) do
					if not ROUND.team[team][v] then
						win = false
						break
					end
				end
				if win then
					endGame(name, nil, nil, "ELIMINATION")
				end
			end
		end
	elseif pass then
		passTurn()
	end
end

function jumpIn(ini, final)
	if ROUND.love ~= 0 then
		if PLAYER[ROUND.chair[final].owner].faustao then
			tfm.exec.chatMessage("Reverse chain broke (passTurn)", ROUND.chair[final].owner)
		end
		ROUND.love = 0
	end
	if ROUND.chair[ini].action then
		for i, v in pairs(ROUND.chair[n].action.img or {}) do
			tfm.exec.removeImage(v)
		end
	end
	for i, v in pairs(tfm.get.room.playerList) do
		window.close(i, "CHALLENGE")
	end
	ROUND.chair[ini].action = nil
	repeat
		explosion(35, ROUND.chair[ROUND.turn].x, 80, 10, 10)
		local img = tfm.exec.addImage(ROUND.flow == "RIGHT" and IMG.misc.right or IMG.misc.left, "!1000", ROUND.chair[ROUND.turn].x-50, 30)
		TIMER.img[img] = os.time()+500
		ROUND.chair[ROUND.turn].peace = nil
		if ROUND.chair[ROUND.turn].peace2 then
			ROUND.chair[ROUND.turn].peace2 = ROUND.chair[ROUND.turn].peace2 - 1
			if ROUND.chair[ROUND.turn].peace2 < 1 then
				ROUND.chair[ROUND.turn].peace2 = nil
			end
		end
		ROUND.turn = nextChair(ROUND.turn)
	until ROUND.turn == final
	explosion(11, ROUND.chair[final].x, 80, 40, 30)
	if #ROUND.chair[final].hand == 2 then
		ROUND.chair[final].uno = "uno"
	end
	updateArrow()
	updateShadow(ini)
end

function yetPlaying(p)
	for i, v in pairs(ROUND.chair or {}) do
		if p == v.owner then
			return true
		end
	end
end


--[[ src/libs/get_from_xml.lua ]]--

function getChairs(xml)
	local str = string.match(xml, 'Chair="(.-)"')
	if not str then
		return false
	else
		local arg = split(not CONFIG.ranked and "40,120,200,280,360,440,520,600,680,760" or str or "50,150,250,350,450,550,650,750", ",")
		--arg = split("40,120,200,280,360,440,520,600,680,760", ",")
		
		local chair = {}
		for i, v in pairs(arg) do
			local x = tonumber(v)
			table.insert(chair, {
				mode = "EMPTY",
				['x'] = x,
				owner = "",
				plays = 0,
				maxHand = 0,
				maxDraw = 0,
				underTime = true,
				afk = false,
				draw = false,
				phase = false,
				batata = 1,
				batata2 = 1,
				flag = "default",
				skin = {id = "empty", img = {}},
				imgHand = {},
				imgShadow = {},
				hand = {},
				clickDelay = os.time(),
			})
		end
		return chair
	end
end

function getColor(xml)
	local color = string.match(xml, 'Color="(.-)"')
	return split(color or "000000,000000", ",")
end

function getBot(xml)
	local bot = string.match(xml, 'Bot="(.-)"')
	return bot and split(bot, ",")
end

function getRule(xml)
	local rule = string.match(xml, 'Rule="(.-)"')
	return rule and split(rule, ",")
end

function getCardSkin(xml)
	local color = string.match(xml, 'Card="(.-)"')
	if color and IMG.skin[color] then
		return color
	else
		return "classic"
	end
end


--[[ src/libs/interface.lua ]]--

function loadImages(p)
	local pool = {"thunder", "skipped", "challenge", "sucess", "fail", "illuminatiEye", "left", "right", "tip", "web", "ribbon", "burn"}
	local tt = os.time() + 5
	for i, v in pairs(pool) do
		if os.time() > tt then
			break
		else
			tfm.exec.addImage(IMG.misc[v], "?10000", 5000, 5000, p)
		end
	end
	for i, v in pairs(IMG.emote) do
		if os.time() > tt then
			break
		else
			tfm.exec.addImage(v, "?10000", 5000, 5000, p)
		end
	end
	for i, v in pairs(IMG.skin.classic.symbol) do
		if os.time() > tt then
			break
		else
			tfm.exec.addImage(v.big, "?10000", 5000, 5000, p)
		end
	end
end

function updateScore(n, p, color)
	local nickname = nickMinifier(nickHashtag(ROUND.chair[n].owner))
	if ROUND.chair[n].mode ~= "DELETED" then
		local colors = {"4CFF00", "BABD2F", "E68D43", "CB546B", "F7868B", "78B1D9", "97CF9D", "E1A6EB", "F3C783", "FFFFFF"}
		local teamColors = {}
		local qtd = #ROUND.chair[n].hand
		local f = 1
		local uno = ROUND.chair[n].uno == "uno"
		local x = ROUND.chair[n].x
		if qtd <= 3 then
			f = 1
		elseif qtd < 8 then
			f = 2
		elseif qtd < 15 then
			f = 3
		else
			f = 4
		end
		local show = qtd
		if qtd > 1 and ROUND.gameMode.camouflage then
			show = "?"
			f = 2
		elseif uno and #ROUND.chair[n].hand == 1 then
			show = CONFIG.UNO
		end
		-- teste pra ver se a sombra elimina a necessidade das cores
		--if ROUND.chair[n].team then
		--  f = ROUND.chair[n].team + 4
		--end
		resetBatata(n)
		local numberColor = colors[f]
		if ROUND.gameMode.shiny then
			local have = {}
			for i, v in pairs(ROUND.chair[n].hand) do
				have[v[1]] = true
			end
			if have.black or have.red and have.blue and have.yellow and have.green then
				numberColor = "FFFFFF"
			end
		end
		if p then
			local b = ROUND.chair[n].luck and "<vp>" or (BOT[ROUND.chair[n].owner] or ROUND.chair[n].owner == "") and "<j>" or p == ROUND.chair[n].owner and "<font color='#ffffff'>" or ""
			local name = ROUND.chair[n].owner == "" and ("["..translate(p, "SPACE").."]") or ("<a href='event:profile "..ROUND.chair[n].owner.."'>"..nickname.."</a>")
			ui.addTextArea(1010+n, string.format("<b><p align='center'><font color='#000000'>%s<b>\n<font size='18px'>%s", nickname, show), p, x-69, 116, 140, 60, 0, 0, 0, false)
			ui.addTextArea(1000+n, string.format(b.."<b><p align='center'>%s<b>\n<font size='18px' color='#%s'>%s", name, numberColor, show), p, x-70, 115, 140, 60, 0, 0, 0, false)
		else
			for i, v in pairs(tfm.get.room.playerList) do
				local b = ROUND.chair[n].luck and "<vp>" or (BOT[ROUND.chair[n].owner] or ROUND.chair[n].owner == "") and "<j>" or i == ROUND.chair[n].owner and "<font color='#ffffff'>" or ""
				local name = ROUND.chair[n].owner == "" and ("["..translate(i, "SPACE").."]") or ("<a href='event:profile "..ROUND.chair[n].owner.."'>"..nickname.."</a>")
				local limit = ROUND.chair[n].owner ~= "Charlotte" and show ~= CONFIG.UNO and ROUND.limit and ROUND.limit < 30 and ("/"..ROUND.limit) or ""
				ui.addTextArea(1010+n, string.format("<b><p align='center'><font color='#000000'>%s<b>\n<font size='18px'>%s<font size='8px'>%s", nickname, show, limit), i, x-69, 116, 140, 60, 0, 0, 0, false)
				ui.addTextArea(1000+n, string.format(b.."<b><p align='center'>%s<b>\n<font size='18px' color='#%s'>%s<font size='8px'>%s", name, numberColor, show, limit), i, x-70, 115, 140, 60, 0, 0, 0, false)
			end
		end
		if uno and #ROUND.chair[n].hand == 1 and not color then
			particle = {shaman=9, cheese=11, fraise=13}
			for i=1, 30 do
				local vx = (math.random()-0.5) * 5
				local vy = (math.random()-1) * 10
				tfm.exec.displayParticle(particle[ROUND.chair[n].skin.id] or math.random(21, 24), x, 140, vx, vy, 0, 0.1, p)
			end
		end
	elseif ROUND.chair[n].owner ~= "" then
		ui.addTextArea(1000+n, string.format("<b><font color='#000000'><p align='center'>%s<b>\n<font size='18px'>X", nickname), i, ROUND.chair[n].x-70, 115, 140, 60, 0, 0, 0, false)
		ui.removeTextArea(1010+n, p)
	else
		ui.removeTextArea(1000+n, p)
		ui.removeTextArea(1010+n, p)
	end
end

function blinkColor()
	local colors = {"FFB2B2", "FFFFFF", "B2BDFF", "FFFFFF", "B2FFBB", "FFFFFF", "FFEBB2", "FFFFFF"}
	_blink = _blink or 0
	_blink = (_blink+1)%#colors
	for i, v in pairs(ROUND.chair) do
		local have = {}
		for i, v in pairs(v.hand) do
			have[v[1]] = true
		end
		if have.black or have.red and have.blue and have.yellow and have.green then
			updateScore(i, nil, colors[_blink+1])
		end
	end
end

function blinkAllert()
	ROUND.blink = not ROUND.blink
	if ROUND.blink then
		ui.addTextArea(28, "", nil, 0, 0, 800, 400, 0xff0000, 0, 0.1, false)
	else
		ui.removeTextArea(28)
	end
end

function blinkAllert()
		ui.addTextArea(28, "", nil, 0, 0, 800, 400, 0xff0000, 0, 0.1, false)
end

function showDeck(p)
	if not p then
		for i, v in pairs(ROUND.imgDeck) do
			tfm.exec.removeImage(v)

		end
		ROUND.imgDeck = {}
	end
	if ROUND.subitDeath then
		table.insert(ROUND.imgDeck, tfm.exec.addImage(IMG.skin[ROUND.cardSkin].misc.death, "_1000", 320, 210, p))
	else
		local img = false
		if ROUND.curse == "ice" then
			img = IMG.skin[ROUND.cardSkin].misc.backIce
		elseif ROUND.curse == "thorn" then
			img = IMG.skin[ROUND.cardSkin].misc.backThorn
		elseif ROUND.curse == "anvil" then
			img = IMG.skin[ROUND.cardSkin].misc.backAnvil
		end
		local y = 210 - (#ROUND.deck/108 * 10)
		table.insert(ROUND.imgDeck, tfm.exec.addImage(IMG.skin[ROUND.cardSkin].misc.shadow, "_1000", 320, 210, p))
		if #ROUND.deck == 0 then
			table.insert(ROUND.imgDeck, tfm.exec.addImage(img or IMG.skin[ROUND.cardSkin].misc.nocard, "_1000", 320, y, p))
		elseif ROUND.gameMode.revelation and not img then
			local c = showCard(ROUND.deck[#ROUND.deck], 320, y, p, "_1000")
			for i, v in pairs(c) do
				table.insert(ROUND.imgDeck, v)
			end
			--table.insert(ROUND.imgDeck, tfm.exec.addImage(IMG.misc.cardLayer, "_1000", 320, y, p))
		else
			table.insert(ROUND.imgDeck, tfm.exec.addImage(img or IMG.skin[ROUND.cardSkin].misc.back, "_1000", 320, y, p))
		end
	end
end

function showCard(card, x, y, p, target, size)
	if not (p and BOT[p]) then
		if type(card) == "table" then
			local img = {}
			if not size then
				--table.insert(img, tfm.exec.addImage(IMG.skin[ROUND.cardSkin].noLag[card[2]][card[1]], target or "_1000", x, y, p))
				table.insert(img, tfm.exec.addImage(IMG.skin[ROUND.cardSkin].color[card[1]][size or "mini"], target or "_1000", x, y, p))
				table.insert(img, tfm.exec.addImage(IMG.skin[ROUND.cardSkin].symbol[card[2]][size or "mini"], target or "_1000", x, y, p))
			else
				table.insert(img, tfm.exec.addImage(IMG.skin[ROUND.cardSkin].color[card[1]][size or "mini"], target or "_1000", x, y, p))
				table.insert(img, tfm.exec.addImage(IMG.skin[ROUND.cardSkin].symbol[card[2]][size or "mini"], target or "_1000", x, y, p))
			end
			if not size and card[4] then
				table.insert(img, tfm.exec.addImage(IMG.misc.ribbon, target or "_1000", x, y-10, p))
			end
			if not size and card.lock then
				table.insert(img, tfm.exec.addImage(IMG.misc.lock[ROUND.portal.side], target or "_1000", x, y, p))
			end
			if card[1] ~= "black" then
				if p then
					if tfm.get.room.playerList[p] and PLAYER[p] and PLAYER[p].colorBlind then
						table.insert(img, tfm.exec.addImage(IMG.skin[ROUND.cardSkin].colorBlind[card[1]][size or "mini"], target or "_1000", x, y, p))
					end
				else
					for i, v in pairs(PLAYER) do
						if v.colorBlind then
							table.insert(img, tfm.exec.addImage(IMG.skin[ROUND.cardSkin].colorBlind[card[1]][size or "mini"], target or "_1000", x, y, i))
						end
					end
				end
			end
			return img
		else
			return {tfm.exec.addImage(IMG.skin[ROUND.cardSkin].misc.back, target or "_1000", x, y, p)}
		end
	else
		return {}
	end
end

function missCard(n, card, time, click)
	if type(card) == "number" then
		card = ROUND.chair[n].hand[card]
	end
	local c = {}
	if card then
		card2 = {card[1], card[2]}
		if ROUND.gameMode.team and ROUND.chair[n].team and click then
			c = showCard(nil, ROUND.chair[n].x-25, 20, nil, "!1000")
			for i, v in pairs(ROUND.team[ROUND.chair[n].team]) do
				local n = showCard(card2, ROUND.chair[n].x-25, 20, ROUND.chair[i].owner, "!1000")
				for j, w in pairs(n) do
					table.insert(c, w)
				end
			end
		else
			c = showCard(card2, ROUND.chair[n].x-25, 20, nil, "!1000")
		end
	else
		c = showCard(card, ROUND.chair[n].x-25, 20, nil, "!1000")
	end
	for i, v in pairs(c) do
		TIMER.img[v] = os.time()+time
	end
	ROUND.chair[n].clickDelay = os.time()+2000
end

function updateHand(n, new)
	local tt = os.time() + 10
	local replay = false
	new = new or {}
	for i, v in pairs(ROUND.chair[n].imgHand) do
		tfm.exec.removeImage(v)
	end
	ROUND.chair[n].imgHand = {}
	if ROUND.state ~= "FINISH" and not BOT[ROUND.chair[n].owner] then
		if #ROUND.chair[n].hand > 16 then
			for i, v in pairs(ROUND.chair[n].hand) do
				if os.time() > tt then
					replay = true
					break
				else
					local targetImage = "_".. 1000*i
					local x = ((i-1)/(#ROUND.chair[n].hand-1))*750
					local c = showCard(v, x, 320, ROUND.chair[n].owner, targetImage)
					if v[2] == "batata" then
						table.insert(ROUND.chair[n].imgHand, tfm.exec.addImage(IMG.batata[ROUND.chair[n].batata], "_1000", x, 300, ROUND.chair[n].owner))
					end
					for i, v in pairs(c) do
						table.insert(ROUND.chair[n].imgHand, v)
					end
					local card = FLAG[ROUND.chair[n].flag].card
					if card and card[1] == v[1] and card[2] == v[2] then
						table.insert(ROUND.chair[n].imgHand, tfm.exec.addImage(IMG.misc.wish, targetImage, x-25, 295, ROUND.chair[n].owner))
					end
					if isCursed(n, "shoe") and not isNumeric(v) then
						table.insert(ROUND.chair[n].imgHand, tfm.exec.addImage(IMG.misc.shoe[ROUND.portal.side], targetImage, x, 320, ROUND.chair[n].owner))
					end
					for j, w in pairs(new) do
						if v == w then
							local l = tfm.exec.addImage(IMG.misc.glowCard, targetImage, x-5, 315, ROUND.chair[n].owner)
							table.insert(ROUND.chair[n].imgHand, l)
							TIMER.img[l] = os.time()+2000
							break
						end
					end
				end
			end
		else
			for i, v in pairs(ROUND.chair[n].hand) do
				if os.time() > tt then
					replay = true
					break
				else
					local targetImage = "_".. 1000*i
					local x = 400-#ROUND.chair[n].hand*25+50*(i-1)
					local c = showCard(v, x, 320, ROUND.chair[n].owner, targetImage)
					if v[2] == "batata" then
						table.insert(ROUND.chair[n].imgHand, tfm.exec.addImage(IMG.batata[ROUND.chair[n].batata], targetImage, x, 300, ROUND.chair[n].owner))
					end
					for i, v in pairs(c) do
						table.insert(ROUND.chair[n].imgHand, v)
					end
					local card = FLAG[ROUND.chair[n].flag].card
					if card and card[1] == v[1] and card[2] == v[2] then
						table.insert(ROUND.chair[n].imgHand, tfm.exec.addImage(IMG.misc.wish, "!0", x-25, 295, ROUND.chair[n].owner))
					end
					if isCursed(n, "shoe") and not isNumeric(v) then
						table.insert(ROUND.chair[n].imgHand, tfm.exec.addImage(IMG.misc.shoe[ROUND.portal.side], targetImage, x, 320, ROUND.chair[n].owner))
					end
					for j, w in pairs(new) do
						if v == w then
							local l = tfm.exec.addImage(IMG.misc.glowCard, targetImage, x-5, 315, ROUND.chair[n].owner)
							table.insert(ROUND.chair[n].imgHand, l)
							TIMER.img[l] = os.time()+500
							break
						end
					end
				end
			end
		end
	end
	if ROUND.spectator or ROUND.state == "FINISH" then
		local p = ROUND.state ~= "FINISH" and OWNER or nil
		if #ROUND.chair[n].hand > 18 then
			for i, v in pairs(ROUND.chair[n].hand) do
				if os.time() > tt then
					replay = true
					break
				else
					local par = math.ceil((i/2))
					local x = ROUND.chair[n].x-(#ROUND.chair[n].hand==i and i%2==1 and 25 or i%2==0 and 15 or 35)
					local y = 235+((par-1)/(math.ceil(#ROUND.chair[n].hand/2)-1))*120
					local c = showCard(v, x, y, p, "!1000")
					for i, v in pairs(c) do
						table.insert(ROUND.chair[n].imgHand, v)
					end
				end
			end
		else
			for i, v in pairs(ROUND.chair[n].hand) do
				if os.time() > tt then
					replay = true
					break
				else
					local par = math.ceil((i/2))
					local x = ROUND.chair[n].x-(#ROUND.chair[n].hand==i and i%2==1 and 25 or i%2==0 and 15 or 35)
					local y = 235+15*(par-1)+(9-(math.ceil(#ROUND.chair[n].hand/2)))*15
					local c = showCard(v, x, y, p, "!1000")
					for i, v in pairs(c) do
						table.insert(ROUND.chair[n].imgHand, v)
					end
				end
			end
		end
	end
	if os.time() < tt and ROUND.state ~= "FINISH" then
		updateShadow(n, tt)
	end
	if replay then
		addFunctionTimer(function()
			updateHand(n, new)
		end, 100)
	end
end

function updateShadow(n, t)
	if not BOT[ROUND.chair[n].owner] then
		local tt = t or os.time()+20
		for i, v in pairs(ROUND.chair[n].imgShadow) do
			tfm.exec.removeImage(v)
		end
		ROUND.chair[n].imgShadow = {}
		if PLAYER[ROUND.chair[n].owner] and not BOT[ROUND.chair[n].owner] and PLAYER[ROUND.chair[n].owner].shadow then
			if #ROUND.chair[n].hand <= 16 then
				if ROUND.turn ~= n or isCursed(n, "poison") or ROUND.chair[n].confuse then
					for i, v in pairs(ROUND.chair[n].hand) do
						local targetImage = "_".. 1000*i
						if os.time() > tt then
							break
						else
							local x = 400-#ROUND.chair[n].hand*25+50*(i-1)
							local l = tfm.exec.addImage(IMG.skin[ROUND.cardSkin].misc.cardLayer, targetImage, x, 320, ROUND.chair[n].owner)
							table.insert(ROUND.chair[n].imgShadow, l)
						end
					end
				elseif ROUND.turn == n and ROUND.accumulated then
					for i, v in pairs(ROUND.chair[n].hand) do
						local targetImage = "_".. 1000*i
						if os.time() > tt then
							break
						else
							if not ROUND.accumulated.allowed[v[2]] then
								local x = 400-#ROUND.chair[n].hand*25+50*(i-1)
								local l = tfm.exec.addImage(IMG.skin[ROUND.cardSkin].misc.cardLayer, targetImage, x, 320, ROUND.chair[n].owner)
								table.insert(ROUND.chair[n].imgShadow, l)
							end
						end
					end
				end
--      else
--        if ROUND.turn ~= n or isCursed(n, "poison") or ROUND.chair[n].confuse then
--          for i, v in pairs(ROUND.chair[n].hand) do
--            local targetImage = "_".. 1000*i
--            if os.time() > tt then
--              break
--            else
--              local x = ((i-1)/(#ROUND.chair[n].hand-1))*750
--              local l = tfm.exec.addImage(IMG.misc.cardLayer, targetImage, x, 320, ROUND.chair[n].owner)
--              table.insert(ROUND.chair[n].imgShadow, l)
--            end
--          end
--        elseif ROUND.turn == n and ROUND.accumulated then
--          for i, v in pairs(ROUND.chair[n].hand) do
--            local targetImage = "_".. 1000*i
--            if os.time() > tt then
--              break
--            else
--              if not ROUND.accumulated.allowed[v[2]] then
--                local x = ((i-1)/(#ROUND.chair[n].hand-1))*750
--                local l = tfm.exec.addImage(IMG.misc.cardLayer, targetImage, x, 320, ROUND.chair[n].owner)
--                table.insert(ROUND.chair[n].imgShadow, l)
--              end
--            end
--          end
 --       end
			end
		end
	end
end

function updateFlow(p, n)
	str = {
		RIGHT = "&gt;",
		LEFT = "&lt;"
	}
	local txt = string.format("<b><p align='center'><font size='20px'color='#%s'>", ROUND.color[1])
	local normal = string.format("%s ", str[ROUND.flow])
	local light = string.format("<font face='Verdana' color='#%s'>%s</font> ", ROUND.color[2], str[ROUND.flow])
	for i=1, 64 do
		txt = txt .. normal
	end
	ui.addTextArea(14, txt, p, -800, 160, 2400, nil, 0, 0, 0, false)
end

function updateArrow(p)
	if not p then
		for i, v in pairs(ROUND.arrowImg) do
			tfm.exec.removeImage(v)
		end
		ROUND.arrowImg = {}
	end
	ui.addTextArea(29, "", p, ROUND.chair[ROUND.turn].x-40, 120, 80, 30, -1, 0xffffff, ROUND.gameMode.team and 1 or 0.3, false)
	table.insert(ROUND.arrowImg, tfm.exec.addImage(LIGHT[ROUND.chair[ROUND.turn].light or "yellow"].img, "_1000", ROUND.chair[ROUND.turn].x-50, 20, p))
	table.insert(ROUND.arrowImg, tfm.exec.addImage(LIGHT[ROUND.chair[ROUND.turn].light or "yellow"].img, "!1000", ROUND.chair[ROUND.turn].x-50, 20, p))
	updateScore(ROUND.turn)
end

function teleportCloud()
	if ROUND and ROUND.subitDeath and ROUND.cloud and ROUND.cloud.obj and ROUND.cloud.delay < os.time() and tfm.get.room.objectList[ROUND.cloud.obj] then
		local obj = tfm.get.room.objectList[ROUND.cloud.obj]
		if obj.x < 0 then
			tfm.exec.moveObject(ROUND.cloud.obj, 800, 0.01, true, 0, 2, false)
			ROUND.cloud.delay = os.time() + 5000
		elseif obj.x > 800 then
			tfm.exec.moveObject(ROUND.cloud.obj, -800, 0.01, true, 0, 2, false)
			ROUND.cloud.delay = os.time() + 5000
		end
	end
end

function showAccumulated(p)
	if ROUND.accumulated then
		ui.addTextArea(2, string.format("<font size='25px' color='#%s'><b>= +%i", "ffffff", ROUND.accumulated.cards), p, 490, 230, nil, nil, 0, 0, 0, false)
	else
		ui.removeTextArea(2)
	end
end

function showUno(n)
	ui.addTextArea(6, string.format("<b><p align='center'><font size='14px' color='#%s'>%s", "ffffff", CONFIG.UNO), ROUND.chair[n].owner, 675, 205, 100, 20, -1, tonumber(ROUND.color[2], 16), 1, false)
	ROUND.chair[n].uno = "one card"
end

function showChallenge(n)
	ui.addTextArea(7, string.format("<p align='center'><font size='14px' color='#%s'>%s", "ffffff", translate(ROUND.chair[n].owner, "CHALLENGE")), ROUND.chair[n].owner, 675, 240, 100, 20, -1, tonumber(ROUND.color[2], 16), 1, false)
end

function showPass(n)
	ROUND.chair[n].draw = true
	ui.addTextArea(5, string.format("<p align='center'><font size='14px' color='#%s'>%s", "ffffff", translate(ROUND.chair[n].owner, "PASS")), ROUND.chair[n].owner, 675, 275, 100, 20, -1, tonumber(ROUND.color[2], 16), 1, false)
end

function updateTurnTimer()
	local time = math.ceil((ROUND.time - GLOBAL_TIME)/1000)
	if time <= 5 and time >= 0 then
		ui.addTextArea(17, string.format("<p align='center'><font size='18px'><r><b>%i", time), nil, ROUND.chair[ROUND.turn].x-20, 20, 40, nil, 1, 0xff0000, 0.8, false)
		ROUND.chair[ROUND.turn].underTime = false
	else
		ui.removeTextArea(17)
	end
end

function showNeedDraw(n)
	local y = 195 - (#ROUND.deck/108 * 10)
	if ROUND.subitDeath then
		y = 195
	end
	ui.addTextArea(18, string.format("<p align='center'><font color='#ffffff'>%s", translate(ROUND.chair[n].owner, "DRAW")), ROUND.chair[n].owner, 300, y, 90, nil, 0, 0, 0, false)
end

function unlockChair(p, name, ever)
	if p and PLAYER[p] then
		local cont = 0
		for i, v in pairs(ROUND.chair or {}) do
			if v.owner and v.owner ~= "" then
				cont = cont + 1
			end
		end
		if not PLAYER[p].skin[name] and ((CONFIG.ranked and cont >= 4 and tfm.get.room.uniquePlayers >= 4) or RANKED or ever) then
			tfm.exec.chatMessage("<j>"..string.format(translate(p, "CHAIR_UNLOCKED"), translate(p, SKIN[name].name)), p)
			PLAYER[p].skin[name] = 3
			if name == "vampire" then
				PLAYER[p].skinEquiped = "vampire"
			end
			saveData(p)
		elseif PLAYER[p].faustao then
			tfm.exec.chatMessage("["..string.format(translate(p, "CHAIR_UNLOCKED"), translate(p, SKIN[name].name)).."]", p)
		end
	end
end

function unlockRule(p, name, ever)
	if not PLAYER[p].rules[name] and (not RULE[name].lock or ever) then
		tfm.exec.chatMessage("<j>"..string.format(translate(p, "RULE_UNLOCKED"), translate(p, RULE[name].name)), p)
		PLAYER[p].rules[name] = 3
		saveData(p)
	end
end

function unlockTrophy(p, name)
	if CONFIG.ranked and TROPHY[name] and not PLAYER[p].trophy[name] and not TROPHY[name].lock then
		tfm.exec.chatMessage("<j>"..translate(p, "MEDAL_UNLOCKED"), p)
		PLAYER[p].trophy[name] = 3
		saveData(p)
	elseif PLAYER[p].faustao then
		tfm.exec.chatMessage(string.format("[%s (%s)]", translate(p, "MEDAL_UNLOCKED"), name), p)
	end
end

function unlockFlag(p, name)
	if FLAG[name] and not PLAYER[p].flags[name] then
		PLAYER[p].flags[name] = 3
		saveData(p)
	end
end

function showRules(p)
	local order = {"dos","neighbor","custom","red","blue","green","bluegreen","yellow","ninguem","flash","jumpin","stack","sequence","hard","limbo","overload","perfection","satisfaction","insatisfaction","tracking","fastdraw","clean","nocombo","supercombo","hell","black","nochallenge","simon","imitate","shiny","batata","bomb","draw99","compass","curse","confuse","justice","magnet","peace","steal","theft","death","portal","ink","dice","paradox","half","oddeven","mimic","ban","mix","gift","trade","web","tornado","carousel","luck","chair","spy","thunder","rain","equality","meep","wish","box","random","clone","key","share","rule","chess","team","camouflage","limit","noaction","mess","revelation","mini","maxi","mulligan","drekkemaus","jingle","papaille","charlotte","elisah","buffy","snowy","icemice","elise"}
	local modes = {}
	for i, v in pairs(order) do
		if ROUND.gameMode[v] then
			table.insert(modes, v)
		end
	end
	ui.removeTextArea(27, p)
	for i=10001, 10005 do
		ui.removeTextArea(i, p)
	end
	local color = {
		CARD = "FFFFFF",
		PASSIVE = "B3E5FC",
		BOSS = "FFE0B2",
		EXTRA = "EF9A9A",
		PUZZLE = "DCEDC8"
	}
	if #modes > 0 then
		ui.addTextArea(27, "<b><font size='12px' color='#ffffff'><u><a href='event:house'>"..translate(p, "HOUSE_RULES"), p, 20, 190, 150, nil, 0, 0, 0, false)
		if not (p == OWNER and ROUND.spectator) then
			if #modes == 1 then
				local txt = string.format("<font color='#%s'><b><a href='event:rule %s'>%s</a></b></font>\n<font size='9px'>%s", color[RULE[modes[1]].type], modes[1], translate(p, RULE[modes[1]].name), modes[1] == "custom" and RULE.custom.customDesc or translate(p, RULE[modes[1]].desc))
				ui.addTextArea(10000+1, txt, p, 20, 180+1*30, 150, nil, 0, 0, 0, false)
				if RULE[modes[1]].img then
					table.insert(ROUND.imgRule, tfm.exec.addImage(RULE[modes[1]].img, "!1000", 0, 178+1*30, p))
				end
			else
				local cont = 0
				for i, v in pairs(modes) do
					local txt = string.format("<font color='#%s'><b><a href='event:rule %s'>%s</a></b></font>", color[RULE[v].type], v, translate(p, RULE[v].name))
					ui.addTextArea(10000+i, txt, p, 20, 190+i*20, 150, nil, 0, 0, 0, false)
					if RULE[modes[i]].img then
						table.insert(ROUND.imgRule, tfm.exec.addImage(RULE[modes[i]].img, "!1000", 0, 188+i*20, p))
					end
					cont = cont + 1
					if #modes > 5 and cont >= 4 then
						break
					end
				end
				if #modes > 5 then
					local txt = string.format("<font color='#%s'><b><a href='event:house'>+%s</a></b></font>", ROUND.color[2], #modes-4)
					ui.addTextArea(10000+5, txt, p, 20, 190+5*20, 150, nil, 0, 0, 0, false)
				end
				--tfm.exec.chatMessage("<bv>"..translate(p, "TIP_RULES"), p)
			end
		end
	end
end

function eraseChair(n)
	checkVars("eraseChair", {n}, {"number"})
	for i, v in pairs(ROUND.chair[n].skin.img) do
		tfm.exec.removeImage(v)
	end
	ROUND.chair[n].skin.img = {}
end

function drawChair(n, p)
	checkVars("drawChair", {n}, {"number"})
	if not p then
		eraseChair(n)
	end
	local chair = ROUND.chair[n]
	if chair.mode == "BUSY" then
		table.insert(chair.skin.img, tfm.exec.addImage(SKIN[chair.skin.id].img, "_1000", chair.x-50, 20, p))
		if BOT[chair.owner] then
			table.insert(chair.skin.img, tfm.exec.addImage(BOT[chair.owner].img, "!0", chair.x-50, 20, p))
		end
		if chair.team then
			table.insert(chair.skin.img, tfm.exec.addImage(IMG.team[chair.team][(#ROUND.chair > 8) and 2 or 1], "!1000", chair.x-50, 115, p))
		elseif chair.flag and chair.flag ~= "default" then
			table.insert(chair.skin.img, tfm.exec.addImage(FLAG[chair.flag].img[(#ROUND.chair > 8) and "mini" or "big"], "!1000", chair.x-50, 115, p))
		end
	elseif chair.mode == "EMPTY" or chair.mode == "FREE" then
		table.insert(chair.skin.img, tfm.exec.addImage(IMG.misc.emptyChair, "_1000", chair.x-50, 20, p))
	end
	updateScore(n, p)
end

function giveTip(p)
	if ROUND.color and ROUND.color[2] then
		local pool = {"TIP_1", "TIP_2", "TIP_3", "TIP_4", "TIP_5", "TIP_6", "TIP_7", "TIP_8", "TIP_9", "TIP_10", "TIP_11", "TIP_12", "TIP_13", "TIP_14", "TIP_15", "TIP_16", "TIP_17", "TIP_18", "TIP_19", "TIP_20", "TIP_21", "TIP_23", "TIP_24", "TIP_25", "TIP_27"}
		local tip = translate(p, pool[math.random(#pool)])
		ui.addTextArea(33, string.format("<b><p align='center'><font color='#000000' size='12px'>\"%s\"\n[%s]", tip, translate(p, "NEXT")), p, 121, 296, 560, nil, 0, 0, 0, false)
		ui.addTextArea(32, string.format("<b><p align='center'><font color='#%s' size='12px'>\"%s\"\n<j><a href='event:tip'>[%s]</a>", ROUND.color[2], tip, translate(p, "NEXT")), p, 120, 295, 560, nil, 0, 0, 0, false)
	end
end

function startTip(p)
	if ROUND.state == "START" and ROUND.color then
		ui.addTextArea(31, string.format("<p align='center'><font color='#%s' size='15px'>%s", "ffffff" or ROUND.color[1], translate(p, "START_TIP")), p, 100, 170, 600, nil, 0, 0, 0, false)
	end
end

function discardEffectRaw(x, y, particle, p)
	local vy = -1.5
	local vx = 0
	local pool = {}
	local tt = os.time()+5
	for i=1, 3 do
		table.insert(pool, {
			['x']=x+5+(i/3)*40,
			['y']=y,
			['vx'] = vx,
			['vy'] = math.random(10)*(-0.05)+vy,
		 })
	end
	for i=1, 3 do
		table.insert(pool, {
			['x']=x+5+(i/3)*40,
			['y']=y+75,
			['vx'] = vx,
			['vy'] = math.random(10)*(-0.05)+vy,
		 })
	end
	for i=1, 6 do
		table.insert(pool, {
			['x']=x+5,
			['y']=y+(i/6)*75,
			['vx'] = math.random(-2,1)*0.05+vx,
			['vy'] = math.random(10)*(-0.05)+vy,
		})
	end
	for i=1, 6 do
		table.insert(pool, {
			['x']=x+45,
			['y']=y+(i/6)*75,
			['vx'] = math.random(-2,1)*0.05+vx,
			['vy'] = math.random(10)*(-0.05)+vy,
		 })
	end
	for i, v in pairs(pool) do
		if os.time() > tt then
			break
		else
			tfm.exec.displayParticle(particle, v.x, v.y, v.vx, v.vy, 0, 0, p)
		end
	end
end

function discardEffect(n, card)
	local x = 0
	local y = 320
	local particle = 4
	if #ROUND.chair[n].hand > 16 then
		x = ((card-1)/(#ROUND.chair[n].hand-1))*750
	else
		x = 400-#ROUND.chair[n].hand*25+50*(card-1)
	end
	discardEffectRaw(x, y, particle, ROUND.chair[n].owner)
	
end

function showCardsGainned(n, qtd)
	if qtd and qtd ~= 0 then
		local symbol = qtd < 0 and "-" or "+"
		qtd = math.abs(qtd)
		ui.addTextArea(2010+n, string.format("<p align='center'><font size='20px' color='#000000'><b>%s%s", symbol, qtd), nil, ROUND.chair[n].x-49, 146, 100, 60, 0, 0, 0, false)
		ui.addTextArea(2000+n, string.format("<p align='center'><font size='20px' color='#%s'><b>%s%s", ROUND.color[2], symbol, qtd), nil, ROUND.chair[n].x-50, 145, 100, 60, 0, 0, 0, false)
		table.insert(TIMER.txt, {time=os.time()+2000, id=2000+n})
		table.insert(TIMER.txt, {time=os.time()+2000, id=2010+n})
	end
end

function confusionEffect()
	for i, v in pairs(ROUND.chair) do
		if v.mode ~= "DELETED" then
			if (v.confuse or isCursed(i, "poison")) then
				for i=1, 3 do
					tfm.exec.displayParticle(14, v.x+math.random(-30,30), math.random(90,120), 0, -math.random(), 0, 0)
					tfm.exec.displayParticle(9, v.x+math.random(-30,30), math.random(90,120), 0, -math.random(), 0, 0)
				end
				local qtd = #v.hand > 16 and 16 or #v.hand
				local maxx = math.floor(qtd*1.5)
				for i=1, maxx do
					tfm.exec.displayParticle(14, math.random(-25*qtd,25*qtd)+400, math.random(350,390), 0, -math.random(), 0, 0, v.owner)
					tfm.exec.displayParticle(9, math.random(-25*qtd,25*qtd)+400, math.random(350,390), 0, -math.random(), 0, 0, v.owner)
				end
			elseif v.batata > 1 and v.mode ~= "DELETED" then
				 -- efeito da batata
				local fx = {11, 11, 2, 2, 13}
				for i=1, 6 do
					tfm.exec.displayParticle(fx[v.batata], v.x+math.random(-30,30), math.random(90,120), 0, -math.random(), 0, 0)
				end
			elseif v.mimic then
				local qtd = ROUND.turn and 6 or 2
				for i=1, qtd do
					tfm.exec.displayParticle(1, v.x+math.random(-30,30), math.random(90,120), 0, -math.random(), 0, 0)
				end
			end
		end
	end
end

function drawTopCard(p)
	if not p then
		for i, v in pairs(ROUND.topCard.img) do
			tfm.exec.removeImage(v)
		end
		ROUND.topCard.img = {}
	end
	local y = 210 - (#ROUND.pile/108 * 10)
	table.insert(ROUND.topCard.img, tfm.exec.addImage(IMG.skin[ROUND.cardSkin].misc.shadow, "_1000", 430, 210, p))
	local c = showCard(ROUND.topCard.card, 430, y, p)
	for i, v in pairs(c) do
		table.insert(ROUND.topCard.img, v)
	end
	if ROUND.gameMode.neighbor and isNumeric(ROUND.topCard.card) then
		table.insert(ROUND.topCard.img, tfm.exec.addImage(IMG.neighbor[ROUND.topCard.card[2]][ROUND.portal.side], target or "_1000", 430, y, p))
	end
	return y
end

function showPreviousCard(p)
	local y = 210 - (#ROUND.pile/108 * 10)
	local c = showCard(ROUND.topCard.card2, 430, y, p)
	local l = tfm.exec.addImage(IMG.skin[ROUND.cardSkin].misc.cardLayer, "_1000", 430, y, p)
	local c2 = showCard(ROUND.topCard.card, 450, y, p)
	for i, v in pairs(c) do
		TIMER.img[v] = os.time()+1000
	end
	for i, v in pairs(c2) do
		TIMER.img[v] = os.time()+1000
	end
	TIMER.img[l] = os.time()+1000
end

function clearImagesAction(n)
	for i, v in pairs(ROUND.chair[n].action.img) do
		tfm.exec.removeImage(v)
	end
end


--[[ src/libs/kick_player.lua ]]--

function kickPlayer(p, normal)
	-- remover jogador de uma partida em andamento
	for i, v in pairs(ROUND.chair or {}) do
		if v.owner == p and v.mode ~= "DELETED" then
			if ROUND.turn == i and normal then
				autoPlay()
			end
			window.close(p, "CHALLENGE")
			if ROUND.turn == i and v.action then
				if v.action.name == "WILD" then
					local color = {"red", "blue", "yellow", "green"}
					paintCard(color[math.random(#color)], ROUND.turn)
				elseif v.action.name == "RULE" then
					selectRule(ROUND.turn, math.random(1,2))
				elseif v.action.name == "TRACKING" then
					if ROUND.gameMode.tracking then
						v.draw = false
						showNeedDraw(ROUND.turn)
						v.afk = false
					end
					drawCardTracking(ROUND.turn, v.action.card[math.random(3)])
				elseif v.action.name == "WISH" then
					makeWish(ROUND.turn, v.action.card[math.random(3)])
				elseif v.action.name == "TRADE" then
					local pool = {}
					for i, v in pairs(ROUND.v) do
						if v.mode ~= "DELETED" and i~=ROUND.turn then
							table.insert(pool, i)
						end
					end
					makeTrade(ROUND.turn, pool[math.random(#pool)])
				elseif v.action.name == "GIFT" then
					local pool = {}
					for i, v in pairs(ROUND.v) do
						if v.mode ~= "DELETED" and i~=ROUND.turn then
							table.insert(pool, i)
						end
					end
					makeGift(ROUND.turn, pool[math.random(#pool)])
				elseif v.action.name == "WEB" then
					local pool = {}
					for i, v in pairs(ROUND.v) do
						if v.mode ~= "DELETED" and not v.action or i==ROUND.turn then
							table.insert(pool, i)
						end
					end
					makeWeb(ROUND.turn, pool[math.random(#pool)])
				elseif v.action.name == "IMITATE" then
					emoteVerify(true)
				end
			end
			if ROUND.mode ~= "DELETED" and (ROUND.state == "PLAY" or ROUND.state == "MULLIGAN") then
				if v.outChair then
					tfm.exec.removeImage(v.outChair)
					ui.removeTextArea(15, p)
					ui.removeTextArea(16, p)
					v.outChair = nil
				end
				v.mode = "FREE"
				v.owner = ""
				updateScore(i)
				local x = v.x
				for i, w in pairs(v.imgHand) do
					tfm.exec.removeImage(w)
				end
				for i, w in pairs(v.imgShadow) do
					tfm.exec.removeImage(w)
				end
				for i, w in pairs(v.skin.img) do
					tfm.exec.removeImage(w)
				end
				ui.removeTextArea(5, p)
				ui.removeTextArea(6, p)
				ui.removeTextArea(7, p)
				ui.removeTextArea(10, p)
				ui.removeTextArea(11, p)
				ui.removeTextArea(12, p)
				ui.removeTextArea(15, p)
				ui.removeTextArea(16, p)
				ui.removeTextArea(18, p)
				ui.removeTextArea(19, p)
				system.bindMouse(p, false)
				v.skin.id = "empty"
				v.flag = "default"
				drawChair(i)
				local cont = 0
				local name = ""
				for i, v in pairs(ROUND.chair) do
					if v.mode == "BUSY" then
						cont = cont + 1
						name = v.owner
					end
				end
				if cont == 1 then
					endGame(name)
				end
			elseif ROUND.state == "START" and v.mode ~= "DELETED" then
				v.mode = "EMPTY"
				v.owner = ""
				v.skin.id = "empty"
				drawChair(i)
				local cont = 0
				local name = ""
				for i, v in pairs(ROUND.chair) do
					if v.mode == "BUSY" then
						cont = cont + 1
						name = v.owner
					end
				end
					
				if cont == 1 then
					endGame(name)
				end
			end
			PLAYER[p].chair = nil
		end
	end
end


--[[ src/libs/moon_phase.lua ]]--

function moonPhase()
		-- http://jivebay.com/calculating-the-moon-phase/
		local day, month, year = tonumber(os.date("%d")), tonumber(os.date("%m")), tonumber(os.date("%Y"))

		if month < 3 then
				year = year - 1
				month = month + 12
		end
		month = month + 1

		local Y = 365.25 * year
		local M = 30.6 * month
		local daysElapsed = (Y + M + day - 694039.09) / 29.5305882
		daysElapsed = math.floor(((daysElapsed % 1) * 8) + .5)

		return bit32.band(daysElapsed, 7) + 1
		-- 4 = lua cheia
end


--[[ src/libs/player_data.lua ]]--

playerData = {
	p = {},
	unpack = function(p, str)
		-- l√™ uma string no formato e salva na tabela
		if str == "#" or str == "" or not str then
			playerData.p[p] = {}
			playerData.p[p].uno = {
				spectator = 0,
				round = 0,
				win = 0,
				red = 0,
				blue = 0,
				green = 0,
				yellow = 0,
				wild = 0,
				mess = 0,
				scoreWeek = 0,
				scoreGlobal = 0,
				season = 0,
				gold = 0,
				silver = 0,
				bronze = 0,
				skin = packChair({default=1}),
				rules = packRules({nochallenge=1}),
				trophy = packTrophy({none=1}),
				flags = packFlag({default=1}),
				skinEquiped = "default",
				trophyEquiped = "none",
				flagEquipped = "default"
			}
			return playerData.p[p]
		else
			playerData.p[p] = {}
			local arg = split(str, ",")
			if arg[1] == "C" then
				arg = split(playerData.updateFormatCD(str), ",")
			end
			local minigameData = split(arg[3] or "", "|") -- minigame1|minigame2|...
			for i, v in pairs(minigameData) do
				local gameData = split(v, "@") -- name@values
				playerData.p[p][gameData[1]] = {}
				local vars = split(gameData[2], ";") -- var1;var2;var3;...
				for j, w in pairs(vars) do
					local s = split(w, "=") -- index=value
					playerData.p[p][gameData[1]][s[1]] = s[2]
				end
			end
			playerData.p[p].time = tonumber(arg[2], 16)
			return playerData.p[p]
		end
	end,
	pack = function(p)
		-- retorna uma string com os dados prontos para salvar
		local str = {}
		for i, v in pairs(playerData.p[p]) do
			if i ~= "time" and i ~= "p" then
				local values = {}
				for j, w in pairs(v) do
					table.insert(values, string.format("%s=%s", j, w))
				end
				table.insert(str, string.format("%s@%s", i,table.concat(values, ";")))
			end
		end
		return string.format("D,%x,%s", os.time(), table.concat(str, "|"))
	end,
	load = function(p, minigame)
		-- retorna a tabela com os dados coletados do minigame
		return playerData.p[p] and playerData.p[p][minigame]
	end,
	save = function(p, minigame, data)
		-- salva uma tabela com os dados
		if playerData.p[p] then
			playerData.p[p][minigame] = data
			return true
		end
		return false
	end,
	free = function(p)
		-- desaloca os dados da tabela
		playerData.p[p] = nil
	end,
	updateFormatCD = function(str)
		local arg = split(str, ",")
		local t = {}
		local str = {}
		t.score = arg[3]
		t.rank = arg[4]
		t.first = arg[5]
		t.podio = arg[6]
		t.completed = arg[7]
		t.round= arg[8]
		t.kill= arg[9]
		for i, v in pairs(t) do
			table.insert(str, string.format("%s=%s", i, v))
		end
		return string.format("D,%x,circuit@%s", os.time(), table.concat(str, ";"))
	end
}


--[[ src/libs/player_sit.lua ]]--

function playerSit(p, chair, n)
	if p:sub(1,1) ~= "*" and PLAYER[p] and (ROUND.state ~=  "PLAY" or #chair.hand > 0) and not (p == OWNER and ROUND.spectator) and ROUND.state ~= "FINISH" then
		for i, v in pairs(chair.skin.img) do
			tfm.exec.removeImage(v)
		end
		PLAYER[p].chair = n
		if PLAYER[p].chairDelay < 6000 then
			PLAYER[p].chairDelay = PLAYER[p].chairDelay + 1000
		end
		chair.owner = p
		chair.mode = "BUSY"
		if PLAYER[p].skinEquiped == "random" then
			if math.random() > 0.99 then
				chair.skin.id = "cheeseclassic"
			else
				local pool = {}
				for i, v in pairs(PLAYER[p].skin) do
					if i ~= "random" then
						table.insert(pool, i)
					end
				end
				chair.skin.id = pool[math.random(#pool)]
			end
		else
			chair.skin.id = PLAYER[p].skinEquiped
			chair.light = PLAYER[p].lightEquiped
		end
		chair.skin.img = {}
		drawChair(n)
		if not BOT[p] then
			tfm.exec.movePlayer(p, chair.x, 110)
		end
		system.bindMouse(p, true)
		updateScore(n)
		if ROUND.state == "PLAY" then
			ui.removeTextArea(32, p)
			ui.removeTextArea(33, p)
			local color = tonumber(ROUND.color[1], 16)
			local v = chair
			ui.addTextArea(10, string.format("<b><p align='center'><font size='14px' color='#%s'>%s", ROUND.color[1], CONFIG.UNO), p, 675, 205, 100, 20, -1, color, 1, false)
			ui.addTextArea(11, string.format("<p align='center'><font size='14px' color='#%s'>%s", ROUND.color[1], translate(p, "CHALLENGE")), p, 675, 240, 100, 20, -1, color, 1, false)
			ui.addTextArea(12, string.format("<p align='center'><font size='14px' color='#%s'>%s", ROUND.color[1], translate(p, "PASS")), p, 675, 275, 100, 20, -1, color, 1, false)
			updateHand(n)
			if n == ROUND.turn then
				if #v.hand == 2 and canPlayHand(n) then
					showUno(n)
				end
				if ROUND.accumulated and ROUND.accumulated.allowed.draw4 then
					showChallenge(n)
				end
				if not canPlayHand(n) or ROUND.accumulated then
					showNeedDraw(n)
				end
				if ROUND.accumulated then
					local txt = ""
					if ROUND.accumulated.allowed.draw2 then
						txt = string.format("<p align='center'><font color='#ffffff'>%s", translate(v.owner, "DRAW_TWO"))
					elseif ROUND.accumulated.allowed.draw4 then
						txt = string.format("<p align='center'><font color='#ffffff'>%s", translate(v.owner, "DRAW_FOUR"))
					end
					ui.addTextArea(19, string.format(txt, ROUND.accumulated.cards), v.owner, 100, 305, 600, nil, 0, 0, 0, false)
				end
			end
		elseif ROUND.state == "MULLIGAN" and not chair.change then
			ui.removeTextArea(32, p)
			ui.removeTextArea(33, p)
			local txt = "<p align='center'><font size='14px' color='#ffffff'>"..translate(p, "CHANGE_HAND")
			ui.addTextArea(28, txt, p, 350, 293, 100, 20, -1, tonumber(ROUND.color[2], 16), 1, false)
		elseif ROUND.state == "START" and CONFIG.ranked and tfm.get.room.uniquePlayers >= 4 then
			if PLAYER[p].lastChair == n then
				PLAYER[p].school = PLAYER[p].school + 1
				if PLAYER[p].school >= 3 then
					unlockChair(p, "school", true)
				end
			else
				PLAYER[p].lastChair = n
				PLAYER[p].school = 1
			end
		end
	end
end


--[[ src/libs/progress.lua ]]--

function progress(p, tab, name)
	if tab == "chairs" then
		return progressChair(p, name)
	elseif tab == "panels" then
		return progressFlag(p, name)
	end
end

function progressChair(p, skin)
	if skin == "fire" then
		return PLAYER[p].stats.victory.red, 100
	elseif skin == "water" then
		return PLAYER[p].stats.victory.blue, 100
	elseif skin == "earth" then
		return PLAYER[p].stats.victory.yellow, 100
	elseif skin == "air" then
		return PLAYER[p].stats.victory.green, 100
	elseif skin == "rainbow" then
		return PLAYER[p].stats.victory.wild, 100
	elseif skin == "toxic" then
		return PLAYER[p].stats.victory.cian, 15
	elseif skin == "thunder" then
		return PLAYER[p].stats.victory.orange, 15
	elseif skin == "crystal" then
		return PLAYER[p].stats.victory.pink, 15
	elseif skin == "dark" then
		return PLAYER[p].stats.victory.purple, 15
	elseif skin == "light" then
		return PLAYER[p].stats.victory.white, 15
	elseif skin == "toothless" then
		return PLAYER[p].stats.victory.darkWin, 10
	elseif skin == "lightfury" then
		return PLAYER[p].stats.victory.lightWin, 10
	elseif skin == "wood" then
		return PLAYER[p].stats.round, 100
	elseif skin == "stone" then
		return PLAYER[p].stats.round, 1000
	elseif skin == "cat" then
		return PLAYER[p].stats.round, 2500
	elseif skin == "garden" then
		return PLAYER[p].stats.round, 5000
	elseif skin == "friend" then
		return PLAYER[p].stats.round, 7500
	elseif skin == "anvil" then
		return PLAYER[p].stats.round, 10000
	elseif skin == "gold" then
		return PLAYER[p].stats.victory.all, 100
	elseif skin == "diamond" then
		return PLAYER[p].stats.victory.all, 1000
	elseif skin == "unicorn" then
		return PLAYER[p].stats.victory.all, 2000
	elseif skin == "cheese" then
		return PLAYER[p].stats.victory.all, 3000
	elseif skin == "breakfast" then
		return PLAYER[p].stats.victory.team, 100
	elseif skin == "hamburguer" then
		return PLAYER[p].stats.victory.team, 250
	elseif skin == "croissant" then
		return PLAYER[p].stats.victory.team, 487.5
	elseif skin == "toast" then
		return PLAYER[p].stats.victory.team, 600
	elseif skin == "pizza" then
		return PLAYER[p].stats.victory.team, 1000
	elseif skin == "shaman" and validRoom() then
		return tfm.get.room.playerList[p].score, 3000
	elseif skin == "beach" then
		return PLAYER[p].stats.spectator, 100
	elseif skin == "cine" then
		return PLAYER[p].stats.spectator, 1000
	elseif skin == "newspaper" then
		return PLAYER[p].stats.spectator, 2500
	elseif skin == "radio" then
		return PLAYER[p].stats.spectator, 5000
	elseif skin == "television" then
		return PLAYER[p].stats.spectator, 7500
	elseif skin == "computer" then
		return PLAYER[p].stats.spectator, 10000
	elseif skin == "candy" then
		return countRules(PLAYER[p].rules), CONFIG.qtdRule
	elseif skin == "wonderland" then
		return PLAYER[p].portal1 + PLAYER[p].portal2, 2
	elseif skin == "got" then
		return PLAYER[p].challenge, 3
	elseif skin == "school" and validRoom() then
		return PLAYER[p].school or 0, 3
	elseif skin == "pencil" then
		return PLAYER[p].pencil, 100
	elseif skin == "chess" then
		return PLAYER[p].chess, 25
	elseif skin == "football" then
		return PLAYER[p].block, 100
	elseif skin == "quartz" then
		return PLAYER[p].action, 5000
	elseif skin == "coffee" then
		return math.floor((os.time() - PLAYER[p].coffee) / 3600000), 4
	elseif skin == "fashion" then
		return PLAYER[p].dayStreak, 7
	elseif skin == "undertale" then
		return PLAYER[p].dayStreak, 15
	end
end

function progressFlag(p, skin)
	if skin == "picnic" then
		return PLAYER[p].stats.victory.red, 300
	elseif skin == "metal" then
		return PLAYER[p].stats.victory.blue, 300
	elseif skin == "paper" then
		return PLAYER[p].stats.victory.yellow, 300
	elseif skin == "carpet" then
		return PLAYER[p].stats.victory.green, 300
	elseif skin == "disco" then
		return PLAYER[p].stats.victory.wild, 300
	elseif skin == "cloud" then
		return PLAYER[p].stats.victory.mess, 50
	end
end


--[[ src/libs/start_game.lua ]]--

function randomGameMode()
	local rules = getRule(tfm.get.room.xmlMapInfo.xml)
	if rules and ((CONFIG.ranked and tfm.get.room.uniquePlayers >= 6) or CONFIG.test or #rules == 0) then
		for i, v in pairs(rules) do
			ROUND.gameMode[v] = true
		end
	elseif not CONFIG.random then
		if CONFIG.noRules then
			CONFIG.noRules = false
		else
			local modes = {"mini","maxi","jumpin","jumpin","jumpin","stack","stack","stack","supercombo","supercombo","mulligan","mulligan","mulligan","rule","rule","random","tracking","limit","flash","chess","chess","ninguem_v2"}
			for i, v in pairs(RULE) do
				if v.public then
					table.insert(modes, i)
				end
			end
			local cont = 0
			if CONFIG.ranked and not RANKED and tfm.get.room.uniquePlayers >= 8 and math.random() > 0.85 then
				cont = cont + 1
				ROUND.gameMode.team = true
			end
			while (math.random(1,10) > 4+cont) and (#modes > 0) and cont < 4 do
				local n = table.remove(modes, math.random(#modes))
				cont = cont + 1
				ROUND.gameMode[n] = true
				for i, v in pairs(RULE[n].conflict or {}) do
					ROUND.gameMode[v] = nil
				end
				if n == "satisfaction" or n == "portal" then
					ROUND.gameMode.stack = true
					for i, v in pairs(RULE.stack.conflict or {}) do
						ROUND.gameMode[v] = nil
					end
				end
			end
		end
	else
		for i, v in pairs(CONFIG.rule) do
			if v then
				ROUND.gameMode[i] = true
			end
		end
	end
	if ROUND.gameMode.custom then
		RULE.custom.customDesc = CONFIG.custom.desc
		ROUND.custom = {}
		for i, v in pairs(CONFIG.custom.action) do
			ROUND.custom[i] = {}
			for j, w in pairs(v) do
				ROUND.custom[i][j] = w
			end
		end
	end
end

function startGame()
	ROUND.state = "WAIT"
	ui.removeTextArea(31)
	ROUND.flow = "RIGHT"
	ROUND.deck = {}
	ROUND.actionPool = {}
	local color = {"red","blue","yellow","green"}
	DECK.batata[1][1] = color[math.random(#color)]
	local skins = {}
	for i, v in pairs(DECK) do
		if RULE[i] and i ~= "bomb" and not RULE[i].notMess then
			for _, w in pairs(v) do
				table.insert(ROUND.actionPool, {w[1], w[2], true, true})
			end
		end
	end
	addFunctionTimer(function()
		if ROUND.gameMode.noaction then
			for i, v in pairs(DECK.numbers) do
				table.insert(ROUND.deck, {v[1], v[2]})
			end
		elseif ROUND.gameMode.mess then
			for i, v in pairs(DECK.mess) do
				table.insert(ROUND.deck, {v[1], v[2]})
			end
			for i, mode in pairs(RULE) do
				if DECK[i] and i ~= "bomb" and not mode.notMess then
					for _, v in pairs(DECK[i]) do
						table.insert(ROUND.deck, {v[1], v[2]})
					end
				end
			end
		else
			for i, v in pairs(DECK.vanilla) do
				table.insert(ROUND.deck, {v[1], v[2]})
			end
			for i, mode in pairs(RULE) do
				if ROUND.gameMode[i] and DECK[i] and i ~= "bomb" then
					for _, v in pairs(DECK[i]) do
						table.insert(ROUND.deck, {v[1], v[2]})
					end
				end
			end
			if ROUND.gameMode.supercombo then
				local pool = {{"red","shield"},{"blue","shield"},{"green","shield"},{"yellow","shield"}}
				for i=1, #ROUND.deck do
					if ROUND.deck[i][2] == "n0" then
						ROUND.deck[i] = table.remove(pool)
					end
				end
			end
			if ROUND.gameMode.simon then
				for i=1, 4 do
					for j, v in pairs(ROUND.deck) do
						if v[2] == "wild" then
							table.remove(ROUND.deck, j)
							break
						end
					end
				end
			end
			if ROUND.gameMode.custom then
				for i, v in pairs(CONFIG.custom.color) do
					for j=1, v do
						table.insert(ROUND.deck, {i,"custom"})
					end
				end
			end
		end
		addFunctionTimer(function()
			ROUND.deck = shuffleDeck(ROUND.deck)
			updateFlow()
			local cont = 0
			local pool = {}
			for i, v in pairs(ROUND.chair) do
				if v.mode == "BUSY" then
					cont = cont + 1
				else
					table.insert(pool, i)
				end
			end
			if cont % 2 == 1 and ROUND.gameMode.team then
				local chair = pool[math.random(#pool)]
				explosion(3, ROUND.chair[chair].x, 80, 10, 20)
				playerSit("Elise", ROUND.chair[chair], chair)
				if BOT.Elise.eventWelcome then
					BOT.Elise.eventWelcome()
				end
				cont = cont + 1
			end
			local max = math.ceil(cont/2)
			cont = 0
			local players = {}
			pool = {1, 2, 3, 4, 5}
			pool = shuffleDeck(pool)
			
			ROUND.gameMode2 = {}
			ROUND.deck2 = {}
			ROUND.pile2 = {}
			ROUND.portal = {side="orange", img={}}
			for i, v in pairs(ROUND.deck) do
				table.insert(ROUND.deck2, {v[1], v[2]})
			end
			ROUND.deck2 = shuffleDeck(ROUND.deck2)
			for i, v in pairs(ROUND.gameMode) do
				ROUND.gameMode2[i] = true
			end
			addFunctionTimer(function()
				for i, v in pairs(ROUND.chair) do
					if v.mode == "EMPTY" or v.mode == "FREE" or not PLAYER[v.owner] then
						v.mode = "DELETED"
						drawChair(i)
					else
						table.insert(skins, {player = v.owner, skin = v.skin.id})
						if BOT[v.owner] and BOT[v.owner].eventStart then
							BOT[v.owner].eventStart()
						end
						table.insert(players, i)
						ui.removeTextArea(32, v.owner)
						ui.removeTextArea(33, v.owner)
						local color = tonumber(ROUND.color[1], 16)
						ui.addTextArea(10, string.format("<b><p align='center'><font size='14px' color='#%s'>%s", ROUND.color[1], CONFIG.UNO), v.owner, 675, 205, 100, 20, -1, color, 1, false)
						ui.addTextArea(11, string.format("<p align='center'><font size='14px' color='#%s'>%s", ROUND.color[1], translate(v.owner, "CHALLENGE")), v.owner, 675, 240, 100, 20, -1, color, 1, false)
						ui.addTextArea(12, string.format("<p align='center'><font size='14px' color='#%s'>%s", ROUND.color[1], translate(v.owner, "PASS")), v.owner, 675, 275, 100, 20, -1, color, 1, false)
						if ROUND.gameMode.team then
							v.team = pool[(cont-1)%max+1]
							ROUND.team[v.team][i] = true
							drawChair(i)
							cont = cont + 1
						elseif not RANKED and not CONFIG.noFlags then
							v.flag = PLAYER[v.owner].flagEquipped
							drawChair(i)
						else
							v.flag = "default"
						end
					end
				end
				addFunctionTimer(function()
					for i, v in pairs(ROUND.chair) do
						if not PLAYER[v.owner] then
							v.mode = "DELETED"
							drawChair(i)
						elseif v.mode ~= "DELETED" then
							local cards = ROUND.gameMode.maxi and 9 or ROUND.gameMode.mini and 4 or 7
							v.hand2 = {}
							if v.owner == "Buffy" then
								drawCard(i, cards-2, "START")
							elseif v.owner == "Elisah" then
								drawCard(i, cards-3, "START")
								local color = {"red", "blue", "yellow", "green"}
								for i=1, 3 do
									table.insert(v.hand, {table.remove(color, math.random(#color)), "curse", true})
								end
								showCardsGainned(i, cards)
								updateScore(i)
							elseif v.owner == "Papaille" then
								drawCard(i, cards+2, "START")
							else
								drawCard(i, cards, "START")
							end
							drawCard2(i, 4)
							local color = v.hand[1][1]
							local sameColor = true
							if ROUND.gameMode.bluegreen and (color == "green" or color == "blue") then
								for j, w in pairs(v.hand) do
									if w[1] ~= "green" or w[1] ~= "blue" then
										sameColor = false
										break
									end
								end
							else
								for j, w in pairs(v.hand) do
									if w[1] ~= color then
										sameColor = false
										break
									end
								end
							end
							if sameColor then
								unlockChair(v.owner, "loot")
							end
						end
					end
					ROUND.turn = players[math.random(#players)]
					if #skins >= 8 then
						local compare = skins[1].skin
						local isTheSame = true
						for i, v in pairs(skins) do
							if v.skin ~= compare then
								isTheSame = false
							end
						end
						if isTheSame then
							for i, v in pairs(skins) do
								unlockChair(v.player, "vangogh")
							end
						end
					end
					for i, v in pairs(PLAYER) do
						if not v.chair then
							--tfm.exec.chatMessage("<bl>"..translate(i, "TIP_26"), i)
							v.spaceDelay = 0
							v.lastChair = nil
							v.school = 0
						end
						if v.chairDelayTimer then
							if v.chairDelayTimer.img then
								tfm.exec.removeImage(v.chairDelayTimer.img)
							end
							v.chairDelayTimer = nil
						end
						if useTotoro(i) then
							unlockChair(i, "totoro")
						end
					end
					if ROUND.gameMode.mulligan then
						mulligan()
					else
						addFunctionTimer(roundBegin, 500)
					end
				end, 500)
				
			end, 500)
		end, 500)
	end, 500)
end

function roundBegin()
	ROUND.state = "PLAY"
	ROUND.time = GLOBAL_TIME + (ROUND.gameMode.flash and 5000 or 10000)
	ROUND.startTime = os.time()
	if ROUND.gameMode.limit then
		tfm.exec.setGameTime(360)
	else
		tfm.exec.setGameTime(720)
	end
	local rand = 0
	repeat
		rand = math.random(#ROUND.deck)
	until ROUND.deck[rand][2] ~= "draw4"
	playCard(ROUND.turn, table.remove(ROUND.deck, rand), true)
	if ROUND.gameMode.bomb or ROUND.gameMode.mess then
		table.insert(ROUND.deck, math.random(#ROUND.deck), {"black","bomb"})
	end
	if ROUND.gameMode.team then
		local color = {0xF11C25, 0x006DB8, 0x3CA646, 0xC858DB, 0xE99715}
		for i, v in pairs(ROUND.chair) do
			if v.mode ~= "DELETED" then
				for j, w in pairs(ROUND.team[v.team]) do
					if j ~= i then
						ui.addTextArea(90001, "<p align='center'><font color='#ffffff' size='10px'>"..translate(v.owner, "TEAM_DESCRIPTION"), v.owner, ROUND.chair[j].x-60, 20, 120, nil, color[v.team], 0xffffff, 1, false)
						break
					end
				end
				ui.addTextArea(50, "<p align='center'><font color='#ffffff'>"..translate(v.owner, "TEAM_SHOW_CARD"), v.owner, 200, 375, 400, nil, nil, nil, 1, false)
			end
		end
		table.insert(TIMER.txt, {time=os.time()+10000, id=90001})
		table.insert(TIMER.txt, {time=os.time()+20000, id=50})
	elseif ROUND.gameMode.mess then
		for i, v in pairs(ROUND.chair) do
			if v.mode ~= "DELETED" then
				ui.addTextArea(50, "<p align='center'><font color='#ffffff'>"..translate(v.owner, "TIP_21"), v.owner, 200, 375, 400, nil, nil, nil, 1, false)
			end
		end
		table.insert(TIMER.txt, {time=os.time()+20000, id=50})
	end
	returnCards()
	showDeck()
	updateArrow()
	ui.removeTextArea(28)
end

function mulligan()
	ROUND.state = "MULLIGAN"
	ROUND.time = GLOBAL_TIME+10000
	for i, v in pairs(ROUND.chair) do
		local txt = "<p align='center'><font size='14px' color='#ffffff'>"..translate(v.owner, "CHANGE_HAND")
		ui.addTextArea(28, txt, v.owner, 350, 293, 100, 20, -1, tonumber(ROUND.color[2], 16), 1, false)
	end
end

function returnCards()
	for i, v in pairs(ROUND.chair) do
		if PLAYER[v.owner] then
			local count = 0
			local card = false
			if v.flag == "cloud" then
				local card = table.remove(ROUND.actionPool, math.random(#ROUND.actionPool))
				table.insert(v.hand, card)
				count = count + 1
			end
			if PARADOX[v.owner] then
				for j, w in pairs(PARADOX[v.owner]) do
					table.insert(v.hand, w)
				end
				card = PARADOX[v.owner][1]
				PARADOX[v.owner] = false
				count = count + 1
			end
			if count > 0 then
				local img = tfm.exec.addImage(IMG.misc.portal, "!1000", v.x-50, 5)
				TIMER.img[img] = os.time()+1500
				missCard(i, card, 2000)
				explosion(1, v.x, 80, 40, 40)
				showCardsGainned(i, ROUND.gameMode.mulligan and count or #v.hand)
				sortHand(v.hand)
				if mustBeEliminated(i) then
					eliminate(i)
				else
					updateHand(i)
					updateScore(i)
				end
			end
		end
	end
end


--[[ src/libs/table_to_string.lua ]]--

-- http://lua-users.org/wiki/TableUtils

function table.val_to_str ( v )
	if "string" == type( v ) then
		v = string.gsub( v, "\n", "\\n" )
		if string.match( string.gsub(v,"[^'\"]",""), '^"+$' ) then
			return "'" .. v .. "'"
		end
		return '"' .. string.gsub(v,'"', '\\"' ) .. '"'
	else
		return "table" == type( v ) and table.tostring( v ) or
			tostring( v )
	end
end

function table.key_to_str ( k )
	if "string" == type( k ) and string.match( k, "^[_%a][_%a%d]*$" ) then
		return k
	else
		return "[" .. table.val_to_str( k ) .. "]"
	end
end

function table.tostring( tbl )
	local result, done = {}, {}
	for k, v in ipairs( tbl ) do
		table.insert( result, table.val_to_str( v ) )
		done[ k ] = true
	end
	for k, v in pairs( tbl ) do
		if not done[ k ] then
			table.insert( result,
				table.key_to_str( k ) .. "=" .. table.val_to_str( v ) )
		end
	end
	return "{" .. table.concat( result, "," ) .. "}"
end


--[[ src/libs/timers.lua ]]--

TIMER = {
	txt = {},
	img = {},
	obj = {},
	func = {}
}

function addImageTimer(u, a, x, y, t, p)
	-- fun√ß√£o pronta pra criar imagem e definir seu timer, requer TIMER.img
	-- -- String u: URL da imagem em atelier801.com
	-- -- String a: Alvo da imagem, como em tfm.exec.addImage()
	-- -- Number x: Coordenada x da imagem
	-- -- Number y: Coordenada y da imagem
	-- -- Number t: Tempo de dura√ß√£o da imagem em milissegundos
	-- -- String p: Para quem ser√° exibida a imagem, se NIL ser√° para todos
	-- -- Return: Number (id da imagem para poder ser removida antes do timer)
	local i = tfm.exec.addImage(u, a, x, y, p)
	if i then
		TIMER.img[i] = os.time()+t
	end
	return i
end

function delImagesTimer(tt)
	-- procura imagens pra apagar, requer TIMER.img
	local apagar = {}
	for i, v in pairs(TIMER.img) do
		if tt and tt+10 < os.time() then
			break
		elseif v < os.time() then
			tfm.exec.removeImage(i)
			table.insert(apagar, i)
		end
	end
	for i=1, #apagar do
		TIMER.img[apagar[i]] = nil
	end
end

function addObjectTimer(o, x, y, a, t, vx, vy, g)
	-- fun√ß√£o pronta pra criar um objeto e definir seu tempo
	-- -- Number o: id de tipo de objeto
	-- -- Number x: coordenada x de cria√ß√£o
	-- -- Number y: coordenada y de cria√ß√£o
	-- -- Number a: √¢ngulo do objeto
	-- -- Number t: tempo de dura√ß√£o do objeto em milissegundos
	-- -- Number vx: velocidade x do objeto
	-- -- Number vy: velocidade y do objeto
	-- -- Boolean g: true se o objeto √© fantasma
	-- -- Return: Number (id do objeto criado para remover manualmente)
	local i = tfm.exec.addShamanObject(o, x, y, a or 0, vx or 0, vy or 0, g)
	TIMER.obj[i] = os.time() + t
	return i
end

function delObjectTimer(tt)
	-- procura objetos pra apagar, requer TIMER.objeto
	local apagar={}
	for i, v in pairs(TIMER.obj) do
		if tt and tt+10 < os.time() then
			break
		elseif v < os.time() then
			tfm.exec.removeObject(i)
			table.insert(apagar, i)
		end
	end
	for i=1, #apagar do
		TIMER.obj[apagar[i]] = nil
	end
end

function addFunctionTimer(f, t, ...)
	-- define uma fun√ß√£o e especifica quando deve ser executada
	-- -- Function f: fun√ß√£o a ser executada
	-- -- Number t: tempo at√© ser executado
	-- -- Os pr√≥ximo valores s√£o par√¢metros da fun√ß√£o enviada
	table.insert(TIMER.func, {exec=f, time=GLOBAL_TIME+t, arg=table.pack(...)})
end

function execFunctionTimer(tt)
	-- procura por fun√ß√µes para executar
	local apagar={}
	for i, v in pairs(TIMER.func) do
		if tt and tt+10 < os.time() then
			break
		elseif v.time < GLOBAL_TIME then
			v.exec(table.unpack(v.arg or {}))
			table.insert(apagar, i)
		end
		--if v.time < os.time() then
		--  v.exec(table.unpack(v.arg or {}))
		--  table.insert(apagar, i)
		--end
	end
	for i=1, #apagar do
		table.remove(TIMER.func, apagar[i])
	end
end

function delTxtTimer(tt)
	-- procura textos pra apagar, requer TIMER.txt
	local apagar = {}
	for i, v in pairs(TIMER.txt) do
		if tt and tt+20 < os.time() then
			break
		elseif v.time < os.time() then
			table.insert(apagar,i)
			ui.removeTextArea(v.id, v.player)
		end
	end
	for i=1, #apagar do
		TIMER.txt[apagar[i]] = nil
	end
end


--[[ src/libs/using_look.lua ]]--

function useFraise(p)
	if tfm.get.room.playerList[p] then
		local look = split(tfm.get.room.playerList[p].look, ",")
		local mouth = split(look[4], "_")
		return mouth[1] == "19"
	end
end

function useFish(p)
	if tfm.get.room.playerList[p] then
		local look = split(tfm.get.room.playerList[p].look, ",")
		local ear = split(look[3], "_")
		return ear[1] == "7"
	end
end

function useTree(p)
	if tfm.get.room.playerList[p] then
		local look = split(tfm.get.room.playerList[p].look, ";")
		return look[1] == "35"
	end
end

function useTotoro(p)
	if tfm.get.room.playerList[p] then
		local look = split(tfm.get.room.playerList[p].look, ";")
		local fur = look[1]
		local moreLook = split(look[2], ",")
		local head = split(moreLook[1], "_")
		local neck = split(moreLook[5], "_")
		return fur == "81" and (head[1] == "171" or neck[1] == "23")
	end
end

function isNaked(p)
	return tfm.get.room.playerList[p] and tfm.get.room.playerList[p].look == "1;0,0,0,0,0,0,0,0,0"
end


--[[ src/libs/util.lua ]]--

function emptyFunc()
end

function nickFormat(p)
	if p:sub(1,1) == "*" then
		return p
	else
		return string.gsub(p:lower(), '%a', function(k) return string.upper(k) end, 1)
	end
end

function nickHashtag(data, doNotNormalize)
	local nickname = data:gmatch('(.-)#[0-9]+$')() or data
	local tag = data:gmatch('#([0-9]+)$')() or '0000'
	nickname = doNotNormalize and nickname or nickname:lower():gsub('%a', string.upper, 1)
	return nickname, tag
end

function nickLength(p)
	local cont = 0
	local tier = {["_"]=3, M=3, m=3, W=3, w=3, i=1, l=1}
	for i=1, #p do
		cont = cont + (tier[p:sub(i,i)] or 2)
	end
	return cont
end

function nickMinifier(p)
	local l = 21
	if nickLength(p) > l then
		local tier = {["_"]=3, M=3, m=3, W=3, w=3, i=1, l=1}
		local cont = 0
		for i=1, #p do
			cont = cont + (tier[p:sub(i,i)] or 2)
			if cont >= l-1 then
				return p:sub(1,i).."."
			end
		end
		return p:sub(1,9).."."
	else
		return p
	end
end

function whichNick(p)
	if tfm.get.room.playerList[nickFormat(p)] then
		return nickFormat(p)
	else
		p = nickHashtag(p)
		local found = {}
		for i, v in pairs(tfm.get.room.playerList) do
			if nickHashtag(i) == p then
				table.insert(found, i)
			end
		end
		if #found == 1 then
			return found[1]
		end
	end
end

function isAdm(p)
	return ADM[p]
end

function roomOwner()
	local n = tfm.get.room.name:match("#unotfm%d+(.*)")
	if n and #n > 3 then
		local arg = split(n, " ")
		arg = split(arg[1], "-")
		arg = split(arg[1], "#")
		return #arg[1] >= 3 and nickFormat(arg[1])
	end
end

function split(t,s)
	-- retorna uma table com a string dividida
	-- -- String t = texto a ser dividido
	-- -- String s = s√≠mbolo de separa√ß√£o (opcional)
	local a={}
	for i,v in string.gmatch(t,string.format("[^%s]+",s or "%s")) do
		table.insert(a,i)
	end
	return a
end

function explosion(id, x, y, vezes, vel)
	-- faz uma mini explos√£o de part√≠culas
	-- -- Number id = id das part√≠culas
	-- -- Number x = coordenada x do centro
	-- -- Number y = coordenada y do centro
	-- -- Number vezes = n√∫mero de part√≠culas
	-- -- Number vel = velocidade m√°xima
	for i=1, vezes do
		tfm.exec.displayParticle(id, x, y, math.random(-vel,vel)/10, math.random(-vel,vel)/10, 0, 0)
	end
end
--[[
function translate(p, k, a, b, c, d, e)
	-- Retorna o texto correspondente √† comunidade do jogador fornecido, requer tabela LANG
	-- -- String p = nome de um jogador
	-- -- String k = chave de tradu√ß√£o
	-- -- Return = String
	local cmm = "en"
	cmm = PLAYER[p] and PLAYER[p].community or "auto"
	cmm = cmm == "auto" and tfm.get.room.playerList[p] and tfm.get.room.playerList[p].community or cmm
	--if tfm.get.room.playerList[p] and tfm.get.room.playerList[p].community then
	--  cmm = tfm.get.room.playerList[p].community
	--end
	return a and string.format(LANG[cmm] and LANG[cmm][k] or LANG.en[k] or ("$" .. k), a, b, c, d, e) or (LANG[cmm] and LANG[cmm][k] or LANG.en[k] or ("$" .. k))
end
]]--

LANGT = {en=1, br=2, fr=3, es=4, ru=5, cn=6, pl=7, hu=8, tr=9}
function translate(p, k, a, b, c, d, e)
	if not k then
		return "#ERROR"
	end
	if not LANG[k] then 
		return "$"..k
	end
	local cmm = PLAYER[p] and PLAYER[p].community or "auto"
	cmm = cmm == "auto" and tfm.get.room.playerList[p] and tfm.get.room.playerList[p].community or cmm
	cmm = LANGT[cmm] or 1
	cmm = (not LANG[k][cmm] or LANG[k][cmm] == "") and 1 or cmm
	return a and string.format(LANG[k][cmm], a, b, c, d, e) or LANG[k][cmm]
end

function translatedChatMessage(k, p, a, b, c, d, e)
	-- Mostra o texto traduzido no chat, requer fun√ß√£o translate()
	-- -- String k = chave de tradu√ß√£o
	-- -- String p = nome de um jogador, se nil ser√° exibido para todos
	if p then
		tfm.exec.chatMessage(translate(p, k, a, b, c, d, e), p)
	else
		for i in pairs(tfm.get.room.playerList) do
			tfm.exec.chatMessage(translate(i, k), i)
		end
	end
end



function newMap()
	local map = CONFIG.music and MUSIC[math.random(#MUSIC)] or MAP[math.random(#MAP)]
	if tfm.get.room.uniquePlayers >= 6 and CONFIG.ranked and not CONFIG.noRules then
		if CONFIG.mapEvent and (math.random() < CONFIG.eventRate or CONFIG.actualTimer >= CONFIG.pityTimer) then
			CONFIG.actualTimer = 0
			map = CONFIG.mapEvent
		else
			CONFIG.actualTimer = CONFIG.actualTimer + 1
		end
	end
	if type(map) == "table" then
		map = map[math.random(#map)]
	end
	tfm.exec.newGame(map)
end

function validMap()
	if tfm.get.room.currentMap:sub(1,1)=="@" and tfm.get.room.xmlMapInfo then
		local str = string.match(tfm.get.room.xmlMapInfo.xml, 'Chair="(.-)"')
		if str then
			return split(str)
		end
	end
end

function quote(p, key, add)
	local find = false
	for i, v in pairs(ROUND.chair) do
		if v.owner == p and v.mode ~= "DELETED" then
			find = true
			break
		end
	end
	if CONFIG.ranked and find then
		for i, v in pairs(tfm.get.room.playerList) do
			tfm.exec.chatMessage(string.format("<v>[%s] <n>%s", p, string.format(translate(i, key), add)), i)
		end
	end
end

function quoteFake(p, msg)
	for i, v in pairs(tfm.get.room.playerList) do
		tfm.exec.chatMessage(string.format("<v>[%s] <n>%s", p, msg), i)
	end
end

function allChairs()
	if ROUND and ROUND.chair then
		local p = 0
		local cont = 0
		for i, v in pairs(ROUND.gameMode) do
			if BOT[nickFormat(i)] then
				p = p + 1
			end
		end
		for i, v in pairs(tfm.get.room.playerList) do
			if i:sub(1,1) ~= "*" then
				p = p + 1
			end
		end
		for i, v in pairs(ROUND.chair) do
			if v.mode == "BUSY" then
				cont = cont + 1
			end
		end
		if cont > 1 and cont == #ROUND.chair or p == cont then
			return true
		end
	end
end

function colorNick(p)
	local color = 0
	if p == OWNER then
		color = 0xFFB677
	elseif isAdm(p) then
		color = 0x77C6FF
	elseif BANNED[p] then
		color = 0xFF7777
	end
	tfm.exec.setNameColor(p, color)
end

function countRules(rules)
	local cont = 0
	for i, v in pairs(rules) do
		if not RULE[i].notCount then
			cont = cont + 1
		end
	end
	return cont
end

function validRoom()
	if ROUND.chair then
		local cont = 0
		for i, v in pairs(ROUND.chair) do
			if v.mode ~= "DELETED" then
				cont = cont + 1
			end
		end
		if cont >= 4 and tfm.get.room.uniquePlayers >= cont and CONFIG.ranked or RANKED then
			return true
		end
	end
end


--[[ src/libs/window.lua ]]--

window = {}
do
	local w = {}
	window.open = function(p, id, ...)
		if p and id and w[id] and not window.isOpened(p, id) then
			w[id].player[p] = w[id].player[p] or {fixed={}, dynamic={}, var={}}
			local fixed = w[id].player[p].fixed
			fixed.txt, fixed.img = w[id].open(p, w[id].player[p].var, ...)
			if w[id].update then
				local dynamic = w[id].player[p].dynamic
				dynamic.txt, dynamic.img = w[id].update(p, w[id].player[p].var, ...)
			end
			w[id].player[p].opened = true
		end
	end
	window.close = function(p, id)
		if p and id and w[id] and window.isOpened(p, id) then
			if w[id].player[p].fixed then
				for i, v in pairs(w[id].player[p].fixed.img or {}) do
					tfm.exec.removeImage(v)
				end
				for i, v in pairs(w[id].player[p].fixed.txt or {}) do
					ui.removeTextArea(v, p)
				end
			end
			if w[id].player[p].dynamic then
				for i, v in pairs(w[id].player[p].dynamic.img or {}) do
					tfm.exec.removeImage(v)
				end
				for i, v in pairs(w[id].player[p].dynamic.txt or {}) do
					ui.removeTextArea(v, p)
				end
			end
			w[id].player[p].dynamic = {}
			w[id].player[p].fixed = {}
			w[id].player[p].opened = false
		end
	end
	window.update = function(p, id, ...)
		if p and id and w[id] and window.isOpened(p, id) then
			if w[id].update then
				if w[id].player[p].dynamic then
					for i, v in pairs(w[id].player[p].dynamic.img or {}) do
						tfm.exec.removeImage(v)
					end
					for i, v in pairs(w[id].player[p].dynamic.txt or {}) do
						ui.removeTextArea(v, p)
					end
				end
				w[id].player[p].dynamic = {}
				local dynamic = w[id].player[p].dynamic
				dynamic.txt, dynamic.img = w[id].update(p, w[id].player[p].var, ...)
			else
				window.close(p, id)
				window.open(p, id, ...)
			end
		end 
	end
	window.isOpened = function(p, id)
		return w[id] and w[id].player[p] and w[id].player[p].opened
	end
	window.create = function(id, func, func2)
		if w[id] then
			for i, v in pairs(w[id].player) do
				window.close(i, id)
			end
		end
		if id and func then
			w[id] = {
				open = func,
				update = func2,
				player = {}
			}
		end
	end
	window.getVars = function(p, id)
		return w[id] and w[id].player[p] and w[id].player[p].var
	end
	closeAll = function(p, exception)
		for i, v in pairs(w) do
			if i~= exception then
				window.close(p, i)
			end
		end
	end
end


--[[ src/cards/ban.lua ]]--

function ban(n)
	ui.removeTextArea(70, ROUND.chair[n].owner)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	if #ROUND.pile > 1 then
		local o = {}
		local pool = {}
		local rand = false
		for i, v in pairs(ROUND.chair[n].hand) do
			table.insert(pool, i)
		end
		for i=1, 3 do
			if #pool >= 1 then
				rand = table.remove(pool, math.random(#pool))
			end
			table.insert(o, rand)
		end
		local player = ROUND.chair[n].owner
		local img = tfm.exec.addImage(IMG.skin[ROUND.portal.side].misc.discover, "!100", ROUND.chair[n].x-50, 20)
		local l = tfm.exec.addImage(IMG.misc.genericLayer, "!1000", 0, 0, player)
		local t1 = showCard(ROUND.chair[n].hand[o[1]], 230, 200, player, "!1000", "big")
		local t2 = showCard(ROUND.chair[n].hand[o[2]], 350, 200, player, "!1000", "big")
		local t3 = showCard(ROUND.chair[n].hand[o[3]], 470, 200, player, "!1000", "big")
		local images = {img, l}
		for i, v in pairs({t1,t2,t3}) do
			for j, w in pairs(v) do
				table.insert(images, w)
			end
		end
		ROUND.chair[n].action = {
			name = "BAN",
			img = images,
			card = o
		}
		resetTimer()
		updateTurnTimer()
	else
		passTurn()
		batataTimer(n)
	end
end

function banCard(deck, card)
	local lastCard = false
	local qtd = 0
	repeat
		local notFind = true
		for i, v in pairs(deck) do
			if card[2] == v[2] then
				qtd = qtd + 1
				lastCard = v
				notFind = false
				table.remove(deck, i)
				break
			end
		end
	until notFind
	return lastCard, qtd
end

function makeBan(n, card)
	for i, v in pairs(ROUND.chair[n].action.img) do
		tfm.exec.removeImage(v)
	end
	ROUND.chair[n].action = false
	local choice = ROUND.chair[n].hand[card]
	local rand = math.random(#ROUND.chair[n].hand)
	banCard(ROUND.pile, choice)
	banCard(ROUND.deck, choice)
	for i, v in pairs(ROUND.chair) do
		if v.mode ~= "DELETED" then
			local c, qtd = banCard(v.hand, choice)
			if c then
				missCard(i, c, 2000)
				local img = tfm.exec.addImage(IMG.misc.burn, "!1000", v.x-25, 20)
				TIMER.img[img] = os.time()+2000
				if #v.hand == 1 then
					v.uno = "uno"
				end
				showCardsGainned(i, -qtd)
				updateHand(i)
				updateScore(i)
			end
		end
	end
	ROUND.gameMode[choice[2]] = nil
	drawTopCard()
	showDeck()
	for i, v in pairs(tfm.get.room.playerList) do
		showRules(i)
	end
	if not isEndGame("BAN") then
		passTurn()
		batataTimer(n)
	end
end


--[[ src/cards/batata.lua ]]--

function batata(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	local image = {tfm.exec.addImage(IMG.misc.genericLayer, "!1000", 0, 0, ROUND.chair[n].owner)}
	local option = {}
	for i, v in pairs(ROUND.chair) do
		if v.mode ~= "DELETED" and i ~= n then
			table.insert(image, tfm.exec.addImage(IMG.misc.target, "!1000", v.x-50, 30))
			option[i] = true
		end
	end
	if ROUND.chair[n].batataFlag then
		unlockChair(ROUND.chair[n].owner, "sack")
	else
		ROUND.chair[n].batataFlag = true
	end
	ROUND.chair[n].action = {
		name = "BATATA",
		img = image,
		op = option,
		func = makeBatata
	}
	resetTimer()
	updateTurnTimer()
end

function makeBatata(n, target)
	if target then
		if not ROUND.chair[target].action or n == target then
			for i, v in pairs(ROUND.chair[n].action.img) do
				tfm.exec.removeImage(v)
			end
			ROUND.chair[n].action = false
			local card = ROUND.topCard.card
			if ROUND.pile[#ROUND.pile][2] == "batata" then
				table.remove(ROUND.pile)
			end
			changeColorBatata(card)
			table.insert(ROUND.chair[target].hand, card)
			missCard(target, card, 2000)
			explosion(5, ROUND.chair[target].x, 100, 5, 10)
			sortHand(ROUND.chair[target].hand)
			showCardsGainned(target, 1)
			updateHand(target)
			updateScore(target)
			if mustBeEliminated(target) then
				eliminate(target)
			end
			ROUND.topCard.card = ROUND.topCard.card2
			drawTopCard()
			passTurn()
			ROUND.chair[n].confuse = false
			batataTimer(n)
			updateShadow(n)
		end
	else
		passTurn()
		ROUND.chair[n].confuse = false
		batataTimer(n)
		updateShadow(n)
	end
end


--[[ src/cards/bomb.lua ]]--

function bomb(n)
	local card = table.remove(ROUND.pile)
	table.insert(ROUND.deck, math.random(#ROUND.deck+1), card)
	showDeck()
	ROUND.topCard.card = ROUND.topCard.card2
	drawTopCard()
	local y = 195 - (#ROUND.deck/108 * 10)
	local img = showCard({"black","bomb"}, 320, y, nil, "!1000")
	for i, v in pairs(img) do
		TIMER.img[v] = os.time()+2000
	end
	ui.addTextArea(90000, string.format("<p align='center'><font size='20px' color='#%s'><b>+", "000000")..#DECK[name], nil, 320, y+76, 51, 60, 0, 0, 0, false)
	ui.addTextArea(90001, string.format("<p align='center'><font size='20px' color='#%s'><b>+", "FFFFFF")..#DECK[name], nil, 320, y+75, 50, 60, 0, 0, 0, false)
	table.insert(TIMER.txt, {time=os.time()+2000, id=90000})
	table.insert(TIMER.txt, {time=os.time()+2000, id=90001})
	passTurn()
	ROUND.chair[n].confuse = false
	batataTimer(n)
	updateShadow(n)
end

function bombInHand(n)
	for i, v in pairs(ROUND.chair[n].hand) do
		if v[2] == "bomb" then
			local c = showCard({"black","bomb"}, ROUND.chair[n].x-25, 20, nil, "!1000")
			for i, v in pairs(c) do
				TIMER.img[v] = os.time()+2000
			end
			return true
		end
	end
end


--[[ src/cards/box.lua ]]--

function box(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	for i, v in pairs(ROUND.chair) do
		if (v.mode == "BUSY" or v.mode == "FREE") then
			giveCard(i, {"black","random",true,true}, true)
			missCard(i, {"black","random",true,true}, 2000)
			if mustBeEliminated(i) then
				eliminate(i)
			end
		end
	end
	passTurn()
	batataTimer(n)
	ROUND.chair[n].confuse = false
end


--[[ src/cards/carousel.lua ]]--

function carousel(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	local hand = ROUND.chair[n].hand
	local aux = {}
	local c = n
	repeat
		c = nextChair(c)
		aux = ROUND.chair[c].hand
		ROUND.chair[c].hand = hand
		hand = aux
		if #ROUND.chair[c].hand == 1 then
			ROUND.chair[c].uno = "uno"
		else
			ROUND.chair[c].uno = nil
		end
		if isIlluminati(c) then
			unlockChair(ROUND.chair[c].owner, "illuminati")
		end
		if #ROUND.chair[c].hand > ROUND.chair[c].maxHand then
			ROUND.chair[c].maxHand = #ROUND.chair[c].hand
		end
		if #ROUND.chair[c].hand > 25 and not ROUND.chair[c].notTrash then
			unlockChair(ROUND.chair[c].owner, "trash")
		end
		if ROUND.chair[c].mode == "BUSY" then
			updateHand(c)
		end
		updateScore(c)
		explosion(3, ROUND.chair[c].x, 135, 3, 20)
		explosion(35, ROUND.chair[c].x, 135, 3, 5)
	until c == n
	if chestInHand(n) then
		unlockChair(ROUND.chair[n].owner, "chest")
	end
	local vel = {RIGHT=12, LEFT=-12}
	for i=-500, 1300, 50 do
		tfm.exec.displayParticle(35, i, math.random(130,150), vel[ROUND.flow], 0, 0, 0)
	end
	passTurn()
	batataTimer(n)
	ROUND.chair[n].confuse = false
end


--[[ src/cards/chair.lua ]]--

function chair(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	local chairs = {}
	local pos = {}
	local name = {}
	for i, v in pairs(ROUND.chair) do
		if v.mode ~= "DELETED" and n ~= i then
			table.insert(chairs, v)
			table.insert(pos, {i, v.x})
			name[i] = v.owner
			if v.action and v.action.name == "SKIP" then
				for j, w in pairs(v.action.img) do
					tfm.exec.removeImage(w)
				end
			end
		end
	end
	ROUND.team[1] = {}
	ROUND.team[2] = {}
	ROUND.team[3] = {}
	ROUND.team[4] = {}
	ROUND.team[5] = {}
	local max = #pos
	for i=1, max do
		local rand = table.remove(pos, math.random(#pos))
		ROUND.chair[rand[1]] = table.remove(chairs)
		ROUND.chair[rand[1]].x = rand[2]
		local c = ROUND.chair[rand[1]]
		if c.owner ~= "" and PLAYER[c.owner] then
			PLAYER[c.owner].chair = rand[1]
		end
		if #c.hand == 1 then
			c.uno = "uno"
		end
	end
	for i, v in pairs(ROUND.chair) do
		if v.mode ~= "DELETED" and i ~= n then
			if v.action and v.action.name == "SKIP" then
				v.action.img = {tfm.exec.addImage(IMG.misc.web, "!1000", v.x-50, 30)}
			end
			if v.owner == name[i] then
				unlockChair(v.owner, "guitar")
			end
			if ROUND.gameMode.team then
				local next = nextChair(i)
				local previous = previousChair(i)
				if v.team == ROUND.chair[next].team or v.team == ROUND.chair[previous].team then
					unlockChair(ROUND.chair[i].owner, "honey")
				end
			end
			drawChair(i)
			updateHand(i)
			explosion(3, v.x, 100, 20, 10)
		end
		if v.mode ~= "DELETED" then
			if v.team then
				ROUND.team[v.team][i] = true
			end
		end
	end
	passTurn()
	batataTimer(n)
	ROUND.chair[n].confuse = false
end


--[[ src/cards/charlotte.lua ]]--

function red(n)
	local find = false
	for i, v in pairs(ROUND.chair[n].hand) do
		if isNumeric(v) then
			find = i
			break
		end
	end
	if find then
		local target = false
		local min = math.huge
		for i, v in pairs(ROUND.chair) do
			if i ~= n and v.mode ~= "DELETED" then
				if #v.hand == 10 then
					target = i
					break
				elseif #v.hand < min then
					min = #v.hand
					target = i
				end
			end
		end
		missCard(target, ROUND.chair[n].hand[find], 2000)
		explosion(5, ROUND.chair[target].x, 100, 5, 10)
		donateByIndex(n, target, find)
		sortHand(ROUND.chair[target].hand)
		if #ROUND.chair[n].hand == 1 then
			ROUND.chair[n].uno = "uno"
		end
		showCardsGainned(n, -1)
		showCardsGainned(target, 1)
		updateScore(n)
		updateScore(target)
		drawTopCard()
		updateHand(n)
		updateHand(target)
		if mustBeEliminated(target) then
			eliminate(target)
		end
	end
	if #ROUND.chair[n].hand == 0 then
		endGame(ROUND.chair[n].owner)
	else
		passTurn()
		batataTimer(n)
	end
end

function blue(n)
	for i, v in pairs(ROUND.chair) do
		if v.mode ~= "DELETED" and n ~= i then
			v.peace = 2
		end
	end
	passTurn()
	batataTimer(n)
	ROUND.chair[n].confuse = false
end

function yellow(n)
	local pool = {}
	for i, v in pairs(ROUND.chair) do
		if v.mode ~= "DELETED" and i ~= n then
			table.insert(pool, i)
		end
	end
	local l = tfm.exec.addImage(IMG.misc.genericLayer, "!1000", 0, 0, player)
	TIMER.img[l] = os.time()+500
	local r = table.remove(pool, math.random(#pool))
	if r then
		local img = tfm.exec.addImage(IMG.misc.thunder, "!1000", ROUND.chair[r].x-50, 15)
		TIMER.img[img] = os.time()+500
		explosion(0, ROUND.chair[r].x, 115, 10, 30)
		tryDraw(r, math.random(3))
	end
	passTurn()
	batataTimer(n)
end

function green(n)
	local target = false
	local min = math.huge
	for i, v in pairs(ROUND.chair) do
		if v.mode ~= "DELETED" then
			if #v.hand < min then
				min = #v.hand
				target = i
			end
		end
	end
	if target and #ROUND.chair[n].hand > min then
		discardCard(n, #ROUND.chair[n].hand-min)
		explosion(9, ROUND.chair[n].x, 135, 5, 10)
		explosion(35, ROUND.chair[n].x, 135, 3, 5)
		explosion(9, ROUND.chair[target].x, 135, 5, 10)
		explosion(35, ROUND.chair[target].x, 135, 3, 5)
	end
	passTurn()
	batataTimer(n)
end

function power(n)
  table.insert(ROUND.pile, table.remove(ROUND.chair[n].hand, math.random(#ROUND.chair[n].hand)))
  ROUND.topCard.card2 = ROUND.topCard.card
  ROUND.topCard.card[2] = "ruleBoss"
  local y = drawTopCard()
  if #ROUND.chair[n].hand == 1 then
    ROUND.chair[n].uno = "uno"
  end
  updateHand(n)
  updateScore(n)
  local fx = {red=13, blue=1, yellow=11, green=9}
  y = 210 - (#ROUND.pile/108 * 10)
  for i=1, 10 do
    local vel = i/10*75
    tfm.exec.displayParticle(fx[ROUND.topCard.card[1]] or 0, 430, y+vel, -math.random(7,15)/5, (vel-37)/20, 0, 0)
  end
  for i=1, 10 do
    local vel = i/10*75
    tfm.exec.displayParticle(fx[ROUND.topCard.card[1]] or 0, 480, y+vel, math.random(7,15)/5, (vel-37)/20, 0, 0)
  end
  ROUND.chair[n].action = {name="PLAY"}
  ROUND.time = GLOBAL_TIME + 10000
  addFunctionTimer(function()
    ROUND.chair[n].action = nil
    _G[ROUND.topCard.card[2]](n)
  end, 1000)
end


--[[ src/cards/clone.lua ]]--

function clone(n)
	local wild = {wild="black", draw4="black", king="black", queen="black", half="black", simon="black"}
	ROUND.topCard.card[2] = ROUND.topCard.card2[2]
	ROUND.topCard.card[1] = wild[ROUND.topCard.card2[2]] or ROUND.topCard.card2[1]
	local y = drawTopCard()
	tfm.exec.displayParticle(12, 455, y+37, 0, 0, 0, 0)
	ROUND.chair[n].action = nil
	_G[ROUND.topCard.card[2]](n)
end


--[[ src/cards/compass.lua ]]--

function compass(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	ROUND.chair[n].compass = ROUND.chair[n].compass or 0
	ROUND.chair[n].compass = ROUND.chair[n].compass + 1
	if ROUND.chair[n].compass < 3 then
		showProgress(n)
		passTurn()
		batataTimer(n)
	elseif ROUND.chair[n].compass == 3 then
		showProgress(n)
		ROUND.chair[n].action = {name="PLAY"}
		ROUND.time = os.time() + 10000
		addFunctionTimer(function()
			ROUND.chair[n].action = nil
			giveCard(n, {ROUND.topCard.card[1],"chest",true,true}, true)
			missCard(n, {ROUND.topCard.card[1],"chest",true,true}, 2000)
			passTurn()
			batataTimer(n)
		end, 2000)
	else
		passTurn()
		batataTimer(n)
	end
	ROUND.chair[n].confuse = false
end

function showProgress(n)
	local text = ROUND.chair[n].compass.."/3"
	ui.addTextArea(7000+n, "<p align='center'><font size='30px' color='#000000'><b>"..text, nil, ROUND.chair[n].x-50, 50, 100, 60, 0, 0, 0, false)
	ui.addTextArea(7010+n, "<p align='center'><font size='30px' color='#FFD800'><b>"..text, nil, ROUND.chair[n].x-52, 48, 100, 60, 0, 0, 0, false)
	table.insert(TIMER.txt, {time=os.time()+2000, id=7000+n})
	table.insert(TIMER.txt, {time=os.time()+2000, id=7010+n})
	explosion(11, ROUND.chair[n].x, 70, 7*ROUND.chair[n].compass, 20)
end

function chest(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	endGame(ROUND.chair[n].owner, ROUND.topCard.card)
	unlockChair(ROUND.chair[n].owner, "falls")
end


--[[ src/cards/confuse.lua ]]--

function confuse(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	ROUND.chair[n].confuse = true
	explosion(14, ROUND.chair[n].x, 100, 20, 20)
	passTurn()
	batataTimer(n)
end


--[[ src/cards/curse.lua ]]--

function curse(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	local pool = {}
	for i, v in pairs(CURSE) do
		table.insert(pool, i)
	end
	local player = 0
	local rand = pool[math.random(#pool)]
	ROUND.curse = rand
	for i, v in pairs(ROUND.chair) do
		if v.mode ~= "DELETED" then
			player = player + 1
		end
		if BOT[v.owner] and BOT[v.owner].eventCurse then
			BOT[v.owner].eventCurse(ROUND.curse)
		end
	end
	ROUND.curseTime = CURSE[rand].turns * player + 2
	ROUND.time = GLOBAL_TIME + 10000
	ROUND.chair[n].action = {
		name = "CURSE",
	}
	--local img = tfm.exec.addImage(IMG.misc.genericLayer, "!1000", 0, 0)
	local img2 = tfm.exec.addImage(CURSE[rand].img, "!1000", 383, 200)
	for i, v in pairs(tfm.get.room.playerList) do
		ui.addTextArea(71, "<p align='center'><font color='#ffffff' size='20px'>"..translate(i, CURSE[rand].desc), i, 150, 245, 500, nil, 1, 1, 0.7, false)
	end
	showDeck()
	for i, v in pairs(ROUND.chair) do
		if v.mode ~= "DELETED" then
			if v.owner ~= "Elisah" then
				v.curse = ROUND.curse
			end
			updateHand(i)
		end
	end
	addFunctionTimer(function()
		ROUND.chair[n].action = false
		ui.removeTextArea(71)
		--tfm.exec.removeImage(img)
		tfm.exec.removeImage(img2)
		passTurn()
		updateShadow(n)
	end, 4000)
end

function showCurse(p)
	PLAYER[p].curseDelay = PLAYER[p].curseDelay or 0
	if ROUND.curse and PLAYER[p].curseDelay < os.time() then
		ui.addTextArea(71, "<p align='center'><font color='#ffffff' size='20px'>"..translate(p, CURSE[ROUND.curse].desc), p, 150, 245, 500, nil, 1, 1, 0.7, false)
		table.insert(TIMER.txt, {time=os.time()+4000, id=71})
		PLAYER[p].curseDelay = os.time()+5000
	end
end

function updateCurse()
	ui.removeTextArea(70)
	if ROUND.curseImage then
		tfm.exec.removeImage(ROUND.curseImage)
	end
	if ROUND.curse and ROUND.curseTime then
		ROUND.curseTime = ROUND.curseTime - 1
		if ROUND.curseTime <= 0 then
			ROUND.curse = nil
			showDeck()
			for i, v in pairs(ROUND.chair) do
				if v.mode ~= "DELETED" then
					v.curse = nil
					updateHand(i)
				end
			end
		else
			ui.addTextArea(70, string.format("<a href='event:curse'><p align='center'><font color='#%s' size='30px'>%s", ROUND.color[2], ROUND.curseTime), nil, 375, 240, 50, nil, 0, 0, 0, false)
			ROUND.curseImage = tfm.exec.addImage(CURSE[ROUND.curse].img, "!1000", 383, 200)
		end
	end
end


--[[ src/cards/custom.lua ]]--

function custom(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	local needChoice = false
	local onlyOthers = false
	local skipAction = false
	local nextPlayer = false
	local previousPlayer = false
	for i, v in pairs(ROUND.custom) do
		if v.who == "CHOOSE" or v.who2 == "CHOOSE" then
			needChoice = true
			if v.action == "DONATE" or v.action == "SWAP" or v.action == "TRADE" then
				if v.who == "YOURSELF" or v.who2 == "YOURSELF" then
					onlyOthers = true
				elseif v.who == "NEXT" or v.who2 == "NEXT" then
					nextPlayer = true
				elseif v.who == "PREVIOUS" or v.who2 == "PREVIOUS" then
					previousPlayer = true
				end
			elseif v.action == "SKIP" then
				skipAction = true
			end
		end
	end
	if needChoice then
		local image = {tfm.exec.addImage(IMG.misc.genericLayer, "!1000", 0, 0, ROUND.chair[n].owner)}
		local options = {}
		local cont = 0
		for i, v in pairs(ROUND.chair) do
			if (v.mode == "BUSY" or v.mode == "FREE") and not(skipAction and v.action) and not(i == n and onlyOthers) and not(nextPlayer and i == nextChair(n)) and not(previousPlayer and i == previousChair(n)) then
				table.insert(image, tfm.exec.addImage(IMG.misc.target, "!1000", v.x-50, 30))
				options[i] = true
				cont = cont + 1
			end
		end
		if cont > 0 then
			ROUND.chair[n].action = {
				name = "CUSTOM",
				img = image,
				op = options,
				func = makeCustomAction,
			}
			resetTimer()
			updateTurnTimer()
		else
			passTurn()
			batataTimer(n)
			ROUND.chair[n].confuse = false
		end
	else
		makeCustomAction(n)
	end
end

function makeCustomAction(n, target)
	if target and ROUND.chair[n].action.op[target] or not target then
		if ROUND.chair[n].action then
			for i, v in pairs(ROUND.chair[n].action.img) do
				tfm.exec.removeImage(v)
			end
			ROUND.chair[n].action = false
		end
		local can = {} -- pode apenas os n√£o alvos
		local pool2 = {} -- pode todos (n√£o doze, √© POOL2)
		local prev = previousChair(n)
		local prox = nextChair(n)
		local yourself = n
		local sort = 0
		local returnedValues = {}
		for i, v in pairs(ROUND.chair) do
			if v.mode ~= "DELETED" then
				can[i] = true
				table.insert(pool2, i)
				returnedValues[i] = {0, 0, 0, 0, 0}
			end
		end
		for i, v in pairs(ROUND.custom) do
			if v.who == "YOURSELF" or v.who2 == "YOURSELF" then
				can[n] = false
			elseif v.who == "CHOOSE" or v.who2 == "CHOOSE" and target then
				can[target] = false
			elseif v.who == "NEXT" or v.who2 == "NEXT" then
				can[prox] = false
			elseif v.who == "PREVIOUS" or v.who2 == "PREVIOUS" then
				can[prev] = false
			elseif v.who == "RANDOM" then
				sort = 1
			elseif v.who == "RANDOM2" then
				sort = 2
			elseif v.who == "RANDOM3" then
				sort = 3
			end
		end
		local pool = {}
		for i, v in pairs(can) do
			if v then
				table.insert(pool, i)
			end
		end
		local rand = {}
		local randomTarget = false
		if sort == 1 and #pool2 > 0 then
			randomTarget = table.remove(pool2, math.random(#pool2))
		else
			for i=1, sort do
				if #pool > 0 then
					table.insert(rand, table.remove(pool, math.random(#pool)))
				else
					break
				end
			end
		end
		local t = {}
		t.yourself = yourself
		t.target = target
		t.prev = prev
		t.prox = prox
		t.randomTarget = randomTarget
		t.rand = rand
		if target then
			local img = tfm.exec.addImage(IMG.misc.thunder, "!1000", ROUND.chair[target].x-50, 15)
			TIMER.img[img] = os.time()+500
		end
		for i, v in pairs(ROUND.custom) do
			if customEffects[v.action] then
				customEffects[v.action](v, i, t, returnedValues)
			end
		end
		isEndGame()
		ROUND.chair[n].confuse = false
		passTurn()
		batataTimer(n)
	end
end

customEffects = {
	DRAW = function(action, num, targets, returnedValues)
		local unique = {YOURSELF=targets.yourself, NEXT=targets.prox, PREVIOUS=targets.prev, CHOOSE=targets.target, RANDOM=targets.randomTarget}
		if unique[action.who] then
			makeDraw(unique[action.who], action, num, returnedValues)
		elseif action.who == "ALL" then
			for i, v in pairs(ROUND.chair) do
				if v.mode ~= "DELETED" then
					makeDraw(i, action, num, returnedValues)
				end
			end
		elseif action.who == "OTHERS" then
			for i, v in pairs(ROUND.chair) do
				if v.mode ~= "DELETED" and i ~= targets.yourself then
					makeDraw(i, action, num, returnedValues)
				end
			end
		elseif action.who == "RANDOM2" then
			makeDraw(targets.rand[1], action, num, returnedValues)
			makeDraw(targets.rand[2], action, num, returnedValues)
		elseif action.who == "RANDOM3" then
			makeDraw(targets.rand[1], action, num, returnedValues)
			makeDraw(targets.rand[2], action, num, returnedValues)
			makeDraw(targets.rand[3], action, num, returnedValues)
		end
	end,
	ELIMINATE = function(action, num, targets, returnedValues)
		local unique = {YOURSELF=targets.yourself, NEXT=targets.prox, PREVIOUS=targets.prev, CHOOSE=targets.target, RANDOM=targets.randomTarget}
		if unique[action.who] then
			eliminate(unique[action.who], false, true)
		elseif action.who == "ALL" then
			for i, v in pairs(ROUND.chair) do
				if v.mode ~= "DELETED" then
					eliminate(i, false, true)
				end
			end
		elseif action.who == "OTHERS" then
			for i, v in pairs(ROUND.chair) do
				if v.mode ~= "DELETED" and i ~= targets.yourself then
					eliminate(i, false, true)
				end
			end
		elseif action.who == "RANDOM2" then
			eliminate(targets.rand[1], false, true)
			eliminate(targets.rand[2], false, true)
		elseif action.who == "RANDOM3" then
			eliminate(targets.rand[1], false, true)
			eliminate(targets.rand[2], false, true)
			eliminate(targets.rand[3], false, true)
		end
	end,
	SKIP = function(action, num, targets, returnedValues)
		local unique = {YOURSELF=targets.yourself, NEXT=targets.prox, PREVIOUS=targets.prev, CHOOSE=targets.target, RANDOM=targets.randomTarget}
		if unique[action.who] then
			makeSkip(unique[action.who])
		elseif action.who == "ALL" then
			for i, v in pairs(ROUND.chair) do
				if v.mode ~= "DELETED" then
					makeSkip(i)
				end
			end
		elseif action.who == "OTHERS" then
			for i, v in pairs(ROUND.chair) do
				if v.mode ~= "DELETED" and i ~= targets.yourself then
					makeSkip(i)
				end
			end
		elseif action.who == "RANDOM2" then
			makeSkip(targets.rand[1])
			makeSkip(targets.rand[2])
		elseif action.who == "RANDOM3" then
			makeSkip(targets.rand[1])
			makeSkip(targets.rand[2])
			makeSkip(targets.rand[3])
		end
	end,
	TRADE = function(action, num, targets, returnedValues)
		local unique = {YOURSELF=targets.yourself, NEXT=targets.prox, PREVIOUS=targets.prev, CHOOSE=targets.target, RANDOM=targets.randomTarget}
		if unique[action.who] and unique[action.who2] then
			makeCustomTrade(unique[action.who], unique[action.who2])
		end
	end,
	SWAP = function(action, num, targets, returnedValues)
		local unique = {YOURSELF=targets.yourself, NEXT=targets.prox, PREVIOUS=targets.prev, CHOOSE=targets.target, RANDOM=targets.randomTarget}
		local index = {YOURSELF="yourself", NEXT="prox", PREVIOUS="prev", CHOOSE="target", RANDOM="randomTarget"}
		if unique[action.who] and unique[action.who2] then
			makeSwap(unique[action.who], unique[action.who2])
			local temp = targets[index[action.who]]
			targets[index[action.who]] = targets[index[action.who2]]
			targets[index[action.who2]] = temp
		end
	end,
	SHOW = function(action, num, targets, returnedValues)
		local unique = {YOURSELF=targets.yourself, NEXT=targets.prox, PREVIOUS=targets.prev, CHOOSE=targets.target, RANDOM=targets.randomTarget}
		if unique[action.who] then
			customShow(unique[action.who], action, num, returnedValues)
		elseif action.who == "ALL" then
			for i, v in pairs(ROUND.chair) do
				if v.mode ~= "DELETED" then
					customShow(i, action, num, returnedValues)
				end
			end
		elseif action.who == "OTHERS" then
			for i, v in pairs(ROUND.chair) do
				if v.mode ~= "DELETED" and i ~= targets.yourself then
					customShow(i, action, num, returnedValues)
				end
			end
		elseif action.who == "RANDOM2" then
			customShow(targets.rand[1], action, num, returnedValues)
			customShow(targets.rand[2], action, num, returnedValues)
		elseif action.who == "RANDOM3" then
			customShow(targets.rand[1], action, num, returnedValues)
			customShow(targets.rand[2], action, num, returnedValues)
			customShow(targets.rand[3], action, num, returnedValues)
		end
	end,
	DISCARD = function(action, num, targets, returnedValues)
		local unique = {YOURSELF=targets.yourself, NEXT=targets.prox, PREVIOUS=targets.prev, CHOOSE=targets.target, RANDOM=targets.randomTarget}
		if unique[action.who] then
			customDiscard(unique[action.who], action, num, returnedValues)
		elseif action.who == "ALL" then
			for i, v in pairs(ROUND.chair) do
				if v.mode ~= "DELETED" then
					customDiscard(i, action, num, returnedValues)
				end
			end
		elseif action.who == "OTHERS" then
			for i, v in pairs(ROUND.chair) do
				if v.mode ~= "DELETED" and i ~= targets.yourself then
					customDiscard(i, action, num, returnedValues)
				end
			end
		elseif action.who == "RANDOM2" then
			customDiscard(targets.rand[1], action, num, returnedValues)
			customDiscard(targets.rand[2], action, num, returnedValues)
		elseif action.who == "RANDOM3" then
			customDiscard(targets.rand[1], action, num, returnedValues)
			customDiscard(targets.rand[2], action, num, returnedValues)
			customDiscard(targets.rand[3], action, num, returnedValues)
		end
	end,
	DONATE = function(action, num, targets, returnedValues)
		local unique = {YOURSELF=targets.yourself, NEXT=targets.prox, PREVIOUS=targets.prev, CHOOSE=targets.target, RANDOM=targets.randomTarget}
		if unique[action.who] and unique[action.who2] then
			makeCustomDonate(unique[action.who], unique[action.who2], action, num, returnedValues)
		end
	end,
}

function makeCustomDonate(n, m, action, num, returnedValues)
	local unt = action.amount:match("^#(%d)$")
	local ret = action.amount:match("^%&(%d)$")
	local x, y = action.amount:match("^(%d)%-(%d)$")
	if n and m then
		if unt then
			returnedValues[n][num] = donateUntil(n, m, tonumber(unt), action.condition)
		elseif ret then
			returnedValues[n][num] = donateCommon(n, m, returnedValues[n][tonumber(ret)], action.condition)
		elseif x and y then
			returnedValues[n][num] = donateCommon(n, m, math.random(tonumber(x), tonumber(y)), action.condition)
		elseif tonumber(action.amount) then
			returnedValues[n][num] = donateCommon(n, m, tonumber(action.amount), action.condition)
		end
		updateScore(n)
		updateScore(m)
		drawTopCard()
		updateHand(n)
		updateHand(m)
	end
end

function donateCommon(n, m, qtd, mode)
	if ROUND.chair[n].mode ~= "DELETED" and ROUND.chair[m].mode ~= "DELETED" and qtd > 0 then
		local cont = 0
		local card = false
		for i=1, qtd do
			local pool = resultCards(ROUND.chair[n].hand, mode)
			card = ROUND.chair[n].hand[pool]
			if #pool > 0 then
				donateByIndex(n, m, pool[math.random(#pool)])
				cont = cont + 1
			else
				break
			end
		end
		sortHand(ROUND.chair[m].hand)
		if cont > 0 then
			missCard(m, cont == 1 and card, 2000)
			explosion(5, ROUND.chair[m].x, 100, 5, 10)
			showCardsGainned(n, -cont)
			showCardsGainned(m, cont)
		end
		if mustBeEliminated(n) then
			eliminate(n)
		end
		return cont
	end
	return qtd
end

function donateUntil(n, m, qtd, mode)
	if ROUND.chair[n].mode ~= "DELETED" and ROUND.chair[m].mode ~= "DELETED" and qtd < #ROUND.chair[n].hand then
		local discarted = #ROUND.chair[n].hand - qtd
		local cont = 0
		local card = false
		for i=1, discarted do
			local pool = resultCards(ROUND.chair[n].hand, mode)
			card = ROUND.chair[n].hand[pool]
			if #pool > 0 then
				donateByIndex(n, m, pool[math.random(#pool)])
				cont = cont + 1
			else
				break
			end
		end
		sortHand(ROUND.chair[m].hand)
		if cont > 0 then
			missCard(m, cont == 1 and card, 2000)
			explosion(5, ROUND.chair[m].x, 100, 5, 10)
			showCardsGainned(n, -cont)
			showCardsGainned(m, cont)
		end
		if mustBeEliminated(n) then
			eliminate(n)
		end
		return cont
	end
	return 0
end

function donateByIndex(n, m, card)
	local discarted = table.remove(ROUND.chair[n].hand, card)
	table.insert(ROUND.chair[m].hand, discarted)
end

function customDiscard(n, action, num, returnedValues)
	local unt = action.amount:match("^#(%d)$")
	local ret = action.amount:match("^%&(%d)$")
	local x, y = action.amount:match("^(%d)%-(%d)$")
	if n then
		if unt then
			returnedValues[n][num] = discardUntil(n, tonumber(unt), action.condition)
			mimicDiscard(n, returnedValues[n][num])
		elseif ret then
			returnedValues[n][num] = discardCommon(n, returnedValues[n][tonumber(ret)], action.condition)
			mimicDiscard(n, returnedValues[n][num])
		elseif x and y then
			returnedValues[n][num] = discardCommon(n, math.random(tonumber(x), tonumber(y)), action.condition)
			mimicDiscard(n, returnedValues[n][num])
		elseif tonumber(action.amount) then
			returnedValues[n][num] = discardCommon(n, tonumber(action.amount), action.condition)
			mimicDiscard(n, returnedValues[n][num])
		end
		updateScore(n)
		drawTopCard()
		updateHand(n)
	end
end

function discardCommon(n, qtd, mode)
	if ROUND.chair[n].mode ~= "DELETED" and qtd > 0 then
		local cont = 0
		local card = false
		for i=1, qtd do
			local pool = resultCards(ROUND.chair[n].hand, mode)
			card = ROUND.chair[n].hand[pool]
			if #pool > 0 then
				discardByIndex(n, pool[math.random(#pool)])
				cont = cont + 1
			else
				break
			end
		end
		if cont == 1 then
			missCard(n, card, 2000)
		end
		showCardsGainned(n, -cont)
		return cont
	end
	return qtd
end

function discardUntil(n, qtd, mode)
	if ROUND.chair[n].mode ~= "DELETED" and qtd < #ROUND.chair[n].hand then
		local discarted = #ROUND.chair[n].hand - qtd
		local cont = 0
		local card = false
		for i=1, discarted do
			local pool = resultCards(ROUND.chair[n].hand, mode)
			card = ROUND.chair[n].hand[pool]
			if #pool > 0 then
				discardByIndex(n, pool[math.random(#pool)])
				cont = cont + 1
			else
				break
			end
		end
		if cont == 1 then
			missCard(n, card, 2000)
		end
		showCardsGainned(n, -cont)
		return cont
	end
	return 0
end

function discardByIndex(n, card)
	local discarted = table.remove(ROUND.chair[n].hand, card)
	discarted.lock = false
	if not discarted[3] then
		table.insert(ROUND.pile, 1, discarted)
	end
end

function resultCards(hand, mode)
	local pool = {}
	local comp = {RED="red", BLUE="blue", YELLOW="yellow", GREEN="green", WILD="black", SAME=ROUND.topCard.card[1]}
	for i, v in pairs(hand) do
		if mode == "ANY" or v[1] == comp[mode] or mode == "NUMBER" and isNumeric(v) or mode == "ACTION" and not isNumeric(v) then
			table.insert(pool, i)
		end
	end
	return pool
end

function customShow(n, action, num, returnedValues)
	if n and ROUND.chair[n].mode ~= "DELETED" then
		local pool = resultCards(ROUND.chair[n].hand, action.condition)
		if #pool > 0 then
			missCard(n, ROUND.chair[n].hand[pool[math.random(#pool)]], 2000)
			returnedValues[n][num] = 1
		end
	end
end

function makeSwap(n, m)
	if n and m and ROUND.chair[n].mode ~= "DELETED" and ROUND.chair[m].mode ~= "DELETED" then
		for j, w in pairs(ROUND.chair[n].skin.img) do
			tfm.exec.removeImage(w)
		end
		for j, w in pairs(ROUND.chair[m].skin.img) do
			tfm.exec.removeImage(w)
		end
		local temp = ROUND.chair[n].x
		ROUND.chair[n].x = ROUND.chair[m].x
		ROUND.chair[m].x = temp
		temp = ROUND.chair[n]
		ROUND.chair[n] = ROUND.chair[m]
		ROUND.chair[m] = temp
		if ROUND.gameMode.team then
			ROUND.team[1] = {}
			ROUND.team[2] = {}
			ROUND.team[3] = {}
			ROUND.team[4] = {}
			ROUND.team[5] = {}
			for i, v in pairs(ROUND.chair) do
				ROUND.team[v.team][i] = true
			end
		end
		for i, v in pairs({n, m}) do
			tfm.exec.movePlayer(ROUND.chair[v].owner, ROUND.chair[v].x, 110)
			if #ROUND.chair[v].hand == 1 then
				ROUND.chair[v].uno = "uno"
			end
			drawChair(v)
			explosion(3, ROUND.chair[v].x, 100, 20, 10)
		end
	end
end

function makeCustomTrade(n, target)
	if n and target and ROUND.chair[n].mode ~= "DELETED" and ROUND.chair[target].mode ~= "DELETED" then
		local aux = ROUND.chair[n].hand
		ROUND.chair[n].hand = ROUND.chair[target].hand
		ROUND.chair[target].hand = aux
		updateHand(n)
		updateHand(target)
		if #ROUND.chair[target].hand == 1 then
			ROUND.chair[target].uno = "uno"
		else
			ROUND.chair[target].uno = nil
		end
		if #ROUND.chair[n].hand == 1 then
			ROUND.chair[n].uno = "uno"
		else
			ROUND.chair[n].uno = nil
		end
		if isIlluminati(n) then
			unlockChair(ROUND.chair[n].owner, "illuminati")
		end
		if isIlluminati(target) then
			unlockChair(ROUND.chair[target].owner, "illuminati")
		end
		if #ROUND.chair[n].hand > ROUND.chair[n].maxHand then
			ROUND.chair[n].maxHand = #ROUND.chair[n].hand
		end
		if #ROUND.chair[target].hand > ROUND.chair[target].maxHand then
			ROUND.chair[target].maxHand = #ROUND.chair[target].hand
		end
		updateScore(n)
		updateScore(target)
		explosion(3, ROUND.chair[n].x, 135, 5, 20)
		explosion(3, ROUND.chair[target].x, 135, 5, 20)
		tfm.exec.displayParticle(37, ROUND.chair[target].x, 90, 0, 0, 0, 0)
		tfm.exec.displayParticle(37, ROUND.chair[ROUND.turn].x, 90, 0, 0, 0, 0)
	end
end

function makeSkip(n)
	if n and ROUND.chair[n].mode ~= "DELETED" and not ROUND.chair[n].action then
		ROUND.chair[n].action = {
			name = "SKIP",
			img = {tfm.exec.addImage(IMG.misc.web, "!1000", ROUND.chair[n].x-50, 30)}
		}
		explosion(1, ROUND.chair[n].x, 80, 20, 30)
	end
end

function makeDraw(n, action, num, returnedValues)
	local unt = action.amount:match("^#(%d)$")
	local ret = action.amount:match("^%&(%d)$")
	local x, y = action.amount:match("^(%d)%-(%d)$")
	if n then
		if unt then
			returnedValues[n][num] = drawUntil(n, tonumber(unt))
		elseif ret then
			returnedValues[n][num] = commonDraw(n, returnedValues[n][tonumber(ret)])
		elseif x and y then
			returnedValues[n][num] = commonDraw(n, math.random(tonumber(x), tonumber(y)))
		elseif tonumber(action.amount) then
			returnedValues[n][num] = commonDraw(n, tonumber(action.amount))
		end
	end
end

function drawUntil(n, qtd)
	if ROUND.chair[n].mode ~= "DELETED" and qtd > #ROUND.chair[n].hand then
		local drawed = qtd - #ROUND.chair[n].hand
		tryDraw(n, drawed)
		return drawed
	end
	return 0
end

function commonDraw(n, qtd)
	if ROUND.chair[n].mode ~= "DELETED" and qtd > 0 then
		tryDraw(n, qtd)
	end
	return qtd
end


--[[ src/cards/death.lua ]]--

function death(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	if not ROUND.subitDeath then
		tfm.exec.addPhysicObject(0, 400, 530, {height=10, width=3000})
		ROUND.cloud.obj = tfm.exec.addShamanObject(63, 400, 500, 0, 2, 0, false)
		ROUND.cloud.delay = os.time()+5000
		ROUND.subitDeath = true
		tfm.exec.addImage(IMG.misc.cloud, "#"..ROUND.cloud.obj, -1200, -500)
		showDeck()
		for i=1, 10 do
			tfm.exec.displayParticle(3, 345, 210, math.random(-20,20)/10, math.random(-20,20)/10, 0, 0)
		end
	end
	passTurn()
	batataTimer(n)
	ROUND.chair[n].confuse = false
end


--[[ src/cards/donate.lua ]]--

function gift(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	local image = {tfm.exec.addImage(IMG.misc.genericLayer, "!1000", 0, 0, ROUND.chair[n].owner)}
	local option = {}
	for i, v in pairs(ROUND.chair) do
		if v.owner ~= "Papaille" and (v.mode == "BUSY" or v.mode == "FREE") and i ~= n then
			table.insert(image, tfm.exec.addImage(IMG.misc.target, "!1000", v.x-50, 30))
			option[i] = true
		end
	end
	ROUND.chair[n].action = {
		name = "GIFT",
		img = image,
		op = option,
		func = makeGift
	}
	resetTimer()
	updateTurnTimer()
end

function makeGift(n, target, qtd)
	qtd = qtd or 1
	if target then
		local temp = {}
		if n ~= target and ROUND.chair[target].mode ~= "DELETED" and (ROUND.chair[target].owner ~= "Papaille" or ROUND.chair[n].owner == "Jingle") then
			if ROUND.chair[n].action then
				for i, v in pairs(ROUND.chair[n].action.img) do
					tfm.exec.removeImage(v)
				end
			end
			ROUND.chair[n].action = false
			if BOT[ROUND.chair[target].owner] and BOT[ROUND.chair[target].owner].eventDonate then
				BOT[ROUND.chair[target].owner].eventDonate(ROUND.chair[n].owner)
			end
			if qtd >= 5 then
				unlockChair(ROUND.chair[n].owner, "heart")
			end
			if qtd > #ROUND.chair[n].hand then
				qtd = #ROUND.chair[n].hand
			end
			for i=1, qtd do
				local rand = math.random(#ROUND.chair[n].hand)
				temp = table.remove(ROUND.chair[n].hand, rand)
				if temp[2] == "draw4" then
					unlockChair(ROUND.chair[n].owner, "coca")
				end
				discardEffect(n, rand)
				table.insert(ROUND.chair[target].hand, temp)
			end
			missCard(target, qtd == 1 and temp, 2000)
			explosion(5, ROUND.chair[target].x, 100, 5, 10)
			sortHand(ROUND.chair[target].hand)
			ROUND.chair[target].uno = nil
			ROUND.chair[target].loveList = ROUND.chair[target].loveList or {}
			table.insert(ROUND.chair[target].loveList, ROUND.chair[n].owner)
			updateHand(n)
			updateHand(target)
			if #ROUND.chair[n].hand == 1 then
				ROUND.chair[n].uno = "uno"
			end
			if isIlluminati(target) then
				unlockChair(ROUND.chair[target].owner, "illuminati")
			end
			if #ROUND.chair[target].hand > ROUND.chair[target].maxHand then
				ROUND.chair[target].maxHand = #ROUND.chair[target].hand
			end
			if #ROUND.chair[target].hand > 25 and not ROUND.chair[target].notTrash then
				unlockChair(ROUND.chair[target].owner, "trash")
			end
			if ROUND.chair[n].loveList then
				for i, v in pairs(ROUND.chair[n].loveList) do
					if v == ROUND.chair[target].owner then
						unlockChair(ROUND.chair[n].owner, "kiss")
						break
					end
				end
			end
			updateScore(n)
			updateScore(target)
			showCardsGainned(n, -qtd)
			showCardsGainned(target, qtd)
			if mustBeEliminated(target) then
				eliminate(target)
				unlockChair(ROUND.chair[n].owner, "snowman")
			end
			if #ROUND.chair[n].hand == 0 then
				local name = ROUND.chair[n].owner
				endGame(ROUND.chair[n].owner)
				unlockChair(name, "gift")
			else
				passTurn()
				ROUND.chair[n].confuse = false
				batataTimer(n)
				updateShadow(n)
			end
		end
	else
		if ROUND.chair[n].action then
			for i, v in pairs(ROUND.chair[n].action.img) do
				tfm.exec.removeImage(v)
			end
			ROUND.chair[n].action = false
		end
		passTurn()
		batataTimer(n)
		updateShadow(n)
	end
end


--[[ src/cards/draw2.lua ]]--

function draw2(n)
	if ROUND.gameMode.nocombo then
		ROUND.turn = nextChair(ROUND.turn)
		local target = ROUND.turn
		passTurn()
		batataTimer(n)
		ROUND.chair[n].confuse = false
		tryDraw(target, 2)
		local img = tfm.exec.addImage(ROUND.flow == "RIGHT" and IMG.misc.right or IMG.misc.left, "!1000", ROUND.chair[target].x-50, 30)
		TIMER.img[img] = os.time()+1000
		explosion(35, ROUND.chair[target].x, 80, 50, 10)
	else
		if ROUND.accumulated then
			ROUND.accumulated.cards = ROUND.accumulated.cards + 2
			ROUND.accumulated.player[ROUND.chair[n].owner] = true
			addBlockPoint(ROUND.chair[n].owner)
		else
			ROUND.accumulated = {allowed = {draw2=true}, player = {}, cards = 2}
			ROUND.accumulated.player[ROUND.chair[n].owner] = true
			if ROUND.gameMode.supercombo then
				ROUND.accumulated.allowed = {draw2=true, draw4=true, draw99=true, shield=true}
			end
		end
		showAccumulated()
		passTurn()
		batataTimer(n)
		ROUND.chair[n].confuse = false
	end
end


--[[ src/cards/draw4.lua ]]--

function draw4(n, hand)
	ui.removeTextArea(2)
	ui.removeTextArea(70, ROUND.chair[n].owner)
	local target = nextChair(n)
	if ROUND.chair[target].action and ROUND.chair[target].action.name == "SKIP" then
		unlockChair(ROUND.chair[n].owner, "pumpkin")
	end
	if not ROUND.gameMode.nochallenge or not ROUND.gameMode.nocombo then
		if ROUND.accumulated then
			ROUND.accumulated.cards = ROUND.accumulated.cards + 4
			ROUND.accumulated.player[ROUND.chair[n].owner] = true
			addBlockPoint(ROUND.chair[n].owner)
			--
			if not hand then
				hand = {}
				for i, v in pairs(ROUND.chair[n].hand) do
					table.insert(hand, v)
				end
			end
			--
			ROUND.accumulated.hand = hand
			ROUND.accumulated.p = ROUND.chair[n].owner
			ROUND.accumulated.n = n
		else
			local hand = {}
			for i, v in pairs(ROUND.chair[n].hand) do
				table.insert(hand, v)
			end
			ROUND.accumulated = {allowed = {draw4=true}, player = {}, cards = 4, ["n"]=n, p=ROUND.chair[n].owner, ["hand"]=hand}
			ROUND.accumulated.player[ROUND.chair[n].owner] = true
			if ROUND.gameMode.supercombo then
				ROUND.accumulated.allowed = {draw2=true, draw4=true, draw99=true, shield=true}
			elseif ROUND.gameMode.nocombo then
				ROUND.accumulated.allowed.draw4 = nil
			end
		end
	end
	local player = ROUND.chair[n].owner
	local img = tfm.exec.addImage(IMG.skin[ROUND.portal.side].misc.discoverWild, "!1000", ROUND.chair[n].x-50, 20)
	local l = tfm.exec.addImage(IMG.misc.genericLayer, "!1000", 0, 0, player)
	local t1 = showCard({"red","draw4"}, 170, 200, player, "!1000", "big")
	local t2 = showCard({"blue","draw4"}, 290, 200, player, "!1000", "big")
	local t3 = showCard({"yellow","draw4"}, 410, 200, player, "!1000", "big")
	local t4 = showCard({"green","draw4"}, 530, 200, player, "!1000", "big")
	local images = {img, l}
	for i, v in pairs({t1,t2,t3,t4}) do
		for j, w in pairs(v) do
			table.insert(images, w)
		end
	end
	if ROUND.topCard.card2 and (ROUND.topCard.card2[2] == "wild" or ROUND.topCard.card2[2] == "draw4") and validRoom() then
		if PLAYER[player].pencil then
			PLAYER[player].pencil = PLAYER[player].pencil + 1
		else
			PLAYER[player].pencil = 0
		end
		if PLAYER[player].pencil >= 100 then
			unlockChair(player, "pencil")
		end
	end
	ROUND.chair[n].action = {
		name = "WILD",
		img = images,
		plusfour = true,
	}
	for i, v in pairs(ROUND.chair) do
		if v.skin.id == "illuminati" then
			local img = tfm.exec.addImage(IMG.misc.illuminatiEye, "_1000", v.x-50, 20)
			TIMER.img[img] = os.time()+500
		end
	end
	resetTimer()
	updateTurnTimer()
end


--[[ src/cards/draw99.lua ]]--

function draw99(n)
	ui.removeTextArea(2)
	ui.removeTextArea(70, ROUND.chair[n].owner)
	if not ROUND.gameMode.nochallenge or not ROUND.gameMode.nocombo then
		if ROUND.accumulated then
			ROUND.accumulated.cards = ROUND.accumulated.cards + 99
			ROUND.accumulated.player[ROUND.chair[n].owner] = true
			addBlockPoint(ROUND.chair[n].owner)
			if not hand then
				hand = {}
				for i, v in pairs(ROUND.chair[n].hand) do
					table.insert(hand, v)
				end
			end
			ROUND.accumulated.hand = hand
			ROUND.accumulated.p = ROUND.chair[n].owner
			ROUND.accumulated.n = n
		else
			local hand = {}
			for i, v in pairs(ROUND.chair[n].hand) do
				table.insert(hand, v)
			end
			ROUND.accumulated = {allowed = {draw99=true}, player = {}, cards = 99, ["n"]=n, p=ROUND.chair[n].owner, ["hand"]=hand}
			ROUND.accumulated.player[ROUND.chair[n].owner] = true
			if ROUND.gameMode.supercombo then
				ROUND.accumulated.allowed = {draw2=true, draw4=true, draw99=true, shield=true}
			elseif ROUND.gameMode.nocombo then
				ROUND.accumulated.allowed.draw99 = nil
			end
		end
	end
	local player = ROUND.chair[n].owner
	local img = tfm.exec.addImage(IMG.skin[ROUND.portal.side].misc.discoverWild, "!1000", ROUND.chair[n].x-50, 20)
	local l = tfm.exec.addImage(IMG.misc.genericLayer, "!1000", 0, 0, player)
	local t1 = showCard({"red","draw99"}, 170, 200, player, "!1000", "big")
	local t2 = showCard({"blue","draw99"}, 290, 200, player, "!1000", "big")
	local t3 = showCard({"yellow","draw99"}, 410, 200, player, "!1000", "big")
	local t4 = showCard({"green","draw99"}, 530, 200, player, "!1000", "big")
	local images = {img, l}
	for i, v in pairs({t1,t2,t3,t4}) do
		for j, w in pairs(v) do
			table.insert(images, w)
		end
	end
	if ROUND.topCard.card2 and (ROUND.topCard.card2[2] == "wild" or ROUND.topCard.card2[2] == "draw4") and validRoom() then
		if PLAYER[player].pencil then
			PLAYER[player].pencil = PLAYER[player].pencil + 1
		else
			PLAYER[player].pencil = 0
		end
		if PLAYER[player].pencil >= 100 then
			unlockChair(player, "pencil")
		end
	end
	ROUND.chair[n].action = {
		name = "WILD",
		img = images,
		plusfour = true,
	}
	resetTimer()
	updateTurnTimer()
end


--[[ src/cards/emote.lua ]]--

function imitate(n)
	ui.removeTextArea(70)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	local pool = {0, 1, 2, 3, 4, 5, 6, 7}
	local rand = pool[math.random(#pool)]
	local image = {tfm.exec.addImage(IMG.emote[rand], "!1000", 350, 190)}
	ROUND.chair[n].action = {
		name = "IMITATE",
		img = image,
		action = rand,
		player = {}
	}
	ROUND.time = GLOBAL_TIME + 10000
	for i, v in pairs(ROUND.chair) do
		if v.mode == "BUSY" then
			ui.addTextArea(19, "<p align='center'><font color='#ffffff'>"..translate(v.owner, "WARN_IMITATE"), v.owner, 100, 305, 600, nil, 0, 0, 0, false)
		end
	end
	updateTurnTimer()
	if BOT.Charlotte.sleep and rand == 6  then
		eventEmotePlayed("Charlotte", 6)
	end
end

function emoteVerify(final)
	local name = {}
	local actual = ROUND.turn
	for i, v in pairs(ROUND.chair) do
		if v.mode ~= "DELETED" and not ROUND.chair[ROUND.turn].action.player[i] then
			table.insert(name, i)
		end
	end
	local qtd = #name == 1 and 2 or 1
	if final or #name == 1 then
		if ROUND.turn and ROUND.chair[ROUND.turn] then
			for i, v in pairs(ROUND.chair[ROUND.turn].action.img) do
				tfm.exec.removeImage(v)
			end
			ROUND.chair[ROUND.turn].action = nil
		end
		for j, w in pairs(name) do
			local img = tfm.exec.addImage(IMG.misc.fail, "!1000", ROUND.chair[w].x-50, 30)
			TIMER.img[img] = os.time()+2000
			if not isCursed(w, "ice") then
				if isCursed(w, "thorn") then
					eliminate(w)
				else
					drawCard(w, qtd)
					if mustBeEliminated(w) then
						eliminate(w)
					end
				end
				mimicDraw(w, qtd)
			end
		end
		passTurn()
		ROUND.chair[actual].confuse = false
		batataTimer(actual)
		updateShadow(actual)
	end
end


--[[ src/cards/equality.lua ]]--

function equality(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	for i, v in pairs(ROUND.chair) do
		if v.mode == "BUSY" or v.mode == "FREE" then
			if #v.hand > 3 then
				discardCard(i, #v.hand-3)
			elseif #v.hand < 3 then
				tryDraw(i, 3-#v.hand)
			end
			explosion(9, v.x, 135, 5, 10)
			explosion(35, v.x, 135, 3, 5)
		end
	end
	passTurn()
	batataTimer(n)
	ROUND.chair[n].confuse = false
end


--[[ src/cards/half.lua ]]--

function half(n)
	ui.removeTextArea(70, ROUND.chair[n].owner)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	local player = ROUND.chair[n].owner
	local img = tfm.exec.addImage(IMG.skin[ROUND.portal.side].misc.discoverWild, "!1000", ROUND.chair[n].x-50, 20)
	local l = tfm.exec.addImage(IMG.misc.genericLayer, "!1000", 0, 0, player)
	local t1 = showCard({"red","half"}, 170, 200, player, "!1000", "big")
	local t2 = showCard({"blue","half"}, 290, 200, player, "!1000", "big")
	local t3 = showCard({"yellow","half"}, 410, 200, player, "!1000", "big")
	local t4 = showCard({"green","half"}, 530, 200, player, "!1000", "big")
	local images = {img, l}
	for i, v in pairs({t1,t2,t3,t4}) do
		for j, w in pairs(v) do
			table.insert(images, w)
		end
	end
	ROUND.chair[n].action = {
		name = "WILD",
		img = images
	}
	resetTimer()
	updateTurnTimer()
	showAccumulated()
end


--[[ src/cards/ink.lua ]]--

function ink(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	local target = nextChair(ROUND.turn)
	local change = {}
	for i, v in pairs(ROUND.chair[target].hand) do
		if v[1] ~= "black" then
			if v[3] or v[2] == "batata" then
				v[1] = ROUND.topCard.card[1]
			else
				table.insert(ROUND.pile, 1, v)
				table.insert(change, i)
			end
		end
	end
	if BOT[ROUND.chair[target].owner] and BOT[ROUND.chair[target].owner].eventInk then
		BOT[ROUND.chair[target].owner].eventInk(ROUND.topCard.card[1])
	end
	for i, v in pairs(change) do
		ROUND.chair[target].hand[v] = {ROUND.topCard.card[1], ROUND.chair[target].hand[v][2], true}
	end
	if ROUND.topCard.card[1] == "black" then
		unlockChair(ROUND.chair[target].owner, "gothic")
	end
	local fx = {red=13, blue=1, yellow=11, green=9, black=0}
	for i=1, 20 do
		tfm.exec.displayParticle(fx[ROUND.topCard.card[1]], math.random(-50,50)+ROUND.chair[target].x, 15, 0, math.random()*4, 0, 0, nil)
	end
	local qtd = #ROUND.chair[target].hand > 16 and 16 or #ROUND.chair[target].hand
	local maxx = math.floor(qtd*1.5)
	for i=1, maxx do
		tfm.exec.displayParticle(fx[ROUND.topCard.card[1]], math.random(-25*qtd,25*qtd)+400, math.random(290,330), 0, math.random()*3, 0, 0, ROUND.chair[target].owner)
		tfm.exec.displayParticle(fx[ROUND.topCard.card[1]], math.random(-25*qtd,25*qtd)+400, math.random(290,330), 0, math.random()*3, 0, 0, ROUND.chair[target].owner)
	end
	addFunctionTimer(function()
		for i=1, 20 do
			tfm.exec.displayParticle(fx[ROUND.topCard.card[1]], math.random(-50,50)+ROUND.chair[target].x, 15, 0, math.random()*4, 0, 0, nil)
		end
		local qtd = #ROUND.chair[target].hand > 16 and 16 or #ROUND.chair[target].hand
		local maxx = math.floor(qtd*1.5)
		for i=1, maxx do
			tfm.exec.displayParticle(fx[ROUND.topCard.card[1]], math.random(-25*qtd,25*qtd)+400, math.random(290,330), 0, math.random()*3, 0, 0, ROUND.chair[target].owner)
			tfm.exec.displayParticle(fx[ROUND.topCard.card[1]], math.random(-25*qtd,25*qtd)+400, math.random(290,330), 0, math.random()*3, 0, 0, ROUND.chair[target].owner)
		end
	end, 200)
	
	sortHand(ROUND.chair[target].hand)
	updateHand(target)
	passTurn()
	batataTimer(n)
	ROUND.chair[n].confuse = false
end


--[[ src/cards/justice.lua ]]--

function justice(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	
	local qtd = 0
	
	for i, v in pairs(ROUND.chair) do
		if v.mode ~= "DELETED" and i ~= n and #v.hand < #ROUND.chair[n].hand then
			qtd = qtd + 1
			explosion(9, v.x, 135, 5, 10)
			explosion(35, v.x, 135, 3, 5)
		end
	end
	
	if qtd >= #ROUND.chair[n].hand then
		qtd = #ROUND.chair[n].hand - 1
	end

	if qtd > 0 then
		ROUND.time = GLOBAL_TIME + 10000
		ROUND.chair[n].action = {
			name = "JUSTICE",
		}
		addFunctionTimer(function()
			ROUND.chair[n].action = false
			discardCard(n, qtd)
			mimicDiscard(n, qtd)
			explosion(9, ROUND.chair[n].x, 135, 5, 10)
			explosion(35, ROUND.chair[n].x, 135, 3, 5)
			if #ROUND.chair[n].hand == 1 then
				ROUND.chair[n].uno = "uno"
			end
			updateHand(n)
			updateScore(n)
			passTurn()
			updateShadow(n)
			batataTimer(n)
			ROUND.chair[n].confuse = false
		end, 1000)
	else
		passTurn()
		batataTimer(n)
		ROUND.chair[n].confuse = false
	end
end


--[[ src/cards/lock.lua ]]--

function key(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	local count = 0
	for i, v in pairs(ROUND.chair) do
		if i ~= n and v.mode ~= "DELETED" then
			local pool = {}
			for j, w in pairs(v.hand) do
				if not w.lock then
					table.insert(pool, j)
				end
			end
			if #pool > 0 then
				local rand = table.remove(pool, math.random(#pool))
				v.hand[rand].lock = true
				if #pool > 0 then
					local rand = table.remove(pool, math.random(#pool))
					v.hand[rand].lock = true
				end
				updateHand(i)
				for j=1, 5 do
					local vx = (math.random()-0.5) * 5
					local vy = (math.random()-1) * 8
					tfm.exec.displayParticle(13, v.x, 140, vx, vy, 0, 0.1)
				end
			end
			count = count + #pool
		end
	end
	if count == 0 then
		unlockChair(ROUND.chair[n].owner, "samson")
	end
	
	passTurn()
	batataTimer(n)
	ROUND.chair[n].confuse = false
end


--[[ src/cards/luck.lua ]]--

function luck(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	ROUND.chair[n].luck = true
	explosion(22, ROUND.chair[n].x, 120, 20, 20)
	updateScore(n)
	passTurn()
	batataTimer(n)
	ROUND.chair[n].confuse = false
end


--[[ src/cards/madchess.lua ]]--

function effectPawn(n)
	tryDraw(previousChair(n), 1)
	passTurn()
	batataTimer(n)
	ROUND.chair[n].confuse = false
end

function effectRook(n)
	tryDraw(previousChair(n), 2)
	passTurn()
	batataTimer(n)
	ROUND.chair[n].confuse = false
end

function effectKnight(n)
	local arrow = {LEFT = "RIGHT", RIGHT = "LEFT"}
	ROUND.flow = arrow[ROUND.flow]
	updateFlow(nil, ROUND.flowLight)
	for i=0, 800, 20 do
		tfm.exec.displayParticle(3, i, 177, 0, 0, 0, 0)
	end
	ROUND.turn = nextChair(ROUND.turn)
	tryDraw(ROUND.turn, 1)
	local img = tfm.exec.addImage(ROUND.flow == "RIGHT" and IMG.misc.right or IMG.misc.left, "!1000", ROUND.chair[ROUND.turn].x-50, 30)
	TIMER.img[img] = os.time()+1000
	explosion(35, ROUND.chair[ROUND.turn].x, 80, 50, 10)
	passTurn()
	batataTimer(n)
	ROUND.chair[n].confuse = false
end

function effectBishop(n)
	makeGift(n, previousChair(n), 1)
end

function effectQueen(n)
	local prev = previousChair(n)
	if #ROUND.chair[prev].hand < 10 then
		tryDraw(prev, 10-#ROUND.chair[prev].hand)
	end
	passTurn()
	batataTimer(n)
	ROUND.chair[n].confuse = false
end

function effectKing(n)
	makeGift(n, previousChair(n), #ROUND.chair[n].hand-1)
end

function pawn(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	local effect = {pawn=effectPawn, rook=effectRook, bishop=effectBishop, knight=effectKnight, queen=effectQueen, king=effectKing}
	local text = {pawn="KILL_PAWN", rook="KILL_ROOK", bishop="KILL_BISHOP", knight="KILL_KNIGHT", queen="KILL_QUEEN", king="KILL_KING"}
	if effect[ROUND.topCard.card2[2]] then
		if validRoom() then
			local player = ROUND.chair[n].owner
			PLAYER[player].chess = PLAYER[player].chess + 1
			if PLAYER[player].chess >= 25 then
				unlockChair(player, "chess")
			end
		end
		effect[ROUND.topCard.card2[2]](n)
		local y = 195 - (#ROUND.pile/108 * 10)
		for i, v in pairs(tfm.get.room.playerList) do
			ui.addTextArea(34, string.format("<p align='center'><font color='#ffffff'>%s", translate(i, text[ROUND.topCard.card2[2]])), i, 400, y, 110, nil, 0, 0, 0, false)
		end
		table.insert(TIMER.txt, {time=os.time()+2000, id=34})
	else
		passTurn()
		batataTimer(n)
		ROUND.chair[n].confuse = false
	end
end
rook, knight, bishop = pawn, pawn, pawn

function queen(n)
	ui.removeTextArea(70, ROUND.chair[n].owner)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	local player = ROUND.chair[n].owner
	local img = tfm.exec.addImage(IMG.skin[ROUND.portal.side].misc.discoverWild, "!1000", ROUND.chair[n].x-50, 20)
	local l = tfm.exec.addImage(IMG.misc.genericLayer, "!1000", 0, 0, player)
	local t1 = showCard({"red","queen"}, 170, 200, player, "!1000", "big")
	local t2 = showCard({"blue","queen"}, 290, 200, player, "!1000", "big")
	local t3 = showCard({"yellow","queen"}, 410, 200, player, "!1000", "big")
	local t4 = showCard({"green","queen"}, 530, 200, player, "!1000", "big")
	local images = {img, l}
	for i, v in pairs({t1,t2,t3,t4}) do
		for j, w in pairs(v) do
			table.insert(images, w)
		end
	end
	ROUND.chair[n].action = {
		name = "WILD",
		img = images
	}
	resetTimer()
	updateTurnTimer()
	showAccumulated()
end

function king(n)
	ui.removeTextArea(70, ROUND.chair[n].owner)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	local player = ROUND.chair[n].owner
	local img = tfm.exec.addImage(IMG.skin[ROUND.portal.side].misc.discoverWild, "!1000", ROUND.chair[n].x-50, 20)
	local l = tfm.exec.addImage(IMG.misc.genericLayer, "!1000", 0, 0, player)
	local t1 = showCard({"red","king"}, 170, 200, player, "!1000", "big")
	local t2 = showCard({"blue","king"}, 290, 200, player, "!1000", "big")
	local t3 = showCard({"yellow","king"}, 410, 200, player, "!1000", "big")
	local t4 = showCard({"green","king"}, 530, 200, player, "!1000", "big")
	local images = {img, l}
	for i, v in pairs({t1,t2,t3,t4}) do
		for j, w in pairs(v) do
			table.insert(images, w)
		end
	end
	ROUND.chair[n].action = {
		name = "WILD",
		img = images
	}
	resetTimer()
	updateTurnTimer()
	showAccumulated()
end


--[[ src/cards/magnet.lua ]]--

function magnet(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	
	local pool = {}
	
	local i = #ROUND.chair[n].hand
	local cont = 0
	local bg = {green = true, blue = true}
	while i > 0 do
		if ROUND.chair[n].hand[i][1] == ROUND.topCard.card[1] or (ROUND.gameMode.bluegreen and bg[ROUND.chair[n].hand[i][1]] and bg[ROUND.topCard.card[1]]) then
			discardByIndex(n, i)
			discardEffect(n, i)
			cont = cont + 1
		end
		i = i - 1
	end
	local xmax = ROUND.chair[n].x-450
	local ymax = 135-250
	local fx = {red=13, blue=1, yellow=11, green=9, black=1}
	local color = fx[ROUND.topCard.card[1]]
	local dist = math.ceil(math.sqrt(math.pow(xmax,2)+math.pow(ymax,2))/20)
	local qtd = cont * dist
	for i=0, qtd do
		local x = 450 + xmax*(i/qtd)
		local y = 250 + ymax*(i/qtd)
		tfm.exec.displayParticle(color, x+math.random(-8,8), y+math.random(-8,8), 0, 0, 0, 0, nil)
	end
	explosion(9, ROUND.chair[n].x, 135, 5, 10)
	explosion(35, ROUND.chair[n].x, 135, 3, 5)
	mimicDiscard(n, cont)
	if cont > 0 then
		showCardsGainned(n, -cont)
	end
	if cont >= 5 then
		unlockChair(ROUND.chair[n].owner, "mecatopus")
	end
	if #ROUND.chair[n].hand <= 0 then
		endGame(ROUND.chair[n].owner, ROUND.topCard.card)
	else
		if #ROUND.chair[n].hand == 1 then
			ROUND.chair[n].uno = "uno"
		end
		passTurn()
		batataTimer(n)
		ROUND.chair[n].confuse = false
	end
	updateHand(n)
	updateScore(n)
end


--[[ src/cards/meep.lua ]]--

function meep(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	ROUND.chair[n].meep = true
	tfm.exec.giveMeep(ROUND.chair[n].owner)
	tfm.exec.displayParticle(10, ROUND.chair[n].x, 90, 0, 0, 0, 0, nil)
	passTurn()
	batataTimer(n)
	ROUND.chair[n].confuse = false
end


--[[ src/cards/mimic.lua ]]--

function mimic(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	local image = {tfm.exec.addImage(IMG.misc.genericLayer, "!1000", 0, 0, ROUND.chair[n].owner)}
	local option = {}
	for i, v in pairs(ROUND.chair) do
		if (v.mode == "BUSY" or v.mode == "FREE") and i ~= n then
			table.insert(image, tfm.exec.addImage(IMG.misc.target, "!1000", v.x-50, 30))
			option[i] = true
		end
	end
	ROUND.chair[n].action = {
		name = "MIMIC",
		img = image,
		op = option,
		func = makeMimic
	}
	resetTimer()
	updateTurnTimer()
end

function makeMimic(n, target)
	if target then
		if not ROUND.chair[target].action or n == target then
			for i, v in pairs(ROUND.chair[n].action.img) do
				tfm.exec.removeImage(v)
			end
			ROUND.chair[n].action = false
			ROUND.chair[n].mimic = target
			local img = tfm.exec.addImage(IMG.misc.linked, "!1000", ROUND.chair[n].x-50, 30)
			local img2 = tfm.exec.addImage(IMG.misc.linked, "!1000", ROUND.chair[target].x-50, 30)
			TIMER.img[img] = os.time()+1000
			TIMER.img[img2] = os.time()+1000
			passTurn()
			batataTimer(n)
			updateShadow(n)
		end
	else
		passTurn()
		ROUND.chair[n].confuse = false
		batataTimer(n)
		updateShadow(n)
	end
end

function mimicDraw(n, qtd, recursion)
	for i, v in pairs(ROUND.chair) do
		if v.mimic == n and (not recursion or v.owner ~= "Icemice") then
			tryDraw(i, qtd)
		end
	end
end

function mimicDiscard(n, qtd)
	local winners = {}
	for i, v in pairs(ROUND.chair) do
		if v.mode == "BUSY" and v.mimic == n then
			discardCard(i, qtd)
			if #v.hand == 0 then
				table.insert(winners, i)
			end
		end
	end
	return winners
end




--[[ src/cards/mix.lua ]]--

function mix1(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	local arrow = {LEFT = "RIGHT", RIGHT = "LEFT"}
	ROUND.flow = arrow[ROUND.flow]
	updateFlow(nil, ROUND.flowLight)
	for i=0, 800, 20 do
		tfm.exec.displayParticle(3, i, 177, 0, 0, 0, 0)
	end
	ROUND.turn = nextChair(ROUND.turn)
	local img = tfm.exec.addImage(IMG.misc.skipped, "!1000", ROUND.chair[ROUND.turn].x-50, 30)
	TIMER.img[img] = os.time()+1000
	explosion(35, ROUND.chair[ROUND.turn].x, 80, 50, 10)
	passTurn()
	batataTimer(n)
	ROUND.chair[n].confuse = false
end

function mix2(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	local arrow = {LEFT = "RIGHT", RIGHT = "LEFT"}
	ROUND.flow = arrow[ROUND.flow]
	updateFlow(nil, ROUND.flowLight)
	for i=0, 800, 20 do
		tfm.exec.displayParticle(3, i, 177, 0, 0, 0, 0)
	end
	local target = nextChair(ROUND.turn)
	tryDraw(target, 2)
	ROUND.turn = target
	local img = tfm.exec.addImage(ROUND.flow == "RIGHT" and IMG.misc.right or IMG.misc.left, "!1000", ROUND.chair[ROUND.turn].x-50, 30)
	TIMER.img[img] = os.time()+1000
	explosion(35, ROUND.chair[ROUND.turn].x, 80, 50, 10)
	passTurn()
	batataTimer(n)
	ROUND.chair[n].confuse = false
end

function mix3(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	ROUND.turn = nextChair(ROUND.turn)
	local img = tfm.exec.addImage(IMG.misc.skipped, "!1000", ROUND.chair[ROUND.turn].x-50, 30)
	TIMER.img[img] = os.time()+1000
	explosion(35, ROUND.chair[ROUND.turn].x, 80, 50, 10)
	local target = nextChair(ROUND.turn)
	tryDraw(target, 2)
	ROUND.turn = target
	local img = tfm.exec.addImage(ROUND.flow == "RIGHT" and IMG.misc.right or IMG.misc.left, "!1000", ROUND.chair[ROUND.turn].x-50, 30)
	TIMER.img[img] = os.time()+1000
	explosion(35, ROUND.chair[ROUND.turn].x, 80, 50, 10)
	passTurn()
	batataTimer(n)
	ROUND.chair[n].confuse = false
end


--[[ src/cards/mysterious.lua ]]--

function random(n)
	ROUND.time = GLOBAL_TIME + (ROUND.gameMode.flash and 5000 or 10000)
	ROUND.chair[n].action = {name="random"}
	ROUND.topCard.card = randomActionCard()
	ROUND.topCard.card[3] = nil
	drawTopCard()
	local y = drawTopCard()
	tfm.exec.displayParticle(12, 455, y+37, 0, 0, 0, 0)
	ROUND.chair[n].action = nil
	_G[ROUND.topCard.card[2]](n)
end


--[[ src/cards/numbers.lua ]]--

function n0(n, start)
	ROUND.chair[n].zero = ROUND.chair[n].zero or {}
	if ROUND.topCard.card[2] == "n0" then
		ROUND.chair[n].zero[ROUND.topCard.card[1]] = true
		if ROUND.chair[n].zero.red and ROUND.chair[n].zero.blue and ROUND.chair[n].zero.yellow and ROUND.chair[n].zero.green then
			unlockChair(ROUND.chair[n].owner, "elemental")
		end
	end
	if ROUND.chair[n].owner == "Charlotte" and ROUND.gameMode[ROUND.topCard.card[1]] then
		actionCardEffect()
		actionCard(n, _G[ROUND.topCard.card[1]])
	elseif ROUND.topCard.card[2] == "n0" and FLAG[ROUND.chair[n].flag].color == ROUND.topCard.card[1] and not ROUND.chair[n].peace2 then
		actionCardEffect()
		actionCard(n, _G[FLAG[ROUND.chair[n].flag].func])
	elseif ROUND.gameMode.stack and not start then
		local can = {}
		local stack = false
		for i, v in pairs(ROUND.chair[n].hand) do
			if v[2] == ROUND.topCard.card[2] then
				can[i] = true
				stack = true
			end
		end
		if stack then
			if #ROUND.chair[n].hand == 2 then
				showUno(n)
			end
			ROUND.chair[n].played = true
			ROUND.chair[n].whiteList = can
			showPass(n)
			ui.addTextArea(19, string.format("<p align='center'><font color='#ffffff'>"..translate(ROUND.chair[n].owner, "WARN_STACKING"), ROUND.topCard.card[2]:sub(2,2)), ROUND.chair[n].owner, 200, 305, 400, nil, 0, 0, 0, false)
		else
			passTurn()
			batataTimer(n)
			ROUND.chair[n].confuse = false
		end
	elseif ROUND.gameMode.sequence and not start then
		local can = {
			n0 = {"x","n1"},
			n1 = {"n0","n2"},
			n2 = {"n1","n3"},
			n3 = {"n2","n4"},
			n4 = {"n3","n5"},
			n5 = {"n4","n6"},
			n6 = {"n5","n7"},
			n7 = {"n6","n8"},
			n8 = {"n7","n9"},
			n9 = {"n8","x"},
		}
		local sequence = false
		local pool = {}
		if ROUND.chair[n].played then
			if can[ROUND.topCard.card2[2]][1] == ROUND.topCard.card[2] then
				ROUND.chair[n].played = "DOWN"
			elseif can[ROUND.topCard.card2[2]][2] == ROUND.topCard.card[2] then
				ROUND.chair[n].played = "UP"
			end
		end
		if ROUND.chair[n].played == "DOWN" then
			for i, v in pairs(ROUND.chair[n].hand) do
				if ROUND.topCard.card[1] == v[1] and can[ROUND.topCard.card[2]][1] == v[2] then
					pool[i] = true
					sequence = true
				end
			end
		elseif ROUND.chair[n].played == "UP" then
			for i, v in pairs(ROUND.chair[n].hand) do
				if ROUND.topCard.card[1] == v[1] and can[ROUND.topCard.card[2]][2] == v[2] then
					pool[i] = true
					sequence = true
				end
			end
		else
			for i, v in pairs(ROUND.chair[n].hand) do
				if ROUND.topCard.card[1] == v[1] and (can[ROUND.topCard.card[2]][1] == v[2] or can[ROUND.topCard.card[2]][2] == v[2]) then
					pool[i] = true
					sequence = true
				end
			end
		end
		if sequence then
			if #ROUND.chair[n].hand == 2 then
				showUno(n)
			end
			ROUND.chair[n].whiteList = pool
			if ROUND.chair[n].played then
				if ROUND.chair[n].played == true then
					if ROUND.chair[n].played == "DOWN" then
						ui.addTextArea(19,"<p align='center'><font color='#ffffff'>"..translate(ROUND.chair[n].owner, "WARN_DOWN"), ROUND.chair[n].owner, 200, 305, 400, nil, 0, 0, 0, false)
					elseif ROUND.chair[n].played == "UP" then
						ui.addTextArea(19,"<p align='center'><font color='#ffffff'>"..translate(ROUND.chair[n].owner, "WARN_UP"), ROUND.chair[n].owner, 200, 305, 400, nil, 0, 0, 0, false)
					end
				else
					local text = {DOWN="WARN_DOWN", UP="WARN_UP"}
					ui.addTextArea(19,"<p align='center'><font color='#ffffff'>"..translate(ROUND.chair[n].owner, text[ROUND.chair[n].played]), ROUND.chair[n].owner, 200, 305, 400, nil, 0, 0, 0, false)
				end
			else
				ROUND.chair[n].played = true
				ui.addTextArea(19,"<p align='center'><font color='#ffffff'>"..translate(ROUND.chair[n].owner, "WARN_UP_DOWN"), ROUND.chair[n].owner, 200, 305, 400, nil, 0, 0, 0, false)
			end
		else
			passTurn()
			batataTimer(n)
			ROUND.chair[n].confuse = false
		end
	elseif ROUND.gameMode.perfection and not start and isNumeric(ROUND.topCard.card) == #ROUND.chair[n].hand+1 then
		ROUND.turn = previousChair(ROUND.turn)
		explosion(37, ROUND.chair[n].x, 80, 10, 10)
		ui.addTextArea(19, string.format("<p align='center'><font color='#ffffff'>%s", translate(ROUND.chair[n].owner, "WARN_PERFECTION")), ROUND.chair[n].owner, 200, 305, 400, nil, 0, 0, 0, false)
		passTurn()
		batataTimer(n, true)
	else
		passTurn()
		batataTimer(n)
		ROUND.chair[n].confuse = false
	end
end
n1, n2, n3, n4, n5, n6, n7, n8, n9 = n0, n0, n0, n0, n0, n0, n0, n0, n0


--[[ src/cards/panels.lua ]]--

function picnicFlag(n)
	local pool = {}
	local lastCard = {0,0}
	for i, v in pairs(ROUND.chair[n].hand) do
		if v[1] == lastCard[1] and v[2] == lastCard[2] then
			table.insert(pool, i)
		else
			lastCard = v
		end
	end
	if #pool > 0 then
		local image = {tfm.exec.addImage(IMG.misc.genericLayer, "!1000", 0, 0, ROUND.chair[n].owner)}
		local option = {}
		for i, v in pairs(ROUND.chair) do
			if v.owner ~= "Papaille" and (v.mode == "BUSY" or v.mode == "FREE") and i ~= n then
				table.insert(image, tfm.exec.addImage(IMG.misc.target, "!1000", v.x-50, 30))
				option[i] = true
			end
		end
		ROUND.chair[n].action = {
			name = "PICNIC",
			img = image,
			op = option,
			card = pool[math.random(#pool)],
			func = makePicnicGift
		}
		resetTimer()
		updateTurnTimer()
	else
		passTurn()
		batataTimer(n)
		ROUND.chair[n].confuse = false
	end
end

function makePicnicGift(n, target)
	if target then
		local temp = {}
		if n ~= target and ROUND.chair[target].mode ~= "DELETED" and (ROUND.chair[target].owner ~= "Papaille" or ROUND.chair[n].owner == "Jingle") then
			if ROUND.chair[n].action then
				for i, v in pairs(ROUND.chair[n].action.img) do
					tfm.exec.removeImage(v)
				end
			end
			if BOT[ROUND.chair[target].owner] and BOT[ROUND.chair[target].owner].eventDonate then
				BOT[ROUND.chair[target].owner].eventDonate()
			end
			local find = ROUND.chair[n].action.card
			ROUND.chair[n].action = false
			missCard(target, ROUND.chair[n].hand[find], 2000)
			explosion(5, ROUND.chair[target].x, 100, 5, 10)
			discardEffect(n, find)
			donateByIndex(n, target, find)
			sortHand(ROUND.chair[target].hand)
			if #ROUND.chair[n].hand == 1 then
				ROUND.chair[n].uno = "uno"
			end
			showCardsGainned(n, -1)
			showCardsGainned(target, 1)
			updateScore(n)
			updateScore(target)
			drawTopCard()
			updateHand(n)
			updateHand(target)
			if isIlluminati(target) then
				unlockChair(ROUND.chair[target].owner, "illuminati")
			end
			if #ROUND.chair[target].hand > ROUND.chair[target].maxHand then
				ROUND.chair[target].maxHand = #ROUND.chair[target].hand
			end
			if #ROUND.chair[target].hand > 25 and not ROUND.chair[target].notTrash then
				unlockChair(ROUND.chair[target].owner, "trash")
			end
			if mustBeEliminated(target) then
				eliminate(target)
			end
			if #ROUND.chair[n].hand == 0 then
				local name = ROUND.chair[n].owner
				endGame(ROUND.chair[n].owner)
				unlockChair(name, "gift")
			else
				passTurn()
				ROUND.chair[n].confuse = false
				batataTimer(n)
				updateShadow(n)
			end
		end
	else
		if ROUND.chair[n].action then
			for i, v in pairs(ROUND.chair[n].action.img) do
				tfm.exec.removeImage(v)
			end
			ROUND.chair[n].action = false
		end
		passTurn()
		batataTimer(n)
		updateShadow(n)
	end
end

function cloudFlag(n) -- metal
	local pool = {}
	for i, v in pairs(ROUND.chair) do
		if v.mode ~= "DELETED" then
			table.insert(pool, i)
		end
	end
	local l = tfm.exec.addImage(IMG.misc.genericLayer, "!1000", 0, 0, player)
	TIMER.img[l] = os.time()+500
	local r = table.remove(pool, math.random(#pool))
	if r then
		local img = tfm.exec.addImage(IMG.misc.thunder, "!1000", ROUND.chair[r].x-50, 15)
		TIMER.img[img] = os.time()+500
		explosion(0, ROUND.chair[r].x, 115, 10, 30)
		tryDraw(r, math.random(2))
	end
	passTurn()
	batataTimer(n)
end

function starFlag(n) -- paper
	giveCard(n, {"black","wild",true,true}, true)
	missCard(n, {"black","wild",true,true}, 2000)
	if mustBeEliminated(n) then
		eliminate(n)
	end
	passTurn()
	batataTimer(n)
	ROUND.chair[n].confuse = false
end

function leafFlag(n) -- carpet
	local number = {}
	for i, v in pairs(ROUND.chair[n].hand) do
		if isNumeric(v) then
			table.insert(number, i)
		end
	end
	if #number > 0 then
		local discarted = table.remove(ROUND.chair[n].hand, number[math.random(#number)])
		discarted.lock = false
		if not discarted[3] then
			table.insert(ROUND.pile, discarted)
		end
		missCard(n, discarted, 2000)
		local img = tfm.exec.addImage(IMG.misc.burn, "!1000", ROUND.chair[n].x-25, 20)
		TIMER.img[img] = os.time()+2000
		tryDraw(n, 1)
		if ROUND.chair[n].mode ~= "DELETED" and #ROUND.chair[n].hand == 1 then
			ROUND.chair[n].uno = "uno"
			updateScore(n)
		end
		drawTopCard()
	end
	passTurn()
	batataTimer(n)
	ROUND.chair[n].confuse = false
end


--[[ src/cards/paradox.lua ]]--

function paradox(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	local rand = math.random(#ROUND.chair[n].hand)
	local temp = table.remove(ROUND.chair[n].hand, rand)
	temp.lock = false
	discardEffect(n, rand)
	if not PARADOX[ROUND.chair[n].owner] then
		PARADOX[ROUND.chair[n].owner] = {}
	end
	table.insert(PARADOX[ROUND.chair[n].owner], {temp[1],temp[2],temp[2] ~= "batata",true})
	local img = tfm.exec.addImage(IMG.misc.portal, "!1000", ROUND.chair[ROUND.turn].x-50, 5)
	TIMER.img[img] = os.time()+2000
	missCard(n, temp, 2000)
	explosion(1, ROUND.chair[n].x, 80, 40, 40)
	ROUND.chair[n].uno = nil
	updateHand(n)
	if #ROUND.chair[n].hand == 1 then
		ROUND.chair[n].uno = "uno"
	end
	updateScore(n)
	showCardsGainned(n, -1)
	if #ROUND.chair[n].hand == 0 then
		endGame(ROUND.chair[n].owner)
	else
		passTurn()
		ROUND.chair[n].confuse = false
		batataTimer(n)
		updateShadow(n)
	end
end


--[[ src/cards/peace.lua ]]--

function peace(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	local y = 210 - (#ROUND.pile/108 * 10)
	explosion(32, 455, y, 20, 30)
	for i, v in pairs(ROUND.chair) do
		if v.mode ~= "DELETED" then
			v.peace2 = 3
		end
	end
	passTurn()
	batataTimer(n)
	ROUND.chair[n].confuse = false
end


--[[ src/cards/portal.lua ]]--

function portal(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	local s = {blue="orange", orange="blue"}
	ROUND.portal.side = s[ROUND.portal.side]
	IMG.skin.classic = IMG.skin[ROUND.portal.side]
	for i, v in pairs(ROUND.portal.img) do
		tfm.exec.removeImage(v)
	end
	local color = {blue = 0x000835, orange= 0x351D00}
	--ui.addTextArea(90002, "", nil, 0, 0, 800, 400, color[ROUND.portal.side], color[ROUND.portal.side], 1, false)
	ROUND.deck, ROUND.deck2 = ROUND.deck2, ROUND.deck
	ROUND.pile, ROUND.pile2 = ROUND.pile2, ROUND.pile
	ROUND.gameMode, ROUND.gameMode2 = ROUND.gameMode2, ROUND.gameMode
	ROUND.subitDeath, ROUND.subitDeath2 = ROUND.subitDeath2, ROUND.subitDeath
	ROUND.limit, ROUND.limit2 = ROUND.limit2, ROUND.limit
	ROUND.limbo, ROUND.limbo2 = ROUND.limbo2, ROUND.limbo
	ROUND.curse, ROUND.curse2 = ROUND.curse2, ROUND.curse
	ROUND.curseTime, ROUND.curseTime2 = ROUND.curseTime2, ROUND.curseTime
	ROUND.simon, ROUND.simon2 = ROUND.simon2, ROUND.simon
	ROUND.traffic, ROUND.traffic2 = ROUND.traffic2, ROUND.traffic
	if ROUND.curseImage then
		tfm.exec.removeImage(ROUND.curseImage)
	end
	if ROUND.trafficImage then
		tfm.exec.removeImage(ROUND.trafficImage)
	end
	for i, v in pairs(ROUND.chair) do
		if v.mode ~= "DELETED" then
			v.hand, v.hand2 = v.hand2, v.hand
			v.luck, v.luck2 = v.luck2, v.luck
			v.peace, v.peace2 = v.peace2, v.peace
			v.confuse, v.confuse2 = v.confuse2, v.confuse
			v.compass, v.compass2 = v.compass2, v.compass
			v.batata, v.batata2 = v.batata2, v.batata
			v.curse, v.curse2 = v.curse2, v.curse
			v.notTrash, v.notTrash2 = v.notTrash2, v.notTrash
			v.meep, v.meep2 = v.meep2, v.meep
			v.mimic, v.mimic2 = v.mimic2, v.mimic
			--v.team, v.team2 = v.team2, v.team
			if v.action then
				for j, w in pairs(v.action.img or {}) do
					tfm.exec.removeImage(w)
				end
				v.action.img = {}
			end
			temp = v.action
			v.action = v.action2
			v.action2 = temp
			if v.action then
				if v.action.name == "SKIP" then
					v.action.img = {tfm.exec.addImage(IMG.misc.web, "!1000", v.x-50, 30)}
				end
			end
			if v.meep then
				tfm.exec.giveMeep(i)
			else
				tfm.exec.giveMeep(i, false)
			end
			explosion(3, v.x, 135, 3, 20)
			if #v.hand == 1 then
				v.uno = "uno"
				updateScore(i)
			end
			if mustBeEliminated(i) then
				eliminate(i)
			else
				updateScore(i)
				sortHand(v.hand)
				updateHand(i)
			end
		end
	end
	showDeck()
	local y = drawTopCard()
	explosion(3, 455, y+37, 5, 40)
	updateCurse()
	if ROUND.subitDeath and not ROUND.cloud.obj then
		ROUND.cloud.obj = tfm.exec.addShamanObject(63, 400, 500, 0, 2, 0, false)
		ROUND.cloud.delay = os.time()+5000
		tfm.exec.addImage(IMG.misc.cloud, "#"..ROUND.cloud.obj, -1200, -500)
	elseif not ROUND.subitDeath and ROUND.cloud.obj then
		tfm.exec.removeObject(ROUND.cloud.obj)
		ROUND.cloud.obj = false
	end
	for i, v in pairs(ROUND.imgRule) do
		tfm.exec.removeImage(v)
	end
	for i, v in pairs(tfm.get.room.playerList) do
		showRules(i)
	end
	if ROUND.traffic then
		ROUND.trafficImage = tfm.exec.addImage(IMG.misc[ROUND.traffic], "!1000", 265, 195)
	end
	passTurn()
	batataTimer(n)
	ROUND.chair[n].confuse = false
	ui.removeTextArea(28)
	--table.insert(TIMER.txt, {time=os.time()+100, id=90002})
	
	
	ROUND.portal.img = {tfm.exec.addImage(IMG.misc[ROUND.portal.side], "!50000", 0, 0)}
	--if ROUND.portal.side == "blue" then
	--  tfm.exec.snow(999999)
	--else
	--  tfm.exec.snow(0)
	--end
end


--[[ src/cards/rain.lua ]]--

function rain(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	for i, v in pairs(ROUND.chair) do
		if n ~= i then
			tryDraw(i, 1)
		end
	end
	for i=1, 40 do
		tfm.exec.displayParticle(34, math.random(799), 15, 0, math.random()*5, 0, 0, nil)
	end
	passTurn()
	batataTimer(n)
	ROUND.chair[n].confuse = false
end


--[[ src/cards/recycle.lua ]]--

function steal(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	for i, v in pairs(ROUND.chair) do
		if v.mode == "BUSY" and i ~= n then
			local action = {}
			for i, v in pairs(v.hand) do
				if not isNumeric(v) then
					table.insert(action, i)
				end
			end
			if #action > 0 then
				local rand = action[math.random(#action)]
				discardEffect(i, rand)
				local discarted = table.remove(v.hand, rand)
				discarted.lock = false
				if not discarted[3] then
					table.insert(ROUND.pile, discarted)
				end
				missCard(i, discarted, 2000)
				local img = tfm.exec.addImage(IMG.misc.burn, "!1000", ROUND.chair[i].x-25, 20)
				TIMER.img[img] = os.time()+2000
				tryDraw(i, 1)
				if #v.hand == 1 then
					v.uno = "uno"
				end
				updateScore(i)
			end
		end
		drawTopCard()
	end
	if not isEndGame("BAN") then
		passTurn()
		batataTimer(n)
		ROUND.chair[n].confuse = false
	end
end


--[[ src/cards/reverse.lua ]]--

function reverse(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	local cont = 0
	for i, v in pairs(ROUND.chair) do
		if v.mode == "BUSY" or v.mode == "FREE" then
			cont = cont + 1
		end
	end
	if cont == 2 then
		skip(n)
	else
		local arrow = {LEFT = "RIGHT", RIGHT = "LEFT"}
		ROUND.flow = arrow[ROUND.flow]
		updateFlow(nil, ROUND.flowLight)
		ROUND.love = ROUND.love or 0
		ROUND.love = ROUND.love + 1
		if PLAYER[ROUND.chair[n].owner] and PLAYER[ROUND.chair[n].owner].faustao then
			tfm.exec.chatMessage(ROUND.love .. " reverses in a row.", ROUND.chair[n].owner)
		end
		if ROUND.love >= 4 then
			unlockChair(ROUND.chair[n].owner, "truelove")
			unlockChair(ROUND.chair[nextChair(n)].owner, "truelove")
		end
		passTurn()
		batataTimer(n)
		ROUND.chair[n].confuse = false
		for i=0, 800, 20 do
			tfm.exec.displayParticle(3, i, 177, 0, 0, 0, 0)
		end
	end
end


--[[ src/cards/rule.lua ]]--

function rule(n)
	ui.removeTextArea(70, ROUND.chair[n].owner)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	local can = {}
	for i, v in pairs(RULE) do
		if v.rulecard then
			can[i] = true
		end
	end
	local pool = {}
	for i, v in pairs(ROUND.gameMode) do
		can[i] = nil
		for j, w in pairs(RULE[i].conflict or {}) do
			can[w] = nil
		end
	end
	for i, v in pairs(can) do
		table.insert(pool, i)
	end
	if #pool == 1 then
		addRule(pool[math.random(#pool)])
		passTurn()
		batataTimer(n)
	elseif #pool > 1 then
		local options = {}
		local img = tfm.exec.addImage(IMG.skin[ROUND.portal.side].misc.discoverRule, "!1000", ROUND.chair[n].x-50, 20)
		local images = {img, tfm.exec.addImage(IMG.misc.genericLayer, "!1000", 0, 0, ROUND.chair[n].owner)}
		for i=1, 2 do
			local name = table.remove(pool, math.random(#pool))
			options[i] = name
			table.insert(images, tfm.exec.addImage(IMG.misc.tip, "!1000", i*160+75, 190, ROUND.chair[n].owner))
			table.insert(images, tfm.exec.addImage(RULE[name].imgDesc, "!1000", i*160+80, 275, ROUND.chair[n].owner))
			local text = string.format("<p align='center'><vp><b>%s</b></font>\n<font color='#ffffff' size='9px'>%s", translate(ROUND.chair[n].owner, RULE[name].name), translate(ROUND.chair[n].owner, RULE[name].desc))
			ui.addTextArea(50000+i, text, ROUND.chair[n].owner, i*160+80, 200, 150, 150, 0, 0, 0, false)
		end
		resetTimer()
		updateTurnTimer()
		showAccumulated()
		ROUND.chair[n].action = {
			name = "RULE",
			img = images,
			op = options,
		}
	else
		passTurn()
		batataTimer(n)
	end
end

function ruleBoss(n)
	ui.removeTextArea(70, ROUND.chair[n].owner)
	if ROUND.gameMode.hell then
		ROUND.accumulated = nil
	end
	local pool = {"red", "blue", "yellow", "green"}
	local options = {}
	local img = tfm.exec.addImage(IMG.skin[ROUND.portal.side].misc.discoverRule, "!1000", ROUND.chair[n].x-50, 20)
	local images = {img, tfm.exec.addImage(IMG.misc.genericLayer, "!1000", 0, 0, ROUND.chair[n].owner)}
	for i=1, 2 do
		local name = table.remove(pool, math.random(#pool))
		options[i] = name
		table.insert(images, tfm.exec.addImage(IMG.misc.tip, "!1000", i*160+75, 190, ROUND.chair[n].owner))
		table.insert(images, tfm.exec.addImage(RULE[name].imgDesc, "!1000", i*160+80, 275, ROUND.chair[n].owner))
		local text = string.format("<p align='center'><vp><b>%s</b></font>\n<font color='#ffffff' size='9px'>%s", translate(ROUND.chair[n].owner, RULE[name].name), translate(ROUND.chair[n].owner, RULE[name].desc))
		ui.addTextArea(50000+i, text, ROUND.chair[n].owner, i*160+80, 200, 150, 150, 0, 0, 0, false)
	end
	resetTimer()
	updateTurnTimer()
	showAccumulated()
	ROUND.chair[n].action = {
		name = "RULE",
		img = images,
		op = options,
	}
end

function selectRule(n, option)
	ui.removeTextArea(50001)
	ui.removeTextArea(50002)
	for i, v in pairs(ROUND.chair[n].action.img) do
		tfm.exec.removeImage(v)
	end
	addRule(ROUND.chair[n].action.op[option])
	local name = ROUND.chair[n].action.op[option]
	local y = 195 - (#ROUND.pile/108 * 10)
	for i, v in pairs(tfm.get.room.playerList) do
		ui.addTextArea(34, string.format("<p align='center'><font color='#ffffff'>%s", translate(i, RULE[name].name)), i, 350, y, 210, nil, 0, 0, 0, false)
	end
	table.insert(TIMER.txt, {time=os.time()+2000, id=34}) 
	ROUND.chair[n].action = false
	passTurn()
	batataTimer(n)
	ROUND.chair[n].confuse = false
	updateShadow(n)
end

function addRule(name)
	ROUND.gameMode[name] = true
	for i, v in pairs(ROUND.imgRule) do
		tfm.exec.removeImage(v)
	end
	for i, v in pairs(tfm.get.room.playerList) do
		showRules(i)
		if window.isOpened(i, "TIP") then
			window.update(i, "TIP", name)
		else
			window.open(i, "TIP", name)
		end
	end
	addFunctionTimer(function()
		for i, v in pairs(tfm.get.room.playerList) do
			window.close(i, "TIP")
		end
	end, 4000)
	if RULE[name].card then
		for i, v in pairs(DECK[name]) do
			table.insert(ROUND.deck, math.random(#ROUND.deck+1), v)
		end
		showDeck()
		if not ROUND.subitDeath then
			local randomColor = RULE[name].card.color
			local card = RULE[name].card.name or name
			show = {randomColor[math.random(#randomColor)],card}
			local y = 195 - (#ROUND.deck/108 * 10)
			local img = showCard(show, 320, y, nil, "!1000")
			for i, v in pairs(img) do
				TIMER.img[v] = os.time()+2000
			end
			ui.addTextArea(90000, string.format("<p align='center'><font size='20px' color='#%s'><b>+", "000000")..#DECK[name], nil, 320, y+76, 51, 60, 0, 0, 0, false)
			ui.addTextArea(90001, string.format("<p align='center'><font size='20px' color='#%s'><b>+", "FFFFFF")..#DECK[name], nil, 320, y+75, 50, 60, 0, 0, 0, false)
			table.insert(TIMER.txt, {time=os.time()+2000, id=90000})
			table.insert(TIMER.txt, {time=os.time()+2000, id=90001})
		end
	elseif name == "revelation" then
		showDeck()
	elseif name == "overload" then
		ROUND.limit = 10
		for i, v in pairs(ROUND.chair) do
			if mustBeEliminated(i) then
				eliminate(i)
			else
				updateScore(i)
			end
		end
	elseif name == "limbo" then
		ROUND.limit = 12
		for i, v in pairs(ROUND.chair) do
			if mustBeEliminated(i) then
				eliminate(i)
			else
				updateScore(i)
			end
		end
	elseif name == "camouflage" or name == "shiny" then
		for i, v in pairs(ROUND.chair) do
			if v.mode ~= "DELETED" then
				updateScore(i)
			end
		end
	end
end


--[[ src/cards/semaphore.lua ]]--

function oddeven(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	if ROUND.traffic == "even" then
		ROUND.traffic = "odd"
	elseif ROUND.traffic == "odd" then
		ROUND.traffic = "even"
	else
		ROUND.traffic = math.random() > 0.5 and "odd" or "even"
	end
	if ROUND.trafficImage then
		tfm.exec.removeImage(ROUND.trafficImage)
	end
	ROUND.trafficImage = tfm.exec.addImage(IMG.misc[ROUND.traffic], "!1000", 265, 195)
	ROUND.chair[n].action = {
		name = "ODDEVEN",
	}
	local text = {odd = "FORBIDEN_ODD", even = "FORBIDEN_EVEN"}
	for i, v in pairs(tfm.get.room.playerList) do
		ui.addTextArea(71, "<p align='center'><font color='#ffffff' size='20px'>"..translate(i, text[ROUND.traffic]), i, 150, 245, 500, nil, 1, 1, 0.7, false)
	end
	if ROUND.traffic == "odd" then
		explosion(13, 290, 220, 15, 15)
		explosion(9, 290, 270, 15, 15)
	else
		explosion(9, 290, 220, 15, 15)
		explosion(13, 290, 270, 15, 15)
	end
	addFunctionTimer(function()
		ROUND.chair[n].action = false
		ui.removeTextArea(71)
		passTurn()
		updateShadow(n)
	end, 4000)
end


--[[ src/cards/share.lua ]]--

function share(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	
	local pool = {}
	for i, v in pairs(ROUND.chair[n].hand) do
		table.insert(pool, {v[1], v[2], true, true})
	end
	if #ROUND.chair[n].hand > 10 then
		for i=1, #ROUND.chair[n].hand - 10 do
			table.remove(pool, math.random(#pool))
		end
	end
	local amount = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
	local poolPlayer = {}
	for i, v in pairs(ROUND.chair) do
		if i~=n and v.mode ~= "DELETED" then
			table.insert(poolPlayer, i)
		end
	end
	for i, v in pairs(pool) do
		local target = poolPlayer[math.random(#poolPlayer)]
		table.insert(ROUND.chair[target].hand, v)
		amount[target] = amount[target] + 1
	end
	
	for i, v in pairs(ROUND.chair) do
		if amount[i] > 0 then
			missCard(i, nil, 2000)
			explosion(5, v.x, 100, 5, 10)
			sortHand(v.hand)
			v.uno = nil
			updateHand(i)
			updateScore(i)
			showCardsGainned(i, amount[i])
			if mustBeEliminated(i) then
				eliminate(i)
			end
		end
	end
	
	passTurn()
	batataTimer(n)
	ROUND.chair[n].confuse = false
end


--[[ src/cards/shield.lua ]]--

function shield(n)
	if ROUND.accumulated then
		ROUND.accumulated.player[ROUND.chair[n].owner] = true
		addBlockPoint(ROUND.chair[n].owner)
	end
	passTurn()
	batataTimer(n)
	ROUND.chair[n].confuse = false
end


--[[ src/cards/simon.lua ]]--

function simon(n)
	ui.removeTextArea(70, ROUND.chair[n].owner)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	local player = ROUND.chair[n].owner
	local img = tfm.exec.addImage(IMG.skin[ROUND.portal.side].misc.discoverWild, "!1000", ROUND.chair[n].x-50, 20)
	local l = tfm.exec.addImage(IMG.misc.genericLayer, "!1000", 0, 0, player)
	local images = {img, l}
	if ROUND.simon then
		table.insert(images, tfm.exec.addImage(IMG.simon.red[ROUND.portal.side], "!1000", 170, 225, player))
		table.insert(images, tfm.exec.addImage(IMG.simon.blue[ROUND.portal.side], "!1000", 290, 225, player))
		table.insert(images, tfm.exec.addImage(IMG.simon.yellow[ROUND.portal.side], "!1000", 410, 225, player))
		table.insert(images, tfm.exec.addImage(IMG.simon.green[ROUND.portal.side], "!1000", 530, 225, player))
		ROUND.chair[n].action = {
			name = "WILD",
			img = images,
			simon = 1
		}
	else
		local t1 = showCard({"red","simon"}, 170, 200, player, "!1000", "big")
		local t2 = showCard({"blue","simon"}, 290, 200, player, "!1000", "big")
		local t3 = showCard({"yellow","simon"}, 410, 200, player, "!1000", "big")
		local t4 = showCard({"green","simon"}, 530, 200, player, "!1000", "big")
		for i, v in pairs({t1,t2,t3,t4}) do
			for j, w in pairs(v) do
				table.insert(images, w)
			end
		end
		ROUND.chair[n].action = {
			name = "WILD",
			img = images,
			simon = "FINAL"
		}
	end
	resetTimer()
	updateTurnTimer()
	showAccumulated()
end


--[[ src/cards/skip.lua ]]--

function skip(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	ROUND.turn = nextChair(ROUND.turn)
	local img = tfm.exec.addImage(IMG.misc.skipped, "!1000", ROUND.chair[ROUND.turn].x-50, 30)
	TIMER.img[img] = os.time()+1000
	explosion(35, ROUND.chair[ROUND.turn].x, 80, 20, 20)
	passTurn()
	batataTimer(n)
	ROUND.chair[n].confuse = false
end


--[[ src/cards/spy.lua ]]--

function spy(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	for i, v in pairs(ROUND.chair) do
		if (v.mode == "BUSY" or v.mode == "FREE") and n ~= i then
			missCard(i, v.hand[math.random(#v.hand)], 2000)
		end
	end
	passTurn()
	batataTimer(n)
	ROUND.chair[n].confuse = false
end


--[[ src/cards/theft.lua ]]--

function theft(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	local image = {tfm.exec.addImage(IMG.misc.genericLayer, "!1000", 0, 0, ROUND.chair[n].owner)}
	local option = {}
	for i, v in pairs(ROUND.chair) do
		if (v.mode ~= "DELETED") and i ~= n then
			table.insert(image, tfm.exec.addImage(IMG.misc.target, "!1000", v.x-50, 30))
			option[i] = true
		end
	end
	ROUND.chair[n].action = {
		name = "THEFT",
		img = image,
		op = option,
		func = makeTheft
	}
	resetTimer()
	updateTurnTimer()
end

function makeTheft(n, target)
	if target then
		local temp = {}
		if n ~= target and ROUND.chair[target].mode ~= "DELETED" then
			if ROUND.chair[n].action then
				for i, v in pairs(ROUND.chair[n].action.img) do
					tfm.exec.removeImage(v)
				end
			end
			ROUND.chair[n].action = false
			--
			local found = {}
			for i, v in pairs(ROUND.chair[target].hand) do
				if v[1] == "black" then
					table.insert(found, i)
				end
			end
			
			if #found > 0 then
				local rand = found[math.random(#found)]
				temp = table.remove(ROUND.chair[target].hand, rand)
				discardEffect(target, rand)
				table.insert(ROUND.chair[n].hand, temp)
				
				missCard(n, temp, 2000)
				explosion(5, ROUND.chair[n].x, 100, 5, 10)
				sortHand(ROUND.chair[n].hand)
				ROUND.chair[n].uno = nil
				updateHand(n)
				updateHand(target)
				if #ROUND.chair[target].hand == 1 then
					ROUND.chair[target].uno = "uno"
				end
				if isIlluminati(n) then
					unlockChair(ROUND.chair[n].owner, "illuminati")
				end
				if temp[2] == "draw4" then
					if ROUND.chair[n].theft then
						unlockChair(ROUND.chair[n].owner, "gaga")
					else
						ROUND.chair[n].theft = true
					end
				end
				updateScore(n)
				updateScore(target)
				showCardsGainned(n, 1)
				showCardsGainned(target, -1)
			end
			--
			
			if #ROUND.chair[target].hand == 0 then
				local name = ROUND.chair[target].owner
				endGame(ROUND.chair[target].owner)
				unlockChair(target, "gift")
			else
				passTurn()
				ROUND.chair[n].confuse = false
				batataTimer(n)
				updateShadow(n)
			end
		end
	else
		if ROUND.chair[n].action then
			for i, v in pairs(ROUND.chair[n].action.img) do
				tfm.exec.removeImage(v)
			end
			ROUND.chair[n].action = false
		end
		passTurn()
		batataTimer(n)
		updateShadow(n)
	end
end


--[[ src/cards/thunder.lua ]]--

function thunder(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	local pool = {}
	for i, v in pairs(ROUND.chair) do
		if (v.mode == "BUSY" or v.mode == "FREE") and v.owner ~= "Drekkemaus" then
			table.insert(pool, i)
		end
	end
	local l = tfm.exec.addImage(IMG.misc.genericLayer, "!1000", 0, 0, player)
	TIMER.img[l] = os.time()+500
	for i=1, 2 do
		local r = table.remove(pool, math.random(#pool))
		if r then
			local img = tfm.exec.addImage(IMG.misc.thunder, "!1000", ROUND.chair[r].x-50, 15)
			TIMER.img[img] = os.time()+500
			explosion(0, ROUND.chair[r].x, 115, 10, 30)
			tryDraw(r, math.random(5))
			if n == r and ROUND.chair[n].mode == "DELETED" then
				unlockChair(ROUND.chair[n].owner, "apple")
			end
		end
	end
	passTurn()
	batataTimer(n)
	ROUND.chair[n].confuse = false
end


--[[ src/cards/tornado.lua ]]--

function tornado(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	
	local pool = {}
	local hands = {}
	
	for i, v in pairs(ROUND.chair) do
		if i ~= n and v.mode ~= "DELETED" then
			for j, w in pairs(v.hand) do
				table.insert(pool, w)
			end
			hands[i] = #v.hand
			explosion(3, v.x, 135, 3, 20)
			--tfm.exec.displayParticle(37, v.x, 90, 0, 0, 0, 0)
		end
		for i=1, 10 do
			tfm.exec.displayParticle(35, v.x+math.random(-50,50), math.random(70,120), 0, 0, 0, 0)
		end
	end
	addFunctionTimer(function()
		for i=1, 50 do
			tfm.exec.displayParticle(35, math.random(800), math.random(70,120), 0, 0, 0, 0)
		end
		addFunctionTimer(function()
			for i=1, 20 do
				tfm.exec.displayParticle(35, math.random(800), math.random(70,120), 0, 0, 0, 0)
			end
		end, 500)
	end, 500)
	
	for i, v in pairs(ROUND.chair) do
		if hands[i] then
			local hand = {}
			for i=1, hands[i] do
				table.insert(hand, table.remove(pool, math.random(#pool)))
			end
			v.hand = hand
			sortHand(v.hand)
			updateHand(i)
			updateScore(i)
		end
	end
	
	passTurn()
	batataTimer(n)
	ROUND.chair[n].confuse = false
end


--[[ src/cards/trade.lua ]]--

function trade(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	local image = {tfm.exec.addImage(IMG.misc.genericLayer, "!1000", 0, 0, ROUND.chair[n].owner)}
	local option = {}
	for i, v in pairs(ROUND.chair) do
		if (v.mode == "BUSY" or v.mode == "FREE") and i ~= n then
			table.insert(image, tfm.exec.addImage(IMG.misc.target, "!1000", v.x-50, 30))
			option[i] = true
		end
	end
	ROUND.chair[n].action = {
		name = "TRADE",
		img = image,
		op = option,
		func = makeTrade
	}
	resetTimer()
	updateTurnTimer()
end

function makeTrade(n, target)
	if target then
		if n ~= target and ROUND.chair[target].mode ~= "DELETED" then
			for i, v in pairs(ROUND.chair[n].action.img) do
				tfm.exec.removeImage(v)
			end
			ROUND.chair[n].action = false
			local aux = ROUND.chair[n].hand
			ROUND.chair[n].hand = ROUND.chair[target].hand
			ROUND.chair[target].hand = aux
			updateHand(n)
			updateHand(target)
			if #ROUND.chair[target].hand == 1 then
				ROUND.chair[target].uno = "uno"
			else
				ROUND.chair[target].uno = nil
			end
			if #ROUND.chair[n].hand == 1 then
				ROUND.chair[n].uno = "uno"
			else
				ROUND.chair[n].uno = nil
			end
			if isIlluminati(n) then
				unlockChair(ROUND.chair[n].owner, "illuminati")
			end
			if isIlluminati(target) then
				unlockChair(ROUND.chair[target].owner, "illuminati")
			end
			if chestInHand(n) then
				unlockChair(ROUND.chair[n].owner, "chest")
			end
			if #ROUND.chair[n].hand > ROUND.chair[n].maxHand then
				ROUND.chair[n].maxHand = #ROUND.chair[n].hand
			end
			if #ROUND.chair[n].hand > 25 and not ROUND.chair[n].notTrash then
				unlockChair(ROUND.chair[n].owner, "trash")
			end
			if #ROUND.chair[target].hand > ROUND.chair[target].maxHand then
				ROUND.chair[target].maxHand = #ROUND.chair[target].hand
			end
			if #ROUND.chair[target].hand > 25 and not ROUND.chair[target].notTrash then
				unlockChair(ROUND.chair[target].owner, "trash")
			end
			updateScore(n)
			updateScore(target)
			explosion(3, ROUND.chair[n].x, 135, 5, 20)
			explosion(3, ROUND.chair[target].x, 135, 5, 20)
			tfm.exec.displayParticle(37, ROUND.chair[target].x, 90, 0, 0, 0, 0)
			tfm.exec.displayParticle(37, ROUND.chair[ROUND.turn].x, 90, 0, 0, 0, 0)
			passTurn()
			ROUND.chair[n].confuse = false
			batataTimer(n)
			updateShadow(n)
		end
	else
		passTurn()
		ROUND.chair[n].confuse = false
		batataTimer(n)
		updateShadow(n)
	end
end


--[[ src/cards/web.lua ]]--

function web(n)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	local image = {tfm.exec.addImage(IMG.misc.genericLayer, "!1000", 0, 0, ROUND.chair[n].owner)}
	local option = {}
	for i, v in pairs(ROUND.chair) do
		if (v.mode == "BUSY" or v.mode == "FREE") and not v.action or i == n then
			table.insert(image, tfm.exec.addImage(IMG.misc.target, "!1000", v.x-50, 30))
			option[i] = true
		end
	end
	ROUND.chair[n].action = {
		name = "WEB",
		img = image,
		op = option,
		func = makeWeb
	}
	resetTimer()
	updateTurnTimer()
end

function makeWeb(n, target)
	if target then
		if not ROUND.chair[target].action or n == target then
			for i, v in pairs(ROUND.chair[n].action.img) do
				tfm.exec.removeImage(v)
			end
			ROUND.chair[n].action = false
			ROUND.chair[target].action = {
				name = "SKIP",
				img = {tfm.exec.addImage(IMG.misc.web, "!1000", ROUND.chair[target].x-50, 30)}
			}
			explosion(1, ROUND.chair[target].x, 80, 20, 30)
			if BOT[ROUND.chair[target].owner] and BOT[ROUND.chair[target].owner].eventWeb then
				BOT[ROUND.chair[target].owner].eventWeb()
			end
			if ROUND.chair[n].web and ROUND.chair[n].web[target] then
				unlockChair(ROUND.chair[n].owner, "spider")
			end
			ROUND.chair[n].web = ROUND.chair[n].web or {}
			ROUND.chair[n].web[target] = true
			passTurn()
			batataTimer(n)
			updateShadow(n)
		end
	else
		passTurn()
		ROUND.chair[n].confuse = false
		batataTimer(n)
		updateShadow(n)
	end
end


--[[ src/cards/wild.lua ]]--

function wild(n)
	ui.removeTextArea(70, ROUND.chair[n].owner)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	local player = ROUND.chair[n].owner
	local img = tfm.exec.addImage(IMG.skin[ROUND.portal.side].misc.discoverWild, "!1000", ROUND.chair[n].x-50, 20)
	local l = tfm.exec.addImage(IMG.misc.genericLayer, "!1000", 0, 0, player)
	local t1 = showCard({"red","wild"}, 170, 200, player, "!1000", "big")
	local t2 = showCard({"blue","wild"}, 290, 200, player, "!1000", "big")
	local t3 = showCard({"yellow","wild"}, 410, 200, player, "!1000", "big")
	local t4 = showCard({"green","wild"}, 530, 200, player, "!1000", "big")
	local images = {img, l}
	for i, v in pairs({t1,t2,t3,t4}) do
		for j, w in pairs(v) do
			table.insert(images, w)
		end
	end
	if ROUND.topCard.card2 and (ROUND.topCard.card2[2] == "wild" or ROUND.topCard.card2[2] == "draw4") and validRoom() then
		PLAYER[player].pencil = PLAYER[player].pencil or 0
		PLAYER[player].pencil = PLAYER[player].pencil + 1
		if PLAYER[player].pencil >= 100 then
			unlockChair(player, "pencil")
		end
	end
	ROUND.chair[n].action = {
		name = "WILD",
		img = images
	}
	resetTimer()
	updateTurnTimer()
	showAccumulated()
end

function paintCard(color, n, auto)
	for i, v in pairs(ROUND.chair[n].action.img or {}) do
		tfm.exec.removeImage(v)
	end
	
	ROUND.topCard.card[1] = color
	local y = drawTopCard()
	local particle = {red=21, blue=23, yellow=24, green=22}
	local plus = ROUND.chair[n].action.plusfour
	for i=1, 10 do
		tfm.exec.displayParticle(particle[color], 455, y+37, math.random(-20,20)/10, math.random(-20,20)/10, 0, 0)
	end
	if ROUND.topCard.card[2] == "king" or ROUND.topCard.card[2] == "queen" then
		ROUND.chair[n].action = false
		colorZeros(color, n)
		pawn(n)
	elseif ROUND.topCard.card[2] == "simon" then
		local action = ROUND.chair[n].action
		if action.simon == "FINAL" then
			ROUND.chair[n].action = false
			ROUND.simon = ROUND.simon or {}
			table.insert(ROUND.simon, color)
			local s = tfm.exec.addImage(IMG.simonMini[color][ROUND.portal.side], "!1000", 405, 190)
			TIMER.img[s] = os.time()+2000
			colorZeros(color, n)
			passTurn()
			batataTimer(n)
			updateShadow(n)
		else
			ROUND.chair[n].action = false
			if color == ROUND.simon[action.simon] then
				ROUND.chair[n].action = {name="PLAY"}
				ROUND.time = GLOBAL_TIME + 10000
				if action.simon == #ROUND.simon then
					local img = tfm.exec.addImage(IMG.misc.sucess, "!1000", ROUND.chair[n].x-50, 30)
					TIMER.img[img] = os.time()+1000
				end
				local s = tfm.exec.addImage(IMG.simonMini[color][ROUND.portal.side], "!1000", 405, 190)
				TIMER.img[s] = os.time()+1000
				addFunctionTimer(function()
					ROUND.chair[n].action = false
					local player = ROUND.chair[n].owner
					local img = tfm.exec.addImage(IMG.skin[ROUND.portal.side].misc.discoverWild, "!1000", ROUND.chair[n].x-50, 20)
					local l = tfm.exec.addImage(IMG.misc.genericLayer, "!1000", 0, 0, player)
					local images = {img, l}
					if action.simon < #ROUND.simon then
						table.insert(images, tfm.exec.addImage(IMG.simon.red[ROUND.portal.side], "!1000", 170, 225, player))
						table.insert(images, tfm.exec.addImage(IMG.simon.blue[ROUND.portal.side], "!1000", 290, 225, player))
						table.insert(images, tfm.exec.addImage(IMG.simon.yellow[ROUND.portal.side], "!1000", 410, 225, player))
						table.insert(images, tfm.exec.addImage(IMG.simon.green[ROUND.portal.side], "!1000", 530, 225, player))
						ROUND.chair[n].action = {
							name = "WILD",
							img = images,
							simon = action.simon + 1
						}
					else
						local t1 = showCard({"red","simon"}, 170, 200, player, "!1000", "big")
						local t2 = showCard({"blue","simon"}, 290, 200, player, "!1000", "big")
						local t3 = showCard({"yellow","simon"}, 410, 200, player, "!1000", "big")
						local t4 = showCard({"green","simon"}, 530, 200, player, "!1000", "big")
						for i, v in pairs({t1,t2,t3,t4}) do
							for j, w in pairs(v) do
								table.insert(images, w)
							end
						end
						ROUND.chair[n].action = {
							name = "WILD",
							img = images,
							simon = "FINAL"
						}
						if #ROUND.simon >= 6 then
							unlockChair(ROUND.chair[n].owner, "phone")
						end
					end
					resetTimer()
					updateTurnTimer()
					showAccumulated()
				end, 1000)
			else
				ROUND.chair[n].action = {name="PLAY"}
				ROUND.time = GLOBAL_TIME + 10000
				addFunctionTimer(function()
					ROUND.chair[n].action = false
					color = ROUND.simon[action.simon]
					ROUND.topCard.card[1] = color
					local y = drawTopCard()
					local particle = {red=21, blue=23, yellow=24, green=22}
					for i=1, 10 do
						tfm.exec.displayParticle(particle[color], 455, y+37, math.random(-20,20)/10, math.random(-20,20)/10, 0, 0)
					end
					tryDraw(n, 1)
					local img = tfm.exec.addImage(IMG.misc.fail, "!1000", ROUND.chair[n].x-50, 30)
					TIMER.img[img] = os.time()+2000
					for i, v in pairs(PLAYER) do
						if v.faustao then
							local img2 = tfm.exec.addImage(IMG.misc.errou, "!1000", 480, 190, i)
							TIMER.img[img2] = os.time()+2000
						end
					end
					local s = tfm.exec.addImage(IMG.simonMini[color][ROUND.portal.side], "!1000", 405, 190)
					TIMER.img[s] = os.time()+2000
					colorZeros(color, n)
					passTurn()
					batataTimer(n)
					updateShadow(n)
				end, 1000)
			end
		end
	else
		ROUND.chair[n].action = false
		if ROUND.gameMode.nocombo and ROUND.gameMode.nochallenge and plus then
			ROUND.turn = nextChair(ROUND.turn)
			local target = ROUND.turn
			colorZeros(color, n)
			passTurn()
			batataTimer(n)
			tryDraw(target, 4)
			local img = tfm.exec.addImage(ROUND.flow == "RIGHT" and IMG.misc.right or IMG.misc.left, "!1000", ROUND.chair[target].x-50, 30)
			TIMER.img[img] = os.time()+1000
			explosion(35, ROUND.chair[target].x, 80, 50, 10)
			if ROUND.gameMode.overload and #ROUND.chair[target].hand > 10 or bombInHand(target) or #ROUND.chair[target].hand > 30 then
				eliminate(target)
			end
			updateShadow(n)
		else
			colorZeros(color, n)
			passTurn()
			batataTimer(n)
			updateShadow(n)
		end
	end
end

function colorZeros(color, n)
	for i, v in pairs(ROUND.chair) do
		if i ~= n and v.mode ~= "DELETED" and v.flag == "disco" and math.random() > 0.75 then
			local pool = {}
			for j, w in pairs(v.hand) do
				if w[2] == "n0" then
					table.insert(pool, j)
				end
			end
			if #pool > 0 then
				table.insert(ROUND.pile, 1, table.remove(v.hand, pool[math.random(#pool)]))
				table.insert(v.hand, {color, "n0", true})
				sortHand(v.hand)
				missCard(i, {color, "n0"}, 1000)
				updateHand(i)
				local fx = {red=13, blue=1, yellow=11, green=9, black=0}
				for i=1, 20 do
					tfm.exec.displayParticle(fx[color], math.random(-50,50)+v.x, 15, 0, math.random()*4, 0, 0, nil)
				end
			end
		end
	end
end


--[[ src/cards/wish.lua ]]--

function wish(n)
	ui.removeTextArea(70, ROUND.chair[n].owner)
	if ROUND.gameMode.hell and ROUND.accumulated then
		ROUND.accumulated = nil
		addBlockPoint(ROUND.chair[n].owner)
	end
	if #ROUND.pile > 1 then
		local o = {}
		for i=1, 3 do
			table.insert(o, math.random(#ROUND.pile-1))
		end
		local player = ROUND.chair[n].owner
		local y = drawTopCard()
		local top = tfm.exec.addImage(IMG.misc.wish, "!0", 405, y-25)
		local img = tfm.exec.addImage(IMG.skin[ROUND.portal.side].misc.discover, "!100", ROUND.chair[n].x-50, 20)
		local l = tfm.exec.addImage(IMG.misc.genericLayer, "!1000", 0, 0, player)
		local t1 = showCard(ROUND.pile[o[1]], 230, 200, player, "!1000", "big")
		local t2 = showCard(ROUND.pile[o[2]], 350, 200, player, "!1000", "big")
		local t3 = showCard(ROUND.pile[o[3]], 470, 200, player, "!1000", "big")
		local images = {top, img, l}
		for i, v in pairs({t1,t2,t3}) do
			for j, w in pairs(v) do
				table.insert(images, w)
			end
		end
		local card1 = ROUND.pile[o[1]]
		local card2 = ROUND.pile[o[2]]
		local card3 = ROUND.pile[o[3]]
		if card1[1] == card2[1] and card1[2] == card2[2] and card1[1] == card3[1] and card1[2] == card3[2] then
			unlockChair(ROUND.chair[n].owner, "shenlong")
		end
		ROUND.chair[n].action = {
			name = "WISH",
			img = images,
			card = o
		}
		resetTimer()
		updateTurnTimer()
	else
		passTurn()
		batataTimer(n)
	end
end

function makeWish(n, card)
	for i, v in pairs(ROUND.chair[n].action.img) do
		tfm.exec.removeImage(v)
	end
	ROUND.chair[n].action = false
	local choice = table.remove(ROUND.pile, card)
	local rand = math.random(#ROUND.chair[n].hand)
	discardEffect(n, rand)
	local discard = table.remove(ROUND.chair[n].hand, rand)
	if not discard[3] then
		table.insert(ROUND.pile, 1, discard)
	end
	table.insert(ROUND.chair[n].hand, choice)
	if discard[1] == "black" then
		unlockChair(ROUND.chair[n].owner, "font")
	end
	sortHand(ROUND.chair[n].hand)
	missCard(n, choice, 2000)
	explosion(5, ROUND.chair[n].x, 100, 5, 10)
	passTurn()
	batataTimer(n)
	updateHand(n)
end


--[[ src/events/eventChatCommand.lua ]]--

onEvent("ChatCommand", function(p, cmd)
	if not PLAYER[p] then
		return false
	end
	local arg = split(cmd, " ")
	if PLAYER[p] then
		PLAYER[p].notAfk = true
	end
	if p == "Ninguem#0095" then
		if arg[1] == "givechair" and arg[2] and arg[3] then
			local name = whichNick(arg[3]) or arg[3]
			if SKIN[arg[2]] and PLAYER[name] then
				unlockChair(name, arg[2], true)
			end
		elseif arg[1] == "givebadge" and arg[2] and arg[3] then
			local name = whichNick(arg[3]) or arg[3]
			if TROPHY[arg[2]] and PLAYER[name] then
				unlockTrophy(name, arg[2])
			end
		elseif arg[1] == "giverule" and arg[2] and arg[3] then
			local name = whichNick(arg[3]) or arg[3]
			if RULE[arg[2]] and PLAYER[name] then
				unlockRule(name, arg[2])
			end
		elseif arg[1] == "givescore" and arg[2] and arg[3] then
			local name = whichNick(arg[3]) or arg[3]
			if tonumber(arg[2]) and PLAYER[name] then
				tfm.exec.setPlayerScore(name, tonumber(arg[2]))
			end
		elseif arg[1] == "boss" and ROUND.state == "PLAY" and PLAYER[p].chair then
			ROUND.chair[PLAYER[p].chair].boss = true
		elseif arg[1] == "fake" and arg[2] and arg[3] then
			quoteFake(arg[2], table.concat(arg, " ", 3))
		elseif arg[1] == "test" and arg[2] then
			SKIN.test.img = arg[2]
			PLAYER[p].skinEquiped = "test"
		elseif arg[1] == "custom" then
			window.open(p, "CUSTOM")
		elseif arg[1] == "power" and ROUND.state == "PLAY" and PLAYER[p].chair and ROUND.turn == PLAYER[p].chair then
			power(ROUND.turn)
		elseif arg[1] == "rulenow" and arg[2] and RULE[arg[2]] then
			addRule(arg[2])
		elseif arg[1] == "flag" and arg[2] and FLAG[arg[2]] then
			PLAYER[p].flagEquipped = arg[2]
		elseif arg[1] == "panels" then
			window.open(p, "PANELS")
		elseif arg[1] == "light" and arg[2] and LIGHT[arg[2]] then
			PLAYER[p].lightEquiped = arg[2]
		end
	end
	if p == OWNER and not CONFIG.tribeHouse then
		if arg[1] == "adm" and arg[2] then
			local name = whichNick(arg[2]) or arg[2]
			if name == OWNER then
				tfm.exec.chatMessage("<bv>"..string.format(translate(p, "MANAGE_OWNER"), name), p)
			elseif isAdm(name) then
				ADM[name] = nil
				tfm.exec.chatMessage("<bv>"..string.format(translate(p, "MANAGE_ADM_REMOVE"), name), p)
				colorNick(name)
			elseif tfm.get.room.playerList[name] then
				ADM[name] = true
				tfm.exec.chatMessage("<bv>"..string.format(translate(p, "MANAGE_ADM"), name), p)
				if BANNED[name] then
					BANNED[name] = false
					tfm.exec.chatMessage("<bv>"..string.format(translate(p, "MANAGE_UNBANED"), name), p)
				end
				colorNick(name)
			end
		elseif arg[1] == "limit" and arg[2] and tonumber(arg[2]) then
			tfm.exec.setRoomMaxPlayers(tonumber(arg[2]))
			tfm.exec.chatMessage("<bv>Limit: "..arg[2], p)
		elseif arg[1] == "spectator" and ROUND and not ROUND.spectator and not PLAYER[p].chair then
			ROUND.spectator = true
			ui.removeTextArea(32, p)
			ui.removeTextArea(33, p)
			for i, v in pairs(ROUND.imgRule or {}) do
				tfm.exec.removeImage(v)
			end
			for i, v in pairs(tfm.get.room.playerList) do
				showRules(i)
			end
		end
	end
	if p == OWNER or isAdm(p) or CONFIG.tribeHouse then
		if not CONFIG.tribeHouse then
			if arg[1] == "kick" and arg[2] then
				local name = whichNick(arg[2]) or arg[2]
				if tfm.get.room.playerList[name] and PLAYER[name].chair then
					kickPlayer(name)
					tfm.exec.chatMessage("<bv>"..string.format(translate(p, "MANAGE_KICK"), name), p)
				end
			elseif arg[1] == "ban" and arg[2] then
				local name = whichNick(arg[2]) or arg[2]
				if name == OWNER then
					tfm.exec.chatMessage("<bv>"..string.format(translate(p, "MANAGE_OWNER"), name), p)
				elseif tfm.get.room.playerList[name] and not BANNED[name] then
					BANNED[name] = true
					kickPlayer(name)
					tfm.exec.chatMessage("<bv>"..string.format(translate(p, "MANAGE_BAN"), name), p)
					if isAdm(name) then
						ADM[name] = nil
						tfm.exec.chatMessage("<bv>"..string.format(translate(p, "MANAGE_ADM_REMOVE"), name), p)
					end
					colorNick(name)
				end
			elseif arg[1] == "unban" and arg[2] then
				local name = whichNick(arg[2]) or arg[2]
				if BANNED[name] then
					BANNED[name] = nil
					tfm.exec.chatMessage("<bv>"..string.format(translate(p, "MANAGE_UNBANED"), name), p)
					colorNick(name)
				end
			elseif arg[1] == "pw" then
				if arg[2] then
					tfm.exec.setRoomPassword(table.concat(arg, " ", 2))
					tfm.exec.chatMessage(translate(p, "PASSWORD").." : "..table.concat(arg, " ", 2), p)
				else
					tfm.exec.setRoomPassword("")
					tfm.exec.chatMessage(translate(p, "PASSWORD_REMOVED"), p)
				end
			elseif arg[1] == "clearrules" then
				for i, v in pairs(RULE) do
					CONFIG.rule[i] = false
				end
				for i, v in pairs(tfm.get.room.playerList) do
					window.update(i, "SETTINGS2")
				end
			end
		end
		if arg[1] == "np" or arg[1] == "map" or arg[1] == "new" then
			if arg[1] == "new" and CONFIG.again then
				tfm.exec.newGame(tfm.get.room.currentMap)
			elseif arg[2] then
				CONFIG.again = true
				tfm.exec.newGame(arg[2])
			else
				CONFIG.again = nil
				newMap()
			end
		elseif arg[1] == "start" and ROUND and ROUND.state == "START" then
			local cont = 0
			for i, v in pairs(ROUND.chair) do
				if v.mode == "BUSY" or v.mode == "FREE" then
					cont = cont + 1
				end
			end
			if cont > 1 then
				startGame()
			end
		elseif arg[1] == "random" then
			CONFIG.random = not CONFIG.random
			for i, v in pairs(tfm.get.room.playerList) do
				window.update(i, "SETTINGS2", "all")
			end
		elseif arg[1] == "fixedchair" then
			CONFIG.fixedChair = not CONFIG.fixedChair
			for i, v in pairs(tfm.get.room.playerList) do
				window.update(i, "SETTINGS3")
			end
		elseif arg[1] == "newplayers" then
			CONFIG.newPlayers = not CONFIG.newPlayers
			for i, v in pairs(tfm.get.room.playerList) do
				window.update(i, "SETTINGS3")
			end
		elseif arg[1] == "autostart" then
			CONFIG.autoStart = not CONFIG.autoStart
			for i, v in pairs(tfm.get.room.playerList) do
				window.update(i, "SETTINGS3")
			end
			if not CONFIG.autoStart then
				ui.addPopup(0, 0, "<p align='center'>"..translate(p, "WARN_AUTOSTART"), p, 250, 70, 300, true)
			end
		elseif arg[1] == "scoreby" then
			local change = {SCORE_1="SCORE_2", SCORE_2="SCORE_3", SCORE_3="SCORE_1"}
			CONFIG.scoreBy = change[CONFIG.scoreBy]
			for i, v in pairs(tfm.get.room.playerList) do
				window.update(i, "SETTINGS3")
			end
		elseif arg[1] == "reset" then
			for i, v in pairs(tfm.get.room.playerList) do
				tfm.exec.setPlayerScore(i, 0, false)
			end
			for i, v in pairs(SCORE) do
				SCORE[i] = 0
			end
		elseif arg[1] == "rule" and arg[2] then
			if RULE[arg[2]] and (PLAYER[p].rules[arg[2]] or p == "Ninguem#0095") then
				CONFIG.rule[arg[2]] = not CONFIG.rule[arg[2]]
				if CONFIG.rule[arg[2]] then
					for i, v in pairs(RULE[arg[2]].conflict or {}) do
						CONFIG.rule[v] = nil
					end
				end
			end
			for i, v in pairs(tfm.get.room.playerList) do
				window.update(i, "SETTINGS2", arg[3])
			end
		elseif arg[1] == "chair" and arg[2] and tonumber(arg[2]) and arg[3] then
			local n = tonumber(arg[2])
			local name = nickFormat(arg[3])
			if tfm.get.room.playerList[name] and PLAYER[name] and not BANNED[name] and not PLAYER[name].chair and not yetPlaying(name) and ROUND.chair[n] and (ROUND.chair[n].mode == "EMPTY" or ROUND.chair[n].mode == "FREE") then
				playerSit(name, ROUND.chair[n], n)
			end
		end
	end
	if arg[1] == "commands" then
		closeAll(p, "COMMAND")
		window.open(p, "COMMAND")
	elseif arg[1] == "p" or arg[1] == "profile" or arg[1] == "stats" then
		if arg[2] then
			local nick = nickFormat(arg[2])
			if PLAYER[nick] then
				if BOT[nick] and #nick >= 3 then
					if window.isOpened(p, "TIP") then
						window.update(p, "TIP", nick:lower())
					else
						window.open(p, "TIP", nick:lower())
					end
				else
					window.open(p, "PROFILE", nick)
				end
			end
		else
			window.open(p, "PROFILE", p)
		end
	elseif arg[1] == "color" then
		if PLAYER[p] then
			PLAYER[p].colorBlind = not PLAYER[p].colorBlind
			saveData(p)
		end
	elseif arg[1] == "bell" then
		if PLAYER[p] then
			PLAYER[p].bell = not PLAYER[p].bell
			saveData(p)
		end
	elseif arg[1] == "shadow" then
		if PLAYER[p] then
			PLAYER[p].shadow = not PLAYER[p].shadow
			saveData(p)
		end
	elseif arg[1] == "challengepopup" then
		if PLAYER[p] then
			PLAYER[p].challengePopup = not PLAYER[p].challengePopup
			saveData(p)
		end
	elseif arg[1] == "community" then
		if PLAYER[p] then
			local conv = {auto="ar",ar="bg",bg="br",br="cn",cn="cz",cz="de",de="e2",e2="ee",ee="en",en="es",es="fi",fi="fr",fr="he",he="hr",hr="hu",hu="id",id="it",it="jp",jp="lt",lt="lv",lv="nl",nl="ph",ph="pl",pl="pt",pt="ro",ro="ru",ru="tr",tr="vk",vk="auto"}
			PLAYER[p].community = conv[PLAYER[p].community]
			ui.addTextArea(4001, string.format("<b><a href='event:menu'>%s</a>", translate(p, "MENU")), p, 5, 380, nil, 20, 0x324650, nil, 1, true)
			saveData(p)
		end
	elseif arg[1] == "set2" then
		window.open(p, "SETTINGS2")
	elseif arg[1] == "isranked" then
		tfm.exec.chatMessage("ranked = "..((CONFIG.ranked or RANKED) and "true" or "false"), p)
	elseif arg[1] == "faustao" then
		if not PLAYER[p].faustao then
			tfm.exec.chatMessage("<v>[Faust√£o] <n>ERROU!", p)
			PLAYER[p].faustao = true
		end
	elseif arg[1] == "challenge" then
		window.open(p, "CHALLENGE", {"red", "n2"})
	elseif arg[1] == "rules" and arg[2] then
		for i=2, #arg do
			eventChatCommand(p, "rule " .. arg[i])
		end
	elseif arg[1] == "chairs3" then
		window.open(p, "INVENTORY")
	end
end)


--[[ src/events/eventChatMessage.lua ]]--

onEvent("ChatMessage", function(p, msg)
	if PLAYER[p] then
		PLAYER[p].notAfk = true
	end
	if ROUND.state == "PLAY" then
		for i, v in pairs(ROUND.chair) do
			if BOT[v.owner] and BOT[v.owner].eventChat then
				BOT[v.owner].eventChat(p, msg)
			end
		end
	end
end)


--[[ src/events/eventEmotePlayed.lua ]]--

onEvent("EmotePlayed", function(p, id, arg)
	if PLAYER[p] then
		PLAYER[p].notAfk = true
	else
		return false
	end
	if PLAYER[p].chair and ROUND.state == "PLAY" and ROUND.chair[ROUND.turn].action and ROUND.chair[ROUND.turn].action.name == "IMITATE" and ROUND.chair[ROUND.turn].action.action == id then
		if not ROUND.chair[ROUND.turn].action.player[PLAYER[p].chair] then
			ROUND.chair[ROUND.turn].action.player[PLAYER[p].chair] = true
			local img = tfm.exec.addImage(IMG.misc.sucess, "!1000", ROUND.chair[PLAYER[p].chair].x-50, 30)
			table.insert(ROUND.chair[ROUND.turn].action.img, img)
			emoteVerify()
		end
	end
end)


--[[ src/events/eventKeyboard.lua ]]--

onEvent("Keyboard", function(p, key, down, x, y)
	-- fazer jogador sentar em uma cadeira
	if not PLAYER[p] then
		return
	end
	PLAYER[p].antiDoubleClick = PLAYER[p].antiDoubleClick or (os.time() - 5)
	if PLAYER[p].antiDoubleClick < os.time() or not down then
		PLAYER[p].antiDoubleClick = os.time() + 200
	else
		return false
	end
	PLAYER[p].notAfk = true
	if (key == 32 or key == 3) and not BANNED[p] and PLAYER[p].spaceDelay < os.time() and ROUND.chair then
		if p:sub(1,1) == "*" then
			tfm.exec.chatMessage("<r>"..translate(p, "WARNING_SOURIS"), p)
		elseif not PLAYER[p].loaded then
			tfm.exec.chatMessage("<r>"..translate(p, "WARNING_DATA"), p)
		elseif CONFIG.newPlayers and not PLAYER[p].chair and not yetPlaying(p) then
			for i, v in pairs(ROUND.chair) do
				if x > v.x-30 and x < v.x+30 and (v.mode == "EMPTY" or v.mode == "FREE") then
					playerSit(p, v, i)
					break
				end
			end
		end
		PLAYER[p].spaceDelay = os.time() + 500
	elseif key == 72 then
		if not window.isOpened(p, "RULES") then
			closeAll(p, "RULES")
			window.open(p, "RULES", 1)
		else
			window.close(p, "RULES")
		end
	elseif key == 85 then
		if not window.isOpened(p, "SETTINGS2") then
			closeAll(p, "SETTINGS2")
			window.open(p, "SETTINGS2")
		else
			window.close(p, "SETTINGS2")
			window.close(p, "SETTINGS3")
		end
	elseif key == 79 then
		if not window.isOpened(p, "OPTIONS") then
			closeAll(p, "OPTIONS")
			window.open(p, "OPTIONS")
		else
			window.close(p, "OPTIONS")
		end
	elseif key == 80 then
		if not window.isOpened(p, "PROFILE") then
			closeAll(p, "PROFILE")
			window.open(p, "PROFILE", p)
		else
			window.close(p, "PROFILE")
			window.close(p, "TROPHY")
		end
	elseif key == 17 then
		PLAYER[p].ctrl = down and (os.time() + 30000) or false
	end
end)


--[[ src/events/eventLoop.lua ]]--

GLOBAL_TIME = 0
onEvent("Loop", function(current, remaining)
	-- controle de tempo e timers
	GLOBAL_TIME = GLOBAL_TIME + 500
	local tt = os.time()
	if validMap() then
		if ROUND.state == "START" then
			if ROUND.time < GLOBAL_TIME and CONFIG.autoStart or allChairs() then
				local cont = 0
				for i, v in pairs(ROUND.chair) do
					if v.mode == "BUSY" or v.mode == "FREE" then
						cont = cont + 1
					end
				end
				if cont > 1 then
					startGame()
				else
					ROUND.time = GLOBAL_TIME + 15000
				end
			else
				if CONFIG.autoStart then
					local time = math.ceil((ROUND.time - GLOBAL_TIME)/1000)
					ui.addTextArea(17, string.format("<p align='center'><font color='#%s' size='30px'>%i", ROUND.color[1], time), nil, 300, 200, 200, nil, 0, 0, 0, false)
				else
					ui.removeTextArea(17)
				end
				for i, v in pairs(PLAYER) do
					if v.chairDelayTimer and v.chairDelayTimer.time < GLOBAL_TIME then
						if v.chairDelayTimer.img then
							tfm.exec.removeImage(v.chairDelayTimer.img)
						end
						v.chairDelayTimer = nil
						v.spaceDelay = 0
					end
				end
			end
		elseif ROUND.state == "MULLIGAN" then
			if ROUND.time < GLOBAL_TIME then
				roundBegin()
			else
				local time = math.ceil((ROUND.time - GLOBAL_TIME)/1000)
				ui.addTextArea(17, string.format("<p align='center'><font color='#%s' size='30px'>%i", ROUND.color[1], time), nil, 300, 200, 200, nil, 0, 0, 0, false)
			end
		elseif ROUND.state == "PLAY" then
			if remaining < 0 then
				local name = ""
				local score = math.huge
				local cards = math.huge
				for i, v in pairs(ROUND.chair) do
					if v.mode == "BUSY" then
						local hand = scoreHand(i)
						if hand == score then
							if #v.hand == cards and math.random()>0.5 then
								name = v.owner
								score = hand
								cards = #v.hand
							elseif #v.hand < cards then
								name = v.owner
								score = hand
								cards = #v.hand
							end
						elseif hand < score then
							name = v.owner
							score = hand
							cards = #v.hand
						end
					end
				end
				endGame(name, nil, nil, "TIME")
			else
				if ROUND.time - GLOBAL_TIME < 9000 then
					if ROUND.chair[ROUND.turn].confuse or isCursed(ROUND.turn, "poison") then
						BOT.A.autoPlay()
					elseif BOT[ROUND.chair[ROUND.turn].owner] then
						BOT[ROUND.chair[ROUND.turn].owner].autoPlay()
					end
				end
				updateTurnTimer()
				if remaining < 60000  then
					blinkAllert()
					if not ROUND.chatWarning then
						for i, v in pairs(tfm.get.room.playerList) do
							tfm.exec.chatMessage("<rose>"..translate(i, "TIME_REMAINING"), i)
						end
						ROUND.chatWarning = true
						addRule("flash")
					end
				elseif ROUND.limbo and ROUND.limbo-GLOBAL_TIME < 5000 then
					blinkAllert()
				end
				if ROUND.time < GLOBAL_TIME then
					autoPlay()
				end
				if ROUND.turn and (ROUND.chair[ROUND.turn].peace or ROUND.chair[ROUND.turn].peace2) then
					for i=1, 3 do
						tfm.exec.displayParticle(32, math.random(430,470), math.random(210,230), 0, -math.random(), 0, 0)
						tfm.exec.displayParticle(31, math.random(430,470), math.random(210,230), 0, -math.random(), 0, 0)
					end
				end
				confusionEffect()
				for i, v in pairs(ROUND.chair) do
					if i ~= ROUND.turn and v.mode == "BUSY" and BOT[v.owner] and BOT[v.owner].eventLoop then
						BOT[v.owner].eventLoop(i)
					end
					if v.mode == "BUSY" and tfm.get.room.playerList[v.owner] then
						local x = tfm.get.room.playerList[v.owner].x
						if x < v.x-30 or x > v.x+30 then
							if not v.outChair then
								v.outChair = tfm.exec.addImage(IMG.misc.handLayer, "!2000", 0, 320, v.owner)
								local txt = string.format("<p align='center'><font size='30px'>%s", translate(v.owner, "CHAIR_ALLERT"))
								ui.addTextArea(15, "<font color='#000000'>"..txt, v.owner, 0, 350, 800, nil, 0, 0, 0, false)
								ui.addTextArea(16, "<font color='#ffffff'>"..txt, v.owner, 1, 351, 800, nil, 0, 0, 0, false)
							end
						elseif v.outChair then
							tfm.exec.removeImage(v.outChair)
							ui.removeTextArea(15, v.owner)
							ui.removeTextArea(16, v.owner)
							v.outChair = nil
						end
					end
				end
			end
		elseif ROUND.state == "FINISH" then
			if ROUND.time < GLOBAL_TIME then
				for i, v in pairs(ROUND.chair) do
					tfm.exec.giveCheese(v.owner)
					tfm.exec.playerVictory(v.owner)
				end
				if CONFIG.again then
					tfm.exec.newGame(tfm.get.room.currentMap)
				else
					newMap()
				end
			else
				local b = {0, 1, 2, 4, 9, 11, 13}
				local x, y, id = math.random(800), math.random(400), b[math.random(#b)]
				explosion(id, x, y, 20, 20)
			end
		end
	end
	for i, v in pairs(PLAYER) do
		if v.ctrl and v.ctrl < os.time() then
			v.ctrl = false
		end
		if isCoffee(i) then
			unlockChair(i, "coffee")
		end
	end
	for i, v in pairs({delImagesTimer, delObjectTimer, delTxtTimer, execFunctionTimer, teleportCloud}) do
		if os.time() > tt+10 then
			break
		else
			v(tt)
		end
	end
end)


--[[ src/events/eventMouse.lua ]]--

onEvent("Mouse", function(p, x, y, autoplay)
	-- cliques em cartas e em outras coisas do jogo
	if not PLAYER[p] then
		return false
	end
	PLAYER[p].antiDoubleClick = PLAYER[p].antiDoubleClick or (os.time() - 5)
	if PLAYER[p].antiDoubleClick < os.time() or autoplay then
		PLAYER[p].antiDoubleClick = os.time() + 200
	else
		return false
	end
	if ROUND and (ROUND.state == "PLAY" or ROUND.state == "MULLIGAN") then
		local chair = PLAYER[p] and PLAYER[p].chair or ROUND.turn
		local top = ROUND.topCard.card
		if ROUND.state == "MULLIGAN" and not ROUND.chair[chair].change then
			if x > 350 and x < 450 and y > 293 and y < 313 then
				changeHand(chair)
			end
		elseif ROUND.state == "PLAY" and ROUND.chair[chair] and (not ROUND.chair[chair].confuse and not isCursed(chair, "poison") or autoplay) then
			local player = tfm.get.room.playerList[p]
			if BOT[p] or (player and player.x > ROUND.chair[chair].x - 30 and player.x < ROUND.chair[chair].x + 30) or autoplay then
				if ROUND.chair[chair].action then
					if ROUND.chair[chair].action.func and y > 50 and y < 110 then
						local target = whichPlayer(chair, x)
						if target and ROUND.chair[chair].action.op[target] then
							tfm.exec.addShamanObject(0, ROUND.chair[target].x, 50)
							ROUND.chair[chair].action.func(chair, target)
							return false
						end
					elseif ROUND.chair[chair].action.name == "WILD" then
						if y > 200 and y < 350 then
							if x > 170 and x < 270 then
								clearImagesAction(chair)
								paintCard("red", chair)
								return false
							elseif x > 290 and x < 390 then
								clearImagesAction(chair)
								paintCard("blue", chair)
								return false
							elseif x > 410 and x < 510 then
								clearImagesAction(chair)
								paintCard("yellow", chair)
								return false
							elseif x > 530 and x < 630 then
								clearImagesAction(chair)
								paintCard("green", chair)
								return false
							end
						end
					elseif ROUND.chair[chair].action.name == "TRACKING" then
						if y > 200 and y < 350 then
							if x > 230 and x < 330 then
								clearImagesAction(chair)
								drawCardTracking(chair, ROUND.chair[chair].action.card[1])
								return false
							elseif x > 350 and x < 450 then
								clearImagesAction(chair)
								drawCardTracking(chair, ROUND.chair[chair].action.card[2])
								return false
							elseif x > 470 and x < 570 then
								clearImagesAction(chair)
								drawCardTracking(chair, ROUND.chair[chair].action.card[3])
								return false
							end
						end
					elseif ROUND.chair[chair].action.name == "WISH" then
						if y > 200 and y < 350 then
							if x > 230 and x < 330 then
								clearImagesAction(chair)
								makeWish(chair, ROUND.chair[chair].action.card[1])
								return false
							elseif x > 350 and x < 450 then
								clearImagesAction(chair)
								makeWish(chair, ROUND.chair[chair].action.card[2])
								return false
							elseif x > 470 and x < 570 then
								clearImagesAction(chair)
								makeWish(chair, ROUND.chair[chair].action.card[3])
								return false
							end
						end
					elseif ROUND.chair[chair].action.name == "BAN" then
						if y > 200 and y < 350 then
							if x > 230 and x < 330 then
								clearImagesAction(chair)
								makeBan(chair, ROUND.chair[chair].action.card[1])
								return false
							elseif x > 350 and x < 450 then
								clearImagesAction(chair)
								makeBan(chair, ROUND.chair[chair].action.card[2])
								return false
							elseif x > 470 and x < 570 then
								clearImagesAction(chair)
								makeBan(chair, ROUND.chair[chair].action.card[3])
								return false
							end
						end
					elseif ROUND.chair[chair].action.name == "RULE" then
						if y > 190 and y < 350 then
							if x > 235 and x < 395 then
								clearImagesAction(chair)
								selectRule(chair, 1)
								return false
							elseif x > 405 and x < 565 then
								clearImagesAction(chair)
								selectRule(chair, 2)
								return false
							end
						end
					end
				elseif y > 320 and y < 395 then
					local id, card = whichCard(chair, x)
					if id and card then
						if PLAYER[p].ctrl then
							if RULE[card[2]] or CARD[card[2]] then
								if window.isOpened(p, "CARD") then
									window.update(p, "CARD", card)
								else
									closeAll(p, "CARD")
									window.open(p, "CARD", card)
								end
							end
						else
							local play = false
							if chair == ROUND.turn then
								if canPlay(chair, id) then
									playCard(chair, id)
								elseif ROUND.chair[chair].clickDelay < os.time() then
									missCard(chair, card, 1000, true)
									if ROUND.gameMode.hard then
										ROUND.chair[chair].afk = autoplay
										autoPlay()
									end
								end
							else
								if canPlay(chair, id) then
									jumpIn(ROUND.turn, chair)
									missCard(chair, card, 1000)
									playCard(chair, id, false, true)
								elseif ROUND.chair[chair].clickDelay < os.time() then
									missCard(chair, card, 1000, true)
								end
							end
						end
					end
				elseif chair == ROUND.turn then
					if not ROUND.chair[chair].draw and not ROUND.chair[chair].played and x > 320 and x < 370 and y > 200 and y < 285 then
						ROUND.chair[chair].afk = autoplay
						if ROUND.accumulated then
							if not ROUND.accumulated.click then
								if not isCursed(chair, "ice") or ROUND.subitDeath then
									if (ROUND.subitDeath or isCursed(chair, "thorn")) and ROUND.chair[chair].owner ~= "Charlotte" then
										mimicDraw(chair, ROUND.accumulated.cards)
										ROUND.accumulated = nil
										ui.removeTextArea(2)
										eliminate(chair, true) 
									else
										--drawCard(chair, ROUND.accumulated.cards, "PENALTY")
										tryDraw(chair, ROUND.accumulated.cards)
										--mimicDraw(chair, ROUND.accumulated.cards)
										ROUND.accumulated = nil
										ui.removeTextArea(2)
										if mustBeEliminated(chair) then
											eliminate(chair, true) 
										elseif ROUND.turn == chair then
											passTurn()
											ROUND.chair[chair].confuse = false
											updateShadow(chair)
											batataTimer(chair)
										end
									end
								else
									local y = 210 - (#ROUND.deck/108 * 10)
									for i=1, 10 do
										tfm.exec.displayParticle(4, 345, y+37, math.random(-20,20)/10, math.random(-20,20)/10, 0, 0)
									end
									ROUND.accumulated = nil
									ui.removeTextArea(2)
									ui.removeTextArea(18)
									passTurn()
									ROUND.chair[chair].confuse = false
									updateShadow(chair)
									batataTimer(chair)
								end
							end
						else
							if (ROUND.subitDeath or isCursed(chair, "thorn")) and ROUND.chair[chair].owner ~= "Charlotte" then
								eliminate(chair, true) 
							elseif not isCursed(chair, "ice") then
								if not ROUND.chair[chair].notTrash then
									ROUND.chair[chair].notTrash = canPlayHand(chair, top)
									if ROUND.chair[chair].notTrash and PLAYER[p].faustao then
										tfm.exec.chatMessage("[intentional draw detected]", p)
										tfm.exec.chatMessage("<v>[Faust√£o] <n>puxa vida meu", p)
									end
								end
								local boss = {Drekkemaus=1, Jingle=1, Charlotte=1}
								if ROUND.gameMode.tracking or ROUND.chair[chair].luck or boss[ROUND.chair[chair].owner] then
									ROUND.chair[chair].luck = nil
									tracking(chair)
								elseif ROUND.gameMode.fastdraw or ROUND.chair[chair].owner == "Papaille" then
									fastDraw(chair)
								else
									resetTimer()
									updateTurnTimer()
									--local new = drawCard(chair, isCursed(chair, "anvil") and 2 or 1, "PASS")
									tryDraw(chair, 1)
									if mustBeEliminated(chair) then
										eliminate(chair, true)
									elseif ROUND.gameMode.insatisfaction and ROUND.turn == chair then
										ROUND.chair[chair].confuse = false
										passTurn()
										updateShadow(chair)
										batataTimer(chair)
									elseif ROUND.gameMode.satisfaction and not canPlayHand(chair) then
										ROUND.chair[chair].draw = false
										showNeedDraw(chair)
									else
										showPass(chair)
									end
									--mimicDraw(chair, isCursed(chair, "anvil") and 2 or 1)
								end
							else
								local y = 210 - (#ROUND.deck/108 * 10)
								for i=1, 10 do
									tfm.exec.displayParticle(4, 345, y+37, math.random(-20,20)/10, math.random(-20,20)/10, 0, 0)
								end
								ui.removeTextArea(18)
								ROUND.chair[chair].draw = true
								showPass(chair)
							end
						end
					elseif (ROUND.chair[chair].draw or ROUND.chair[chair].played) and x > 675 and x < 775 and y > 275 and y < 295 then
						passTurn()
						ROUND.chair[chair].confuse = false
						updateShadow(chair)
						batataTimer(chair)
					end
				end
				if ROUND.chair[chair].clickDelay < os.time() and x > 430 and x < 480 and y > 200 and y < 285 and ROUND.topCard.card2 then
					if PLAYER[p].ctrl then
						local card = ROUND.topCard.card
						if RULE[card[2]] or CARD[card[2]] then
							if window.isOpened(p, "CARD") then
								window.update(p, "CARD", card)
							else
								closeAll(p, "CARD")
								window.open(p, "CARD", card)
							end
						end
					else
						showPreviousCard(p)
						ROUND.chair[chair].clickDelay = os.time() + 2000
					end
				elseif ROUND.chair[chair].clickDelay < os.time() and x > 675 and x < 775 and y > 240 and y < 260 and not ROUND.chair[ROUND.turn].action then
						ROUND.chair[chair].clickDelay = os.time() + 2000
						clickChallenge(chair)
				elseif (ROUND.chair[chair].uno == "one card" or #ROUND.chair[chair].hand == 1) and ROUND.chair[chair].uno ~= "uno" and x > 675 and x < 775 and y > 205 and y < 225 then
					sayUno(chair)
				end
			else
				tfm.exec.chatMessage("<r>"..translate(p, "CHAIR_ALLERT"), p)
			end
		end
	end
end)


--[[ src/events/eventNewGame.lua ]]--

onEvent("NewGame", function()
	addFunctionTimer(loadImages, 100)
	tfm.exec.snow(0)
	-- controle de in√≠cio de partida
	for i=1000, 1020 do
		ui.removeTextArea(i)
	end
	ui.removeTextArea(27)
	for i=10000, 1005 do
		ui.removeTextArea(i)
	end
	ui.removeTextArea(70)
	for i, v in pairs(CONFIG.chair) do
		CONFIG.chair[i] = false
	end
	for i, v in pairs(ROUND.chair or {}) do
		ui.removeTextArea(1000+i)
		ui.removeTextArea(2000+i)
		ui.removeTextArea(3000+i)
		ui.removeTextArea(3010+i)
		system.bindMouse(v.owner, false)
		if v.owner ~= "" then
			CONFIG.chair[i] = v.owner
		end
	end
	for i=1, 30 do
		ui.removeTextArea(i)
	end
	for i, v in pairs(PLAYER) do
		v.ctrl = false
	end
	IMG.skin.classic = IMG.skin.orange
	-- AQUI
	if not validMap() then
		addFunctionTimer(function()
			newMap()
		end, 3500)
	else
		tfm.exec.addPhysicObject(3488, 400, 200, {type=14, width=3000, height=400, miceCollision=false})
		for i, v in pairs(PLAYER) do
			v.chair = nil
			v.notAfk = false
			colorNick(i)
			if v.chairDelay > 0 and tfm.get.room.uniquePlayers > 8 then
				v.spaceDelay = math.huge
				local t = v.chairDelay
				v.chairDelayTimer = {
					time = GLOBAL_TIME+3000+v.chairDelay
				}
				if v.chairDelay > 0 then
					v.chairDelayTimer.img = tfm.exec.addImage(IMG.misc.hourglass, "$"..i, -15, -45, i)
				end
			else
				v.spaceDelay = os.time()+3000
			end
			system.bindKeyboard(i, 32, true, true)
		end
		ROUND = {
			state = "START",
			time = GLOBAL_TIME+20000,
			deck = {},
			imgDeck = {},
			pile = {},
			history = {},
			gameMode = {},
			chair = {},
			team = {{},{},{},{},{}},
			topCard = {img={}, card=false},
			flow = "RIGHT",
			flowLight = 1,
			cloud = {},
			arrowImg = {},
			imgRule = {},
		}
		ROUND.chair = getChairs(tfm.get.room.xmlMapInfo.xml)
		ROUND.color = getColor(tfm.get.room.xmlMapInfo.xml)
		ROUND.cardSkin = getCardSkin(tfm.get.room.xmlMapInfo.xml)
		local bots = getBot(tfm.get.room.xmlMapInfo.xml)
		ROUND.bots = bots or {}
		local pool = {}
		for i, v in pairs(ROUND.chair) do
			drawChair(i)
			table.insert(pool, i)
		end
		randomGameMode()
		if ROUND.gameMode.overload then
			ROUND.limit = 10
			ROUND.limit2 = 10
		elseif ROUND.gameMode.limbo then
			ROUND.limit = 12
			ROUND.limit2 = 12
		else
			ROUND.limit = 30
			ROUND.limit2 = 30
		end
		
		ui.setMapName("UNO!"..(ROUND.gameMode.limit and "<r> -&gt;" or ""))
		for i, v in pairs(tfm.get.room.playerList) do
			showRules(i)
			startTip(i)
			giveTip(i)
		end
		if CONFIG.fixedChair then
			for i=1, 10 do
				if CONFIG.chair[i] and ROUND.chair[i] then
					playerSit(CONFIG.chair[i], ROUND.chair[i], i)
				end
			end
		end
		for i, v in pairs(ROUND.gameMode) do
			local name = nickFormat(i)
			if BOT[name] and not PLAYER[name].chair then
				local chair = table.remove(pool, math.random(#pool))
				if chair then
					explosion(3, ROUND.chair[chair].x, 80, 20, 20)
					playerSit(name, ROUND.chair[chair], chair)
					if BOT[name].eventWelcome then
						BOT[name].eventWelcome(chair)
					end
				else
					break
				end
			end
		end
		tfm.exec.setGameTime(5)
	end
end)


--[[ src/events/eventNewPlayer.lua ]]--

onEvent("NewPlayer", function(p)
	-- carregar dados e preparar o jogador para a sala
	if validMap() or true and p then
		ui.setMapName("UNO!"..(ROUND and ROUND.gameMode and ROUND.gameMode.limit and "<r> -&gt;" or ""))
		ui.addTextArea(4001, string.format("<p align='center'><b><a href='event:menu'>%s</a>", translate(p, "MENU")), p, 5, 380, 80, 20, 0x324650, nil, 1, true)
		ui.addTextArea(4002, string.format("<p align='center'><b><a href='event:openinventory'>%s</a>", translate(p, "INVENTORY")), p, 715, 380, 80, 20, 0x324650, nil, 1, true)
		translatedChatMessage("WELCOME_TEXT", p)
		translatedChatMessage("WELCOME_DISCORD", p, CONFIG.discord)
		if not PLAYER[p] then
			PLAYER[p] = instanceData()
		end
		system.loadPlayerData(p)
		system.bindKeyboard(p, 0, true, true) -- Esquerda
		system.bindKeyboard(p, 1, true, true) -- Cima
		system.bindKeyboard(p, 2, true, true) -- Direita
		system.bindKeyboard(p, 3, true, true) -- Baixo
		system.bindKeyboard(p, 72, true, true) -- H
		system.bindKeyboard(p, 67, true, true) -- C
		system.bindKeyboard(p, 85, true, true) -- U
		system.bindKeyboard(p, 80, true, true) -- P
		system.bindKeyboard(p, 76, true, true) -- L
		system.bindKeyboard(p, 79, true, true) -- O
		system.bindKeyboard(p, 78, true, true) -- N
		system.bindKeyboard(p, 32, true, true) -- espa√ßo
		system.bindKeyboard(p, 17, true, true) -- ctrl
		system.bindKeyboard(p, 17, false, true) -- ctrl down
		if ROUND.chair then
			for i, v in pairs(ROUND.chair) do
				drawChair(i, p)
			end
		end
		if ROUND.gameMode then
			showRules(p)
		end
		if ROUND.state == "START" then
			startTip(p)
		elseif ROUND.state == "MULLIGAN" then
			showDeck(p)
		elseif ROUND.state == "PLAY" then
			updateArrow(p)
			updateFlow(p)
			showDeck(p)
			drawTopCard(p)
			showAccumulated(p)
			showRules(p)
			if ROUND.portal then
				table.insert(ROUND.portal.img, tfm.exec.addImage(IMG.misc[ROUND.portal.side], "!50000", 0, 0, p))
			end
		elseif ROUND.state == "FINISH" then
			showDeck(p)
			drawTopCard(p)
		end
		giveTip(p)
		tfm.exec.addPhysicObject(0, 400, 530, {height=10, width=3000})
		tfm.exec.respawnPlayer(p)
	end
	if SCORE[p] then
		tfm.exec.setPlayerScore(p, SCORE[p])
	elseif tfm.get.room.playerList[p] then
		SCORE[p] = tfm.get.room.playerList[p].score
	end
end)


--[[ src/events/eventPlayerDataLoaded.lua ]]--

onEvent("PlayerDataLoaded", function(p, data)
	if p:sub(1,1) ~= "*" and PLAYER[p] then
		playerData.unpack(p, data)
		local stats = playerData.load(p, "uno") or newData()
		playerData.save(p, "uno", stats)
		if stats then
			PLAYER[p].stats.spectator = tonumber(stats.spectator)
			PLAYER[p].stats.round = tonumber(stats.round)
			PLAYER[p].stats.victory.all = tonumber(stats.win)
			PLAYER[p].stats.victory.team = stats.team and tonumber(stats.team) or 0
			PLAYER[p].stats.victory.red = tonumber(stats.red)
			PLAYER[p].stats.victory.blue = tonumber(stats.blue)
			PLAYER[p].stats.victory.green = tonumber(stats.green)
			PLAYER[p].stats.victory.yellow = tonumber(stats.yellow)
			PLAYER[p].stats.victory.wild = tonumber(stats.wild)
			PLAYER[p].stats.victory.cian = tonumber(stats.cian or "0")
			PLAYER[p].stats.victory.orange = tonumber(stats.orange or "0")
			PLAYER[p].stats.victory.pink = tonumber(stats.pink or "0")
			PLAYER[p].stats.victory.purple = tonumber(stats.purple or "0")
			PLAYER[p].stats.victory.white = tonumber(stats.white or "0")
			PLAYER[p].stats.victory.mess = tonumber(stats.mess or "0")
			PLAYER[p].stats.victory.lightWin = tonumber(stats.lightWin or "0")
			PLAYER[p].stats.victory.darkWin = tonumber(stats.darkWin or "0")
			PLAYER[p].skin = unpackChair(stats.skin)
			PLAYER[p].rules = unpackRules(stats.rules)
			PLAYER[p].trophy = unpackTrophy(stats.trophy)
			PLAYER[p].flags = unpackFlag(stats.flags or "1")
			PLAYER[p].skinEquiped = stats.skinEquiped
			PLAYER[p].trophyEquiped = stats.trophyEquiped
			PLAYER[p].flagEquipped = stats.flagEquipped or "default"
			PLAYER[p].shadow = stats.shadow ~= "0"
			PLAYER[p].challengePopup = stats.challengePopup ~= "0"
			PLAYER[p].colorBlind = stats.colorblind == "1" or false
			PLAYER[p].bell = stats.bell == "1" or false
			PLAYER[p].community = stats.community or "auto"
			--PLAYER[p].match = stats.match or "x"
			PLAYER[p].challenge = stats.challenge and tonumber(stats.challenge) or 0
			PLAYER[p].pencil = stats.pencil and tonumber(stats.pencil) or 0
			PLAYER[p].chess = stats.chess and tonumber(stats.chess) or 0
			PLAYER[p].portal1 = stats.portal1 and tonumber(stats.portal1) or 0
			PLAYER[p].portal2 = stats.portal2 and tonumber(stats.portal2) or 0
			PLAYER[p].block = stats.block and tonumber(stats.block) or 0
			PLAYER[p].action = stats.action and tonumber(stats.action) or 0
			PLAYER[p].dayStreak = stats.dayStreak and tonumber(stats.dayStreak) or 0
			PLAYER[p].lastDayPlayed = stats.lastDayPlayed and tonumber(stats.lastDayPlayed) or 0
			--PLAYER[p].powerup.shiny = stats.shiny and tonumber(stats.shiny) or 0
			--PLAYER[p].powerup.uno = stats.uno and tonumber(stats.uno) or 0
			--PLAYER[p].powerup.bot = stats.bot and tonumber(stats.bot) or 0
			--PLAYER[p].powerup.mallet = stats.mallet and tonumber(stats.mallet) or 0
			--PLAYER[p].powerup.lamp = stats.lamp and tonumber(stats.lamp) or 0
			--PLAYER[p].powerup.rematch = stats.rematch and tonumber(stats.rematch) or 0
		end
		if PLAYER[p].stats.victory.red >= 300 then
			unlockFlag(p, "picnic", true)
		end
		if PLAYER[p].stats.victory.blue >= 300 then
			unlockFlag(p, "metal", true)
		end
		if PLAYER[p].stats.victory.yellow >= 300 then
			unlockFlag(p, "paper", true)
		end
		if PLAYER[p].stats.victory.green >= 300 then
			unlockFlag(p, "carpet", true)
		end
		if PLAYER[p].stats.victory.wild >= 300 then
			unlockFlag(p, "disco", true)
		end
		if PLAYER[p].stats.victory.team >= 10 then
			unlockRule(p, "team", true)
		end
		if PLAYER[p].stats.victory.team >= 100 then
			unlockChair(p, "breakfast", true)
		end
		if PLAYER[p].trophy.drekkemaus then
			unlockRule(p, "drekkemaus", true)
			unlockRule(p, "buffy", true)
		end
		if PLAYER[p].trophy.noel then
			unlockRule(p, "jingle", true)
			unlockRule(p, "papaille", true)
		end
		if PLAYER[p].trophy.charlotte then
			unlockRule(p, "charlotte", true)
		end
		if PLAYER[p].trophy.elisah then
			unlockRule(p, "elisah", true)
		end
		unlockRule(p, "elise", true)
		unlockChair(p, "random", true)
		PLAYER[p].loaded = true
		saveData(p)
	end
end)


--[[ src/events/eventPlayerDied.lua ]]--

onEvent("PlayerDied", function(p)
	tfm.exec.respawnPlayer(p)
end)


--[[ src/events/eventPlayerLeft.lua ]]--

onEvent("PlayerLeft", function(p)
	kickPlayer(p)
	PLAYER[p] = nil
end)


--[[ src/events/eventPlayerRespawn.lua ]]--

onEvent("PlayerRespawn", function(p)
	colorNick(p)
end)


--[[ src/events/eventPopupAnswer.lua ]]--

onEvent("PopupAnswer", function(id, p, msg)
	if p == OWNER then
		if id == 10 then
			ui.removeTextArea(99999, p)
			if #msg <= 140 and #msg ~= 0 then
				CONFIG.custom.desc = msg
				window.update(p, "CUSTOM")
			else
				tfm.exec.chatMessage("<r>"..translate(p, "CUSTOM_ERROR"), p)
			end
		elseif id >= 1 and id <= 5 then
			ui.removeTextArea(99999, p)
			if #msg>0 and customValidAmount(id, msg) then
				customEditAction(p, id, "amount", msg)
				window.update(p, "CUSTOM")
			else
				tfm.exec.chatMessage("<r>"..translate(p, "CUSTOM_ERROR"), p)
			end
		end
	end
end)


--[[ src/events/eventTextAreaCallback.lua ]]--

onEvent("TextAreaCallback", function(id, p, callback, ever)
	-- controle de cliques em menus e janelas do jogo
	if not PLAYER[p] or p:sub(1,1) == "*" then
		return true
	end
	PLAYER[p].antiDoubleClick2 = PLAYER[p].antiDoubleClick2 or (os.time() - 5)
	if PLAYER[p].antiDoubleClick2 < os.time() or ever then
		PLAYER[p].antiDoubleClick2 = os.time() + 200
	else
		return false
	end
	local arg = split(callback, " ")
	if arg[1] == "menu" then
		if window.isOpened(p, "MENU") then
			window.close(p, "MENU")
		else
			closeAll(p, "MENU")
			window.open(p, "MENU")
		end
		window.close(p, "TROPHY")
	elseif arg[1] == "openinventory" then
		if window.isOpened(p, "INVENTORY") then
			window.close(p, "INVENTORY")
			window.close(p, "INFO_INVENTORY")
		else
			closeAll(p, "INVENTORY")
			window.open(p, "INVENTORY")
		end
	elseif arg[1] == "inventory" then
		if window.isOpened(p, "INVENTORY") then
			window.update(p, "INVENTORY", arg[2], arg[3] and tonumber(arg[3]))
		else
			closeAll(p, "INVENTORY")
			window.open(p, "INVENTORY", arg[2], arg[3] and tonumber(arg[3]))
		end
	elseif arg[1] == "rules" then
		closeAll(p, "RULES")
		if window.isOpened(p, "RULES") then
			window.update(p, "RULES", tonumber(arg[2]))
		else
			window.open(p, "RULES", 1)
		end
	elseif arg[1] == "settings2" then
		closeAll(p, "SETTINGS2")
		if window.isOpened(p, "SETTINGS2") then
			window.update(p, "SETTINGS2", tonumber(arg[2]))
		else
			window.open(p, "SETTINGS2", 1)
		end
	elseif arg[1] == "credits" then
		closeAll(p, "CREDITS")
		if window.isOpened(p, "CREDITS") then
			window.update(p, "CREDITS")
		else
			window.open(p, "CREDITS")
		end
	elseif arg[1] == "trophy" then
		if window.isOpened(p, "TROPHY") then
			window.update(p, "TROPHY", tonumber(arg[2]))
		else
			window.open(p, "TROPHY", 1)
		end
	elseif arg[1] == "roomoptions" then
		closeAll(p, "SETTINGS3")
		if window.isOpened(p, "SETTINGS3") then
			window.update(p, "SETTINGS3", tonumber(arg[2]))
		else
			window.open(p, "SETTINGS3", 1)
		end
	elseif arg[1] == "profile" then
		closeAll(p, "PROFILE")
		eventChatCommand(p, callback)
	elseif arg[1] == "close" then
		if arg[2] == "rules" then
			window.close(p, "RULES")
		elseif arg[2] == "chairs" then
			window.close(p, "CHAIRS")
			window.close(p, "INFOCHAIR")
		elseif arg[2] == "infochair" then
			window.close(p, "INFOCHAIR")
			window.open(p, "CHAIRS", tonumber(arg[3]))
		elseif arg[2] == "chess" then
			window.close(p, "CHESS")
		elseif arg[2] == "tip" then
			window.close(p, "TIP")
		elseif arg[2] == "house" then
			window.close(p, "HOUSE")
		elseif arg[2] == "settings" then
			window.close(p, "SETTINGS")
		elseif arg[2] == "profile" then
			window.close(p, "PROFILE")
			window.close(p, "TROPHY")
		elseif arg[2] == "leaderboard" then
			window.close(p, "LEADERBOARD")
		elseif arg[2] == "options" then
			window.close(p, "OPTIONS")
		elseif arg[2] == "custom" then
			window.close(p, "CUSTOM")
		elseif arg[2] == "settings2" then
			window.close(p, "SETTINGS2")
		elseif arg[2] == "chairs2" then
			window.close(p, "CHAIRS2")
		elseif arg[2] == "card" then
			window.close(p, "CARD")
			PLAYER[p].ctrl = false
		elseif arg[2] == "command" then
			window.close(p, "COMMAND")
		elseif arg[2] == "credits" then
			window.close(p, "CREDITS")
		elseif arg[2] == "challenge" then
			window.close(p, "CHALLENGE")
		elseif arg[2] == "inventory" then
			window.close(p, "INVENTORY")
			window.close(p, "INFO_INVENTORY")
		end
	elseif arg[1] == "tab" and arg[2] then
		local vars = window.getVars(p, "INVENTORY")
		if vars then
			vars.tab = arg[2]
			window.update(p, "INVENTORY")
		end
	elseif arg[1] == "favorites" then
		local vars = window.getVars(p, "INVENTORY")
		if vars then
			vars.fav = not vars.fav
			window.update(p, "INVENTORY")
		end
	elseif arg[1] == "equip" and arg[2] and arg[3] then
		if arg[2] == "chairs" and PLAYER[p].skin[arg[3]] then
			PLAYER[p].skinEquiped = arg[3]
			window.update(p, "INVENTORY")
			eventTextAreaCallback(id, p, "info".." "..arg[2].." "..arg[3], true)
			saveData(p)
		elseif arg[2] == "panels" and PLAYER[p].flags[arg[3]] then
			PLAYER[p].flagEquipped = arg[3]
			window.update(p, "INVENTORY")
			eventTextAreaCallback(id, p, "info".." "..arg[2].." "..arg[3], true)
			saveData(p)
		end
	elseif arg[1] == "info" and arg[2] and arg[3] then
		if window.isOpened(p, "INFO_INVENTORY") then
			window.update(p, "INFO_INVENTORY", arg[2], arg[3])
		else
			window.open(p, "INFO_INVENTORY", arg[2], arg[3])
		end
	elseif arg[1] == "addfavorite" and arg[2] and arg[3] then
		if arg[2] == "chairs" and PLAYER[p].skin[arg[3]] then
			PLAYER[p].skin[arg[3]] = PLAYER[p].skin[arg[3]] == 2 and 1 or 2
			window.update(p, "INFO_INVENTORY", arg[2], arg[3])
			window.update(p, "INVENTORY")
			saveData(p)
		elseif arg[2] == "panels" and PLAYER[p].flags[arg[3]] then
			PLAYER[p].flags[arg[3]] = PLAYER[p].flags[arg[3]] == 2 and 1 or 2
			window.update(p, "INFO_INVENTORY", arg[2], arg[3])
			window.update(p, "INVENTORY")
			saveData(p)
		end
	elseif arg[1] == "rule" then
		if window.isOpened(p, "TIP") then
			window.update(p, "TIP", arg[2])
		else
			window.open(p, "TIP", arg[2])
		end
	elseif arg[1] == "chess" then
		closeAll(p, "CHESS")
		window.open(p, "CHESS")
	elseif arg[1] == "house" then
		closeAll(p, "HOUSE")
		window.open(p, "HOUSE")
	elseif arg[1] == "settings" then
		closeAll(p, "SETTINGS2")
		window.open(p, "SETTINGS2")
	elseif arg[1] == "profile" then
		closeAll(p, "PROFILE")
		window.open(p, "PROFILE")
	elseif arg[1] == "options" then
		closeAll(p, "OPTIONS")
		window.open(p, "OPTIONS")
	elseif arg[1] == "equipt" then
		PLAYER[p].trophyEquiped = arg[2]
		saveData(p)
		window.close(p, "TROPHY")
		window.update(p, "PROFILE", p)
	elseif arg[1] == "setrule" then
		eventChatCommand(p, "rule "..arg[2].." "..arg[3])
	elseif arg[1] == "clearrules" then
		eventChatCommand(p, "clearrules")
	elseif arg[1] == "fixedrules" then
		eventChatCommand(p, "random")
	elseif arg[1] == "fixedchair" then
		eventChatCommand(p, "fixedchair")
	elseif arg[1] == "newplayers" then
		eventChatCommand(p, "newplayers")
	elseif arg[1] == "scoreby" then
		eventChatCommand(p, "scoreby")
	elseif arg[1] == "resetscore" then
		eventChatCommand(p, "resetscore")
	elseif arg[1] == "autostart" then
		eventChatCommand(p, "autostart")
	elseif arg[1] == "commands" then
		eventChatCommand(p, "commands")
	elseif arg[1] == "colorblind" then
		eventChatCommand(p, "color")
		window.update(p, "OPTIONS")
	elseif arg[1] == "bell" then
		eventChatCommand(p, "bell")
		window.update(p, "OPTIONS")
	elseif arg[1] == "shadow" then
		eventChatCommand(p, "shadow")
		window.update(p, "OPTIONS")
	elseif arg[1] == "challengepopup" then
		eventChatCommand(p, "challengepopup")
		window.update(p, "OPTIONS")
	elseif arg[1] == "community" then
		eventChatCommand(p, "community")
		window.update(p, "OPTIONS")
	elseif arg[1] == "party" then
		tfm.exec.chatMessage(string.format("<vp>/room #unotfm0<b>%s</b>", p), p)
		tfm.exec.chatMessage(string.format("<vp>/room #unotfm0<b>%s</b>#music", p), p)
	elseif arg[1] == "copy" then
		customEditCopies(arg[2])
		window.update(p, "CUSTOM")
	elseif arg[1] == "desc" then
		ui.addTextArea(99999, "", p, 55, 65, 690, 290, 0x142B2E, 0x142B2E, 0.8, true)
		ui.addPopup(10, 2, translate(p, "CUSTOM_DESC_INFO"), p, 200, 200, 400, true)
	elseif arg[1] == "remove" then
		customRemoveAction(p, tonumber(arg[2]))
		window.update(p, "CUSTOM")
	elseif arg[1] == "edit" then
		ui.addTextArea(99999, "", p, 55, 65, 690, 290, 0x142B2E, 0x142B2E, 0.8, true)
		if arg[3] == "amount" then
			local txt = "2 => "..string.format(translate(p, "AMOUNT_X"), 2)
			txt = txt .. "\n1-5 => "..string.format(translate(p, "AMOUNT_RANGE"), 1, 5)
			txt = txt .. "\n#3 => "..string.format(translate(p, "AMOUNT_UNTIL"), 3)
			txt = txt .. "\n&1 => "..string.format(translate(p, "AMOUNT_RETURN"), 1)
			ui.addPopup(tonumber(arg[2]), 2, txt, p, 300, 180, 200, true)
		else
			local txt = printOptions(p, tonumber(arg[2]), arg[3])
			ui.addTextArea(99998, txt, p, 300, 140, 200, nil, 0x324650, 0x090D0F, 1, true)
		end
	elseif arg[1] == "addrule" then
		ui.addTextArea(99999, "", p, 55, 65, 690, 290, 0x142B2E, 0x142B2E, 0.8, true)
		local txt = printAdd(p)
		ui.addTextArea(99998, txt, p, 300, 140, 200, nil, 0x324650, 0x090D0F, 1, true)
	elseif arg[1] == "exit" then
		ui.removeTextArea(99999, p)
		ui.removeTextArea(99998, p)
	elseif arg[1] == "add" then
		ui.removeTextArea(99999, p)
		ui.removeTextArea(99998, p)
		customAddAction(p, arg[2])
		window.update(p, "CUSTOM")
	elseif arg[1] == "edit2" then
		ui.removeTextArea(99999, p)
		ui.removeTextArea(99998, p)
		customEditAction(p, tonumber(arg[2]), arg[3], arg[4])
		window.update(p, "CUSTOM")
	elseif arg[1] == "custom" then
		closeAll(p, "CUSTOM")
		window.open(p, "CUSTOM")
	elseif arg[1] == "play" then
		addEntry(p)
	elseif arg[1] == "curse" then
		showCurse(p)
	elseif arg[1] == "tip" then
		if PLAYER[p].chair and ROUND.state == "PLAY" then
			ui.removeTextArea(33, p)
			ui.removeTextArea(32, p)
		else
			giveTip(p)
		end
	elseif arg[1] == "challenge" then
		window.close(p, "CHALLENGE")
		local chair = PLAYER[p].chair
		if chair and ROUND.turn == chair and ROUND.accumulated and ROUND.topCard.card[2] == "draw4" then
			challengeDrawFour(chair)
		end
	elseif arg[1] == "support" then
		tfm.exec.chatMessage("<vp>https://a801-luadev.github.io/?redirect=unotfm", p)
	end
end)


--[[ src/ui/active_rules.lua ]]--

window.create("HOUSE", function(player, var, name, page)

	local pool = {}
	local order = {"dos","neighbor","custom","red","blue","green","bluegreen","yellow","ninguem","flash","jumpin","stack","sequence","hard","limbo","overload","perfection","satisfaction","insatisfaction","tracking","fastdraw","clean","nocombo","supercombo","hell","black","nochallenge","simon","imitate","shiny","batata","bomb","draw99","compass","curse","confuse","justice","magnet","peace","steal","theft","death","portal","ink","dice","paradox","half","oddeven","mimic","ban","mix","gift","trade","web","tornado","carousel","luck","chair","spy","thunder","rain","equality","meep","wish","box","random","clone","key","share","rule","chess","team","camouflage","limit","noaction","mess","revelation","mini","maxi","mulligan","drekkemaus","jingle","papaille","charlotte","elisah","buffy","snowy","icemice","elise"}
	for i, v in pairs(order) do
		if ROUND.gameMode[v] then
			table.insert(pool, v)
		end
		--if #pool >= 18*3 then
		--  break
		--end
	end

	local x = 170
	local width = 530
	local height = 30+math.ceil(#pool/3)*16
	local y = 250-height/2
	y = y+height > 400 and 400 - height or y
	-- janela
	ui.addTextArea(500, "", player, x, y, width, height, 0x573926, 0x573926, alpha, true)
	ui.addTextArea(501, "", player, x+1, y+1, width-2, height-2, 0x8a583c, 0x8a583c, alpha, true)
	ui.addTextArea(502, "", player, x+3, y+3, width-6, height-6, 0x2b1f19, 0x2b1f19, alpha, true)
	ui.addTextArea(503, "", player, x+4, y+4, width-8, height-8, 0xc191c, 0xc191c, alpha, true)
	ui.addTextArea(504, "", player, x+5, y+5, width-10, height-10, 0x2d5a61, 0x2d5a61, alpha, true)
	ui.addTextArea(505, "", player, x+5, y+6, width-10, height-12, 0x142b2e, 0x142b2e, alpha, true)
	-- bot√£o fechar
	ui.addTextArea(506, "", player, x+8, y+height-22, width-16, 13, 0x7a8d93, 0x7a8d93, alpha, true)
	ui.addTextArea(507, "", player, x+9, y+height-21, width-16, 13, 0xe1619, 0xe1619, alpha, true)
	ui.addTextArea(508, "", player, x+9, y+height-21, width-17, 12, 0x314e57, 0x314e57, alpha, true)
	ui.addTextArea(509, string.format("<p align='center'><a href='event:close house'>", page)..translate(player, "CLOSE"), player, x+9, y+height-24, width-17, nil, 0x314e57, 0x314e57, 0, true)
	-- t√≠tulo da janela
	-- bordas
	local imageId = {}
	table.insert(imageId, tfm.exec.addImage("155cbe97a3f.png", "&1", x-7, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbe99c72.png", "&1", x-7, y-7, player))
	table.insert(imageId, tfm.exec.addImage("155cbe9bc9b.png", "&1", (x+width)-20, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbea943a.png", "&1", (x+width)-20, y-7, player))
	
	-- cartas e descri√ß√µes
	local color = {
		CARD = "FFFFFF",
		PASSIVE = "B3E5FC",
		BOSS = "FFE0B2",
		EXTRA = "EF9A9A",
	}
	
	local text = {500,501,502,503,504,505,506,507,508,509,519}
	for i=1, 22 do
		for j=1, 3 do
			local name = table.remove(pool, 1)
			if name then
				local t = string.format("<font color='#%s'><b><a href='event:rule %s'>%s</b>", color[RULE[name].type], name, translate(player, RULE[name].name))
				ui.addTextArea(200+i*12+j, t, player, 170*j+20, i*16+y-15, 150, nil, 0, 0, 0, true)
				table.insert(text, 200+i*12+j)
				if RULE[name].img then
					table.insert(imageId, tfm.exec.addImage(RULE[name].img, "&10", 170*j, i*16+y-17, player))
				end
			end
		end
	end
	return text, imageId
end)


--[[ src/ui/card_tip.lua ]]--

window.create("CARD", function(player, var, card)
	local x = 250 -- 145 = +55
	local y = 210 -- 100 = +40
	local width = 300
	local height = 110
	if card[2] == "draw4" then
		x = 200
		width = 400
	end
	-- janela
	ui.addTextArea(500, "", player, x, y, width, height, 0x573926, 0x573926, alpha, true)
	ui.addTextArea(501, "", player, x+1, y+1, width-2, height-2, 0x8a583c, 0x8a583c, alpha, true)
	ui.addTextArea(502, "", player, x+3, y+3, width-6, height-6, 0x2b1f19, 0x2b1f19, alpha, true)
	ui.addTextArea(503, "", player, x+4, y+4, width-8, height-8, 0xc191c, 0xc191c, alpha, true)
	ui.addTextArea(504, "", player, x+5, y+5, width-10, height-10, 0x2d5a61, 0x2d5a61, alpha, true)
	ui.addTextArea(505, "", player, x+5, y+6, width-10, height-12, 0x142b2e, 0x142b2e, alpha, true)
	-- bot√£o fechar
	ui.addTextArea(506, "", player, x+8, y+height-22, width-16, 13, 0x7a8d93, 0x7a8d93, alpha, true)
	ui.addTextArea(507, "", player, x+9, y+height-21, width-16, 13, 0xe1619, 0xe1619, alpha, true)
	ui.addTextArea(508, "", player, x+9, y+height-21, width-17, 12, 0x314e57, 0x314e57, alpha, true)
	ui.addTextArea(509, string.format("<p align='center'><a href='event:close card'>", page)..translate(player, "CLOSE"), player, x+9, y+height-24, width-17, nil, 0x314e57, 0x314e57, 0, true)
	-- t√≠tulo da janela
	-- bordas
	local imageId = {}
	table.insert(imageId, tfm.exec.addImage("155cbe97a3f.png", "&1", x-7, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbe99c72.png", "&1", x-7, y-7, player))
	table.insert(imageId, tfm.exec.addImage("155cbe9bc9b.png", "&1", (x+width)-20, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbea943a.png", "&1", (x+width)-20, y-7, player))
	
	-- cartas e descri√ß√µes
	local text = {500,501,502,503,504,505,506,507,508,509,519,520}
	local c = showCard(card, x+10, y+5, player, "&1000")
	for i, v in pairs(c) do
		table.insert(imageId, v)
	end
	local desc = RULE[card[2]] and RULE[card[2]].desc or CARD[card[2]]
	if desc then
		ui.addTextArea(520, string.format("<font size='%spx'>"..translate(player, desc), card[2] == "draw4" and 10 or 12), player, x+65, y+5, width-65, nil, 0, 0, 0, true)
	end
	return text, imageId
end)


--[[ src/ui/chair_info.lua ]]--

window.create("INFOCHAIR2", function(player, var, name, page)
	local x = 200
	local y = 100
	local width = 200
	local height = 220
	-- janela
	ui.addTextArea(500, "", player, x, y, width, height, 0x573926, 0x573926, alpha, true)
	ui.addTextArea(501, "", player, x+1, y+1, width-2, height-2, 0x8a583c, 0x8a583c, alpha, true)
	ui.addTextArea(502, "", player, x+3, y+3, width-6, height-6, 0x2b1f19, 0x2b1f19, alpha, true)
	ui.addTextArea(503, "", player, x+4, y+4, width-8, height-8, 0xc191c, 0xc191c, alpha, true)
	ui.addTextArea(504, "", player, x+5, y+5, width-10, height-10, 0x2d5a61, 0x2d5a61, alpha, true)
	ui.addTextArea(505, "", player, x+5, y+6, width-10, height-12, 0x142b2e, 0x142b2e, alpha, true)
	-- t√≠tulo da janela
	ui.addTextArea(519, string.format("<p align='center'><j><font size='15px'><b>%s</b></font></j>\n<font size='10px'>%s %s", translate(player, SKIN[name].name) or "", translate(player, "CREATED_BY") or "", SKIN[name].author) or "", player, 200, y+5, 200, nil, 0, 0, 0, true)
	
	local desc = translate(player, SKIN[name].desc)
	local mission = translate(player, SKIN[name].mission)
	local strprogress = progress(player, name)
	local formated = string.format("<p align='center'><font size='10px'><i>'%s'</i>\n\n<b>%s</b>\n<bl>%s", desc or "", mission or "", strprogress or "")
	
	ui.addTextArea(520, formated, player, 200, y+110, 200, nil, 0, 0, 0, true)
	-- bordas
	local imageId = {}
	table.insert(imageId, tfm.exec.addImage("155cbe97a3f.png", "&1", x-7, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbe99c72.png", "&1", x-7, y-7, player))
	table.insert(imageId, tfm.exec.addImage("155cbe9bc9b.png", "&1", (x+width)-20, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbea943a.png", "&1", (x+width)-20, y-7, player))
	table.insert(imageId, tfm.exec.addImage(SKIN[name].img, "&1", 250, y+10, player))
	return {500,501,502,503,504,505,506,507,508,509,519,520}, imageId
end)


--[[ src/ui/chair_list.lua ]]--

window.create("CHAIRS2", function(player, var, page)
	local x = 410
	local y = 27
	local width = 385
	local height = 340
	-- janela
	ui.addTextArea(100, "", player, x, y, width, height, 0x573926, 0x573926, alpha, true)
	ui.addTextArea(101, "", player, x+1, y+1, width-2, height-2, 0x8a583c, 0x8a583c, alpha, true)
	ui.addTextArea(102, "", player, x+3, y+3, width-6, height-6, 0x2b1f19, 0x2b1f19, alpha, true)
	ui.addTextArea(103, "", player, x+4, y+4, width-8, height-8, 0xc191c, 0xc191c, alpha, true)
	ui.addTextArea(104, "", player, x+5, y+5, width-10, height-10, 0x2d5a61, 0x2d5a61, alpha, true)
	ui.addTextArea(105, "", player, x+5, y+6, width-10, height-12, 0x142b2e, 0x142b2e, alpha, true)
	
	-- bot√£o powerups
	--ui.addTextArea(106, "", player, x+8, y+height-22, width/3-16, 13, 0x7a8d93, 0x7a8d93, alpha, true)
	--ui.addTextArea(107, "", player, x+9, y+height-21, width/3-16, 13, 0xe1619, 0xe1619, alpha, true)
	--ui.addTextArea(108, "", player, x+9, y+height-21, width/3-17, 12, 0x314e57, 0x314e57, alpha, true)
	--ui.addTextArea(109,  string.format("<p align='center'>%s (K)", translate(player, "POWERUPS")), player, x+9, y+height-24, width/3-17, nil, 0x314e57, 0x314e57, 0, true)
	--ui.addTextArea(120, "<p align='right'><a href='event:powerups'> ", player, x+9, y+height-24, width/3-17, nil, 0, 0, 0, true)
	ui.addTextArea(120, "", player, x+3, y+height-22, width/3-9, 16, 0x142B2E, 0x142B2E, 0.7, true)
	
	-- bot√£o cadeiras
	ui.addTextArea(206, "", player, x+8, y+height-22, width/2-16, 13, 0x7a8d93, 0x7a8d93, alpha, true)
	ui.addTextArea(207, "", player, x+9, y+height-21, width/2-16, 13, 0xe1619, 0xe1619, alpha, true)
	ui.addTextArea(208, "", player, x+9, y+height-21, width/2-17, 12, 0x314e57, 0x314e57, alpha, true)
	ui.addTextArea(209, string.format("<p align='center'>%s (C)", translate(player, "CHAIRS")), player, x+9, y+height-24, width/2-17, nil, 0x314e57, 0x314e57, 0, true)
	--ui.addTextArea(220, "<p align='right'><a href='event:chairs2'> ", player, x+width/3+3, y+height-24, width/2-17, nil, 0, 0, 0, true)
	ui.addTextArea(220, "", player, x+3, y+height-22, width/2-9, 16, 0x142B2E, 0x142B2E, 0.7, true)
	
	-- bot√£o paineis
	ui.addTextArea(306, "", player, x+width/2+8, y+height-22, width/2-16, 13, 0x7a8d93, 0x7a8d93, alpha, true)
	ui.addTextArea(307, "", player, x+width/2+9, y+height-21, width/2-16, 13, 0xe1619, 0xe1619, alpha, true)
	ui.addTextArea(308, "", player, x+width/2+9, y+height-21, width/2-17, 12, 0x314e57, 0x314e57, alpha, true)
	ui.addTextArea(309, string.format("<p align='center'>%s (N)", translate(player, "PANELS")), player, x+width/2+9, y+height-24, width/2-17, nil, 0x314e57, 0x314e57, 0, true)
	ui.addTextArea(320, "<p align='right'><a href='event:panels'> ", player, x+width/2+9, y+height-24, width/3-17, nil, 0, 0, 0, true)
	--ui.addTextArea(320, "", player, x+width/2+3, y+height-22, width/2-9, 16, 0x142B2E, 0x142B2E, 0.7, true)
	
	-- t√≠tulo da janela
	ui.addTextArea(119, "<p align='center'><font size='25px'><j><b>"..translate(player, "CHAIRS"), player, x+10, y, width-20, nil, 0, 0, 0, true)
	-- bordas
	local imageId = {}
	table.insert(imageId, tfm.exec.addImage("155cbe97a3f.png", "&1", x-7, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbe99c72.png", "&1", x-7, y-7, player))
	table.insert(imageId, tfm.exec.addImage("155cbe9bc9b.png", "&1", (x+width)-20, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbea943a.png", "&1", (x+width)-20, y-7, player))
	return {100,101,102,103,104,105,106,107,108,109,119,120,206,207,208,209,219,220,306,307,308,309,319,320}, imageId
end,
function(p, var, page)
	page = page or PLAYER[p].chairPage or 1
	PLAYER[p].chairPage = page
	PLAYER[p].inventory = "chairs2"
	local x = 410
	local y = 27
	local width = 385
	local height = 340
	local pool = {"default", "red", "blue", "yellow", "green", "white", "cyan", "orange", "pink", "purple", "black", "fire", "water", "earth", "air", "rainbow", "toxic", "thunder", "crystal", "dark", "light", "wood", "stone", "cat", "garden", "friend", "anvil", "gold", "diamond", "unicorn", "cheese", "football", "king", "luck", "chocolate", "angel", "hell", "cards", "junky", "trash", "shaman", "beach", "cine", "newspaper", "radio", "television", "computer", "candy", "fraise", "illuminati", "loot", "elemental", "gift", "heart", "bog", "got", "breakfast", "hamburguer", "skull", "bones", "school", "time", "pencil", "chess", "show", "falls", "psycho", "potato", "rip", "apple", "marine", "guitar", "popcorn", "wonderland", "cuphead", "astral", "bootcamp", "gaga", "gothic", "mecatopus", "pumpkin", "ufo", "aquarium", "help", "font", "chimney", "circus", "cisne", "coffee", "croissant", "space", "mermaid", "phone", "quartz", "snowman", "totoro", "vangogh", "chest", "coca", "flamingo", "honey", "old", "pineapple", "sack", "smartphone", "vampire", "moon", "max", "bill", "horn", "toast", "pizza", "samson", "fashion", "undertale", "forest", "kiss", "mountain", "pikachu", "simpsons", "truelove", "eclipse", "toothless", "lightfury", "kratos", "shenlong", "spider", "random"}
	local pageMax = math.ceil(#pool / 8)
	local txt={110,111,112,113,114,115,116,117,121,122,123}
	local img={}
	if page > 1 then
		-- bot√£o de voltar
		local y = y - 25
		ui.addTextArea(110, "", p, x+8, y+height-22, width/2-16, 13, 0x7a8d93, 0x7a8d93, alpha, true)
		ui.addTextArea(111, "", p, x+9, y+height-21, width/2-16, 13, 0xe1619, 0xe1619, alpha, true)
		ui.addTextArea(112, "", p, x+9, y+height-21, width/2-17, 12, 0x314e57, 0x314e57, alpha, true)
		ui.addTextArea(113, string.format("<p align='center'>%s", translate(p, "PREVIOUS")), p, x+9, y+height-24, width/2-17, nil, 0x314e57, 0x314e57, 0, true)
		ui.addTextArea(121, string.format("<p align='right'><a href='event:chairs2 %s'> ", page-1), p, x+9, y+height-24, width/2-17, nil, 0, 0, 0, true)
	end
	if page < pageMax then
		-- bot√£o de avan√ßar
		local y = y - 25
		ui.addTextArea(114, "", p, x+8+width/2, y+height-22, width/2-16, 13, 0x7a8d93, 0x7a8d93, alpha, true)
		ui.addTextArea(115, "", p, x+9+width/2, y+height-21, width/2-16, 13, 0xe1619, 0xe1619, alpha, true)
		ui.addTextArea(116, "", p, x+9+width/2, y+height-21, width/2-17, 12, 0x314e57, 0x314e57, alpha, true)
		ui.addTextArea(117, string.format("<p align='center'>%s", translate(p, "NEXT")), p, x+9+width/2, y+height-24, width/2-17, nil, 0x314e57, 0x314e57, 0, true)
		ui.addTextArea(122, string.format("<p align='right'><a href='event:chairs2 %s'> ", page+1), p, x+9+width/2, y+height-24, width/2-17, nil, 0, 0, 0, true)
	end
	-- cadeiras
	local unlocked = {}
	local locked = {}
	for i, v in pairs(pool) do
		table.insert(PLAYER[p].skin[v] and unlocked or locked, v)
	end
	pool = unlocked
	for i, v in pairs(locked) do
		table.insert(pool, v)
	end
	for z=1, 8 do
		local ini = (page-1)*8+z
		local w = pool[ini]
		local i = math.ceil(z/4)
		local j = (z-1)%4+1
		if w then
			ui.addTextArea(200+i*12+j, string.format("<p align='center'><a href='event:infochair2 %s %s'>", w, page)..translate(p, SKIN[w].name), p, 95*j+325, (i-1)*115+75, 80, 100, PLAYER[p].skin[w] and 0x6a7495 or -1, 1, 0.2, true)
			local text = "<p align='center'>"
			local color = 0x102224
			table.insert(img, tfm.exec.addImage(SKIN[w].imgMini, "&2", 95*j+325, i*115-20, p))
			if not PLAYER[p].skin[w] then
				text = text .. "<bl>" .. string.format("<bl><a href='event:infochair2 %s %s'>", w, page) .. translate(p, "LOCKED")
				--color = 0x102224
				table.insert(img, tfm.exec.addImage(IMG.misc.locked, "&10", 95*j+325, i*115-20, p))
			elseif PLAYER[p].skinEquiped == w then
				text = text .. "<j>" .. translate(p, "EQUIPPED")
				color = 0xBABD2F
			else
				text = text .. string.format("<a href='event:equip %s %s'>", w, page) .. translate(p, "EQUIP")
			end
			ui.addTextArea(300+i*12+j, text, p, 95*j+325, (i-1)*115+155, 80, 20, -1, color, 1, true)
			table.insert(txt, 200+i*12+j)
			table.insert(txt, 300+i*12+j)
		end
	end
	local pages = {}
	for i=1, pageMax do
		if i == page then
			table.insert(pages, string.format("<j>%s", i))
		else
			table.insert(pages, string.format("<n><a href='event:chairs2 %s'>%s</a>", i, i))
		end
	end
	ui.addTextArea(123, string.format("<p align='center'>%s", table.concat(pages, " - ")), p, x+10, y+268, width-20, p, 0, 0, 0, true)
	return txt, img
end)


--[[ src/ui/challenge.lua ]]--

window.create("CHALLENGE", function(player, var, card)
	local x = 240 -- 145 = +55
	local y = 200 -- 100 = +40
	local width = 300
	local height = 110
	-- janela
	ui.addTextArea(500, "", player, x, y, width, height, 0x573926, 0x573926, alpha, true)
	ui.addTextArea(501, "", player, x+1, y+1, width-2, height-2, 0x8a583c, 0x8a583c, alpha, true)
	ui.addTextArea(502, "", player, x+3, y+3, width-6, height-6, 0x2b1f19, 0x2b1f19, alpha, true)
	ui.addTextArea(503, "", player, x+4, y+4, width-8, height-8, 0xc191c, 0xc191c, alpha, true)
	ui.addTextArea(504, "", player, x+5, y+5, width-10, height-10, 0x2d5a61, 0x2d5a61, alpha, true)
	ui.addTextArea(505, "", player, x+5, y+6, width-10, height-12, 0x142b2e, 0x142b2e, alpha, true)
	
	-- bot√£o sim
	ui.addTextArea(506, "", player, x+8, y+height-22, width/2-16, 13, 0xFFE45E, 0xFFE45E, alpha, true)
	ui.addTextArea(507, "", player, x+9, y+height-21, width/2-16, 13, 0x635200, 0x635200, alpha, true)
	ui.addTextArea(508, "", player, x+9, y+height-21, width/2-17, 12, 0xC6A500, 0xC6A500, alpha, true)
	ui.addTextArea(509, string.format("<font color='#3D3100'><p align='center'>%s", translate(player, "YES")), player, x+9, y+height-24, width/2-17, nil, 0x314e57, 0xffff00, 0, true)
	ui.addTextArea(510, "<p align='right'><a href='event:challenge'> ", player, x+9, y+height-24, width/2-17, nil, 0, 0, 0, true)
	
	-- bot√£o n√£o
	ui.addTextArea(511, "", player, x+width/2+8, y+height-22, width/2-16, 13, 0x7a8d93, 0x7a8d93, alpha, true)
	ui.addTextArea(512, "", player, x+width/2+9, y+height-21, width/2-16, 13, 0xe1619, 0xe1619, alpha, true)
	ui.addTextArea(513, "", player, x+width/2+9, y+height-21, width/2-17, 12, 0x314e57, 0x314e57, alpha, true)
	ui.addTextArea(514, string.format("<p align='center'>%s", translate(player, "NO")), player, x+width/2+9, y+height-24, width/2-17, nil, 0x314e57, 0x314e57, 0, true)
	ui.addTextArea(515, "<p align='right'><a href='event:close challenge'> ", player, x+width/2+9, y+height-24, width/2-17, nil, 0, 0, 0, true)
	-- bordas
	local imageId = {}
	table.insert(imageId, tfm.exec.addImage("155cbe97a3f.png", "&1", x-7, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbe99c72.png", "&1", x-7, y-7, player))
	table.insert(imageId, tfm.exec.addImage("155cbe9bc9b.png", "&1", (x+width)-20, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbea943a.png", "&1", (x+width)-20, y-7, player))
	
	-- cartas e descri√ß√µes
	local text = {500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516}
	local c = showCard(card, x+10, y+5, player, "&1000")
	table.insert(imageId, c[1])
	table.insert(imageId, c[2])
	local previous = previousChair(ROUND.turn)
	previous = nickMinifier(nickHashtag(ROUND.chair[previous].owner))
	ui.addTextArea(516, string.format("<p align='center'><font size='14px'>"..translate(player, "CHALLENGE_COLOR"), previous), player, x+65, y+20, width-65, nil, 0, 0, 0, true)
	return text, imageId
end)


--[[ src/ui/command_list.lua ]]--

window.create("COMMAND", function(player, var)
	local x = 125 -- 145 = +55
	local y = 100 -- 100 = +40
	local width = 550
	local height = 180
	-- janela
	ui.addTextArea(500, "", player, x, y, width, height, 0x573926, 0x573926, alpha, true)
	ui.addTextArea(501, "", player, x+1, y+1, width-2, height-2, 0x8a583c, 0x8a583c, alpha, true)
	ui.addTextArea(502, "", player, x+3, y+3, width-6, height-6, 0x2b1f19, 0x2b1f19, alpha, true)
	ui.addTextArea(503, "", player, x+4, y+4, width-8, height-8, 0xc191c, 0xc191c, alpha, true)
	ui.addTextArea(504, "", player, x+5, y+5, width-10, height-10, 0x2d5a61, 0x2d5a61, alpha, true)
	ui.addTextArea(505, "", player, x+5, y+6, width-10, height-12, 0x142b2e, 0x142b2e, alpha, true)
	-- bot√£o fechar
	ui.addTextArea(506, "", player, x+8, y+height-22, width-16, 13, 0x7a8d93, 0x7a8d93, alpha, true)
	ui.addTextArea(507, "", player, x+9, y+height-21, width-16, 13, 0xe1619, 0xe1619, alpha, true)
	ui.addTextArea(508, "", player, x+9, y+height-21, width-17, 12, 0x314e57, 0x314e57, alpha, true)
	ui.addTextArea(509, string.format("<p align='center'><a href='event:close command'>", page)..translate(player, "CLOSE"), player, x+9, y+height-24, width-17, nil, 0x314e57, 0x314e57, 0, true)
	-- t√≠tulo da janela
	-- bordas
	local imageId = {}
	table.insert(imageId, tfm.exec.addImage("155cbe97a3f.png", "&1", x-7, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbe99c72.png", "&1", x-7, y-7, player))
	table.insert(imageId, tfm.exec.addImage("155cbe9bc9b.png", "&1", (x+width)-20, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbea943a.png", "&1", (x+width)-20, y-7, player))
	
	-- cartas e descri√ß√µes
	local text = {500,501,502,503,504,505,506,507,508,509,519,520}
	
	local desc = "<j><b>!start</b><n> : "..translate(player, "COMMAND_START")
	desc = desc .. "\n<j><b>!new</b><n> : "..translate(player, "COMMAND_NEW")
	desc = desc .. "\n<j><b>!map code</b><n> : "..translate(player, "COMMAND_MAP")
	desc = desc .. "\n<j><b>!reset</b><n> : "..translate(player, "COMMAND_RESET")
	desc = desc .. "\n<j><b>!chair num name</b><n> : "..translate(player, "COMMAND_CHAIR")
	desc = desc .. "\n<j><b>!kick name</b><n> : "..translate(player, "COMMAND_KICK")
	desc = desc .. "\n<j><b>!ban name</b><n> : "..translate(player, "COMMAND_BAN")
	desc = desc .. "\n<j><b>!unban name</b><n> : "..translate(player, "COMMAND_UNBAN")
	desc = desc .. "\n<j><b>!adm name</b><n> : "..translate(player, "COMMAND_ADM")
	desc = desc .. "\n<j><b>!pw</b><n> : "..translate(player, "COMMAND_PW")
	desc = desc .. "\n<j><b>!spectator</b><n> : "..translate(player, "COMMAND_SPECTATOR")
	ui.addTextArea(520, desc, player, x+5, y+5, width-10, nil, 0, 0, 0, true)
	return text, imageId
end)


--[[ src/ui/credits.lua ]]--

window.create("CREDITS", function(player, var)
	local x = 125 -- 145 = +55
	local y = 40 -- 100 = +40
	local width = 550
	local height = 340
	-- janela
	ui.addTextArea(500, "", player, x, y, width, height, 0x573926, 0x573926, alpha, true)
	ui.addTextArea(501, "", player, x+1, y+1, width-2, height-2, 0x8a583c, 0x8a583c, alpha, true)
	ui.addTextArea(502, "", player, x+3, y+3, width-6, height-6, 0x2b1f19, 0x2b1f19, alpha, true)
	ui.addTextArea(503, "", player, x+4, y+4, width-8, height-8, 0xc191c, 0xc191c, alpha, true)
	ui.addTextArea(504, "", player, x+5, y+5, width-10, height-10, 0x2d5a61, 0x2d5a61, alpha, true)
	ui.addTextArea(505, "", player, x+5, y+6, width-10, height-12, 0x142b2e, 0x142b2e, alpha, true)
	-- bot√£o fechar
	ui.addTextArea(506, "", player, x+8, y+height-22, width-16, 13, 0x7a8d93, 0x7a8d93, alpha, true)
	ui.addTextArea(507, "", player, x+9, y+height-21, width-16, 13, 0xe1619, 0xe1619, alpha, true)
	ui.addTextArea(508, "", player, x+9, y+height-21, width-17, 12, 0x314e57, 0x314e57, alpha, true)
	ui.addTextArea(509, string.format("<p align='center'><a href='event:close credits'>", page)..translate(player, "CLOSE"), player, x+9, y+height-24, width-17, nil, 0x314e57, 0x314e57, 0, true)
	-- t√≠tulo da janela
	ui.addTextArea(510, "<p align='center'><font size='25px'><j><b>"..translate(player, "CREDITS"), player, x+10, y+10, width-20, nil, 0, 0, 0, true)
	-- bordas
	local imageId = {}
	table.insert(imageId, tfm.exec.addImage("155cbe97a3f.png", "&1", x-7, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbe99c72.png", "&1", x-7, y-7, player))
	table.insert(imageId, tfm.exec.addImage("155cbe9bc9b.png", "&1", (x+width)-20, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbea943a.png", "&1", (x+width)-20, y-7, player))
	
	-- cartas e descri√ß√µes
	local text = {500,501,502,503,504,505,506,507,508,509,510,519,520}
	
	local thanks = {
		{reason="THANKS_TRANSLATE", extra="EN", names={"Barberserk#0000"}},
		{reason="THANKS_TRANSLATE", extra="PL", names={"Rkubi#0000"}},
		{reason="THANKS_TRANSLATE", extra="RU", names={"Fran_bow#1314"}},
		{reason="THANKS_TRANSLATE", extra="ES", names={"Niopigaa#0000"}},
		{reason="THANKS_TRANSLATE", extra="FR", names={"Urook#1131"}},
		{reason="THANKS_TRANSLATE", extra="CN", names={"Wrfg#0000"}},
		{reason="THANKS_TRANSLATE", extra="HU", names={"Weth#9837","Martinkat#0000"}},
		{reason="THANKS_TRANSLATE", extra="TR", names={"Eralpciko#0000","Star#6725","Cileklidonut#8059"}},
		{reason="THANKS_CARDS", names={"Billysmille#0000"}},
		{reason="THANKS_POPUPS", names={"Esh#0095"}},
	}
	
	local t = translate(player, "CREDIT_TXT") .. "\n\n" .. translate(player, "CREDIT_TXT2") .."\n\n" .. translate(player, "THANKS") .. ":\n"
	
	for i, v in pairs(thanks) do
		t = t .. string.format("<v>%s <j>(%s) <n>| ", table.concat(v.names, ", "), translate(player, v.reason))
		if v.extra then
			t = string.format(t, v.extra)
		end
	end
	
	ui.addTextArea(520, t, player, x+5, y+50, width-10, nil, 0, 0, 0, true)
	return text, imageId
end)


--[[ src/ui/custom_card.lua ]]--

window.create("CUSTOM", function(player, var)
	local x = 50
	local y = 60
	local width = 700
	local height = 300
	-- janela
	ui.addTextArea(100, "", player, x, y, width, height, 0x573926, 0x573926, alpha, true)
	ui.addTextArea(101, "", player, x+1, y+1, width-2, height-2, 0x8a583c, 0x8a583c, alpha, true)
	ui.addTextArea(102, "", player, x+3, y+3, width-6, height-6, 0x2b1f19, 0x2b1f19, alpha, true)
	ui.addTextArea(103, "", player, x+4, y+4, width-8, height-8, 0xc191c, 0xc191c, alpha, true)
	ui.addTextArea(104, "", player, x+5, y+5, width-10, height-10, 0x2d5a61, 0x2d5a61, alpha, true)
	ui.addTextArea(105, "", player, x+5, y+6, width-10, height-12, 0x142b2e, 0x142b2e, alpha, true)
	-- bot√£o fechar
	ui.addTextArea(106, "", player, x+8, y+height-22, width-16, 13, 0x7a8d93, 0x7a8d93, alpha, true)
	ui.addTextArea(107, "", player, x+9, y+height-21, width-16, 13, 0xe1619, 0xe1619, alpha, true)
	ui.addTextArea(108, "", player, x+9, y+height-21, width-17, 12, 0x314e57, 0x314e57, alpha, true)
	ui.addTextArea(109, "<p align='center'>"..translate(player, "CLOSE"), player, x+9, y+height-24, width-17, nil, 0x314e57, 0x314e57, 0, true)
	ui.addTextArea(120, "<p align='right'><a href='event:close custom'> ", player, x+9, y+height-24, width-17, nil, 0, 0, 0, true)
	-- t√≠tulo da janela
	ui.addTextArea(119, "<p align='center'><font size='25px'><j><b>"..translate(player, "CUSTOM"), player, x+10, y+10, width-20, nil, 0, 0, 0, true)
	-- bordas
	local imageId = {}
	table.insert(imageId, tfm.exec.addImage("155cbe97a3f.png", "&1", x-7, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbe99c72.png", "&1", x-7, y-7, player))
	table.insert(imageId, tfm.exec.addImage("155cbe9bc9b.png", "&1", (x+width)-20, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbea943a.png", "&1", (x+width)-20, y-7, player))
	return {100,101,102,103,104,105,106,107,108,109,119,120}, imageId
end,
function(p, var)
	local x = 50
	local y = 60
	local width = 700
	local height = 300
	for i, v in pairs(CONFIG.custom.action) do
		ui.addTextArea(109+i, printAction(p, i), p, x+10, 80+i*30, width-20, nil, 0, 0, 0, true)
	end
	if #CONFIG.custom.action < 5 then
		ui.addTextArea(115, string.format("<vp><a href='event:addrule'>[%s]</a>", translate(p, "ADD_ACTION")), p, x+10, 110+(#CONFIG.custom.action*30), width-20, nil, 0, 0, 0, true)
	end
	ui.addTextArea(116, string.format("%s: <r><a href='event:copy red'>[%s]</a> <bv><a href='event:copy blue'>[%s]</a> <a:active><a href='event:copy yellow'>[%s]</a> <vp><a href='event:copy green'>[%s]</a>", translate(p, "CUSTOM_COPIES"), CONFIG.custom.color.red, CONFIG.custom.color.blue, CONFIG.custom.color.yellow, CONFIG.custom.color.green), p, x+10, y+210, width-20, nil, 0, 0, 0, true)
	ui.addTextArea(117, string.format("%s: <bl><i>'%s'</i> <j><a href='event:desc'>[%s]", translate(p, "CUSTOM_DESC"), CONFIG.custom.desc or translate(p, "CUSTOM_DESC_INFO"), translate(p, "CUSTOM_EDIT")), p, x+10, y+230, width-20, nil, 0, 0, 0, true)
	return {110,111,112,113,114,115,116,117,99999,99998}
end)


--[[ src/ui/info_inventory.lua ]]--

window.create("INFO_INVENTORY", function(player, var, tab, name)
	local txt, img = {}, {}
	local x, y, width, height = 65, 47, 206, 300
	table.insert(img, tfm.exec.addImage("17286e18739.png", ":1", x, y, player))
	return txt, img
end,
function(player, var, tab, name)
	local txt, img = {150, 151, 152, 153, 154, 155}, {}
	local x, y, width, height = 65, 47, 206, 300
	local list = {chairs = CHAIRLIST, panels = PANELLIST}
	list = list[tab]
	local inventory = {chairs = "skin", panels = "flags"}
	inventory = inventory[tab]
	local tableref = {chairs = SKIN, panels = FLAG}
	tableref = tableref[tab]
	local equipref = {chairs = "skinEquiped", panels = "flagEquipped"}
	equipref = equipref[tab]
	local imgref = {chairs = "imgMini", panels = "imgDesc"}
	imgref = imgref[tab]
	ui.addTextArea(150, string.format("<p align='center'><j><font size='15px'><b>%s</b></font></j>\n<font size='10px'>%s %s", translate(player, tableref[name].name) or "", translate(player, "CREATED_BY") or "", tableref[name].author) or "", player, x+8, y+10, width-6, nil, 0, 0, 0, true)
	
	if tab == "chairs" or tab == "panels" then
		local chair = tab == "chairs" and name or PLAYER[player].skinEquiped
		local panel = tab == "panels" and name or PLAYER[player].flagEquipped
		local nickname = nickMinifier(nickHashtag(player))
		table.insert(img, tfm.exec.addImage(SKIN[chair].img, ":3", x+58, y+20, player))
		table.insert(img, tfm.exec.addImage("172876442e7.png", ":3", x+8, y+115, player))
		if FLAG[panel].img.big then
			table.insert(img, tfm.exec.addImage(FLAG[panel].img.big, ":3", x+58, y+115, player))
		end
		ui.addTextArea(151, string.format("<b><p align='center'><font color='#000000'>%s<b>\n<font size='18px'>UNO!", nickname), player, x+9, y+116, 200, 60, 0, 0, 0, true)
		ui.addTextArea(152, string.format("<b><p align='center'><font color='#ffffff'>%s</font><b>\n<font size='18px' color='#4CFF00'>UNO!", nickname), player, x+8, y+115, 200, 60, 0, 0, 0, true)
	end
	--ui.addTextArea(520, string.format("<p align='center'><font size='10px'>%s\n\n<b>%s</b>\n<bl>%s", translate(player, FLAG[name].desc), translate(player, FLAG[name].mission), progressFlag(player, name)), player, 200, y+110, 200, nil, 0, 0, 0, true)
	local mission = translate(player, tableref[name].mission, tableref[name].progress)
	local desc = tableref[name].desc and "<bl><font size='10px'><i>"..translate(player, tableref[name].desc).."</i></font>\n\n" or ""
	ui.addTextArea(153, "<p align='center'>"..desc.."<n><b>"..mission, player, x+8, y+160, width-6, nil, 0, 0, 0, true)
	if PLAYER[player][inventory][name] then
		if PLAYER[player][inventory][name] == 3 then
			PLAYER[player][inventory][name] = 1
			window.update(player, "INVENTORY")
			saveData(player)
		end
		table.insert(img, tfm.exec.addImage(PLAYER[player][inventory][name]==2 and "1726d406322.png" or "1726d4041dc.png", ":3", x+20, y+270, player))
		ui.addTextArea(154, "<vp>"..translate(player, "FAVORITES_ADD"), player, x+40, y+269, nil, nil, 0, 0, 0, true)
		addLink(155, "addfavorite "..tab.." "..name, player, x+15, y+270, 180, 20, true)
	else
		local actual, max = progress(player, tab, name)
		if actual then
			if actual > 0 then
				local w = 176 * (actual/max)
				ui.addTextArea(154, "", player, x+18, y+269, w, 18, 0x253942, 0x253942, 1, true)
			end
			ui.addTextArea(155, "<p align='center'><j>"..actual.." / "..max, player, x+16, y+269, 180, 18, -1, 0x102224, 1, true)
		end
	end
	return txt, img
end)


--[[ src/ui/inventory.lua ]]--

function addLink(id, command, player, x, y, width, height, fixed)
	ui.addTextArea(id, string.format("<a href='event:%s'><p align='right'>%s", command, string.rep("\n", math.floor(height/12))), player, x, y, width, height, 0, 0, 0, fixed)
end

CHAIRLIST = {"random", "default", "red", "blue", "yellow", "green", "white", "cyan", "orange", 
	"pink", "purple", "black", "fire", "water", "earth", "air", "rainbow", "toxic", "thunder", 
	"crystal", "dark", "light", "wood", "stone", "cat", "garden", "friend", "anvil", "gold", 
	"diamond", "unicorn", "cheese", "football", "king", "luck", "chocolate", "angel", "hell", 
	"cards", "junky", "trash", "shaman", "beach", "cine", "newspaper", "radio", "television", 
	"computer", "candy", "fraise", "illuminati", "loot", "elemental", "gift", "heart", "bog", 
	"got", "breakfast", "hamburguer", "skull", "bones", "school", "time", "pencil", "chess", 
	"show", "falls", "psycho", "potato", "rip", "apple", "marine", "guitar", "popcorn", 
	"wonderland", "cuphead", "astral", "bootcamp", "gaga", "gothic", "mecatopus", "pumpkin", 
	"ufo", "aquarium", "help", "font", "chimney", "circus", "cisne", "coffee", "croissant", 
	"space", "mermaid", "phone", "quartz", "snowman", "totoro", "vangogh", "chest", "coca", 
	"flamingo", "honey", "old", "pineapple", "sack", "smartphone", "vampire", "moon", "max", 
	"bill", "horn", "toast", "pizza", "samson", "fashion", "undertale", "forest", "kiss", 
	"mountain", "pikachu", "simpsons", "truelove", "eclipse", "toothless", "lightfury", 
	"kratos", "shenlong", "spider", }
PANELLIST = {"default", "picnic", "metal", "paper", "carpet", "disco", "cloud", "circuit"}

window.create("INVENTORY", function(player, var, tab, page)
	local txt, img = {119, 120, 121, 122, 123, 124, 125, 126, 127}, {}
	local x, y, width, height = 270, 20, 530, 340
	-- fundo
	table.insert(img, tfm.exec.addImage("17272d7f862.png", ":1", x, y, player))
	-- titulo
	ui.addTextArea(119, "<p align='center'><font size='25px'><j><b>"..translate(player, "INVENTORY"), player, x+10, y+8, width-20, nil, 0, 0, 0, true)
	-- abas
	ui.addTextArea(120, translate(player, "CHAIRS"), player, x+39+15, y+52, 80, 18, 0, 0, 0, true)
	addLink(121, "tab chairs", player, x+34, y+52, 90, 18, true)
	ui.addTextArea(122, translate(player, "PANELS"), player, x+39+93+15, y+52, 80, 18, 0, 0, 0, true)
	addLink(123, "tab panels", player, x+34+93, y+52, 90, 18, true)
	ui.addTextArea(124, translate(player, "FAVORITES"), player, x+39+93+93+15, y+52, nil, nil, 0, 0, 0, true)
	addLink(125, "favorites", player, x+34+93+93, y+52, 90, 18, true)
	-- bot√£o fechar
	ui.addTextArea(126, "<p align='center'>"..translate(player, "CLOSE"), player, x+9, y+height-17, width-17, nil, 0, 0, 0, true)
	addLink(127, "close inventory", player, x+9, y+height-17, width-17, 20, true)
	return txt, img
end,
function(player, var, tab, page)
	local txt, img = {128, 129, 130}, {}
	local x, y, width, height = 270, 20, 530, 340
	var.tab = tab or var.tab or "chairs"
	var.page = var.page or {}
	var.page[var.tab] = page or var.page[var.tab] or 1
	var.fav = var.fav or false
	table.insert(img, tfm.exec.addImage(var.tab == "chairs" and "17272e2e9bd.png" or "17272e306ca.png", ":1", x+37, y+53, player))
	table.insert(img, tfm.exec.addImage(var.tab == "panels" and "17272e2e9bd.png" or "17272e306ca.png", ":1", x+37+93, y+53, player))
	table.insert(img, tfm.exec.addImage(var.fav and "1726d406322.png" or "1726d4041dc.png", ":1", x+37+93+93, y+53, player))
	local list = {chairs = CHAIRLIST, panels = PANELLIST}
	list = list[var.tab]
	local inventory = {chairs = "skin", panels = "flags"}
	inventory = inventory[var.tab]
	local tableref = {chairs = SKIN, panels = FLAG}
	tableref = tableref[var.tab]
	local equipref = {chairs = "skinEquiped", panels = "flagEquipped"}
	equipref = equipref[var.tab]
	local imgref = {chairs = "imgMini", panels = "imgDesc"}
	imgref = imgref[var.tab]
	-- filtrar itens
	local unlocked, locked, show = {}, {}, {}
	for i, v in pairs(list) do
		table.insert(PLAYER[player][inventory][v] and unlocked or locked, v)
	end
	if var.fav then
		for i, v in pairs(unlocked) do
			if PLAYER[player][inventory][v] == 2 then
				table.insert(show, v)
			end
		end
	else
		show = unlocked
		for i, v in pairs(locked) do
			table.insert(show, v)
		end
	end
	-- avan√ßar e voltar paginas
	local pageMax = math.ceil(#show/10)
	if var.page[var.tab] > pageMax and pageMax > 0 then
		var.page[var.tab] = pageMax
	end
	if var.page[var.tab] > 1 then
		addLink(128, "inventory "..var.tab.." "..var.page[var.tab]-1, player, x+7, y+174, 26, 26, true)
	else
		ui.addTextArea(128, "", player, x+12, y+179, 16, 16, 0x142B2E, 0x142B2E, 1, true)
	end
	if var.page[var.tab] < pageMax then
		addLink(129, "inventory "..var.tab.." "..var.page[var.tab]+1, player, x+497, y+174, 26, 26, true)
	else
		ui.addTextArea(129, "", player, x+502, y+179, 16, 16, 0x142B2E, 0x142B2E, 1, true)
	end
	-- numeros das paginas
	local pages = {}
	for i=1, pageMax do
		if i == var.page[var.tab] then
			table.insert(pages, string.format("<j><u>%s</u>", i))
		else
			table.insert(pages, string.format("<n><a href='event:inventory %s %s'>%s</a>", var.tab, i, i))
		end
	end
	ui.addTextArea(130, string.format("<p align='center'>%s", table.concat(pages, " - ")), player, x+10, y+298, width-20, player, 0, 0, 0, true)
	-- mostrar itens
	for z=1, 10 do
		local ini = (var.page[var.tab]-1)*10+z
		local w = show[ini]
		local i = math.ceil(z/5)
		local j = (z-1)%5+1
		if w then
			local colorTag = ""
			local text = "<p align='center'>"
			local color = 0x102224
			table.insert(img, tfm.exec.addImage(tableref[w][imgref], ":1", 93*(j-1)+x+39, 113*(i-1)+y+101, player))
			
			if not PLAYER[player][inventory][w] then
				text = text .. "<bl>" .. translate(player, "LOCKED")
				ui.addTextArea(600+i*12+j, "", player, 93*(j-1)+x+39, 113*(i-1)+y+80, 80, 100, 0x142B2E, 0x142B2E, 0.6, true)
				table.insert(txt, 600+i*12+j)
				colorTag = "<bl>"
				--color = 0x102224
				--table.insert(img, tfm.exec.addImage(IMG.misc.locked, "&10", 95*j+325, i*115-20, p))
			elseif PLAYER[player][equipref] == w then
				text = text .. "<j>" .. translate(player, "EQUIPPED")
				color = 0xBABD2F
			else
				text = text .. translate(player, "EQUIP")
				link = true
			end
			if PLAYER[player][inventory][w] == 2 then
				colorTag = "<vp>"
			elseif PLAYER[player][inventory][w] == 3 then
				table.insert(img, tfm.exec.addImage("15f0d921edd.png", ":1", 93*(j-1)+x+39+38, 113*(i-1)+y+75-6, player))
			end
			ui.addTextArea(200+i*12+j, "<p align='center'>"..colorTag..translate(player, tableref[w].name), player, 93*(j-1)+x+39, 113*(i-1)+y+75, 80, nil, 0, 0, 0, true)
			addLink(500+i*12+j, "info "..var.tab.." "..w, player, 93*(j-1)+x+39, 113*(i-1)+y+80, 80, 100, true)
			ui.addTextArea(300+i*12+j, text, player, 93*(j-1)+x+39, (i-1)*113+y+161, 80, 20, -1, color, 1, true)
			if link then
				addLink(400+i*12+j, "equip "..var.tab.." "..w, player, 93*(j-1)+x+39, (i-1)*113+y+161, 80, 20, true)
				table.insert(txt, 400+i*12+j)
			end
			table.insert(txt, 200+i*12+j)
			table.insert(txt, 300+i*12+j)
			table.insert(txt, 500+i*12+j)
		else
			ui.addTextArea(600+i*12+j, "", player, 93*(j-1)+x+39, 113*(i-1)+y+80, 80, 102, 0x142B2E, 0x142B2E, 1, true)
			table.insert(txt, 600+i*12+j)
		end
	end

	return txt, img
end)


--[[ src/ui/madchess_tip.lua ]]--

window.create("CHESS", function(player, var, name)
	local x = 200 -- 145 = +55
	local y = 100 -- 100 = +40
	local width = 590
	local height = 250
	-- janela
	ui.addTextArea(500, "", player, x, y, width, height, 0x573926, 0x573926, alpha, true)
	ui.addTextArea(501, "", player, x+1, y+1, width-2, height-2, 0x8a583c, 0x8a583c, alpha, true)
	ui.addTextArea(502, "", player, x+3, y+3, width-6, height-6, 0x2b1f19, 0x2b1f19, alpha, true)
	ui.addTextArea(503, "", player, x+4, y+4, width-8, height-8, 0xc191c, 0xc191c, alpha, true)
	ui.addTextArea(504, "", player, x+5, y+5, width-10, height-10, 0x2d5a61, 0x2d5a61, alpha, true)
	ui.addTextArea(505, "", player, x+5, y+6, width-10, height-12, 0x142b2e, 0x142b2e, alpha, true)
	-- bot√£o fechar
	ui.addTextArea(506, "", player, x+8, y+height-22, width-16, 13, 0x7a8d93, 0x7a8d93, alpha, true)
	ui.addTextArea(507, "", player, x+9, y+height-21, width-16, 13, 0xe1619, 0xe1619, alpha, true)
	ui.addTextArea(508, "", player, x+9, y+height-21, width-17, 12, 0x314e57, 0x314e57, alpha, true)
	ui.addTextArea(509, string.format("<p align='center'><a href='event:close chess'>", page)..translate(player, "CLOSE"), player, x+9, y+height-24, width-17, nil, 0x314e57, 0x314e57, 0, true)
	-- t√≠tulo da janela
	-- bordas
	local imageId = {}
	table.insert(imageId, tfm.exec.addImage("155cbe97a3f.png", "&1", x-7, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbe99c72.png", "&1", x-7, y-7, player))
	table.insert(imageId, tfm.exec.addImage("155cbe9bc9b.png", "&1", (x+width)-20, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbea943a.png", "&1", (x+width)-20, y-7, player))
	
	-- cartas e descri√ß√µes
	local card = {
		{{{"red","pawn"},"CARD_PAWN"},{{"red","rook"},"CARD_ROOK"},{{"red","knight"},"CARD_KNIGHT"}},
		{{{"red","bishop"},"CARD_BISHOP"},{{"black","queen"},"CARD_QUEEN"},{{"black","king"},"CARD_KING"}},
	}
	local text = {500,501,502,503,504,505,506,507,508,509,519}
	for i, v in pairs(card) do
		for j, w in pairs(v) do
			local c = showCard(w[1], 190*(j-1)+x+10, (i-1)*110+y+10, player, "&1000")
			--table.insert(imageId, tfm.exec.addImage(SKIN[w].imgMini, "&2", 100*j+60, i*120, p))
			table.insert(imageId, c[1])
			table.insert(imageId, c[2])
			ui.addTextArea(200+i*12+j, "<font size='10px'>"..translate(player, w[2]), player, 190*(j-1)+x+60, (i-1)*110+y+10, 130, 110, 0, 0, 0, true)
			table.insert(text, 200+i*12+j)
		end
	end
	return text, imageId
end)


--[[ src/ui/medal_list.lua ]]--

window.create("TROPHY", function(player, var, page)
	local x = 5
	local y = 180
	local width = 190
	local height = 180
	-- janela
	ui.addTextArea(300, "", player, x, y, width, height, 0x573926, 0x573926, alpha, true)
	ui.addTextArea(301, "", player, x+1, y+1, width-2, height-2, 0x8a583c, 0x8a583c, alpha, true)
	ui.addTextArea(302, "", player, x+3, y+3, width-6, height-6, 0x2b1f19, 0x2b1f19, alpha, true)
	ui.addTextArea(303, "", player, x+4, y+4, width-8, height-8, 0xc191c, 0xc191c, alpha, true)
	ui.addTextArea(304, "", player, x+5, y+5, width-10, height-10, 0x2d5a61, 0x2d5a61, alpha, true)
	ui.addTextArea(305, "", player, x+5, y+6, width-10, height-12, 0x142b2e, 0x142b2e, alpha, true)
	-- bordas
	local imageId = {}
	table.insert(imageId, tfm.exec.addImage("155cbe97a3f.png", "&1", x-7, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbe99c72.png", "&1", x-7, y-7, player))
	table.insert(imageId, tfm.exec.addImage("155cbe9bc9b.png", "&1", (x+width)-20, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbea943a.png", "&1", (x+width)-20, y-7, player))
	return {300,301,302,303,304,305}, imageId
end,
function(p, id, page)
	page = page or 1
	local x = 5
	local y = 180
	local width = 190
	local height = 180
	local key = {"none", "beta", "buffy", "drekkemaus", "noel", "snowy", "charlotte", "elisah"}
	local txt={310,311,312,313,314,315,316,317,321,322}
	local img={}
	local pool = {}
	for i, v in pairs(key) do
		if PLAYER[p].trophy[v] then
			table.insert(pool, v)
		end
	end
	key = {{}}
	do
		local i = 1
		repeat
			local temp = table.remove(pool, 1)
			if temp then
				if #key[i] >= 6 then
					i = i + 1
					key[i] = {}
				end
				table.insert(key[i], temp)
			end
		until #pool == 0
	end
	if page > 1 then
		-- bot√£o de voltar
		ui.addTextArea(310, "", p, x+8, y+height-22, width/2-16, 13, 0x7a8d93, 0x7a8d93, alpha, true)
		ui.addTextArea(311, "", p, x+9, y+height-21, width/2-16, 13, 0xe1619, 0xe1619, alpha, true)
		ui.addTextArea(312, "", p, x+9, y+height-21, width/2-17, 12, 0x314e57, 0x314e57, alpha, true)
		ui.addTextArea(313, "<p align='center'>&lt;&lt;", p, x+9, y+height-24, width/2-17, nil, 0x314e57, 0x314e57, 0, true)
		ui.addTextArea(321, string.format("<p align='right'><a href='event:trophy %s'> ", page-1), p, x+9, y+height-24, width/2-17, nil, 0, 0, 0, true)
	end
	if page < #key then
		-- bot√£o de avan√ßar
		ui.addTextArea(314, "", p, x+8+width/2, y+height-22, width/2-16, 13, 0x7a8d93, 0x7a8d93, alpha, true)
		ui.addTextArea(315, "", p, x+9+width/2, y+height-21, width/2-16, 13, 0xe1619, 0xe1619, alpha, true)
		ui.addTextArea(316, "", p, x+9+width/2, y+height-21, width/2-17, 12, 0x314e57, 0x314e57, alpha, true)
		ui.addTextArea(317, "<p align='center'>&gt;&gt;", p, x+9+width/2, y+height-24, width/2-17, nil, 0x314e57, 0x314e57, 0, true)
		ui.addTextArea(322, string.format("<p align='right'><a href='event:trophy %s'> ", page+1), p, x+9+width/2, y+height-24, width/2-17, nil, 0, 0, 0, true)
	end
	-- cadeiras
	for i=1, 2 do
		for j=1, 3 do
			local name = table.remove(key[page],1)
			if name then
				table.insert(img, tfm.exec.addImage(TROPHY[name].img, "&10", j*60-50, i*70+120, p))
				ui.addTextArea(200+i*12+j, string.format("<p align='center'><font size='10px'><a href='event:equipt %s'>%s", name, translate(p, "EQUIP")), p, j*60-50, i*70+175, 60, nil, 0, 0, 0, true)
				table.insert(txt, 200+i*12+j)
			end
		end
	end
	return txt, img
end)


--[[ src/ui/menu.lua ]]--

window.create("MENU", function(player, var)
	local x = 5
	local y = 258
	local width = 140
	local height = 110
	-- janela
	ui.addTextArea(500, "", player, x, y, width, height, 0x573926, 0x573926, alpha, true)
	ui.addTextArea(501, "", player, x+1, y+1, width-2, height-2, 0x8a583c, 0x8a583c, alpha, true)
	ui.addTextArea(502, "", player, x+3, y+3, width-6, height-6, 0x2b1f19, 0x2b1f19, alpha, true)
	ui.addTextArea(503, "", player, x+4, y+4, width-8, height-8, 0xc191c, 0xc191c, alpha, true)
	ui.addTextArea(504, "", player, x+5, y+5, width-10, height-10, 0x2d5a61, 0x2d5a61, alpha, true)
	ui.addTextArea(505, "", player, x+5, y+6, width-10, height-12, 0x142b2e, 0x142b2e, alpha, true)
	-- t√≠tulo da janela
	-- bordas
	local imageId = {}
	table.insert(imageId, tfm.exec.addImage("155cbe97a3f.png", "&1", x-7, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbe99c72.png", "&1", x-7, y-7, player))
	table.insert(imageId, tfm.exec.addImage("155cbe9bc9b.png", "&1", (x+width)-20, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbea943a.png", "&1", (x+width)-20, y-7, player))
	
	-- cartas e descri√ß√µes
	local text = {500,501,502,503,504,505,506,507,508,509,519,520}
	
	local menu = {
		{link="rules 1", text="RULES", hotkey="H"},
		{link="credits", text="CREDITS"},
		{link="settings", text="HOUSE_RULES", hotkey="U"},
		{link="options", text="SETTINGS", hotkey="O"},
		{link="profile", text="PROFILE", hotkey="P"},
	}
	
	for i, v in pairs(menu) do
		local t = string.format("<a href='event:%s'>%s", v.link, translate(player, v.text))
		if v.hotkey then
			t = t .. " (" .. v.hotkey .. ")"
		end
		ui.addTextArea(520+i, t, player, x+5, y+5+((i-1)*20), nil, nil, 0, 0, 0, true)
		table.insert(text, 520+i)
	end
	return text, imageId
end)


--[[ src/ui/options.lua ]]--

window.create("OPTIONS", function(player, var)
	local x = 200
	local y = 100
	local width = 400
	local height = 200
	-- janela
	ui.addTextArea(100, "", player, x, y, width, height, 0x573926, 0x573926, alpha, true)
	ui.addTextArea(101, "", player, x+1, y+1, width-2, height-2, 0x8a583c, 0x8a583c, alpha, true)
	ui.addTextArea(102, "", player, x+3, y+3, width-6, height-6, 0x2b1f19, 0x2b1f19, alpha, true)
	ui.addTextArea(103, "", player, x+4, y+4, width-8, height-8, 0xc191c, 0xc191c, alpha, true)
	ui.addTextArea(104, "", player, x+5, y+5, width-10, height-10, 0x2d5a61, 0x2d5a61, alpha, true)
	ui.addTextArea(105, "", player, x+5, y+6, width-10, height-12, 0x142b2e, 0x142b2e, alpha, true)
	-- bot√£o fechar
	ui.addTextArea(106, "", player, x+8, y+height-22, width-16, 13, 0x7a8d93, 0x7a8d93, alpha, true)
	ui.addTextArea(107, "", player, x+9, y+height-21, width-16, 13, 0xe1619, 0xe1619, alpha, true)
	ui.addTextArea(108, "", player, x+9, y+height-21, width-17, 12, 0x314e57, 0x314e57, alpha, true)
	ui.addTextArea(109, "<p align='center'>"..translate(player, "CLOSE"), player, x+9, y+height-24, width-17, nil, 0x314e57, 0x314e57, 0, true)
	ui.addTextArea(120, "<p align='right'><a href='event:close options'> ", player, x+9, y+height-24, width-17, nil, 0, 0, 0, true)
	-- t√≠tulo da janela
	ui.addTextArea(119, "<p align='center'><font size='25px'><j><b>"..translate(player, "SETTINGS"), player, x+10, y+10, width-20, nil, 0, 0, 0, true)
	-- bordas
	local imageId = {}
	table.insert(imageId, tfm.exec.addImage("155cbe97a3f.png", "&1", x-7, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbe99c72.png", "&1", x-7, y-7, player))
	table.insert(imageId, tfm.exec.addImage("155cbe9bc9b.png", "&1", (x+width)-20, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbea943a.png", "&1", (x+width)-20, y-7, player))
	return {100,101,102,103,104,105,106,107,108,109,119,120}, imageId
end,
function(player, var, page)
	page = page or 1
	local x = 200
	local y = 100
	local width = 400
	local height = 200
	ui.addTextArea(110, string.format("%s %s<a href='event:colorblind'>[%s]", translate(player, "SET_COLORBLIND"), PLAYER[player].colorBlind and "<vp>" or "<r>", translate(player, PLAYER[player].colorBlind and "YES" or "NO")), player, x+5, y+60, width-10, nil, 0, 0, 0, true)
	ui.addTextArea(111, string.format("%s %s<a href='event:bell'>[%s]", translate(player, "SET_BELL"), PLAYER[player].bell and "<vp>" or "<r>", translate(player, PLAYER[player].bell and "YES" or "NO")), player, x+5, y+80, width-10, nil, 0, 0, 0, true)
	ui.addTextArea(112, string.format("%s %s<a href='event:shadow'>[%s]", translate(player, "SET_SHADOW"), PLAYER[player].shadow and "<vp>" or "<r>", translate(player, PLAYER[player].shadow and "YES" or "NO")), player, x+5, y+100, width-10, nil, 0, 0, 0, true)
	ui.addTextArea(113, string.format("%s %s<a href='event:challengepopup'>[%s]", translate(player, "SET_CHALLENGE"), PLAYER[player].challengePopup and "<vp>" or "<r>", translate(player, PLAYER[player].challengePopup and "YES" or "NO")), player, x+5, y+120, width-10, nil, 0, 0, 0, true)
	if PLAYER[player].community then
		ui.addTextArea(114, string.format("%s <j><a href='event:community'>[%s]", translate(player, "SET_COMMUNITY"), PLAYER[player].community:upper()), player, x+5, y+140, width-10, nil, 0, 0, 0, true)
	end
	return {110,111,112,113,114,115,116,117,118,121,122}
end)



--[[ src/ui/panel_info.lua ]]--

window.create("INFOPANEL", function(player, var, name)
	local x = 200
	local y = 100
	local width = 200
	local height = 210
	-- janela
	ui.addTextArea(500, "", player, x, y, width, height, 0x573926, 0x573926, alpha, true)
	ui.addTextArea(501, "", player, x+1, y+1, width-2, height-2, 0x8a583c, 0x8a583c, alpha, true)
	ui.addTextArea(502, "", player, x+3, y+3, width-6, height-6, 0x2b1f19, 0x2b1f19, alpha, true)
	ui.addTextArea(503, "", player, x+4, y+4, width-8, height-8, 0xc191c, 0xc191c, alpha, true)
	ui.addTextArea(504, "", player, x+5, y+5, width-10, height-10, 0x2d5a61, 0x2d5a61, alpha, true)
	ui.addTextArea(505, "", player, x+5, y+6, width-10, height-12, 0x142b2e, 0x142b2e, alpha, true)
	-- t√≠tulo da janela
	ui.addTextArea(519, string.format("<p align='center'><j><font size='15px'><b>%s</b></font></j>\n<font size='10px'>%s %s", translate(player, FLAG[name].name), translate(player, "CREATED_BY"), FLAG[name].author), player, 200, y+5, 200, nil, 0, 0, 0, true)
	
	ui.addTextArea(520, string.format("<p align='center'><font size='10px'>%s\n\n<b>%s</b>\n<bl>%s", translate(player, FLAG[name].desc), translate(player, FLAG[name].mission), progressFlag(player, name)), player, 200, y+110, 200, nil, 0, 0, 0, true)
	
	-- bordas
	local imageId = {}
	table.insert(imageId, tfm.exec.addImage("155cbe97a3f.png", "&1", x-7, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbe99c72.png", "&1", x-7, y-7, player))
	table.insert(imageId, tfm.exec.addImage("155cbe9bc9b.png", "&1", (x+width)-20, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbea943a.png", "&1", (x+width)-20, y-7, player))
	if FLAG[name].img.big then
		table.insert(imageId, tfm.exec.addImage(FLAG[name].img.big, "&1", 250, y+55, player))
	end
	return {500,501,502,503,504,505,506,507,508,509,519,520}, imageId
end)


--[[ src/ui/panel_list.lua ]]--

window.create("PANELS", function(player, var, page)
	local x = 410
	local y = 27
	local width = 385
	local height = 340
	-- janela
	ui.addTextArea(100, "", player, x, y, width, height, 0x573926, 0x573926, alpha, true)
	ui.addTextArea(101, "", player, x+1, y+1, width-2, height-2, 0x8a583c, 0x8a583c, alpha, true)
	ui.addTextArea(102, "", player, x+3, y+3, width-6, height-6, 0x2b1f19, 0x2b1f19, alpha, true)
	ui.addTextArea(103, "", player, x+4, y+4, width-8, height-8, 0xc191c, 0xc191c, alpha, true)
	ui.addTextArea(104, "", player, x+5, y+5, width-10, height-10, 0x2d5a61, 0x2d5a61, alpha, true)
	ui.addTextArea(105, "", player, x+5, y+6, width-10, height-12, 0x142b2e, 0x142b2e, alpha, true)
	
	-- bot√£o powerups
	--ui.addTextArea(106, "", player, x+8, y+height-22, width/3-16, 13, 0x7a8d93, 0x7a8d93, alpha, true)
	--ui.addTextArea(107, "", player, x+9, y+height-21, width/3-16, 13, 0xe1619, 0xe1619, alpha, true)
	--ui.addTextArea(108, "", player, x+9, y+height-21, width/3-17, 12, 0x314e57, 0x314e57, alpha, true)
	--ui.addTextArea(109,  string.format("<p align='center'>%s (K)", translate(player, "POWERUPS")), player, x+9, y+height-24, width/3-17, nil, 0x314e57, 0x314e57, 0, true)
	--ui.addTextArea(120, "<p align='right'><a href='event:powerups'> ", player, x+9, y+height-24, width/3-17, nil, 0, 0, 0, true)
	--ui.addTextArea(120, "", player, x+3, y+height-22, width/3-9, 16, 0x142B2E, 0x142B2E, 0.7, true)
	
	-- bot√£o cadeiras
	ui.addTextArea(206, "", player, x+8, y+height-22, width/2-16, 13, 0x7a8d93, 0x7a8d93, alpha, true)
	ui.addTextArea(207, "", player, x+9, y+height-21, width/2-16, 13, 0xe1619, 0xe1619, alpha, true)
	ui.addTextArea(208, "", player, x+9, y+height-21, width/2-17, 12, 0x314e57, 0x314e57, alpha, true)
	ui.addTextArea(209, string.format("<p align='center'>%s (C)", translate(player, "CHAIRS")), player, x+9, y+height-24, width/2-17, nil, 0x314e57, 0x314e57, 0, true)
	ui.addTextArea(220, "<p align='right'><a href='event:chairs2'> ", player, x+3, y+height-24, width/2-17, nil, 0, 0, 0, true)
	--ui.addTextArea(220, "", player, x+3, y+height-22, width/3-9, 16, 0x142B2E, 0x142B2E, 0.7, true)
	
	-- bot√£o paineis
	ui.addTextArea(306, "", player, x+width/2+8, y+height-22, width/2-16, 13, 0x7a8d93, 0x7a8d93, alpha, true)
	ui.addTextArea(307, "", player, x+width/2+9, y+height-21, width/2-16, 13, 0xe1619, 0xe1619, alpha, true)
	ui.addTextArea(308, "", player, x+width/2+9, y+height-21, width/2-17, 12, 0x314e57, 0x314e57, alpha, true)
	ui.addTextArea(309, string.format("<p align='center'>%s (N)", translate(player, "PANELS")), player, x+width/2+9, y+height-24, width/2-17, nil, 0x314e57, 0x314e57, 0, true)
	--ui.addTextArea(320, "<p align='right'><a href='event:panels'> ", player, x+width/2+9, y+height-24, width/2-17, nil, 0, 0, 0, true)
	ui.addTextArea(320, "", player, x+width/2+3, y+height-22, width/2-9, 16, 0x142B2E, 0x142B2E, 0.7, true)
	
	

	-- t√≠tulo da janela
	ui.addTextArea(119, "<p align='center'><font size='25px'><j><b>"..translate(player, "PANELS"), player, x+10, y, width-20, nil, 0, 0, 0, true)
	-- bordas
	local imageId = {}
	table.insert(imageId, tfm.exec.addImage("155cbe97a3f.png", "&1", x-7, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbe99c72.png", "&1", x-7, y-7, player))
	table.insert(imageId, tfm.exec.addImage("155cbe9bc9b.png", "&1", (x+width)-20, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbea943a.png", "&1", (x+width)-20, y-7, player))
	return {100,101,102,103,104,105,106,107,108,109,119,120,206,207,208,209,219,220,306,307,308,309,319,320}, imageId
end,
function(p, var, page)
	page = page or PLAYER[p].panelPage or 1
	PLAYER[p].panelPage = page
	PLAYER[p].inventory = "panels"
	local x = 410
	local y = 27
	local width = 385
	local height = 340
	local pool = {"default", "picnic", "metal", "paper", "carpet", "disco", "cloud", "circuit"}
	local pageMax = math.ceil(#pool / 8)
	local txt={110,111,112,113,114,115,116,117,121,122,123}
	local img={}
	if page > 1 then
		-- bot√£o de voltar
		local y = y - 25
		ui.addTextArea(110, "", p, x+8, y+height-22, width/2-16, 13, 0x7a8d93, 0x7a8d93, alpha, true)
		ui.addTextArea(111, "", p, x+9, y+height-21, width/2-16, 13, 0xe1619, 0xe1619, alpha, true)
		ui.addTextArea(112, "", p, x+9, y+height-21, width/2-17, 12, 0x314e57, 0x314e57, alpha, true)
		ui.addTextArea(113, string.format("<p align='center'>%s", translate(p, "PREVIOUS")), p, x+9, y+height-24, width/2-17, nil, 0x314e57, 0x314e57, 0, true)
		ui.addTextArea(121, string.format("<p align='right'><a href='event:panels %s'> ", page-1), p, x+9, y+height-24, width/2-17, nil, 0, 0, 0, true)
	end
	if page < pageMax then
		-- bot√£o de avan√ßar
		local y = y - 25
		ui.addTextArea(114, "", p, x+8+width/2, y+height-22, width/2-16, 13, 0x7a8d93, 0x7a8d93, alpha, true)
		ui.addTextArea(115, "", p, x+9+width/2, y+height-21, width/2-16, 13, 0xe1619, 0xe1619, alpha, true)
		ui.addTextArea(116, "", p, x+9+width/2, y+height-21, width/2-17, 12, 0x314e57, 0x314e57, alpha, true)
		ui.addTextArea(117, string.format("<p align='center'>%s", translate(p, "NEXT")), p, x+9+width/2, y+height-24, width/2-17, nil, 0x314e57, 0x314e57, 0, true)
		ui.addTextArea(122, string.format("<p align='right'><a href='event:panels %s'> ", page+1), p, x+9+width/2, y+height-24, width/2-17, nil, 0, 0, 0, true)
	end
	-- cadeiras
	--local unlocked = {}
	--local locked = {}
	--for i, v in pairs(pool) do
	--  table.insert(PLAYER[p].skin[v] and unlocked or locked, v)
	--end
	--pool = unlocked
	--for i, v in pairs(locked) do
	--  table.insert(pool, v)
	--end
	for z=1, 8 do
		local ini = (page-1)*8+z
		local w = pool[ini]
		local i = math.ceil(z/4)
		local j = (z-1)%4+1
		if w then
			ui.addTextArea(200+i*12+j, string.format("<p align='center'><a href='event: infopanel %s'>%s", w, translate(p, FLAG[w].name)), p, 420+(j-1)*95, (i-1)*115+75, 80, 100, PLAYER[p].flags[w] and 0x6a7495 or -1, 1, 0.2, true)
			local text = "<p align='center'>"
			local color = 0x102224
			table.insert(img, tfm.exec.addImage(FLAG[w].imgDesc, "&2", 420+(j-1)*95, i*115-15, p))
			if not PLAYER[p].flags[w] then
				text = text .. "<bl>" .. string.format("<bl><a href='event:infopanel %s %s'>", w, page) .. translate(p, "LOCKED")
				color = 0x102224
				table.insert(img, tfm.exec.addImage(IMG.misc.lockedPanel, "&10", 420+(j-1)*95, i*115-15, p))
			elseif PLAYER[p].flagEquipped == w then
				text = text .. "<j>" .. translate(p, "EQUIPPED")
				color = 0xBABD2F
			else
				text = text .. string.format("<a href='event:equippanel %s %s'>", w, page) .. translate(p, "EQUIP")
			end
			ui.addTextArea(300+i*12+j, text, p, 420+(j-1)*95, (i-1)*115+155, 80, 20, -1, color, 1, true)
			table.insert(txt, 200+i*12+j)
			table.insert(txt, 300+i*12+j)
		end
	end
	ui.addTextArea(123, string.format("<p align='center'>%s / %s", page, pageMax), p, x+10, y+268, width-20, p, 0, 0, 0, true)
	return txt, img
end)


--[[ src/ui/profile.lua ]]--

window.create("PROFILE", function(player, var, name)
	local imageId = {}
	do
		local x = 210
		local y = 150
		local width = 380
		local height = 185
		-- janela
		ui.addTextArea(100, "", player, x, y, width, height, 0x573926, 0x573926, alpha, true)
		ui.addTextArea(101, "", player, x+1, y+1, width-2, height-2, 0x8a583c, 0x8a583c, alpha, true)
		ui.addTextArea(102, "", player, x+3, y+3, width-6, height-6, 0x2b1f19, 0x2b1f19, alpha, true)
		ui.addTextArea(103, "", player, x+4, y+4, width-8, height-8, 0xc191c, 0xc191c, alpha, true)
		ui.addTextArea(104, "", player, x+5, y+5, width-10, height-10, 0x2d5a61, 0x2d5a61, alpha, true)
		ui.addTextArea(105, "", player, x+5, y+6, width-10, height-12, 0x142b2e, 0x142b2e, alpha, true)
		-- bot√£o fechar
		ui.addTextArea(106, "", player, x+8, y+height-22, width-16, 13, 0x7a8d93, 0x7a8d93, alpha, true)
		ui.addTextArea(107, "", player, x+9, y+height-21, width-16, 13, 0xe1619, 0xe1619, alpha, true)
		ui.addTextArea(108, "", player, x+9, y+height-21, width-17, 12, 0x314e57, 0x314e57, alpha, true)
		ui.addTextArea(109, "<p align='center'>"..translate(player, "CLOSE"), player, x+9, y+height-24, width-17, nil, 0x314e57, 0x314e57, 0, true)
		ui.addTextArea(120, "<p align='right'><a href='event:close profile'> ", player, x+9, y+height-24, width-17, nil, 0, 0, 0, true)
		-- bordas
		table.insert(imageId, tfm.exec.addImage("155cbe97a3f.png", "&1", x-7, (y+height)-22, player))
		--table.insert(imageId, tfm.exec.addImage("155cbe99c72.png", "&1", x-7, y-7, player))
		table.insert(imageId, tfm.exec.addImage("155cbe9bc9b.png", "&1", (x+width)-20, (y+height)-22, player))
		--table.insert(imageId, tfm.exec.addImage("155cbea943a.png", "&1", (x+width)-20, y-7, player))
	end
	do
		local x = 210
		local y = 90
		local width = 390
		local height = 60
		ui.addTextArea(121, "", player, x, y, width, height, 0x573926, 0x573926, alpha, true)
		ui.addTextArea(122, "", player, x+1, y+1, width-2, height-2, 0x8a583c, 0x8a583c, alpha, true)
		ui.addTextArea(123, "", player, x+3, y+3, width-6, height-6, 0x2b1f19, 0x2b1f19, alpha, true)
		ui.addTextArea(124, "", player, x+4, y+4, width-8, height-8, 0xc191c, 0xc191c, alpha, true)
		ui.addTextArea(125, "", player, x+5, y+5, width-10, height-10, 0x2d5a61, 0x2d5a61, alpha, true)
		ui.addTextArea(126, "", player, x+5, y+6, width-10, height-12, 0x142b2e, 0x142b2e, alpha, true)
		-- bordas
		--table.insert(imageId, tfm.exec.addImage("155cbe97a3f.png", "&1", x-7, (y+height)-22, player))
		--table.insert(imageId, tfm.exec.addImage("155cbe99c72.png", "&1", x-7, y-7, player))
		table.insert(imageId, tfm.exec.addImage("155cbe9bc9b.png", "&1", (x+width)-20, (y+height)-22, player))
		table.insert(imageId, tfm.exec.addImage("155cbea943a.png", "&1", (x+width)-20, y-7, player))
	end
	do
		local x = 200
		local y = 80
		local width = 80
		local height = 80
		ui.addTextArea(127, "", player, x, y, width, height, 0x573926, 0x573926, alpha, true)
		ui.addTextArea(128, "", player, x+1, y+1, width-2, height-2, 0x8a583c, 0x8a583c, alpha, true)
		ui.addTextArea(129, "", player, x+3, y+3, width-6, height-6, 0x2b1f19, 0x2b1f19, alpha, true)
		ui.addTextArea(130, "", player, x+4, y+4, width-8, height-8, 0xc191c, 0xc191c, alpha, true)
		ui.addTextArea(131, "", player, x+5, y+5, width-10, height-10, 0x2d5a61, 0x2d5a61, alpha, true)
		ui.addTextArea(132, "", player, x+5, y+6, width-10, height-12, 0x142b2e, 0x142b2e, alpha, true)
		-- bordas
		table.insert(imageId, tfm.exec.addImage("155cbe97a3f.png", "&1", x-7, (y+height)-22, player))
		table.insert(imageId, tfm.exec.addImage("155cbe99c72.png", "&1", x-7, y-7, player))
		table.insert(imageId, tfm.exec.addImage("155cbe9bc9b.png", "&1", (x+width)-20, (y+height)-22, player))
		table.insert(imageId, tfm.exec.addImage("155cbea943a.png", "&1", (x+width)-20, y-7, player))
	end
	return {100,101,102,103,104,105,106,107,108,109,120,121,122,123,124,125,126,127,128,129,130,131,132}, imageId
end,
function(player, var, name)
	local nickname, hash = nickHashtag(name)
	imageId = {}
	do
		local x = 210
		local y = 90
		local width = 390
		local height = 80
		ui.addTextArea(119, string.format("<v><font size='25px'><b>%s<n><font size='18px'><bl>#%s", nickname, hash), player, x+85, y+12, nil, nil, 0, 0, 0, true)
	end
	do
		local x = 200
		local y = 80
		local width = 390
		local height = 80
		if player == name then
			ui.addTextArea(133, "<p align='center'><font size='10px'><a href='event:trophy 1'>"..translate(player, "CHANGE"), player, x, y+65, 80, nil, 0, 0, 0, true)
		end
		table.insert(imageId, tfm.exec.addImage(TROPHY[PLAYER[name].trophyEquiped].img, "&1", x+10, y+10, player))
		--ui.addTextArea(134, "<p align='center'><font size='10px'><a href='event:trophy'>"..translate(player, "CHANGE"), player, x, y+65, 80, nil, 0, 0, 0, true)
	end
	do
		local x = 210
		local y = 150
		local width = 390
		local height = 80
		--local week = PLAYER[name].stats.ranking.week and "<v>("..PLAYER[name].stats.ranking.week..")" or ""
		--local global = PLAYER[name].stats.ranking.global and "<v>("..PLAYER[name].stats.ranking.global..")" or ""
		--ui.addTextArea(134, string.format("<textformat tabstops='180px'><bl>%s : <j>%s\t<bl>%s : <j>%s\n\n<bl>%s : <j>%s\n\n<bl>%s : <j>%s\n<bl>%s : <j>%s\n<bl>%s : <j>%s\n\n<bl>%s : <j>%s %s\n<bl>%s : <j>%s %s", translate(player, "VICTORY"), PLAYER[name].stats.victory.all, translate(player, "TEAM_VICTORY"), PLAYER[name].stats.victory.team, translate(player, "FAVORITE"), translate(player, SKIN[PLAYER[name].skinEquiped].name), translate(player, "CHEESE_GOLD"), PLAYER[name].stats.ranking.gold, translate(player, "CHEESE_SILVER"), PLAYER[name].stats.ranking.silver, translate(player, "CHEESE_BRONZE"), PLAYER[name].stats.ranking.bronze, translate(player, "POS_LEADERBOARD_WEEK"), PLAYER[name].stats.ranking.scoreWeek, week, translate(player, "POS_LEADERBOARD_GLOBAL"), PLAYER[name].stats.ranking.scoreGlobal, global), player, x+10, y+20, nil, nil, 0, 0, 0, true)
		
		local chairs = 0
		for i, v in pairs(PLAYER[name].skin) do
			chairs = chairs + 1
		end
		
		local tabstops = "<textformat tabstops='175px'>"
		
		local victories = string.format("<bl>%s : <j>%s\t", translate(player, "VICTORY"), PLAYER[name].stats.victory.all)
		local teamVictories = string.format("<bl>%s : <j>%s\n\n", translate(player, "TEAM_VICTORY"), PLAYER[name].stats.victory.team)
		local roundsPlayed = string.format("<bl>%s : <j>%s\t", translate(player, "ROUND_PLAYED"), PLAYER[name].stats.round)
		local roundsWatched = string.format("<bl>%s : <j>%s\n\n", translate(player, "ROUND_WATCHED"), PLAYER[name].stats.spectator)
		local chairsUnlocked = string.format("<bl>%s : <j>%s\n", translate(player, "CHAIRS_UNLOCKED"), chairs)
		local favoriteChair = string.format("<bl>%s : <j>%s", translate(player, "FAVORITE"), translate(player, SKIN[PLAYER[name].skinEquiped].name))
		
		--ui.addTextArea(134, string.format("<bl>%s : <j>%s\n<bl>%s : <j>%s\n\n<bl>%s : <j>%s", translate(player, "VICTORY"), PLAYER[name].stats.victory.all, translate(player, "TEAM_VICTORY"), PLAYER[name].stats.victory.team, translate(player, "FAVORITE"), translate(player, SKIN[PLAYER[name].skinEquiped].name)), player, x+10, y+20, nil, nil, 0, 0, 0, true)
		ui.addTextArea(134, tabstops..victories..teamVictories..roundsPlayed..roundsWatched..chairsUnlocked..favoriteChair, player, x+10, y+20, nil, nil, 0, 0, 0, true)
		if PLAYER[name].flagEquipped ~= "default" then
			local flag = "picnic"
			table.insert(imageId, tfm.exec.addImage(FLAG[PLAYER[name].flagEquipped].img.big, "&1", x+10, y+110, player))
			ui.addTextArea(135, string.format("<p align='center'>%s", translate(player, FLAG[PLAYER[name].flagEquipped].desc)), player, x+110, y+115, 260, nil, 0, 0, 0, true)
		end
		
	end
	return {119,133,134, 135}, imageId
end)


--[[ src/ui/room_options.lua ]]--

window.create("SETTINGS3", function(player, var)
	local x = 200
	local y = 100
	local width = 400
	local height = 200
	-- janela
	ui.addTextArea(100, "", player, x, y, width, height, 0x573926, 0x573926, alpha, true)
	ui.addTextArea(101, "", player, x+1, y+1, width-2, height-2, 0x8a583c, 0x8a583c, alpha, true)
	ui.addTextArea(102, "", player, x+3, y+3, width-6, height-6, 0x2b1f19, 0x2b1f19, alpha, true)
	ui.addTextArea(103, "", player, x+4, y+4, width-8, height-8, 0xc191c, 0xc191c, alpha, true)
	ui.addTextArea(104, "", player, x+5, y+5, width-10, height-10, 0x2d5a61, 0x2d5a61, alpha, true)
	ui.addTextArea(105, "", player, x+5, y+6, width-10, height-12, 0x142b2e, 0x142b2e, alpha, true)
	-- bot√£o fechar
	ui.addTextArea(106, "", player, x+8, y+height-22, width-16, 13, 0x7a8d93, 0x7a8d93, alpha, true)
	ui.addTextArea(107, "", player, x+9, y+height-21, width-16, 13, 0xe1619, 0xe1619, alpha, true)
	ui.addTextArea(108, "", player, x+9, y+height-21, width-17, 12, 0x314e57, 0x314e57, alpha, true)
	ui.addTextArea(109, "<p align='center'>"..translate(player, "BACK"), player, x+9, y+height-24, width-17, nil, 0x314e57, 0x314e57, 0, true)
	ui.addTextArea(120, "<p align='right'><a href='event:settings'> ", player, x+9, y+height-24, width-17, nil, 0, 0, 0, true)
	-- t√≠tulo da janela
	ui.addTextArea(119, "<p align='center'><font size='25px'><j><b>"..translate(player, "HOUSE_RULES"), player, x+10, y+10, width-20, nil, 0, 0, 0, true)
	-- bordas
	local imageId = {}
	table.insert(imageId, tfm.exec.addImage("155cbe97a3f.png", "&1", x-7, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbe99c72.png", "&1", x-7, y-7, player))
	table.insert(imageId, tfm.exec.addImage("155cbe9bc9b.png", "&1", (x+width)-20, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbea943a.png", "&1", (x+width)-20, y-7, player))
	return {100,101,102,103,104,105,106,107,108,109,119,120}, imageId
end,
function(player, var, page)
	page = page or 1
	local x = 200
	local y = 100
	local width = 400
	local height = 200
	local t2 = string.format("<font color='#ffffff'>%s %s<font size='9px'><a href='event:fixedchair'>[%s]", translate(player, "HOUSE_FIXED_CHAIRS"), CONFIG.fixedChair and "<vp>" or "<r>", CONFIG.fixedChair and translate(player, "YES") or translate(player, "NO"))
	local t3 = string.format("<font color='#ffffff'>%s %s<font size='9px'><a href='event:newplayers'>[%s]", translate(player, "HOUSE_NEW_PLAYER"), CONFIG.newPlayers and "<vp>" or "<r>", CONFIG.newPlayers and translate(player, "YES") or translate(player, "NO"))
	local t4 = string.format("<font color='#ffffff'>%s: <j><font size='9px'><a href='event:scoreby'>[%s]", translate(player, "SCORE_BY"), translate(player, CONFIG.scoreBy))
	local t5 = string.format("<a href='event:resetscore'><r>[%s]", translate(player, "RESET_SCORE"))
	local t1 = string.format("<font color='#ffffff'>%s %s<font size='9px'><a href='event:autostart'>[%s]", translate(player, "HOUSE_AUTOSTART"), CONFIG.autoStart and "<vp>" or "<r>", CONFIG.autoStart and translate(player, "YES") or translate(player, "NO"))
	ui.addTextArea(110, t1, player, x+5, y+60, width-10, nil, 0, 0, 0, true)
	ui.addTextArea(111, t2, player, x+5, y+80, width-10, nil, 0, 0, 0, true)
	ui.addTextArea(112, t3, player, x+5, y+100, width-10, nil, 0, 0, 0, true)
	ui.addTextArea(113, t4, player, x+5, y+120, width-10, nil, 0, 0, 0, true)
	ui.addTextArea(114, t5, player, x+5, y+140, width-10, nil, 0, 0, 0, true)
	return {110,111,112,113,114,115,116,117,118,121,122}
end)


--[[ src/ui/rule_list.lua ]]--

window.create("SETTINGS2", function(player, var, page)
	local x = 200
	local y = 30
	local width = 400
	local height = 360
	-- janela
	ui.addTextArea(100, "", player, x, y, width, height, 0x573926, 0x573926, alpha, true)
	ui.addTextArea(101, "", player, x+1, y+1, width-2, height-2, 0x8a583c, 0x8a583c, alpha, true)
	ui.addTextArea(102, "", player, x+3, y+3, width-6, height-6, 0x2b1f19, 0x2b1f19, alpha, true)
	ui.addTextArea(103, "", player, x+4, y+4, width-8, height-8, 0xc191c, 0xc191c, alpha, true)
	ui.addTextArea(104, "", player, x+5, y+5, width-10, height-10, 0x2d5a61, 0x2d5a61, alpha, true)
	ui.addTextArea(105, "", player, x+5, y+6, width-10, height-12, 0x142b2e, 0x142b2e, alpha, true)
	-- bot√£o fechar
	ui.addTextArea(106, "", player, x+8, y+height-22, width-16, 13, 0x7a8d93, 0x7a8d93, alpha, true)
	ui.addTextArea(107, "", player, x+9, y+height-21, width-16, 13, 0xe1619, 0xe1619, alpha, true)
	ui.addTextArea(108, "", player, x+9, y+height-21, width-17, 12, 0x314e57, 0x314e57, alpha, true)
	ui.addTextArea(109, "<p align='center'>"..translate(player, "CLOSE"), player, x+9, y+height-24, width-17, nil, 0x314e57, 0x314e57, 0, true)
	ui.addTextArea(120, "<p align='right'><a href='event:close settings2'> ", player, x+9, y+height-24, width-17, nil, 0, 0, 0, true)
	-- t√≠tulo da janela
	ui.addTextArea(119, "<p align='center'><font size='25px'><j><b>"..translate(player, "HOUSE_RULES"), player, x+10, y+10, width-20, nil, 0, 0, 0, true)
	-- bordas
	local imageId = {}
	table.insert(imageId, tfm.exec.addImage("155cbe97a3f.png", "&1", x-7, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbe99c72.png", "&1", x-7, y-7, player))
	table.insert(imageId, tfm.exec.addImage("155cbe9bc9b.png", "&1", (x+width)-20, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbea943a.png", "&1", (x+width)-20, y-7, player))
	return {100,101,102,103,104,105,106,107,108,109,119,120}, imageId
end,
function(p, var, page)
	page = page and tonumber(page) or 1
	local x = 200
	local y = 30
	local width = 400
	local height = 360
	local pool = {"nochallenge","mini","maxi","noaction","clean","nocombo","supercombo","hell","satisfaction","insatisfaction","camouflage","flash","limit","jumpin","black","revelation","stack","sequence","perfection","tracking","mulligan","overload","limbo","fastdraw","hard","shiny","neighbor","team","mess","bluegreen","peace","death","gift","trade","carousel","chair","spy","rain","equality","imitate","meep","random","bomb","rule","chess","steal","web","thunder","clone","luck","box","wish","ink","confuse","batata","curse","magnet","portal","compass","tornado","theft","ban","simon","half","paradox","oddeven","mimic","mix","justice","key","share"}
	local hidden = {"custom", "elise", "charlotte", "elisah", "drekkemaus", "buffy", "jingle", "papaille", "snowy", "icemice"}
	for i, v in pairs(hidden) do
		if PLAYER[p].rules[v] or CONFIG.rule[v] then
			table.insert(pool, v)
		end
	end
	local maxPages = math.ceil(#pool/20)
	if page > 1 then
		-- bot√£o de voltar
		local y = y - 25
		ui.addTextArea(110, "", p, x+8, y+height-22, width/2-16, 13, 0x7a8d93, 0x7a8d93, alpha, true)
		ui.addTextArea(111, "", p, x+9, y+height-21, width/2-16, 13, 0xe1619, 0xe1619, alpha, true)
		ui.addTextArea(112, "", p, x+9, y+height-21, width/2-17, 12, 0x314e57, 0x314e57, alpha, true)
		ui.addTextArea(113, string.format("<p align='center'>%s", translate(p, "PREVIOUS")), p, x+9, y+height-24, width/2-17, nil, 0x314e57, 0x314e57, 0, true)
		ui.addTextArea(121, string.format("<p align='right'><a href='event:settings2 %s'> ", page-1), p, x+9, y+height-24, width/2-17, nil, 0, 0, 0, true)
	end
	if page < maxPages then
		-- bot√£o de avan√ßar
		local y = y - 25
		ui.addTextArea(114, "", p, x+8+width/2, y+height-22, width/2-16, 13, 0x7a8d93, 0x7a8d93, alpha, true)
		ui.addTextArea(115, "", p, x+9+width/2, y+height-21, width/2-16, 13, 0xe1619, 0xe1619, alpha, true)
		ui.addTextArea(116, "", p, x+9+width/2, y+height-21, width/2-17, 12, 0x314e57, 0x314e57, alpha, true)
		ui.addTextArea(117, string.format("<p align='center'>%s", translate(p, "NEXT")), p, x+9+width/2, y+height-24, width/2-17, nil, 0x314e57, 0x314e57, 0, true)
		ui.addTextArea(122, string.format("<p align='right'><a href='event:settings2 %s'> ", page+1), p, x+9+width/2, y+height-24, width/2-17, nil, 0, 0, 0, true)
	end
	local text = {110,111,112,113,114,115,116,117,118,121,122}
	local imageId = {}
	
	local t3 = string.format("<font color='#ffffff'>%s %s<font size='9px'><a href='event:fixedrules'>[%s]", translate(p, "HOUSE_FIXED"), CONFIG.random and "<vp>" or "<r>", CONFIG.random and translate(p, "YES") or translate(p, "NO"))
	local t4 = string.format("<a href='event:clearrules'><r>[%s]", translate(p, "CLEAR_HOUSE"))
	local t2 = string.format("<a href='event:commands'><bv>[%s]", translate(p, "COMMANDS"))
	local t1 = (p == OWNER or isAdm(p)) and string.format("<a href='event:roomoptions'><bv>[%s]", translate(p, "ROOM_OPTIONS")) or string.format("<a href='event:party'><bv>[%s]", translate(p, "PARTY_ROOM"))
	ui.addTextArea(20000, t1, p, 200*1+18, -1*20+100, 200, nil, 0, 0, 0, true)
	if p == OWNER or isAdm(p) then
		ui.addTextArea(20003, t2, p, 200*2+18, -1*20+100, 200, nil, 0, 0, 0, true)
		ui.addTextArea(20002, t4, p, 200*2+18, 0*20+100, 200, nil, 0, 0, 0, true)
	end
	ui.addTextArea(20001, t3, p, 200*1+18, 0*20+100, 200, nil, 0, 0, 0, true)
	table.insert(text, 20000)
	table.insert(text, 20001)
	table.insert(text, 20002)
	table.insert(text, 20003)
	
	
	local ini = (page-1)*20+1
	local color = {
		CARD = "FFFFFF",
		PASSIVE = "B3E5FC",
		BOSS = "FFE0B2",
		EXTRA = "EF9A9A",
		PUZZLE = "DCEDC8"
	}
	for i=1, 10 do
		for j=1, 2 do
			local name = pool[ini]
			ini = ini + 1
			if name and (name ~= "custom" or PLAYER[p].rules[name]) then
				local t = string.format("<b><a href='event:rule %s'>%s</a></b>", name, translate(p, RULE[name].name))
				if PLAYER[p].rules[name] then
					t = string.format("<font color='#%s'>%s", color[RULE[name].type], t)
					table.insert(imageId, tfm.exec.addImage(RULE[name].img, "&10", 200*j, i*20+108, p))
					if CONFIG.random then
						t = t .. string.format(" %s<font size='9px'><a href='event:setrule %s %s'>[%s]", CONFIG.rule[name] and "<vp>" or "<r>", name, page, CONFIG.rule[name] and translate(p, "YES") or translate(p, "NO"))
					end
				end
				ui.addTextArea(200+i*12+j, t, p, 200*j+20, i*20+110, 180, nil, 0, 0, 0, true)
				table.insert(text, 200+i*12+j)
			end
		end
	end
	return text, imageId
end)


--[[ src/ui/rule_tip.lua ]]--

window.create("TIP", function(p, var, name)
	local text = string.format("<p align='center'><vp><b>%s</b></font>\n<font color='#ffffff' size='9px'>%s\n", translate(p, RULE[name].name), name == "custom" and RULE.custom.customDesc or translate(p, RULE[name].desc))
	ui.addTextArea(5000, text, p, 10, 190, 150, 150, 1, 0x30BA76, 0.9, true)
	if name == "custom" and p == OWNER and PLAYER[p].rules[name] then
		ui.addTextArea(5001, string.format("<p align='center'><vp><a href='event:custom'>%s</a> <n>| <r><a href='event:close tip'>%s",translate(p, "CUSTOM_EDIT"), translate(p, "CLOSE")), p, 10, 320, 150, nil, 0, 0, 0, true)
	else
		ui.addTextArea(5001, "<p align='center'><a href='event:close tip'><r>"..translate(p, "CLOSE"), p, 10, 320, 150, nil, 0, 0, 0, true)
	end
	local image = {}
	if RULE[name].imgDesc then
		table.insert(image, tfm.exec.addImage(RULE[name].imgDesc, "&0", 10, 270, p))
	end
	if PLAYER[p] and not PLAYER[p].rules[name] and RULE[name].lock ~= true then
		local mission = RULE[name].lock or "WIN"
		local accept = {WIN=0xffff00, TEAM=0x00ffff}
		if accept[mission] then
			local text = string.format("<p align='center'><font color='#%x'>%s", accept[mission], translate(p, RULE[name].mission))
			ui.addTextArea(5002, text, p, 10, 135, 150, 45, 1, accept[mission], 0.9, true)
		end
	end
	return {5000,5001,5002}, image
end)


--[[ src/ui/tutorial.lua ]]--

window.create("RULES", function(player, var, page)
	local x = 200
	local y = 60
	local width = 400
	local height = 300
	-- janela
	ui.addTextArea(100, "", player, x, y, width, height, 0x573926, 0x573926, alpha, true)
	ui.addTextArea(101, "", player, x+1, y+1, width-2, height-2, 0x8a583c, 0x8a583c, alpha, true)
	ui.addTextArea(102, "", player, x+3, y+3, width-6, height-6, 0x2b1f19, 0x2b1f19, alpha, true)
	ui.addTextArea(103, "", player, x+4, y+4, width-8, height-8, 0xc191c, 0xc191c, alpha, true)
	ui.addTextArea(104, "", player, x+5, y+5, width-10, height-10, 0x2d5a61, 0x2d5a61, alpha, true)
	ui.addTextArea(105, "", player, x+5, y+6, width-10, height-12, 0x142b2e, 0x142b2e, alpha, true)
	-- bot√£o fechar
	ui.addTextArea(106, "", player, x+8, y+height-22, width-16, 13, 0x7a8d93, 0x7a8d93, alpha, true)
	ui.addTextArea(107, "", player, x+9, y+height-21, width-16, 13, 0xe1619, 0xe1619, alpha, true)
	ui.addTextArea(108, "", player, x+9, y+height-21, width-17, 12, 0x314e57, 0x314e57, alpha, true)
	ui.addTextArea(109, "<p align='center'>"..translate(player, "CLOSE"), player, x+9, y+height-24, width-17, nil, 0x314e57, 0x314e57, 0, true)
	ui.addTextArea(120, "<p align='right'><a href='event:close rules'> ", player, x+9, y+height-24, width-17, nil, 0, 0, 0, true)
	-- t√≠tulo da janela
	ui.addTextArea(119, "<p align='center'><font size='25px'><j><b>"..translate(player, "RULES"), player, x+10, y+10, width-20, nil, 0, 0, 0, true)
	-- bordas
	local imageId = {}
	table.insert(imageId, tfm.exec.addImage("155cbe97a3f.png", "&1", x-7, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbe99c72.png", "&1", x-7, y-7, player))
	table.insert(imageId, tfm.exec.addImage("155cbe9bc9b.png", "&1", (x+width)-20, (y+height)-22, player))
	table.insert(imageId, tfm.exec.addImage("155cbea943a.png", "&1", (x+width)-20, y-7, player))
	return {100,101,102,103,104,105,106,107,108,109,119,120}, imageId
end,
function(p, var, page)
	page = page or 1
	local x = 200
	local y = 60
	local width = 400
	local height = 300
	local key = {"RULES_1", "RULES_2", "RULES_3", "RULES_4"}
	if page > 1 then
		-- bot√£o de voltar
		local y = y - 25
		ui.addTextArea(110, "", p, x+8, y+height-22, width/2-16, 13, 0x7a8d93, 0x7a8d93, alpha, true)
		ui.addTextArea(111, "", p, x+9, y+height-21, width/2-16, 13, 0xe1619, 0xe1619, alpha, true)
		ui.addTextArea(112, "", p, x+9, y+height-21, width/2-17, 12, 0x314e57, 0x314e57, alpha, true)
		ui.addTextArea(113, string.format("<p align='center'>%s", translate(p, "PREVIOUS")), p, x+9, y+height-24, width/2-17, nil, 0x314e57, 0x314e57, 0, true)
		ui.addTextArea(121, string.format("<p align='right'><a href='event:rules %s'> ", page-1), p, x+9, y+height-24, width/2-17, nil, 0, 0, 0, true)
	end
	if page < #key then
		-- bot√£o de avan√ßar
		local y = y - 25
		ui.addTextArea(114, "", p, x+8+width/2, y+height-22, width/2-16, 13, 0x7a8d93, 0x7a8d93, alpha, true)
		ui.addTextArea(115, "", p, x+9+width/2, y+height-21, width/2-16, 13, 0xe1619, 0xe1619, alpha, true)
		ui.addTextArea(116, "", p, x+9+width/2, y+height-21, width/2-17, 12, 0x314e57, 0x314e57, alpha, true)
		ui.addTextArea(117, string.format("<p align='center'>%s", translate(p, "NEXT")), p, x+9+width/2, y+height-24, width/2-17, nil, 0x314e57, 0x314e57, 0, true)
		ui.addTextArea(122, string.format("<p align='right'><a href='event:rules %s'> ", page+1), p, x+9+width/2, y+height-24, width/2-17, nil, 0, 0, 0, true)
	end
	ui.addTextArea(118, translate(p, key[page]), p, x+10, y+60, width-20, nil, 0, 0, 0, true)
	return {110,111,112,113,114,115,116,117,118,121,122}
end)


--[[ src/main.lua ]]--

for i, v in pairs(tfm.get.room.playerList) do
	eventNewPlayer(i)
end
for i, v in pairs(BOT) do
	PLAYER[i] = instanceData()
	PLAYER[i].skinEquiped = v.chair
end

local temp = roomOwner()
addFunctionTimer(function()
	for i, v in pairs(tfm.get.room.playerList) do
		if nickHashtag(i) == temp then
			OWNER = i
			colorNick(i)
			break
		end
	end
end, 500)
if not temp then
	tfm.exec.setRoomMaxPlayers(15)
else
	CONFIG.ranked = false
end
if CONFIG.tribeHouse then
	CONFIG.ranked = false
end
if not (string.match(tfm.get.room.name,"^%w%w%-#unotfm[1-9]+$") or string.match(tfm.get.room.name,"^*#unotfm[1-9]+$")) then
	CONFIG.ranked = false
end
if string.match(tfm.get.room.name,"music") then
	CONFIG.music = true
end
system.disableChatCommandDisplay(nil, true)
tfm.exec.disableAutoShaman()
--tfm.exec.disablePhysicalConsumables(true)
tfm.exec.disableAfkDeath()
tfm.exec.disableAutoNewGame()
tfm.exec.disableAutoScore()
tfm.exec.disableAutoTimeLeft()
tfm.exec.disableMinimalistMode()
tfm.exec.disableMortCommand()
newMap()
